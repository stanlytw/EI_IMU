
EI_IMU_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d984  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e9c  0801db40  0801db40  0002db40  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080209dc  080209dc  0004034c  2**0
                  CONTENTS
  4 .ARM          00000008  080209dc  080209dc  000309dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080209e4  080209e4  0004034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080209e4  080209e4  000309e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080209ec  080209ec  000309ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080209f4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004034c  2**0
                  CONTENTS
 10 .bss          000004f8  2000034c  2000034c  0004034c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  0004034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00163e07  00000000  00000000  0004037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00013ccb  00000000  00000000  001a4183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000055a8  00000000  00000000  001b7e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005448  00000000  00000000  001bd3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003518b  00000000  00000000  001c2840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005555c  00000000  00000000  001f79cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a90d1  00000000  00000000  0024cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003f5ff8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001a120  00000000  00000000  003f604c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801db1c 	.word	0x0801db1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	0801db1c 	.word	0x0801db1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2uiz>:
 8000bdc:	004a      	lsls	r2, r1, #1
 8000bde:	d211      	bcs.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be4:	d211      	bcs.n	8000c0a <__aeabi_d2uiz+0x2e>
 8000be6:	d50d      	bpl.n	8000c04 <__aeabi_d2uiz+0x28>
 8000be8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf0:	d40e      	bmi.n	8000c10 <__aeabi_d2uiz+0x34>
 8000bf2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	4770      	bx	lr
 8000c04:	f04f 0000 	mov.w	r0, #0
 8000c08:	4770      	bx	lr
 8000c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2uiz+0x3a>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2f>:
 8000c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c24:	bf24      	itt	cs
 8000c26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_d2f+0x30>
 8000c30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c44:	bf08      	it	eq
 8000c46:	f020 0001 	biceq.w	r0, r0, #1
 8000c4a:	4770      	bx	lr
 8000c4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c50:	d121      	bne.n	8000c96 <__aeabi_d2f+0x7a>
 8000c52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c56:	bfbc      	itt	lt
 8000c58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	4770      	bxlt	lr
 8000c5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c66:	f1c2 0218 	rsb	r2, r2, #24
 8000c6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c72:	fa20 f002 	lsr.w	r0, r0, r2
 8000c76:	bf18      	it	ne
 8000c78:	f040 0001 	orrne.w	r0, r0, #1
 8000c7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c88:	ea40 000c 	orr.w	r0, r0, ip
 8000c8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c94:	e7cc      	b.n	8000c30 <__aeabi_d2f+0x14>
 8000c96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c9a:	d107      	bne.n	8000cac <__aeabi_d2f+0x90>
 8000c9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca0:	bf1e      	ittt	ne
 8000ca2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000caa:	4770      	bxne	lr
 8000cac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_ldivmod>:
 8000cbc:	b97b      	cbnz	r3, 8000cde <__aeabi_ldivmod+0x22>
 8000cbe:	b972      	cbnz	r2, 8000cde <__aeabi_ldivmod+0x22>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bfbe      	ittt	lt
 8000cc4:	2000      	movlt	r0, #0
 8000cc6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cca:	e006      	blt.n	8000cda <__aeabi_ldivmod+0x1e>
 8000ccc:	bf08      	it	eq
 8000cce:	2800      	cmpeq	r0, #0
 8000cd0:	bf1c      	itt	ne
 8000cd2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cda:	f000 b9ef 	b.w	80010bc <__aeabi_idiv0>
 8000cde:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	db09      	blt.n	8000cfe <__aeabi_ldivmod+0x42>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db1a      	blt.n	8000d24 <__aeabi_ldivmod+0x68>
 8000cee:	f000 f883 	bl	8000df8 <__udivmoddi4>
 8000cf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfa:	b004      	add	sp, #16
 8000cfc:	4770      	bx	lr
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db1b      	blt.n	8000d40 <__aeabi_ldivmod+0x84>
 8000d08:	f000 f876 	bl	8000df8 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	4770      	bx	lr
 8000d24:	4252      	negs	r2, r2
 8000d26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2a:	f000 f865 	bl	8000df8 <__udivmoddi4>
 8000d2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d36:	b004      	add	sp, #16
 8000d38:	4240      	negs	r0, r0
 8000d3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3e:	4770      	bx	lr
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	f000 f857 	bl	8000df8 <__udivmoddi4>
 8000d4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d52:	b004      	add	sp, #16
 8000d54:	4252      	negs	r2, r2
 8000d56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_uldivmod>:
 8000d5c:	b953      	cbnz	r3, 8000d74 <__aeabi_uldivmod+0x18>
 8000d5e:	b94a      	cbnz	r2, 8000d74 <__aeabi_uldivmod+0x18>
 8000d60:	2900      	cmp	r1, #0
 8000d62:	bf08      	it	eq
 8000d64:	2800      	cmpeq	r0, #0
 8000d66:	bf1c      	itt	ne
 8000d68:	f04f 31ff 	movne.w	r1, #4294967295
 8000d6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d70:	f000 b9a4 	b.w	80010bc <__aeabi_idiv0>
 8000d74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d7c:	f000 f83c 	bl	8000df8 <__udivmoddi4>
 8000d80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d88:	b004      	add	sp, #16
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_d2lz>:
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	460d      	mov	r5, r1
 8000d96:	f7ff febb 	bl	8000b10 <__aeabi_dcmplt>
 8000d9a:	b928      	cbnz	r0, 8000da8 <__aeabi_d2lz+0x1c>
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	4629      	mov	r1, r5
 8000da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da4:	f000 b80a 	b.w	8000dbc <__aeabi_d2ulz>
 8000da8:	4620      	mov	r0, r4
 8000daa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dae:	f000 f805 	bl	8000dbc <__aeabi_d2ulz>
 8000db2:	4240      	negs	r0, r0
 8000db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db8:	bd38      	pop	{r3, r4, r5, pc}
 8000dba:	bf00      	nop

08000dbc <__aeabi_d2ulz>:
 8000dbc:	b5d0      	push	{r4, r6, r7, lr}
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__aeabi_d2ulz+0x34>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4606      	mov	r6, r0
 8000dc4:	460f      	mov	r7, r1
 8000dc6:	f7ff fc31 	bl	800062c <__aeabi_dmul>
 8000dca:	f7ff ff07 	bl	8000bdc <__aeabi_d2uiz>
 8000dce:	4604      	mov	r4, r0
 8000dd0:	f7ff fbb2 	bl	8000538 <__aeabi_ui2d>
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <__aeabi_d2ulz+0x38>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f7ff fc28 	bl	800062c <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4630      	mov	r0, r6
 8000de2:	4639      	mov	r1, r7
 8000de4:	f7ff fa6a 	bl	80002bc <__aeabi_dsub>
 8000de8:	f7ff fef8 	bl	8000bdc <__aeabi_d2uiz>
 8000dec:	4621      	mov	r1, r4
 8000dee:	bdd0      	pop	{r4, r6, r7, pc}
 8000df0:	3df00000 	.word	0x3df00000
 8000df4:	41f00000 	.word	0x41f00000

08000df8 <__udivmoddi4>:
 8000df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dfc:	9d08      	ldr	r5, [sp, #32]
 8000dfe:	4604      	mov	r4, r0
 8000e00:	468c      	mov	ip, r1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8083 	bne.w	8000f0e <__udivmoddi4+0x116>
 8000e08:	428a      	cmp	r2, r1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	d947      	bls.n	8000e9e <__udivmoddi4+0xa6>
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	b142      	cbz	r2, 8000e26 <__udivmoddi4+0x2e>
 8000e14:	f1c2 0020 	rsb	r0, r2, #32
 8000e18:	fa24 f000 	lsr.w	r0, r4, r0
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	4097      	lsls	r7, r2
 8000e20:	ea40 0c01 	orr.w	ip, r0, r1
 8000e24:	4094      	lsls	r4, r2
 8000e26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e2a:	0c23      	lsrs	r3, r4, #16
 8000e2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000e30:	fa1f fe87 	uxth.w	lr, r7
 8000e34:	fb08 c116 	mls	r1, r8, r6, ip
 8000e38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x60>
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 8119 	bcs.w	8001080 <__udivmoddi4+0x288>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 8116 	bls.w	8001080 <__udivmoddi4+0x288>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	443b      	add	r3, r7
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d909      	bls.n	8000e84 <__udivmoddi4+0x8c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	f080 8105 	bcs.w	8001084 <__udivmoddi4+0x28c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f240 8102 	bls.w	8001084 <__udivmoddi4+0x28c>
 8000e80:	3802      	subs	r0, #2
 8000e82:	443c      	add	r4, r7
 8000e84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e88:	eba4 040e 	sub.w	r4, r4, lr
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa0>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xaa>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f282 	clz	r2, r2
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d150      	bne.n	8000f4c <__udivmoddi4+0x154>
 8000eaa:	1bcb      	subs	r3, r1, r7
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	fa1f f887 	uxth.w	r8, r7
 8000eb4:	2601      	movs	r6, #1
 8000eb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000eba:	0c21      	lsrs	r1, r4, #16
 8000ebc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0xe4>
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0xe2>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	f200 80e9 	bhi.w	80010ac <__udivmoddi4+0x2b4>
 8000eda:	4684      	mov	ip, r0
 8000edc:	1ac9      	subs	r1, r1, r3
 8000ede:	b2a3      	uxth	r3, r4
 8000ee0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000eec:	fb08 f800 	mul.w	r8, r8, r0
 8000ef0:	45a0      	cmp	r8, r4
 8000ef2:	d907      	bls.n	8000f04 <__udivmoddi4+0x10c>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000efa:	d202      	bcs.n	8000f02 <__udivmoddi4+0x10a>
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	f200 80d9 	bhi.w	80010b4 <__udivmoddi4+0x2bc>
 8000f02:	4618      	mov	r0, r3
 8000f04:	eba4 0408 	sub.w	r4, r4, r8
 8000f08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f0c:	e7bf      	b.n	8000e8e <__udivmoddi4+0x96>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d909      	bls.n	8000f26 <__udivmoddi4+0x12e>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	f000 80b1 	beq.w	800107a <__udivmoddi4+0x282>
 8000f18:	2600      	movs	r6, #0
 8000f1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1e:	4630      	mov	r0, r6
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	fab3 f683 	clz	r6, r3
 8000f2a:	2e00      	cmp	r6, #0
 8000f2c:	d14a      	bne.n	8000fc4 <__udivmoddi4+0x1cc>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d302      	bcc.n	8000f38 <__udivmoddi4+0x140>
 8000f32:	4282      	cmp	r2, r0
 8000f34:	f200 80b8 	bhi.w	80010a8 <__udivmoddi4+0x2b0>
 8000f38:	1a84      	subs	r4, r0, r2
 8000f3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	468c      	mov	ip, r1
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d0a8      	beq.n	8000e98 <__udivmoddi4+0xa0>
 8000f46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f4a:	e7a5      	b.n	8000e98 <__udivmoddi4+0xa0>
 8000f4c:	f1c2 0320 	rsb	r3, r2, #32
 8000f50:	fa20 f603 	lsr.w	r6, r0, r3
 8000f54:	4097      	lsls	r7, r2
 8000f56:	fa01 f002 	lsl.w	r0, r1, r2
 8000f5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5e:	40d9      	lsrs	r1, r3
 8000f60:	4330      	orrs	r0, r6
 8000f62:	0c03      	lsrs	r3, r0, #16
 8000f64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f68:	fa1f f887 	uxth.w	r8, r7
 8000f6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f74:	fb06 f108 	mul.w	r1, r6, r8
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x19c>
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f86:	f080 808d 	bcs.w	80010a4 <__udivmoddi4+0x2ac>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 808a 	bls.w	80010a4 <__udivmoddi4+0x2ac>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	443b      	add	r3, r7
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b281      	uxth	r1, r0
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb00 f308 	mul.w	r3, r0, r8
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d907      	bls.n	8000fbc <__udivmoddi4+0x1c4>
 8000fac:	1879      	adds	r1, r7, r1
 8000fae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fb2:	d273      	bcs.n	800109c <__udivmoddi4+0x2a4>
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d971      	bls.n	800109c <__udivmoddi4+0x2a4>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4439      	add	r1, r7
 8000fbc:	1acb      	subs	r3, r1, r3
 8000fbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fc2:	e778      	b.n	8000eb6 <__udivmoddi4+0xbe>
 8000fc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000fc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000fcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000fda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fe2:	431f      	orrs	r7, r3
 8000fe4:	0c3b      	lsrs	r3, r7, #16
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fa1f f884 	uxth.w	r8, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ff6:	fb09 fa08 	mul.w	sl, r9, r8
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	fa02 f206 	lsl.w	r2, r2, r6
 8001000:	fa00 f306 	lsl.w	r3, r0, r6
 8001004:	d908      	bls.n	8001018 <__udivmoddi4+0x220>
 8001006:	1861      	adds	r1, r4, r1
 8001008:	f109 30ff 	add.w	r0, r9, #4294967295
 800100c:	d248      	bcs.n	80010a0 <__udivmoddi4+0x2a8>
 800100e:	458a      	cmp	sl, r1
 8001010:	d946      	bls.n	80010a0 <__udivmoddi4+0x2a8>
 8001012:	f1a9 0902 	sub.w	r9, r9, #2
 8001016:	4421      	add	r1, r4
 8001018:	eba1 010a 	sub.w	r1, r1, sl
 800101c:	b2bf      	uxth	r7, r7
 800101e:	fbb1 f0fe 	udiv	r0, r1, lr
 8001022:	fb0e 1110 	mls	r1, lr, r0, r1
 8001026:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800102a:	fb00 f808 	mul.w	r8, r0, r8
 800102e:	45b8      	cmp	r8, r7
 8001030:	d907      	bls.n	8001042 <__udivmoddi4+0x24a>
 8001032:	19e7      	adds	r7, r4, r7
 8001034:	f100 31ff 	add.w	r1, r0, #4294967295
 8001038:	d22e      	bcs.n	8001098 <__udivmoddi4+0x2a0>
 800103a:	45b8      	cmp	r8, r7
 800103c:	d92c      	bls.n	8001098 <__udivmoddi4+0x2a0>
 800103e:	3802      	subs	r0, #2
 8001040:	4427      	add	r7, r4
 8001042:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001046:	eba7 0708 	sub.w	r7, r7, r8
 800104a:	fba0 8902 	umull	r8, r9, r0, r2
 800104e:	454f      	cmp	r7, r9
 8001050:	46c6      	mov	lr, r8
 8001052:	4649      	mov	r1, r9
 8001054:	d31a      	bcc.n	800108c <__udivmoddi4+0x294>
 8001056:	d017      	beq.n	8001088 <__udivmoddi4+0x290>
 8001058:	b15d      	cbz	r5, 8001072 <__udivmoddi4+0x27a>
 800105a:	ebb3 020e 	subs.w	r2, r3, lr
 800105e:	eb67 0701 	sbc.w	r7, r7, r1
 8001062:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001066:	40f2      	lsrs	r2, r6
 8001068:	ea4c 0202 	orr.w	r2, ip, r2
 800106c:	40f7      	lsrs	r7, r6
 800106e:	e9c5 2700 	strd	r2, r7, [r5]
 8001072:	2600      	movs	r6, #0
 8001074:	4631      	mov	r1, r6
 8001076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107a:	462e      	mov	r6, r5
 800107c:	4628      	mov	r0, r5
 800107e:	e70b      	b.n	8000e98 <__udivmoddi4+0xa0>
 8001080:	4606      	mov	r6, r0
 8001082:	e6e9      	b.n	8000e58 <__udivmoddi4+0x60>
 8001084:	4618      	mov	r0, r3
 8001086:	e6fd      	b.n	8000e84 <__udivmoddi4+0x8c>
 8001088:	4543      	cmp	r3, r8
 800108a:	d2e5      	bcs.n	8001058 <__udivmoddi4+0x260>
 800108c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001090:	eb69 0104 	sbc.w	r1, r9, r4
 8001094:	3801      	subs	r0, #1
 8001096:	e7df      	b.n	8001058 <__udivmoddi4+0x260>
 8001098:	4608      	mov	r0, r1
 800109a:	e7d2      	b.n	8001042 <__udivmoddi4+0x24a>
 800109c:	4660      	mov	r0, ip
 800109e:	e78d      	b.n	8000fbc <__udivmoddi4+0x1c4>
 80010a0:	4681      	mov	r9, r0
 80010a2:	e7b9      	b.n	8001018 <__udivmoddi4+0x220>
 80010a4:	4666      	mov	r6, ip
 80010a6:	e775      	b.n	8000f94 <__udivmoddi4+0x19c>
 80010a8:	4630      	mov	r0, r6
 80010aa:	e74a      	b.n	8000f42 <__udivmoddi4+0x14a>
 80010ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b0:	4439      	add	r1, r7
 80010b2:	e713      	b.n	8000edc <__udivmoddi4+0xe4>
 80010b4:	3802      	subs	r0, #2
 80010b6:	443c      	add	r4, r7
 80010b8:	e724      	b.n	8000f04 <__udivmoddi4+0x10c>
 80010ba:	bf00      	nop

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ce:	eef0 7ae7 	vabs.f32	s15, s15
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80010ee:	f017 fb23 	bl	8018738 <expf>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	ed87 0a01 	vstr	s0, [r7, #4]
 800110a:	ed97 0a01 	vldr	s0, [r7, #4]
 800110e:	f017 fb87 	bl	8018820 <sqrtf>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a01 	vstr	s0, [r7, #4]
 800112a:	ed97 0a01 	vldr	s0, [r7, #4]
 800112e:	f017 f9fb 	bl	8018528 <roundf>
 8001132:	eef0 7a40 	vmov.f32	s15, s0
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d21f      	bcs.n	800119a <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x5a>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	4413      	add	r3, r2
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118e:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e7db      	b.n	8001152 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x12>
    }
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 80011a6:	b5b0      	push	{r4, r5, r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d229      	bcs.n	8001218 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x72>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e0:	2002      	movs	r0, #2
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f003 fd3c 	bl	8004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ea:	ec55 4b10 	vmov	r4, r5, d0
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff f9c4 	bl	800057c <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4620      	mov	r0, r4
 80011fa:	4629      	mov	r1, r5
 80011fc:	f7ff f860 	bl	80002c0 <__adddf3>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fd08 	bl	8000c1c <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3301      	adds	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	e7d1      	b.n	80011bc <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x16>
    }
    return sqrt(dist) - cluster->max_error;
 8001218:	ed97 0a05 	vldr	s0, [r7, #20]
 800121c:	f7ff ff70 	bl	8001100 <_ZSt4sqrtf>
 8001220:	eeb0 7a40 	vmov.f32	s14, s0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 7a03 	vldr	s15, [r3, #12]
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8001248:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d219      	bcs.n	800128a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x52>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	461a      	mov	r2, r3
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff ff9f 	bl	80011a6 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 8001268:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800126c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001270:	edd7 7a07 	vldr	s15, [r7, #28]
 8001274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	d501      	bpl.n	8001282 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
            min = dist;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	3301      	adds	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	e7e1      	b.n	800124e <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x16>
        }
    }
    return min;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	ee07 3a90 	vmov	s15, r3
}
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	447a0000 	.word	0x447a0000

080012a0 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	f1c3 031f 	rsb	r3, r3, #31
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	ffff8000 	.word	0xffff8000

080012ec <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	4798      	blx	r3
    }
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	731a      	strb	r2, [r3, #12]
 80013ae:	e00e      	b.n	80013ce <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f00f fea7 	bl	8011110 <_Z9ei_callocjj>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <_ZN2ei9ei_matrixD1Ev+0x22>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7b1b      	ldrb	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f00f fe93 	bl	801112c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	731a      	strb	r2, [r3, #12]
 8001430:	e00d      	b.n	800144e <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	2101      	movs	r1, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f00f fe67 	bl	8011110 <_Z9ei_callocjj>
 8001442:	4602      	mov	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7b1b      	ldrb	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f00f fe53 	bl	801112c <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
 8001494:	e7fe      	b.n	8001494 <_ZSt25__throw_bad_function_callv+0x4>
	...

08001498 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80014b4:	4a17      	ldr	r2, [pc, #92]	; (8001514 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80014b6:	213c      	movs	r1, #60	; 0x3c
 80014b8:	4817      	ldr	r0, [pc, #92]	; (8001518 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80014ba:	f019 fbc3 	bl	801ac44 <__assert_func>

	if(align && size)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01f      	beq.n	8001504 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01c      	beq.n	8001504 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4413      	add	r3, r2
 80014d6:	2101      	movs	r1, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f00f fe19 	bl	8011110 <_Z9ei_callocjj>
 80014de:	60f8      	str	r0, [r7, #12]

		if(p)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	425b      	negs	r3, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1ad2      	subs	r2, r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3b02      	subs	r3, #2
 8001500:	b292      	uxth	r2, r2
 8001502:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001504:	697b      	ldr	r3, [r7, #20]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0801db7c 	.word	0x0801db7c
 8001514:	0801db98 	.word	0x0801db98
 8001518:	0801dbd0 	.word	0x0801dbd0

0800151c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 800152e:	215f      	movs	r1, #95	; 0x5f
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001532:	f019 fb87 	bl	801ac44 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800153c:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	425b      	negs	r3, r3
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f00f fdef 	bl	801112c <_Z7ei_freePv>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0801dc58 	.word	0x0801dc58
 800155c:	0801dc5c 	.word	0x0801dc5c
 8001560:	0801dbd0 	.word	0x0801dbd0

08001564 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	f000 f818 	bl	80015b0 <_ZN2ei5numpy9transposeEPfii>
 8001580:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	e00c      	b.n	80015a6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001598:	893a      	ldrh	r2, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 800159e:	897a      	ldrh	r2, [r7, #10]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80015a4:	2300      	movs	r3, #0
    }
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b08f      	sub	sp, #60	; 0x3c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80015c4:	2300      	movs	r3, #0
 80015c6:	f7ff fee2 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <_ZN2ei5numpy9transposeEPfii+0x24>
 80015d0:	4c23      	ldr	r4, [pc, #140]	; (8001660 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80015d2:	e03b      	b.n	800164c <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80015da:	4c21      	ldr	r4, [pc, #132]	; (8001660 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80015dc:	e036      	b.n	800164c <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	da03      	bge.n	80015ee <_ZN2ei5numpy9transposeEPfii+0x3e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	db01      	blt.n	80015f2 <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 80015ee:	4c1d      	ldr	r4, [pc, #116]	; (8001664 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 80015f0:	e02c      	b.n	800164c <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	83bb      	strh	r3, [r7, #28]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	83fb      	strh	r3, [r7, #30]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	b29b      	uxth	r3, r3
 8001606:	82bb      	strh	r3, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	b29b      	uxth	r3, r3
 800160c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001610:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fbe5 	bl	8007dec <arm_mat_trans_f32>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001628:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001630:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001634:	e00a      	b.n	800164c <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	461a      	mov	r2, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f019 fb77 	bl	801ad38 <memcpy>

        return EIDSP_OK;
 800164a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fec7 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8001656:	4623      	mov	r3, r4
    }
 8001658:	4618      	mov	r0, r3
 800165a:	373c      	adds	r7, #60	; 0x3c
 800165c:	46bd      	mov	sp, r7
 800165e:	bd90      	pop	{r4, r7, pc}
 8001660:	fffffc16 	.word	0xfffffc16
 8001664:	fffffc0c 	.word	0xfffffc0c

08001668 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800167c:	eef4 7a47 	vcmp.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d101      	bne.n	800168a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 8001686:	2300      	movs	r3, #0
 8001688:	e033      	b.n	80016f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001692:	d204      	bcs.n	800169e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d301      	bcc.n	80016a2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80016a0:	e027      	b.n	80016f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	82bb      	strh	r3, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	81bb      	strh	r3, [r7, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80016ce:	f107 020c 	add.w	r2, r7, #12
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4611      	mov	r1, r2
 80016d8:	ed97 0a00 	vldr	s0, [r7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f006 fb4f 	bl	8007d80 <arm_mat_scale_f32>
 80016e2:	4603      	mov	r3, r0
 80016e4:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	e000      	b.n	80016f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 80016f0:	2300      	movs	r3, #0
    }
 80016f2:	4618      	mov	r0, r3
 80016f4:	3720      	adds	r7, #32
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	fffffc0c 	.word	0xfffffc0c

08001700 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6892      	ldr	r2, [r2, #8]
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	d215      	bcs.n	800174e <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	edd7 7a00 	vldr	s15, [r7]
 800173e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001742:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e7e0      	b.n	8001710 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 800174e:	2300      	movs	r3, #0
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001772:	4c26      	ldr	r4, [pc, #152]	; (800180c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001774:	e045      	b.n	8001802 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800177e:	4c23      	ldr	r4, [pc, #140]	; (800180c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001780:	e03f      	b.n	8001802 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	d237      	bcs.n	8001800 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa4>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689d      	ldr	r5, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	69f9      	ldr	r1, [r7, #28]
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	f107 0008 	add.w	r0, r7, #8
 80017aa:	462a      	mov	r2, r5
 80017ac:	2101      	movs	r1, #1
 80017ae:	f7ff fdee 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 80017b8:	4c15      	ldr	r4, [pc, #84]	; (8001810 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 80017ba:	2500      	movs	r5, #0
 80017bc:	e015      	b.n	80017ea <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff93 	bl	8001700 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 80017da:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8c>
                EIDSP_ERR(ret);
 80017e2:	69bc      	ldr	r4, [r7, #24]
 80017e4:	2500      	movs	r5, #0
 80017e6:	e000      	b.n	80017ea <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 80017e8:	2501      	movs	r5, #1
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fdf8 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80017f4:	2d01      	cmp	r5, #1
 80017f6:	d104      	bne.n	8001802 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	3301      	adds	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e7c2      	b.n	8001786 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001800:	2400      	movs	r4, #0
 8001802:	4623      	mov	r3, r4
    }
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}
 800180c:	fffffc14 	.word	0xfffffc14
 8001810:	fffffc16 	.word	0xfffffc16

08001814 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 800182c:	e028      	b.n	8001880 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001838:	e022      	b.n	8001880 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d21a      	bcs.n	800187e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	18d0      	adds	r0, r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	4619      	mov	r1, r3
 8001864:	f006 fb32 	bl	8007ecc <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e7df      	b.n	800183e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 800187e:	2300      	movs	r3, #0
    }
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffffc14 	.word	0xfffffc14

0800188c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80018a4:	e028      	b.n	80018f8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80018b0:	e022      	b.n	80018f8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d21a      	bcs.n	80018f6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	18d0      	adds	r0, r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f107 0208 	add.w	r2, r7, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	f006 fac7 	bl	8007e6e <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e7df      	b.n	80018b6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 80018f6:	2300      	movs	r3, #0
    }
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	fffffc14 	.word	0xfffffc14

08001904 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001908:	b098      	sub	sp, #96	; 0x60
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3301      	adds	r3, #1
 800191a:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <_ZN2ei5numpy4rfftEPKfjPfjj+0x24>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001924:	4c6a      	ldr	r4, [pc, #424]	; (8001ad0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1cc>)
 8001926:	e0cd      	b.n	8001ac4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800192c:	429a      	cmp	r2, r3
 800192e:	d901      	bls.n	8001934 <_ZN2ei5numpy4rfftEPKfjPfjj+0x30>
            src_size = n_fft;
 8001930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001932:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001934:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001938:	2300      	movs	r3, #0
 800193a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800193c:	2101      	movs	r1, #1
 800193e:	f7ff fd26 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8001942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <_ZN2ei5numpy4rfftEPKfjPfjj+0x48>
 8001948:	4c62      	ldr	r4, [pc, #392]	; (8001ad4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 800194a:	e0b6      	b.n	8001aba <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
        if (!fft_input.buffer) {
 800194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <_ZN2ei5numpy4rfftEPKfjPfjj+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001952:	4c60      	ldr	r4, [pc, #384]	; (8001ad4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001954:	e0b1      	b.n	8001aba <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001956:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	461a      	mov	r2, r3
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	f019 f9ea 	bl	801ad38 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	18d0      	adds	r0, r2, r3
 800196c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	461a      	mov	r2, r3
 8001976:	2100      	movs	r1, #0
 8001978:	f019 fa06 	bl	801ad88 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 800197c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800197e:	2b20      	cmp	r3, #32
 8001980:	d025      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001984:	2b40      	cmp	r3, #64	; 0x40
 8001986:	d022      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800198a:	2b80      	cmp	r3, #128	; 0x80
 800198c:	d01f      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 800198e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001994:	d01b      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 8001996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199c:	d017      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 800199e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a4:	d013      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80019a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ac:	d00f      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80019ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80019b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b4:	d00b      	beq.n	80019ce <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80019b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	f000 f9d7 	bl	8001d70 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80019c2:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 80019c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d073      	beq.n	8001ab2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ae>
                EIDSP_ERR(ret);
 80019ca:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80019cc:	e075      	b.n	8001aba <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fa63 	bl	8001ea0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 80019da:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 80019dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0xe2>
                return status;
 80019e2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80019e4:	e068      	b.n	8001ab8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80019e6:	f107 0014 	add.w	r0, r7, #20
 80019ea:	2300      	movs	r3, #0
 80019ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019ee:	2101      	movs	r1, #1
 80019f0:	f7ff fccd 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfc>
 80019fa:	4c36      	ldr	r4, [pc, #216]	; (8001ad4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 80019fc:	2500      	movs	r5, #0
 80019fe:	e050      	b.n	8001aa2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            if (!fft_output.buffer) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <_ZN2ei5numpy4rfftEPKfjPfjj+0x108>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001a06:	4c33      	ldr	r4, [pc, #204]	; (8001ad4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d0>)
 8001a08:	2500      	movs	r5, #0
 8001a0a:	e04a      	b.n	8001aa2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001a14:	2300      	movs	r3, #0
 8001a16:	f008 fd87 	bl	800a528 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	440b      	add	r3, r1
 8001a32:	6852      	ldr	r2, [r2, #4]
 8001a34:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	3b01      	subs	r3, #1
 8001a42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d22b      	bcs.n	8001aa0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	f107 0210 	add.w	r2, r7, #16
 8001a54:	2102      	movs	r1, #2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f006 fa38 	bl	8007ecc <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd8c 	bl	800057c <__aeabi_f2d>
 8001a64:	4680      	mov	r8, r0
 8001a66:	4689      	mov	r9, r1
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f003 f91b 	bl	8004ca4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001a6e:	ec53 2b10 	vmov	r2, r3, d0
 8001a72:	4640      	mov	r0, r8
 8001a74:	4649      	mov	r1, r9
 8001a76:	f7fe fdd9 	bl	800062c <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	18d5      	adds	r5, r2, r3
 8001a8a:	f7ff f8c7 	bl	8000c1c <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	602b      	str	r3, [r5, #0]

                fft_output_buffer_ix += 2;
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	3302      	adds	r3, #2
 8001a96:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a9e:	e7ce      	b.n	8001a3e <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001aa0:	2501      	movs	r5, #1
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc9c 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8001aac:	2d01      	cmp	r5, #1
 8001aae:	d103      	bne.n	8001ab8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>
 8001ab0:	e000      	b.n	8001ab4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b0>
            }
 8001ab2:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	e000      	b.n	8001aba <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b6>
                return status;
 8001ab8:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc90 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8001ac4:	4623      	mov	r3, r4
    }
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3760      	adds	r7, #96	; 0x60
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad0:	fffffc11 	.word	0xfffffc11
 8001ad4:	fffffc16 	.word	0xfffffc16

08001ad8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b098      	sub	sp, #96	; 0x60
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	3301      	adds	r3, #1
 8001aec:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d001      	beq.n	8001afa <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001af6:	4c6f      	ldr	r4, [pc, #444]	; (8001cb4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8001af8:	e0d6      	b.n	8001ca8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d901      	bls.n	8001b06 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8001b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b04:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d101      	bne.n	8001b16 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001b16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b1e:	2101      	movs	r1, #1
 8001b20:	f7ff fc35 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8001b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001b2a:	4c63      	ldr	r4, [pc, #396]	; (8001cb8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001b2c:	e0b7      	b.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 8001b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001b34:	4c60      	ldr	r4, [pc, #384]	; (8001cb8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001b36:	e0b2      	b.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8001b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d112      	bne.n	8001b64 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001b3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	461a      	mov	r2, r3
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	f019 f8f6 	bl	801ad38 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	18d0      	adds	r0, r2, r3
 8001b54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f019 f912 	bl	801ad88 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d025      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6c:	2b40      	cmp	r3, #64	; 0x40
 8001b6e:	d022      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b72:	2b80      	cmp	r3, #128	; 0x80
 8001b74:	d01f      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7c:	d01b      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b84:	d017      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8c:	d013      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b94:	d00f      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 8001b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9c:	d00b      	beq.n	8001bb6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001b9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	f000 f955 	bl	8001e54 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001baa:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d071      	beq.n	8001c96 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8001bb2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001bb4:	e073      	b.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f96f 	bl	8001ea0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001bc2:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8001bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 8001bca:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001bcc:	e066      	b.n	8001c9c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001bce:	f107 0010 	add.w	r0, r7, #16
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	f7ff fbd9 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8001be2:	4c35      	ldr	r4, [pc, #212]	; (8001cb8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001be4:	2500      	movs	r5, #0
 8001be6:	e04e      	b.n	8001c86 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001bee:	4c32      	ldr	r4, [pc, #200]	; (8001cb8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	e048      	b.n	8001c86 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	f107 0020 	add.w	r0, r7, #32
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f008 fc93 	bl	800a528 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	440b      	add	r3, r1
 8001c22:	6852      	ldr	r2, [r2, #4]
 8001c24:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c28:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001c3e:	2301      	movs	r3, #1
 8001c40:	657b      	str	r3, [r7, #84]	; 0x54
 8001c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c44:	3b01      	subs	r3, #1
 8001c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d21b      	bcs.n	8001c84 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ac>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	441a      	add	r2, r3
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c64:	3301      	adds	r3, #1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	440b      	add	r3, r1
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 8001c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c78:	3302      	adds	r3, #2
 8001c7a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	3301      	adds	r3, #1
 8001c80:	657b      	str	r3, [r7, #84]	; 0x54
 8001c82:	e7de      	b.n	8001c42 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16a>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001c84:	2501      	movs	r5, #1
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbaa 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8001c90:	2d01      	cmp	r5, #1
 8001c92:	d103      	bne.n	8001c9c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 8001c94:	e000      	b.n	8001c98 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
            }
 8001c96:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001c98:	2400      	movs	r4, #0
 8001c9a:	e000      	b.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 8001c9c:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fb9e 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8001ca8:	4623      	mov	r3, r4
    }
 8001caa:	4618      	mov	r0, r3
 8001cac:	3760      	adds	r7, #96	; 0x60
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	fffffc11 	.word	0xfffffc11
 8001cb8:	fffffc16 	.word	0xfffffc16

08001cbc <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cc6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8001cdc:	e03f      	b.n	8001d5e <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d104      	bne.n	8001cee <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e037      	b.n	8001d5e <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8001cee:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d216      	bcs.n	8001d4a <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e7e3      	b.n	8001d12 <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d50:	3b01      	subs	r3, #1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8001d5c:	2300      	movs	r3, #0
    }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	fffffc10 	.word	0xfffffc10

08001d70 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00f f9b8 	bl	80110f8 <_Z9ei_mallocj>
 8001d88:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001d92:	e059      	b.n	8001e48 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	f00e fdf5 	bl	8010990 <kiss_fftr_alloc>
 8001da6:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001dae:	69b8      	ldr	r0, [r7, #24]
 8001db0:	f00f f9bc 	bl	801112c <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001db6:	e047      	b.n	8001e48 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f00e ff07 	bl	8010bd0 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d235      	bcs.n	8001e3a <_ZN2ei5numpy13software_rfftEPfS1_jj+0xca>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	2002      	movs	r0, #2
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	f002 ff3f 	bl	8004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001de4:	ec55 4b10 	vmov	r4, r5, d0
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4413      	add	r3, r2
 8001df0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001df4:	2002      	movs	r0, #2
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	f002 ff32 	bl	8004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001dfe:	ec53 2b10 	vmov	r2, r3, d0
 8001e02:	4620      	mov	r0, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	f7fe fa5b 	bl	80002c0 <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b17 	vmov	d7, r2, r3
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f016 fc59 	bl	80186d0 <sqrt>
 8001e1e:	ec51 0b10 	vmov	r0, r1, d0
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	18d4      	adds	r4, r2, r3
 8001e2a:	f7fe fef7 	bl	8000c1c <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e7c5      	b.n	8001dc6 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f00f f976 	bl	801112c <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001e40:	69b8      	ldr	r0, [r7, #24]
 8001e42:	f00f f973 	bl	801112c <_Z7ei_freePv>

        return EIDSP_OK;
 8001e46:	2300      	movs	r3, #0
    }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e50:	fffffc16 	.word	0xfffffc16

08001e54 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2100      	movs	r1, #0
 8001e70:	f00e fd8e 	bl	8010990 <kiss_fftr_alloc>
 8001e74:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8001e7e:	e008      	b.n	8001e92 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f00e fea3 	bl	8010bd0 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f00f f94e 	bl	801112c <_Z7ei_freePv>

        return EIDSP_OK;
 8001e90:	2300      	movs	r3, #0
    }
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	fffffc16 	.word	0xfffffc16

08001ea0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF)
        arm_status status;
        switch (n_fft) {
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d11f      	bne.n	8001ef0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x50>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_128 == 1
            case 128: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
                S->fftLen = 64U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len64.bitRevLength;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8001ec2:	899a      	ldrh	r2, [r3, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len64.pBitRevTable;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len64.pTwiddle;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 128U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_128;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8001ee2:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	72fb      	strb	r3, [r7, #11]
                break;
 8001ee8:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8001eea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001eee:	e000      	b.n	8001ef2 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x52>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0801fcd0 	.word	0x0801fcd0
 8001f04:	0801fad0 	.word	0x0801fad0
 8001f08:	fffffc08 	.word	0xfffffc08
 8001f0c:	00000000 	.word	0x00000000

08001f10 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8001f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	b095      	sub	sp, #84	; 0x54
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6178      	str	r0, [r7, #20]
 8001f1a:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f1e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	0fda      	lsrs	r2, r3, #31
 8001f2c:	4413      	add	r3, r2
 8001f2e:	105b      	asrs	r3, r3, #1
 8001f30:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7fe fb22 	bl	800057c <__aeabi_f2d>
 8001f38:	a3f5      	add	r3, pc, #980	; (adr r3, 8002310 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb75 	bl	800062c <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4690      	mov	r8, r2
 8001f48:	4699      	mov	r9, r3
 8001f4a:	6938      	ldr	r0, [r7, #16]
 8001f4c:	f7fe fb16 	bl	800057c <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4640      	mov	r0, r8
 8001f56:	4649      	mov	r1, r9
 8001f58:	f7fe fc92 	bl	8000880 <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	ec43 2b17 	vmov	d7, r2, r3
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f016 faac 	bl	80184c8 <tan>
 8001f70:	ec53 2b10 	vmov	r2, r3, d0
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe50 	bl	8000c1c <__aeabi_d2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8001f80:	2002      	movs	r0, #2
 8001f82:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f86:	f002 fe6c 	bl	8004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f8a:	ec53 2b10 	vmov	r2, r3, d0
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe43 	bl	8000c1c <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8001f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00f f8b6 	bl	8011110 <_Z9ei_callocjj>
 8001fa4:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa8:	2104      	movs	r1, #4
 8001faa:	4618      	mov	r0, r3
 8001fac:	f00f f8b0 	bl	8011110 <_Z9ei_callocjj>
 8001fb0:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f00f f8aa 	bl	8011110 <_Z9ei_callocjj>
 8001fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00f f8a4 	bl	8011110 <_Z9ei_callocjj>
 8001fc8:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f00f f89e 	bl	8011110 <_Z9ei_callocjj>
 8001fd4:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd8:	2104      	movs	r1, #4
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00f f898 	bl	8011110 <_Z9ei_callocjj>
 8001fe0:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f280 80e5 	bge.w	80021ba <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8001ff0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ff2:	f7fe fab1 	bl	8000558 <__aeabi_i2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	f7fe f961 	bl	80002c0 <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4bc3      	ldr	r3, [pc, #780]	; (8002318 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800200c:	f7fe f958 	bl	80002c0 <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	a3bd      	add	r3, pc, #756	; (adr r3, 8002310 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fb05 	bl	800062c <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7fe fa94 	bl	8000558 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	f7fe f944 	bl	80002c0 <__adddf3>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4640      	mov	r0, r8
 800203e:	4649      	mov	r1, r9
 8002040:	f7fe fc1e 	bl	8000880 <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	ec43 2b17 	vmov	d7, r2, r3
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	f016 f9e4 	bl	8018420 <sin>
 8002058:	ec53 2b10 	vmov	r2, r3, d0
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fddc 	bl	8000c1c <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800206a:	f7fe fa87 	bl	800057c <__aeabi_f2d>
 800206e:	4680      	mov	r8, r0
 8002070:	4689      	mov	r9, r1
 8002072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002074:	f7fe fa82 	bl	800057c <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	f7fe f920 	bl	80002c0 <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4692      	mov	sl, r2
 8002086:	469b      	mov	fp, r3
 8002088:	69f8      	ldr	r0, [r7, #28]
 800208a:	f7fe fa77 	bl	800057c <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4650      	mov	r0, sl
 8002094:	4659      	mov	r1, fp
 8002096:	f7fe fac9 	bl	800062c <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4640      	mov	r0, r8
 80020a0:	4649      	mov	r1, r9
 80020a2:	f7fe f90d 	bl	80002c0 <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b99      	ldr	r3, [pc, #612]	; (8002318 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 80020b4:	f7fe f904 	bl	80002c0 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fdac 	bl	8000c1c <__aeabi_d2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 80020c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	4413      	add	r3, r2
 80020d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80020d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80020d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020dc:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80020e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa44 	bl	800057c <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	f7fe f8e2 	bl	80002c0 <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4690      	mov	r8, r2
 8002102:	4699      	mov	r9, r3
 8002104:	6938      	ldr	r0, [r7, #16]
 8002106:	f7fe fa39 	bl	800057c <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4640      	mov	r0, r8
 8002110:	4649      	mov	r1, r9
 8002112:	f7fe fbb5 	bl	8000880 <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002124:	18d6      	adds	r6, r2, r3
 8002126:	f7fe fd79 	bl	8000c1c <__aeabi_d2f>
 800212a:	4603      	mov	r3, r0
 800212c:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 800212e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002130:	f7fe fa24 	bl	800057c <__aeabi_f2d>
 8002134:	4680      	mov	r8, r0
 8002136:	4689      	mov	r9, r1
 8002138:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800213a:	f7fe fa1f 	bl	800057c <__aeabi_f2d>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	f7fe f8bd 	bl	80002c0 <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4692      	mov	sl, r2
 800214c:	469b      	mov	fp, r3
 800214e:	69f8      	ldr	r0, [r7, #28]
 8002150:	f7fe fa14 	bl	800057c <__aeabi_f2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4650      	mov	r0, sl
 800215a:	4659      	mov	r1, fp
 800215c:	f7fe fa66 	bl	800062c <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4640      	mov	r0, r8
 8002166:	4649      	mov	r1, r9
 8002168:	f7fe f8a8 	bl	80002bc <__aeabi_dsub>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 800217a:	f7fe f8a1 	bl	80002c0 <__adddf3>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002188:	6938      	ldr	r0, [r7, #16]
 800218a:	f7fe f9f7 	bl	800057c <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe fb73 	bl	8000880 <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a8:	18d6      	adds	r6, r2, r3
 80021aa:	f7fe fd37 	bl	8000c1c <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	3301      	adds	r3, #1
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b8:	e715      	b.n	8001fe6 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80021be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	f080 80aa 	bcs.w	800231c <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 80021c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	441a      	add	r2, r3
 80021d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	440b      	add	r3, r1
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80021dc:	2300      	movs	r3, #0
 80021de:	647b      	str	r3, [r7, #68]	; 0x44
 80021e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e4:	429a      	cmp	r2, r3
 80021e6:	f280 808e 	bge.w	8002306 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f0:	4413      	add	r3, r2
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	4413      	add	r3, r2
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220c:	4413      	add	r3, r2
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	6a3a      	ldr	r2, [r7, #32]
 8002218:	4413      	add	r3, r2
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002238:	4413      	add	r3, r2
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8002242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f995 	bl	800057c <__aeabi_f2d>
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800225c:	4413      	add	r3, r2
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f98b 	bl	800057c <__aeabi_f2d>
 8002266:	4680      	mov	r8, r0
 8002268:	4689      	mov	r9, r1
 800226a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	4413      	add	r3, r2
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f981 	bl	800057c <__aeabi_f2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	f7fe f81f 	bl	80002c0 <__adddf3>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4640      	mov	r0, r8
 8002288:	4649      	mov	r1, r9
 800228a:	f7fe f819 	bl	80002c0 <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	4413      	add	r3, r2
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f96b 	bl	800057c <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4640      	mov	r0, r8
 80022ac:	4649      	mov	r1, r9
 80022ae:	f7fe f807 	bl	80002c0 <__adddf3>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f7fe f9b7 	bl	800062c <__aeabi_dmul>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	18d4      	adds	r4, r2, r3
 80022ce:	f7fe fca5 	bl	8000c1c <__aeabi_d2f>
 80022d2:	4603      	mov	r3, r0
 80022d4:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	441a      	add	r2, r3
 80022de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	6a39      	ldr	r1, [r7, #32]
 80022e4:	440b      	add	r3, r1
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80022ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f0:	441a      	add	r2, r3
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f8:	440b      	add	r3, r1
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	3301      	adds	r3, #1
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
 8002304:	e76c      	b.n	80021e0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002308:	3301      	adds	r3, #1
 800230a:	64bb      	str	r3, [r7, #72]	; 0x48
 800230c:	e757      	b.n	80021be <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 800230e:	bf00      	nop
 8002310:	54442d18 	.word	0x54442d18
 8002314:	400921fb 	.word	0x400921fb
 8002318:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 800231c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800231e:	f00e ff05 	bl	801112c <_Z7ei_freePv>
        ei_free(d1);
 8002322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002324:	f00e ff02 	bl	801112c <_Z7ei_freePv>
        ei_free(d2);
 8002328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800232a:	f00e feff 	bl	801112c <_Z7ei_freePv>
        ei_free(w0);
 800232e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002330:	f00e fefc 	bl	801112c <_Z7ei_freePv>
        ei_free(w1);
 8002334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002336:	f00e fef9 	bl	801112c <_Z7ei_freePv>
        ei_free(w2);
 800233a:	6a38      	ldr	r0, [r7, #32]
 800233c:	f00e fef6 	bl	801112c <_Z7ei_freePv>
    }
 8002340:	bf00      	nop
 8002342:	3754      	adds	r7, #84	; 0x54
 8002344:	46bd      	mov	sp, r7
 8002346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234a:	bf00      	nop
 800234c:	0000      	movs	r0, r0
	...

08002350 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002354:	b095      	sub	sp, #84	; 0x54
 8002356:	af00      	add	r7, sp, #0
 8002358:	6178      	str	r0, [r7, #20]
 800235a:	ed87 0a04 	vstr	s0, [r7, #16]
 800235e:	edc7 0a03 	vstr	s1, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0fda      	lsrs	r2, r3, #31
 800236c:	4413      	add	r3, r2
 800236e:	105b      	asrs	r3, r3, #1
 8002370:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7fe f902 	bl	800057c <__aeabi_f2d>
 8002378:	a3f5      	add	r3, pc, #980	; (adr r3, 8002750 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f955 	bl	800062c <__aeabi_dmul>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4690      	mov	r8, r2
 8002388:	4699      	mov	r9, r3
 800238a:	6938      	ldr	r0, [r7, #16]
 800238c:	f7fe f8f6 	bl	800057c <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4640      	mov	r0, r8
 8002396:	4649      	mov	r1, r9
 8002398:	f7fe fa72 	bl	8000880 <__aeabi_ddiv>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	ec43 2b17 	vmov	d7, r2, r3
 80023a4:	eeb0 0a47 	vmov.f32	s0, s14
 80023a8:	eef0 0a67 	vmov.f32	s1, s15
 80023ac:	f016 f88c 	bl	80184c8 <tan>
 80023b0:	ec53 2b10 	vmov	r2, r3, d0
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fc30 	bl	8000c1c <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 80023c0:	2002      	movs	r0, #2
 80023c2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80023c6:	f002 fc4c 	bl	8004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023ca:	ec53 2b10 	vmov	r2, r3, d0
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fc23 	bl	8000c1c <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80023da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023dc:	2104      	movs	r1, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f00e fe96 	bl	8011110 <_Z9ei_callocjj>
 80023e4:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80023e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e8:	2104      	movs	r1, #4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00e fe90 	bl	8011110 <_Z9ei_callocjj>
 80023f0:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80023f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f4:	2104      	movs	r1, #4
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00e fe8a 	bl	8011110 <_Z9ei_callocjj>
 80023fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80023fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002400:	2104      	movs	r1, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f00e fe84 	bl	8011110 <_Z9ei_callocjj>
 8002408:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 800240a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800240c:	2104      	movs	r1, #4
 800240e:	4618      	mov	r0, r3
 8002410:	f00e fe7e 	bl	8011110 <_Z9ei_callocjj>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002418:	2104      	movs	r1, #4
 800241a:	4618      	mov	r0, r3
 800241c:	f00e fe78 	bl	8011110 <_Z9ei_callocjj>
 8002420:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 8002422:	2300      	movs	r3, #0
 8002424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242a:	429a      	cmp	r2, r3
 800242c:	f280 80e5 	bge.w	80025fa <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002430:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002432:	f7fe f891 	bl	8000558 <__aeabi_i2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	f7fd ff41 	bl	80002c0 <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4bc3      	ldr	r3, [pc, #780]	; (8002758 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 800244c:	f7fd ff38 	bl	80002c0 <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	a3bd      	add	r3, pc, #756	; (adr r3, 8002750 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8e5 	bl	800062c <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4690      	mov	r8, r2
 8002468:	4699      	mov	r9, r3
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7fe f874 	bl	8000558 <__aeabi_i2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	f7fd ff24 	bl	80002c0 <__adddf3>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4640      	mov	r0, r8
 800247e:	4649      	mov	r1, r9
 8002480:	f7fe f9fe 	bl	8000880 <__aeabi_ddiv>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	ec43 2b17 	vmov	d7, r2, r3
 800248c:	eeb0 0a47 	vmov.f32	s0, s14
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	f015 ffc4 	bl	8018420 <sin>
 8002498:	ec53 2b10 	vmov	r2, r3, d0
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fbbc 	bl	8000c1c <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 80024a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80024aa:	f7fe f867 	bl	800057c <__aeabi_f2d>
 80024ae:	4680      	mov	r8, r0
 80024b0:	4689      	mov	r9, r1
 80024b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024b4:	f7fe f862 	bl	800057c <__aeabi_f2d>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	f7fd ff00 	bl	80002c0 <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4692      	mov	sl, r2
 80024c6:	469b      	mov	fp, r3
 80024c8:	69f8      	ldr	r0, [r7, #28]
 80024ca:	f7fe f857 	bl	800057c <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4650      	mov	r0, sl
 80024d4:	4659      	mov	r1, fp
 80024d6:	f7fe f8a9 	bl	800062c <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4640      	mov	r0, r8
 80024e0:	4649      	mov	r1, r9
 80024e2:	f7fd feed 	bl	80002c0 <__adddf3>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b99      	ldr	r3, [pc, #612]	; (8002758 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80024f4:	f7fd fee4 	bl	80002c0 <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f7fe fb8c 	bl	8000c1c <__aeabi_d2f>
 8002504:	4603      	mov	r3, r0
 8002506:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800250e:	4413      	add	r3, r2
 8002510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002514:	ed97 7a04 	vldr	s14, [r7, #16]
 8002518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251c:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8002520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002524:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252c:	ee17 0a90 	vmov	r0, s15
 8002530:	f7fe f824 	bl	800057c <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	f7fd fec2 	bl	80002c0 <__adddf3>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4690      	mov	r8, r2
 8002542:	4699      	mov	r9, r3
 8002544:	6938      	ldr	r0, [r7, #16]
 8002546:	f7fe f819 	bl	800057c <__aeabi_f2d>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4640      	mov	r0, r8
 8002550:	4649      	mov	r1, r9
 8002552:	f7fe f995 	bl	8000880 <__aeabi_ddiv>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002564:	18d6      	adds	r6, r2, r3
 8002566:	f7fe fb59 	bl	8000c1c <__aeabi_d2f>
 800256a:	4603      	mov	r3, r0
 800256c:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 800256e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002570:	f7fe f804 	bl	800057c <__aeabi_f2d>
 8002574:	4680      	mov	r8, r0
 8002576:	4689      	mov	r9, r1
 8002578:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800257a:	f7fd ffff 	bl	800057c <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	f7fd fe9d 	bl	80002c0 <__adddf3>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4692      	mov	sl, r2
 800258c:	469b      	mov	fp, r3
 800258e:	69f8      	ldr	r0, [r7, #28]
 8002590:	f7fd fff4 	bl	800057c <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4650      	mov	r0, sl
 800259a:	4659      	mov	r1, fp
 800259c:	f7fe f846 	bl	800062c <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4640      	mov	r0, r8
 80025a6:	4649      	mov	r1, r9
 80025a8:	f7fd fe88 	bl	80002bc <__aeabi_dsub>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4b67      	ldr	r3, [pc, #412]	; (8002758 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80025ba:	f7fd fe81 	bl	80002c0 <__adddf3>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4614      	mov	r4, r2
 80025c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80025c8:	6938      	ldr	r0, [r7, #16]
 80025ca:	f7fd ffd7 	bl	800057c <__aeabi_f2d>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fe f953 	bl	8000880 <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e8:	18d6      	adds	r6, r2, r3
 80025ea:	f7fe fb17 	bl	8000c1c <__aeabi_d2f>
 80025ee:	4603      	mov	r3, r0
 80025f0:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f4:	3301      	adds	r3, #1
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	e715      	b.n	8002426 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80025fa:	2300      	movs	r3, #0
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	f080 80aa 	bcs.w	800275c <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8002608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	441a      	add	r2, r3
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	440b      	add	r3, r1
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002624:	429a      	cmp	r2, r3
 8002626:	f280 808e 	bge.w	8002746 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 800262a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002630:	4413      	add	r3, r2
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	4413      	add	r3, r2
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264c:	4413      	add	r3, r2
 800264e:	edd3 6a00 	vldr	s13, [r3]
 8002652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	6a3a      	ldr	r2, [r7, #32]
 8002658:	4413      	add	r3, r2
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002678:	4413      	add	r3, r2
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002688:	4413      	add	r3, r2
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff75 	bl	800057c <__aeabi_f2d>
 8002692:	4604      	mov	r4, r0
 8002694:	460d      	mov	r5, r1
 8002696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff6b 	bl	800057c <__aeabi_f2d>
 80026a6:	4680      	mov	r8, r0
 80026a8:	4689      	mov	r9, r1
 80026aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff61 	bl	800057c <__aeabi_f2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	f7fd fdff 	bl	80002c0 <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4640      	mov	r0, r8
 80026c8:	4649      	mov	r1, r9
 80026ca:	f7fd fdf7 	bl	80002bc <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4690      	mov	r8, r2
 80026d4:	4699      	mov	r9, r3
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	6a3a      	ldr	r2, [r7, #32]
 80026dc:	4413      	add	r3, r2
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff4b 	bl	800057c <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4640      	mov	r0, r8
 80026ec:	4649      	mov	r1, r9
 80026ee:	f7fd fde7 	bl	80002c0 <__adddf3>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fd ff97 	bl	800062c <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	18d4      	adds	r4, r2, r3
 800270e:	f7fe fa85 	bl	8000c1c <__aeabi_d2f>
 8002712:	4603      	mov	r3, r0
 8002714:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8002716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	441a      	add	r2, r3
 800271e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	6a39      	ldr	r1, [r7, #32]
 8002724:	440b      	add	r3, r1
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 800272a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002730:	441a      	add	r2, r3
 8002732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002738:	440b      	add	r3, r1
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	3301      	adds	r3, #1
 8002742:	647b      	str	r3, [r7, #68]	; 0x44
 8002744:	e76c      	b.n	8002620 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002748:	3301      	adds	r3, #1
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
 800274c:	e757      	b.n	80025fe <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 800274e:	bf00      	nop
 8002750:	54442d18 	.word	0x54442d18
 8002754:	400921fb 	.word	0x400921fb
 8002758:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 800275c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800275e:	f00e fce5 	bl	801112c <_Z7ei_freePv>
        ei_free(d1);
 8002762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002764:	f00e fce2 	bl	801112c <_Z7ei_freePv>
        ei_free(d2);
 8002768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276a:	f00e fcdf 	bl	801112c <_Z7ei_freePv>
        ei_free(w0);
 800276e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002770:	f00e fcdc 	bl	801112c <_Z7ei_freePv>
        ei_free(w1);
 8002774:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002776:	f00e fcd9 	bl	801112c <_Z7ei_freePv>
        ei_free(w2);
 800277a:	6a38      	ldr	r0, [r7, #32]
 800277c:	f00e fcd6 	bl	801112c <_Z7ei_freePv>
    }
 8002780:	bf00      	nop
 8002782:	3754      	adds	r7, #84	; 0x54
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278a:	bf00      	nop

0800278c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	ed87 0a02 	vstr	s0, [r7, #8]
 8002798:	edc7 0a01 	vstr	s1, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d21f      	bcs.n	80027ee <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 80027ae:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	6979      	ldr	r1, [r7, #20]
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80027d2:	441a      	add	r2, r3
                matrix->cols);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80027d8:	4621      	mov	r1, r4
 80027da:	edd7 0a01 	vldr	s1, [r7, #4]
 80027de:	ed97 0a02 	vldr	s0, [r7, #8]
 80027e2:	f7ff fb95 	bl	8001f10 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e7da      	b.n	80027a4 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80027ee:	2300      	movs	r3, #0
    }
 80027f0:	4618      	mov	r0, r3
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd90      	pop	{r4, r7, pc}

080027f8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	ed87 0a02 	vstr	s0, [r7, #8]
 8002804:	edc7 0a01 	vstr	s1, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	429a      	cmp	r2, r3
 8002818:	d21f      	bcs.n	800285a <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 800281a:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	6979      	ldr	r1, [r7, #20]
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 800283e:	441a      	add	r2, r3
                matrix->cols);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8002844:	4621      	mov	r1, r4
 8002846:	edd7 0a01 	vldr	s1, [r7, #4]
 800284a:	ed97 0a02 	vldr	s0, [r7, #8]
 800284e:	f7ff fd7f 	bl	8002350 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	e7da      	b.n	8002810 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 800285a:	2300      	movs	r3, #0
    }
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}

08002864 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8002864:	b480      	push	{r7}
 8002866:	b091      	sub	sp, #68	; 0x44
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002872:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d001      	beq.n	8002880 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 800287e:	e0b9      	b.n	80029f4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002888:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 800288a:	e0b3      	b.n	80029f4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 80028a8:	4b56      	ldr	r3, [pc, #344]	; (8002a04 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80028b2:	2300      	movs	r3, #0
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	3b01      	subs	r3, #1
 80028ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028bc:	429a      	cmp	r2, r3
 80028be:	d229      	bcs.n	8002914 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	4413      	add	r3, r2
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd05      	ble.n	80028e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	6a3a      	ldr	r2, [r7, #32]
 80028e0:	4413      	add	r3, r2
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	4413      	add	r3, r2
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80028f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fe:	d505      	bpl.n	800290c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	4413      	add	r3, r2
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	3301      	adds	r3, #1
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 8002912:	e7d0      	b.n	80028b6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 800291a:	2301      	movs	r3, #1
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3b01      	subs	r3, #1
 8002922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002924:	429a      	cmp	r2, r3
 8002926:	d261      	bcs.n	80029ec <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	6a3a      	ldr	r2, [r7, #32]
 800292e:	4413      	add	r3, r2
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d549      	bpl.n	80029d6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	4413      	add	r3, r2
 800294a:	ed93 7a00 	vldr	s14, [r3]
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	3301      	adds	r3, #1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	4413      	add	r3, r2
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	dd37      	ble.n	80029d6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	4413      	add	r3, r2
 800296e:	ed93 7a00 	vldr	s14, [r3]
 8002972:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002976:	ee37 7a67 	vsub.f32	s14, s14, s15
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	4413      	add	r3, r2
 8002982:	edd3 6a00 	vldr	s13, [r3]
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	3301      	adds	r3, #1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	4413      	add	r3, r2
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 80029a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80029a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd11      	ble.n	80029d6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 80029b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029bc:	ee07 2a90 	vmov	s15, r2
 80029c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c4:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 80029c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029ca:	3301      	adds	r3, #1
 80029cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 80029ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d009      	beq.n	80029ea <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	6a3a      	ldr	r2, [r7, #32]
 80029dc:	4413      	add	r3, r2
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	3301      	adds	r3, #1
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	e799      	b.n	800291e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80029ea:	bf00      	nop
        }

        *peaks_found = out_ix;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80029f0:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80029f2:	2300      	movs	r3, #0
    }
 80029f4:	4618      	mov	r0, r3
 80029f6:	3744      	adds	r7, #68	; 0x44
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	fffffc14 	.word	0xfffffc14
 8002a04:	7f7fffff 	.word	0x7f7fffff

08002a08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f002 f9af 	bl	8004d74 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 f992 	bl	8004d54 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ffeb 	bl	8002a20 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	bfcc      	ite	gt
 8002a76:	2301      	movgt	r3, #1
 8002a78:	2300      	movle	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
        });
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	ed2d 8b02 	vpush	{d8}
 8002a8e:	b09e      	sub	sp, #120	; 0x78
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6178      	str	r0, [r7, #20]
 8002a94:	6139      	str	r1, [r7, #16]
 8002a96:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d001      	beq.n	8002aae <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002aaa:	4c95      	ldr	r4, [pc, #596]	; (8002d00 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8002aac:	e120      	b.n	8002cf0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->cols != 2) {
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d001      	beq.n	8002aba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002ab6:	4c92      	ldr	r4, [pc, #584]	; (8002d00 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8002ab8:	e11a      	b.n	8002cf0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        if (output_matrix->rows == 0) {
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8002ac2:	2400      	movs	r4, #0
 8002ac4:	e114      	b.n	8002cf0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x268>
        int N = static_cast<int>(fft_length);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	66bb      	str	r3, [r7, #104]	; 0x68
        float T = 1.0f / sampling_freq;
 8002aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	f7fe fc52 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8002af0:	4c84      	ldr	r4, [pc, #528]	; (8002d04 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8002af2:	e0f8      	b.n	8002ce6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8002af4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002af8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b00:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b06:	0fda      	lsrs	r2, r3, #31
 8002b08:	4413      	add	r3, r2
 8002b0a:	105b      	asrs	r3, r3, #1
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 f90f 	bl	8004d30 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002b12:	ec53 2b10 	vmov	r2, r3, d0
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f85f 	bl	8000bdc <__aeabi_d2uiz>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	eef0 0a48 	vmov.f32	s1, s16
 8002b2a:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002d08 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8002b2e:	f7ff f8c5 	bl	8001cbc <_ZN2ei5numpy8linspaceEffmPf>
 8002b32:	6638      	str	r0, [r7, #96]	; 0x60
        if (ret != EIDSP_OK) {
 8002b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb6>
            EIDSP_ERR(ret);
 8002b3a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002b3c:	e0d3      	b.n	8002ce6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x25e>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002b50:	2300      	movs	r3, #0
 8002b52:	2201      	movs	r2, #1
 8002b54:	f7fe fc1b 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xda>
 8002b5e:	4c69      	ldr	r4, [pc, #420]	; (8002d04 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8002b60:	e0bc      	b.n	8002cdc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8002b62:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8002b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b6a:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002d08 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f7ff fe77 	bl	8002864 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8002b76:	6638      	str	r0, [r7, #96]	; 0x60
        if (ret != EIDSP_OK) {
 8002b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfa>
            EIDSP_ERR(ret);
 8002b7e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8002b80:	e0ac      	b.n	8002cdc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x254>
        std::vector<freq_peak_t> peaks;
 8002b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff57 	bl	8002a3a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002b96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	da3d      	bge.n	8002c18 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x190>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ba0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb0:	ee17 3a90 	vmov	r3, s15
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	ee17 3a90 	vmov	r3, s15
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
            if (d.amplitude < threshold) {
 8002bde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002be2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd05      	ble.n	8002bfc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x174>
                d.freq = 0.0f;
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
                d.amplitude = 0.0f;
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
            peaks.push_back(d);
 8002bfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 f8f4 	bl	8004df4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002c0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002c10:	3301      	adds	r3, #1
 8002c12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002c16:	e7bc      	b.n	8002b92 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10a>
        sort(peaks.begin(), peaks.end(),
 8002c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 f90f 	bl	8004e40 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 8002c22:	4604      	mov	r4, r0
 8002c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 f919 	bl	8004e60 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	462a      	mov	r2, r5
 8002c32:	4619      	mov	r1, r3
 8002c34:	4620      	mov	r0, r4
 8002c36:	f002 f924 	bl	8004e82 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8002c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 f931 	bl	8004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8002c44:	6738      	str	r0, [r7, #112]	; 0x70
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d211      	bcs.n	8002c74 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1ec>
            freq_peak_t d;
            d.freq = 0;
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
            d.amplitude = 0;
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	623b      	str	r3, [r7, #32]
            peaks.push_back(d);
 8002c5c:	f107 021c 	add.w	r2, r7, #28
 8002c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 f8c4 	bl	8004df4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8002c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6e:	3301      	adds	r3, #1
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
 8002c72:	e7e8      	b.n	8002c46 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1be>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d226      	bcs.n	8002cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x248>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8002c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c86:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 f91c 	bl	8004ec6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	6802      	ldr	r2, [r0, #0]
 8002ca2:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8002ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 f90b 	bl	8004ec6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	6842      	ldr	r2, [r0, #4]
 8002cc6:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cce:	e7d3      	b.n	8002c78 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f0>
        }

        return EIDSP_OK;
 8002cd0:	2400      	movs	r4, #0
        std::vector<freq_peak_t> peaks;
 8002cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 f871 	bl	8004dbe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8002cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fb7f 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8002ce6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe fb7a 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8002cf0:	4623      	mov	r3, r4
    }
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3778      	adds	r7, #120	; 0x78
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	ecbd 8b02 	vpop	{d8}
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	fffffc14 	.word	0xfffffc14
 8002d04:	fffffc16 	.word	0xfffffc16
 8002d08:	00000000 	.word	0x00000000

08002d0c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b093      	sub	sp, #76	; 0x4c
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6178      	str	r0, [r7, #20]
 8002d14:	6139      	str	r1, [r7, #16]
 8002d16:	60fa      	str	r2, [r7, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d103      	bne.n	8002d2e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d2e:	4c7b      	ldr	r4, [pc, #492]	; (8002f1c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002d30:	e0ef      	b.n	8002f12 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d001      	beq.n	8002d3e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d3a:	4c78      	ldr	r4, [pc, #480]	; (8002f1c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002d3c:	e0e9      	b.n	8002f12 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d105      	bne.n	8002d58 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d58:	4c70      	ldr	r4, [pc, #448]	; (8002f1c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002d5a:	e0da      	b.n	8002f12 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002d68:	4c6c      	ldr	r4, [pc, #432]	; (8002f1c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8002d6a:	e0d2      	b.n	8002f12 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002d76:	2300      	movs	r3, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	f7fe fb08 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8002d84:	4c66      	ldr	r4, [pc, #408]	; (8002f20 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002d86:	e0bf      	b.n	8002f08 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	f107 0018 	add.w	r0, r7, #24
 8002d92:	2300      	movs	r3, #0
 8002d94:	2101      	movs	r1, #1
 8002d96:	f7fe fafa 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8002da0:	4c5f      	ldr	r4, [pc, #380]	; (8002f20 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002da2:	e0ac      	b.n	8002efe <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002daa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d264      	bcs.n	8002e80 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ddc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d244      	bcs.n	8002e74 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	db2f      	blt.n	8002e68 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e10:	3301      	adds	r3, #1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d51f      	bpl.n	8002e68 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 8002e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	ed93 7a00 	vldr	s14, [r3]
 8002e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e62:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8002e66:	e005      	b.n	8002e74 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002e68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e72:	e7b3      	b.n	8002ddc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002e74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e7e:	e794      	b.n	8002daa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002e86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d233      	bcs.n	8002efc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d109      	bne.n	8002ec0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e017      	b.n	8002ef0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8002ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	edd3 6a00 	vldr	s13, [r3]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	ed93 7a00 	vldr	s14, [r3]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eec:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002ef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002efa:	e7c4      	b.n	8002e86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 8002efc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002efe:	f107 0318 	add.w	r3, r7, #24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fa6e 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fa69 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8002f12:	4623      	mov	r3, r4
    }
 8002f14:	4618      	mov	r0, r3
 8002f16:	374c      	adds	r7, #76	; 0x4c
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	fffffc14 	.word	0xfffffc14
 8002f20:	fffffc16 	.word	0xfffffc16

08002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	ed2d 8b02 	vpush	{d8}
 8002f2a:	b09b      	sub	sp, #108	; 0x6c
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	6178      	str	r0, [r7, #20]
 8002f30:	6139      	str	r1, [r7, #16]
 8002f32:	60fa      	str	r2, [r7, #12]
 8002f34:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f38:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f42:	4c80      	ldr	r4, [pc, #512]	; (8003144 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002f44:	e192      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	0852      	lsrs	r2, r2, #1
 8002f56:	b292      	uxth	r2, r2
 8002f58:	3201      	adds	r2, #1
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d001      	beq.n	8002f62 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f5e:	4c79      	ldr	r4, [pc, #484]	; (8003144 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002f60:	e184      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	88fa      	ldrh	r2, [r7, #6]
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	b292      	uxth	r2, r2
 8002f74:	3201      	adds	r2, #1
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d001      	beq.n	8002f7e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f7a:	4c72      	ldr	r4, [pc, #456]	; (8003144 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x220>)
 8002f7c:	e176      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002f86:	4c70      	ldr	r4, [pc, #448]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002f88:	e170      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002f92:	4c6d      	ldr	r4, [pc, #436]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002f94:	e16a      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002f9e:	4c6a      	ldr	r4, [pc, #424]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002fa0:	e164      	b.n	800326c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002fb2:	f7fe f9ec 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8002fbc:	4c62      	ldr	r4, [pc, #392]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8002fbe:	e150      	b.n	8003262 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d904      	bls.n	8002fda <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002fd8:	e006      	b.n	8002fe8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d201      	bcs.n	8002fe8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002fe8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002fec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	f7fe f9cb 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8002ffe:	4c52      	ldr	r4, [pc, #328]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 8003000:	e12a      	b.n	8003258 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003002:	2300      	movs	r3, #0
 8003004:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003008:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800300c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003010:	429a      	cmp	r2, r3
 8003012:	d20d      	bcs.n	8003030 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 8003014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003016:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003022:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003024:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003028:	3301      	adds	r3, #1
 800302a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800302e:	e7eb      	b.n	8003008 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8003030:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800303c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003050:	2300      	movs	r3, #0
 8003052:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003060:	429a      	cmp	r2, r3
 8003062:	d826      	bhi.n	80030b2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x18e>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8003064:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800307a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003086:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800308a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800308e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80030a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80030aa:	3301      	adds	r3, #1
 80030ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80030b0:	e7d1      	b.n	8003056 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 80030b2:	f107 001c 	add.w	r0, r7, #28
 80030b6:	2300      	movs	r3, #0
 80030b8:	2201      	movs	r2, #1
 80030ba:	2101      	movs	r1, #1
 80030bc:	f7fe f967 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 80030c6:	4c20      	ldr	r4, [pc, #128]	; (8003148 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x224>)
 80030c8:	e0c1      	b.n	800324e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 80030ca:	f107 021c 	add.w	r2, r7, #28
 80030ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fbd9 	bl	800188c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 80030da:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80030dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 80030e2:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80030e4:	e0b3      	b.n	800324e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 80030e6:	f107 021c 	add.w	r2, r7, #28
 80030ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030ee:	4611      	mov	r1, r2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe fb33 	bl	800175c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80030f6:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80030f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80030fe:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003100:	e0a5      	b.n	800324e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	b29b      	uxth	r3, r3
 8003108:	3301      	adds	r3, #1
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f00d fffe 	bl	8011110 <_Z9ei_callocjj>
 8003114:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8003116:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003118:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	461a      	mov	r2, r3
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800312c:	f7fe fcd4 	bl	8001ad8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8003130:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8003132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003138:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800313a:	f00d fff7 	bl	801112c <_Z7ei_freePv>
            EIDSP_ERR(ret);
 800313e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8003140:	e085      	b.n	800324e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
 8003142:	bf00      	nop
 8003144:	fffffc14 	.word	0xfffffc14
 8003148:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800314c:	2300      	movs	r3, #0
 800314e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800315c:	429a      	cmp	r2, r3
 800315e:	d872      	bhi.n	8003246 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x322>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8003160:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003168:	4413      	add	r3, r2
 800316a:	ed93 7a00 	vldr	s14, [r3]
 800316e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003176:	4413      	add	r3, r2
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8003180:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003188:	4413      	add	r3, r2
 800318a:	ed93 7a01 	vldr	s14, [r3, #4]
 800318e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003196:	4413      	add	r3, r2
 8003198:	edd3 7a01 	vldr	s15, [r3, #4]
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	eeb0 0a67 	vmov.f32	s0, s15
 80031a4:	f7fd ff8c 	bl	80010c0 <_ZSt3absf>
 80031a8:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 80031ac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031b4:	4413      	add	r3, r2
 80031b6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80031ba:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 80031be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c6:	4413      	add	r3, r2
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 80031ce:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d6:	4413      	add	r3, r2
 80031d8:	ed93 7a00 	vldr	s14, [r3]
 80031dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e4:	4413      	add	r3, r2
 80031e6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d00f      	beq.n	8003220 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2fc>
                fft_output[ix].r *= 2;
 8003200:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003208:	4413      	add	r3, r2
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003216:	4413      	add	r3, r2
 8003218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800321c:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8003220:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003228:	441a      	add	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800323a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800323e:	3301      	adds	r3, #1
 8003240:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003244:	e785      	b.n	8003152 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22e>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8003246:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003248:	f00d ff70 	bl	801112c <_Z7ei_freePv>

        return EIDSP_OK;
 800324c:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe f8c6 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe f8c1 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe f8bc 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 800326c:	4623      	mov	r3, r4
    }
 800326e:	4618      	mov	r0, r3
 8003270:	3764      	adds	r7, #100	; 0x64
 8003272:	46bd      	mov	sp, r7
 8003274:	ecbd 8b02 	vpop	{d8}
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop

0800327c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b0b4      	sub	sp, #208	; 0xd0
 8003280:	af02      	add	r7, sp, #8
 8003282:	6178      	str	r0, [r7, #20]
 8003284:	6139      	str	r1, [r7, #16]
 8003286:	ed87 0a03 	vstr	s0, [r7, #12]
 800328a:	4611      	mov	r1, r2
 800328c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	ed87 1a00 	vstr	s2, [r7]
 8003296:	460b      	mov	r3, r1
 8003298:	72fb      	strb	r3, [r7, #11]
 800329a:	4613      	mov	r3, r2
 800329c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80032aa:	4cbe      	ldr	r4, [pc, #760]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80032ac:	e24a      	b.n	8003744 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	689d      	ldr	r5, [r3, #8]
 80032b2:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 80032b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	2001      	movs	r0, #1
 80032c0:	f000 fa46 	bl	8003750 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80032c4:	4603      	mov	r3, r0
 80032c6:	429d      	cmp	r5, r3
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80032d4:	4cb3      	ldr	r4, [pc, #716]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80032d6:	e235      	b.n	8003744 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        if (edges_matrix_in->cols != 1) {
 80032d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80032e2:	4cb0      	ldr	r4, [pc, #704]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80032e4:	e22e      	b.n	8003744 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c8>
        }

        int ret;

        size_t axes = input_matrix->rows;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 80032ee:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 80032f2:	2300      	movs	r3, #0
 80032f4:	2201      	movs	r2, #1
 80032f6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80032fa:	f7fe f848 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80032fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8e>
 8003306:	4ca8      	ldr	r4, [pc, #672]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003308:	e217      	b.n	800373a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        ret = numpy::mean(input_matrix, &mean_matrix);
 800330a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800330e:	4619      	mov	r1, r3
 8003310:	6938      	ldr	r0, [r7, #16]
 8003312:	f7fe fabb 	bl	800188c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8003316:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 800331a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xaa>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003322:	4ca0      	ldr	r4, [pc, #640]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003324:	e209      	b.n	800373a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8003326:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800332a:	4619      	mov	r1, r3
 800332c:	6938      	ldr	r0, [r7, #16]
 800332e:	f7fe fa15 	bl	800175c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8003332:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 8003336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xc6>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800333e:	4c99      	ldr	r4, [pc, #612]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003340:	e1fb      	b.n	800373a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
        }

        // apply filter
        if (filter_type == filter_lowpass) {
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d110      	bne.n	800336a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xee>
            ret = spectral::processing::butterworth_lowpass_filter(
 8003348:	7abb      	ldrb	r3, [r7, #10]
 800334a:	4619      	mov	r1, r3
 800334c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003350:	ed97 0a03 	vldr	s0, [r7, #12]
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f7ff fa19 	bl	800278c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800335a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800335e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003366:	4c8f      	ldr	r4, [pc, #572]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003368:	e1e7      	b.n	800373a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
            }
        }
        else if (filter_type == filter_highpass) {
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d110      	bne.n	8003392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
            ret = spectral::processing::butterworth_highpass_filter(
 8003370:	7abb      	ldrb	r3, [r7, #10]
 8003372:	4619      	mov	r1, r3
 8003374:	edd7 0a01 	vldr	s1, [r7, #4]
 8003378:	ed97 0a03 	vldr	s0, [r7, #12]
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f7ff fa3b 	bl	80027f8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003382:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8003386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x116>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800338e:	4c85      	ldr	r4, [pc, #532]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003390:	e1d3      	b.n	800373a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4be>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003392:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8003396:	2300      	movs	r3, #0
 8003398:	2201      	movs	r2, #1
 800339a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800339e:	f7fd fff6 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80033a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 80033aa:	4c7f      	ldr	r4, [pc, #508]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80033ac:	e1c0      	b.n	8003730 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4b4>
        ret = numpy::rms(input_matrix, &rms_matrix);
 80033ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033b2:	4619      	mov	r1, r3
 80033b4:	6938      	ldr	r0, [r7, #16]
 80033b6:	f7fe fa2d 	bl	8001814 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 80033ba:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        if (ret != EIDSP_OK) {
 80033be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x14e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80033c6:	4c77      	ldr	r4, [pc, #476]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80033c8:	e1b2      	b.n	8003730 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4b4>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 80033ca:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	461a      	mov	r2, r3
 80033d2:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80033dc:	f7fd ffd7 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80033e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16e>
 80033e6:	4c70      	ldr	r4, [pc, #448]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80033e8:	e19d      	b.n	8003726 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4aa>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f080 8193 	bcs.w	8003724 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	689d      	ldr	r5, [r3, #8]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800341a:	462a      	mov	r2, r5
 800341c:	2101      	movs	r1, #1
 800341e:	f7fd ffb6 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8003422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b2>
 8003428:	4c5f      	ldr	r4, [pc, #380]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800342a:	2500      	movs	r5, #0
 800342c:	e16d      	b.n	800370a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 800342e:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	3301      	adds	r3, #1
 8003438:	461a      	mov	r2, r3
 800343a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800343e:	2300      	movs	r3, #0
 8003440:	2101      	movs	r1, #1
 8003442:	f7fd ffa4 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 8003446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1d6>
 800344c:	4c56      	ldr	r4, [pc, #344]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800344e:	2500      	movs	r5, #0
 8003450:	e151      	b.n	80036f6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 8003452:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003454:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003456:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003458:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800345a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	462b      	mov	r3, r5
 8003462:	f7fe fa4f 	bl	8001904 <_ZN2ei5numpy4rfftEPKfjPfjj>
 8003466:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (ret != EIDSP_OK) {
 800346a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1fc>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003472:	4c4c      	ldr	r4, [pc, #304]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8003474:	2500      	movs	r5, #0
 8003476:	e13e      	b.n	80036f6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003478:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003484:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003490:	eeb0 0a47 	vmov.f32	s0, s14
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe f8e7 	bl	8001668 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 800349a:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 800349e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80034a2:	2300      	movs	r3, #0
 80034a4:	2202      	movs	r2, #2
 80034a6:	f7fd ff72 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80034aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23a>
 80034b0:	4c3d      	ldr	r4, [pc, #244]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80034b2:	2500      	movs	r5, #0
 80034b4:	e115      	b.n	80036e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 80034b6:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 80034ba:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80034be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034c2:	edd7 0a00 	vldr	s1, [r7]
 80034c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fadc 	bl	8002a88 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 80034d0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 80034d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80034dc:	4c31      	ldr	r4, [pc, #196]	; (80035a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 80034de:	2500      	movs	r5, #0
 80034e0:	e0ff      	b.n	80036e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 80034e2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	461a      	mov	r2, r3
 80034ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034f2:	2300      	movs	r3, #0
 80034f4:	2101      	movs	r1, #1
 80034f6:	f7fd ff4a 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 80034fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x28a>
 8003500:	4c29      	ldr	r4, [pc, #164]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003502:	2500      	movs	r5, #0
 8003504:	e0e3      	b.n	80036ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003506:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	3301      	adds	r3, #1
 8003510:	461a      	mov	r2, r3
 8003512:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003516:	2300      	movs	r3, #0
 8003518:	2101      	movs	r1, #1
 800351a:	f7fd ff38 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ae>
 8003524:	4c20      	ldr	r4, [pc, #128]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003526:	2500      	movs	r5, #0
 8003528:	e0c7      	b.n	80036ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            ret = spectral::processing::periodogram(&axis_matrix,
 800352a:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800352e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003532:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003536:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800353a:	ed97 0a03 	vldr	s0, [r7, #12]
 800353e:	f7ff fcf1 	bl	8002f24 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 8003542:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 8003546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2da>
                EIDSP_ERR(ret);
 800354e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003552:	2500      	movs	r5, #0
 8003554:	e0b1      	b.n	80036ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	1e59      	subs	r1, r3, #1
 800355e:	f107 001c 	add.w	r0, r7, #28
 8003562:	2300      	movs	r3, #0
 8003564:	2201      	movs	r2, #1
 8003566:	f7fd ff12 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d102      	bne.n	8003576 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2fa>
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8003572:	2500      	movs	r5, #0
 8003574:	e097      	b.n	80036a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
            ret = spectral::processing::spectral_power_edges(
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800357e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003582:	ed97 0a03 	vldr	s0, [r7, #12]
 8003586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800358a:	f7ff fbbf 	bl	8002d0c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 800358e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003592:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
                EIDSP_ERR(ret);
 800359a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800359e:	2500      	movs	r5, #0
 80035a0:	e081      	b.n	80036a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x42a>
 80035a2:	bf00      	nop
 80035a4:	fffffc14 	.word	0xfffffc14
 80035a8:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

            size_t fx = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            features_row[fx++] = rms_matrix.buffer[row];
 80035ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80035ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80035e6:	440b      	add	r3, r1
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d22c      	bcs.n	8003656 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 80035fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800361c:	440b      	add	r3, r1
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 8003622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	3301      	adds	r3, #1
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003638:	1c59      	adds	r1, r3, #1
 800363a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003644:	440b      	add	r3, r1
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800364a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800364e:	3301      	adds	r3, #1
 8003650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003654:	e7cd      	b.n	80035f2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x376>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003662:	429a      	cmp	r2, r3
 8003664:	d21e      	bcs.n	80036a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x428>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800368a:	4413      	add	r3, r2
 800368c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003694:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800369c:	3301      	adds	r3, #1
 800369e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a2:	e7db      	b.n	800365c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e0>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 80036a4:	2501      	movs	r5, #1
 80036a6:	f107 031c 	add.w	r3, r7, #28
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fe9a 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80036b0:	2d01      	cmp	r5, #1
 80036b2:	d001      	beq.n	80036b8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43c>
 80036b4:	2500      	movs	r5, #0
 80036b6:	e000      	b.n	80036ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43e>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 80036b8:	2501      	movs	r5, #1
 80036ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fe90 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80036c4:	2d01      	cmp	r5, #1
 80036c6:	d001      	beq.n	80036cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
 80036c8:	2500      	movs	r5, #0
 80036ca:	e000      	b.n	80036ce <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x452>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 80036cc:	2501      	movs	r5, #1
 80036ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fe86 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80036d8:	2d01      	cmp	r5, #1
 80036da:	d001      	beq.n	80036e0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x464>
 80036dc:	2500      	movs	r5, #0
 80036de:	e000      	b.n	80036e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 80036e0:	2501      	movs	r5, #1
 80036e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fe7c 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80036ec:	2d01      	cmp	r5, #1
 80036ee:	d001      	beq.n	80036f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
 80036f0:	2500      	movs	r5, #0
 80036f2:	e000      	b.n	80036f6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47a>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80036f4:	2501      	movs	r5, #1
 80036f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fe72 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8003700:	2d01      	cmp	r5, #1
 8003702:	d001      	beq.n	8003708 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48c>
 8003704:	2500      	movs	r5, #0
 8003706:	e000      	b.n	800370a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003708:	2501      	movs	r5, #1
 800370a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fe68 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8003714:	2d01      	cmp	r5, #1
 8003716:	d106      	bne.n	8003726 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4aa>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800371c:	3301      	adds	r3, #1
 800371e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003722:	e665      	b.n	80033f0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x174>
            }
        }

        return EIDSP_OK;
 8003724:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003726:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fe5a 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd fe55 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 800373a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fe50 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8003744:	4623      	mov	r3, r4
    }
 8003746:	4618      	mov	r0, r3
 8003748:	37c8      	adds	r7, #200	; 0xc8
 800374a:	46bd      	mov	sp, r7
 800374c:	bdb0      	pop	{r4, r5, r7, pc}
 800374e:	bf00      	nop

08003750 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
 800375c:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	4413      	add	r3, r2
 8003784:	3b01      	subs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003788:	697b      	ldr	r3, [r7, #20]
    }
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fdd0 	bl	8001346 <_ZNSt14_Function_baseD1Ev>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fb93 	bl	8004ee6 <_ZNSt8functionIFijjPfEEC1Ev>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_ZN2ei11ei_signal_tD1Ev>:
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ffde 	bl	8003796 <_ZNSt8functionIFijjPfEED1Ev>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
// this is the frame we work on... allocate it statically so we share between invocations
static float *ei_dsp_cont_current_frame = nullptr;
static size_t ei_dsp_cont_current_frame_size = 0;
static int ei_dsp_cont_current_frame_ix = 0;

__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 80037e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037e8:	b0c0      	sub	sp, #256	; 0x100
 80037ea:	af04      	add	r7, sp, #16
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 80037fc:	461d      	mov	r5, r3
 80037fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003806:	e895 0003 	ldmia.w	r5, {r0, r1}
 800380a:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret;

    const float sampling_freq = frequency;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800381c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003824:	461a      	mov	r2, r3
 8003826:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800382a:	2300      	movs	r3, #0
 800382c:	f7fd fdaf 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8003830:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x58>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003838:	4c9c      	ldr	r4, [pc, #624]	; (8003aac <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c8>)
 800383a:	e12c      	b.n	8003a96 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b2>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003846:	2100      	movs	r1, #0
 8003848:	f001 fa44 	bl	8004cd4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 800384c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003850:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd ff05 	bl	8001668 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 800385e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 8003862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800386a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800386e:	4890      	ldr	r0, [pc, #576]	; (8003ab0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2cc>)
 8003870:	f00d fb21 	bl	8010eb6 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8003874:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8003878:	e10d      	b.n	8003a96 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b2>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 800387a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fe70 	bl	8001564 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8003884:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xbc>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8003890:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003894:	4887      	ldr	r0, [pc, #540]	; (8003ab4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d0>)
 8003896:	f00d fb0e 	bl	8010eb6 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800389a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800389e:	e0fa      	b.n	8003a96 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b2>
    }

    // the spectral edges that we want to calculate
    matrix_t edges_matrix_in(64, 1);
 80038a0:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80038a4:	2300      	movs	r3, #0
 80038a6:	2201      	movs	r2, #1
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	f7fd fd70 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
    size_t edge_matrix_ix = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    char spectral_str[128] = { 0 };
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	227c      	movs	r2, #124	; 0x7c
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f017 fa61 	bl	801ad88 <memset>
    if (strlen(config.spectral_power_edges) > sizeof(spectral_str) - 1) {
 80038c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fcea 	bl	80002a4 <strlen>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b7f      	cmp	r3, #127	; 0x7f
 80038d4:	d901      	bls.n	80038da <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf6>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80038d6:	4c78      	ldr	r4, [pc, #480]	; (8003ab8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d4>)
 80038d8:	e0d8      	b.n	8003a8c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a8>
    }
    memcpy(spectral_str, config.spectral_power_edges, strlen(config.spectral_power_edges));
 80038da:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fcde 	bl	80002a4 <strlen>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	4621      	mov	r1, r4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f017 fa21 	bl	801ad38 <memcpy>

    // convert spectral_power_edges (string) into float array
    char *spectral_ptr = spectral_str;
 80038f6:	f107 0310 	add.w	r3, r7, #16
 80038fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 80038fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d03f      	beq.n	8003986 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1a2>
        while((*spectral_ptr) == ' ') {
 8003906:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b20      	cmp	r3, #32
 800390e:	d105      	bne.n	800391c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x138>
            spectral_ptr++;
 8003910:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003914:	3301      	adds	r3, #1
 8003916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        while((*spectral_ptr) == ' ') {
 800391a:	e7f4      	b.n	8003906 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x122>
        }

        edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 800391c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003920:	f017 f9ae 	bl	801ac80 <atof>
 8003924:	ec59 8b10 	vmov	r8, r9, d0
 8003928:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800392c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003930:	1c59      	adds	r1, r3, #1
 8003932:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	18d4      	adds	r4, r2, r3
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fd f96d 	bl	8000c1c <__aeabi_d2f>
 8003942:	4603      	mov	r3, r0
 8003944:	6023      	str	r3, [r4, #0]

        // find next (spectral) delimiter (or '\0' character)
        while((*spectral_ptr != ',')) {
 8003946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b2c      	cmp	r3, #44	; 0x2c
 800394e:	d00b      	beq.n	8003968 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x184>
            spectral_ptr++;
 8003950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003954:	3301      	adds	r3, #1
 8003956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            if (*spectral_ptr == '\0') break;
 800395a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d000      	beq.n	8003966 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
        while((*spectral_ptr != ',')) {
 8003964:	e7ef      	b.n	8003946 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x162>
            if (*spectral_ptr == '\0') break;
 8003966:	bf00      	nop
        }

        if (*spectral_ptr == '\0') {
 8003968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x196>
            spectral_ptr = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003978:	e7c1      	b.n	80038fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11a>
        }
        else  {
            spectral_ptr++;
 800397a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800397e:	3301      	adds	r3, #1
 8003980:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 8003984:	e7bb      	b.n	80038fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11a>
        }
    }
    edges_matrix_in.rows = edge_matrix_ix;
 8003986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800398a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // calculate how much room we need for the output matrix
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
        true, config.spectral_peaks_count, edges_matrix_in.rows
 800398e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003992:	4619      	mov	r1, r3
        true, config.spectral_peaks_count, edges_matrix_in.rows
 8003994:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8003998:	461a      	mov	r2, r3
 800399a:	2001      	movs	r0, #1
 800399c:	f7ff fed8 	bl	8003750 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80039a0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    );
    // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
    if (output_matrix->cols * output_matrix->rows != static_cast<uint32_t>(output_matrix_cols * config.axes)) {
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	6852      	ldr	r2, [r2, #4]
 80039ac:	fb02 f203 	mul.w	r2, r2, r3
 80039b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039b4:	4619      	mov	r1, r3
 80039b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ba:	fb03 f301 	mul.w	r3, r3, r1
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e2>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039c2:	4c3e      	ldr	r4, [pc, #248]	; (8003abc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d8>)
 80039c4:	e062      	b.n	8003a8c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a8>
    }

    output_matrix->cols = output_matrix_cols;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80039cc:	609a      	str	r2, [r3, #8]
    output_matrix->rows = config.axes;
 80039ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	605a      	str	r2, [r3, #4]

    spectral::filter_t filter_type;
    if (strcmp(config.filter_type, "low") == 0) {
 80039d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039dc:	4938      	ldr	r1, [pc, #224]	; (8003ac0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2dc>)
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fc56 	bl	8000290 <strcmp>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x20e>
        filter_type = spectral::filter_lowpass;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80039f0:	e00f      	b.n	8003a12 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x22e>
    }
    else if (strcmp(config.filter_type, "high") == 0) {
 80039f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039f6:	4933      	ldr	r1, [pc, #204]	; (8003ac4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e0>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fc49 	bl	8000290 <strcmp>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x228>
        filter_type = spectral::filter_highpass;
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003a0a:	e002      	b.n	8003a12 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x22e>
    }
    else {
        filter_type = spectral::filter_none;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    }

    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003a12:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
        sampling_freq, filter_type, config.filter_cutoff, config.filter_order,
 8003a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003a1a:	b2dd      	uxtb	r5, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 8003a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003a20:	b29b      	uxth	r3, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 8003a22:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8003a2c:	f897 40e7 	ldrb.w	r4, [r7, #231]	; 0xe7
 8003a30:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8003a34:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003a38:	9102      	str	r1, [sp, #8]
 8003a3a:	9201      	str	r2, [sp, #4]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	eeb0 1a47 	vmov.f32	s2, s14
 8003a42:	462b      	mov	r3, r5
 8003a44:	eef0 0a67 	vmov.f32	s1, s15
 8003a48:	4622      	mov	r2, r4
 8003a4a:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8003a4e:	4601      	mov	r1, r0
 8003a50:	68b8      	ldr	r0, [r7, #8]
 8003a52:	f7ff fc13 	bl	800327c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8003a56:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (ret != EIDSP_OK) {
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x28e>
        ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8003a62:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003a66:	4818      	ldr	r0, [pc, #96]	; (8003ac8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2e4>)
 8003a68:	f00d fa25 	bl	8010eb6 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8003a6c:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8003a70:	e00c      	b.n	8003a8c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a8>
    }

    // flatten again
    output_matrix->cols = config.axes * output_matrix_cols;
 8003a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a76:	461a      	mov	r2, r3
 8003a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7c:	fb03 f202 	mul.w	r2, r3, r2
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2201      	movs	r2, #1
 8003a88:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 8003a8a:	2400      	movs	r4, #0
    matrix_t edges_matrix_in(64, 1);
 8003a8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fca7 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 8003a96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fca2 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8003aa0:	4623      	mov	r3, r4
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	37f0      	adds	r7, #240	; 0xf0
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003aac:	fffffc16 	.word	0xfffffc16
 8003ab0:	0801dc88 	.word	0x0801dc88
 8003ab4:	0801dcac 	.word	0x0801dcac
 8003ab8:	fffffc10 	.word	0xfffffc10
 8003abc:	fffffc14 	.word	0xfffffc14
 8003ac0:	0801db60 	.word	0x0801db60
 8003ac4:	0801dcd4 	.word	0x0801dcd4
 8003ac8:	0801dcdc 	.word	0x0801dcdc
 8003acc:	00000000 	.word	0x00000000

08003ad0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:
    return EIDSP_OK;
}

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8003ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ad4:	b09e      	sub	sp, #120	; 0x78
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	49c3      	ldr	r1, [pc, #780]	; (8003e00 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x330>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fbcc 	bl	8000290 <strcmp>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 8003b02:	2303      	movs	r3, #3
 8003b04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00f      	beq.n	8003b38 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x68>
        ei_printf("out_matrix = %d items\n", static_cast<int>(output_matrix->rows * output_matrix->cols));
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	6892      	ldr	r2, [r2, #8]
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	48b7      	ldr	r0, [pc, #732]	; (8003e04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x334>)
 8003b28:	f00d f9c5 	bl	8010eb6 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %d items\n", static_cast<int>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	48b6      	ldr	r0, [pc, #728]	; (8003e08 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x338>)
 8003b30:	f00d f9c1 	bl	8010eb6 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003b34:	4cb5      	ldr	r4, [pc, #724]	; (8003e0c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x33c>)
 8003b36:	e189      	b.n	8003e4c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    }

    size_t output_ix = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	673b      	str	r3, [r7, #112]	; 0x70

    const int32_t iRedToGray = (int32_t)(0.299f * 65536.0f);
 8003b3c:	f644 438b 	movw	r3, #19595	; 0x4c8b
 8003b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    const int32_t iGreenToGray = (int32_t)(0.587f * 65536.0f);
 8003b42:	f249 6345 	movw	r3, #38469	; 0x9645
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t iBlueToGray = (int32_t)(0.114f * 65536.0f);
 8003b48:	f641 532f 	movw	r3, #7471	; 0x1d2f
 8003b4c:	667b      	str	r3, [r7, #100]	; 0x64

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 8003b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b52:	663b      	str	r3, [r7, #96]	; 0x60
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f080 8170 	bcs.w	8003e4a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37a>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	d803      	bhi.n	8003b7a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xaa>
 8003b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	e001      	b.n	8003b7e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xae>
 8003b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b7e:	65bb      	str	r3, [r7, #88]	; 0x58

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b82:	461a      	mov	r2, r3
 8003b84:	f107 0014 	add.w	r0, r7, #20
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b8c:	f7fd fbff 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xcc>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003b96:	4c9e      	ldr	r4, [pc, #632]	; (8003e10 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x340>)
 8003b98:	2500      	movs	r5, #0
 8003b9a:	e14a      	b.n	8003e32 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x362>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ba4:	f001 f896 	bl	8004cd4 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
 8003bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	f080 8139 	bcs.w	8003e28 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x358>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc6:	ee17 3a90 	vmov	r3, s15
 8003bca:	653b      	str	r3, [r7, #80]	; 0x50

            if (channel_count == 3) {
 8003bcc:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	f040 80a5 	bne.w	8003d20 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x250>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	ee07 3a90 	vmov	s15, r3
 8003be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003be4:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bfe:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c06:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c16:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003c22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c24:	f7fc fcaa 	bl	800057c <__aeabi_f2d>
 8003c28:	a373      	add	r3, pc, #460	; (adr r3, 8003df8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc fe27 	bl	8000880 <__aeabi_ddiv>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	ec43 2b17 	vmov	d7, r2, r3
 8003c3a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c3e:	eef0 0a67 	vmov.f32	s1, s15
 8003c42:	f014 fba5 	bl	8018390 <round>
 8003c46:	ec51 0b10 	vmov	r0, r1, d0
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8003c50:	f7fc fb34 	bl	80002bc <__aeabi_dsub>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4690      	mov	r8, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c62:	1c59      	adds	r1, r3, #1
 8003c64:	6739      	str	r1, [r7, #112]	; 0x70
 8003c66:	18d5      	adds	r5, r2, r3
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	f7fc ff8e 	bl	8000b8c <__aeabi_d2iz>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003c76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c78:	f7fc fc80 	bl	800057c <__aeabi_f2d>
 8003c7c:	a35e      	add	r3, pc, #376	; (adr r3, 8003df8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fdfd 	bl	8000880 <__aeabi_ddiv>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	ec43 2b17 	vmov	d7, r2, r3
 8003c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8003c92:	eef0 0a67 	vmov.f32	s1, s15
 8003c96:	f014 fb7b 	bl	8018390 <round>
 8003c9a:	ec51 0b10 	vmov	r0, r1, d0
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	4b5d      	ldr	r3, [pc, #372]	; (8003e18 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8003ca4:	f7fc fb0a 	bl	80002bc <__aeabi_dsub>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4690      	mov	r8, r2
 8003cae:	4699      	mov	r9, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb6:	1c59      	adds	r1, r3, #1
 8003cb8:	6739      	str	r1, [r7, #112]	; 0x70
 8003cba:	18d5      	adds	r5, r2, r3
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fc ff64 	bl	8000b8c <__aeabi_d2iz>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	702b      	strb	r3, [r5, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ccc:	f7fc fc56 	bl	800057c <__aeabi_f2d>
 8003cd0:	a349      	add	r3, pc, #292	; (adr r3, 8003df8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fdd3 	bl	8000880 <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	ec43 2b17 	vmov	d7, r2, r3
 8003ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce6:	eef0 0a67 	vmov.f32	s1, s15
 8003cea:	f014 fb51 	bl	8018390 <round>
 8003cee:	ec51 0b10 	vmov	r0, r1, d0
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	4b48      	ldr	r3, [pc, #288]	; (8003e18 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8003cf8:	f7fc fae0 	bl	80002bc <__aeabi_dsub>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4690      	mov	r8, r2
 8003d02:	4699      	mov	r9, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0a:	1c59      	adds	r1, r3, #1
 8003d0c:	6739      	str	r1, [r7, #112]	; 0x70
 8003d0e:	18d5      	adds	r5, r2, r3
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc ff3a 	bl	8000b8c <__aeabi_d2iz>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	702b      	strb	r3, [r5, #0]
 8003d1e:	e067      	b.n	8003df0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
                    else if (gray > 127) gray = 127;
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
                }
                // slow code path
                else {
                    float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8003d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d22:	0c1b      	lsrs	r3, r3, #16
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d2e:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d36:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
                    float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d48:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003d4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
                    float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8003d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d60:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003e14 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x344>
 8003d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8003d6c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d70:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003e1c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34c>
 8003d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d7c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003e20 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x350>
 8003d80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d8c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003e24 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x354>
 8003d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003d9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d9e:	f7fc fbed 	bl	800057c <__aeabi_f2d>
 8003da2:	a315      	add	r3, pc, #84	; (adr r3, 8003df8 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x328>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f7fc fd6a 	bl	8000880 <__aeabi_ddiv>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	ec43 2b17 	vmov	d7, r2, r3
 8003db4:	eeb0 0a47 	vmov.f32	s0, s14
 8003db8:	eef0 0a67 	vmov.f32	s1, s15
 8003dbc:	f014 fae8 	bl	8018390 <round>
 8003dc0:	ec51 0b10 	vmov	r0, r1, d0
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x348>)
 8003dca:	f7fc fa77 	bl	80002bc <__aeabi_dsub>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	6739      	str	r1, [r7, #112]	; 0x70
 8003de0:	18d5      	adds	r5, r2, r3
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fed1 	bl	8000b8c <__aeabi_d2iz>
 8003dea:	4603      	mov	r3, r0
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	3301      	adds	r3, #1
 8003df4:	657b      	str	r3, [r7, #84]	; 0x54
 8003df6:	e6d9      	b.n	8003bac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xdc>
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	3fb19d9b 	.word	0x3fb19d9b
 8003e00:	0801df20 	.word	0x0801df20
 8003e04:	0801df2c 	.word	0x0801df2c
 8003e08:	0801df44 	.word	0x0801df44
 8003e0c:	fffffc14 	.word	0xfffffc14
 8003e10:	fffffc16 	.word	0xfffffc16
 8003e14:	437f0000 	.word	0x437f0000
 8003e18:	40600000 	.word	0x40600000
 8003e1c:	3e991687 	.word	0x3e991687
 8003e20:	3f1645a2 	.word	0x3f1645a2
 8003e24:	3de978d5 	.word	0x3de978d5
                }
            }
        }

        bytes_left -= elements_to_read;
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
        matrix_t input_matrix(elements_to_read, config.axes);
 8003e30:	2501      	movs	r5, #1
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fad4 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 8003e3c:	2d01      	cmp	r5, #1
 8003e3e:	d105      	bne.n	8003e4c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x37c>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8003e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e48:	e689      	b.n	8003b5e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x8e>
    }

    return EIDSP_OK;
 8003e4a:	2400      	movs	r4, #0
 8003e4c:	4623      	mov	r3, r4
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3778      	adds	r7, #120	; 0x78
 8003e52:	46bd      	mov	sp, r7
 8003e54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003e58 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fc97 	bl	80037b0 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	f000 f832 	bl	8003f0c <_ZN14SignalWithAxes8get_dataEjjPf>
 8003ea8:	4603      	mov	r3, r0
        };
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d102      	bne.n	8003eca <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	e019      	b.n	8003efe <_ZN14SignalWithAxes10get_signalEv+0x4a>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <_ZN14SignalWithAxes10get_signalEv+0x54>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	fb02 f203 	mul.w	r2, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	61da      	str	r2, [r3, #28]
        };
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 020c 	add.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f001 f823 	bl	8004f40 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	330c      	adds	r3, #12
    }
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	aaaaaaab 	.word	0xaaaaaaab

08003f0c <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	623b      	str	r3, [r7, #32]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d228      	bcs.n	8003fa4 <_ZN14SignalWithAxes8get_dataEjjPf+0x98>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d21d      	bcs.n	8003f9c <_ZN14SignalWithAxes8get_dataEjjPf+0x90>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	18d1      	adds	r1, r2, r3
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	627a      	str	r2, [r7, #36]	; 0x24
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	2201      	movs	r2, #1
 8003f84:	f000 fea6 	bl	8004cd4 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003f88:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <_ZN14SignalWithAxes8get_dataEjjPf+0x88>
                    return r;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	e008      	b.n	8003fa6 <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e7dc      	b.n	8003f56 <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	3303      	adds	r3, #3
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	e7d0      	b.n	8003f46 <_ZN14SignalWithAxes8get_dataEjjPf+0x3a>
                }
            }
        }

        return 0;
 8003fa4:	2300      	movs	r3, #0
    }
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fc05 	bl	80037ca <_ZN2ei11ei_signal_tD1Ev>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6178      	str	r0, [r7, #20]
 8003fd4:	6139      	str	r1, [r7, #16]
 8003fd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fda:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d837      	bhi.n	800405c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004006:	ed97 7a02 	vldr	s14, [r7, #8]
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	4619      	mov	r1, r3
 8004022:	4811      	ldr	r0, [pc, #68]	; (8004068 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 8004024:	f00c ff47 	bl	8010eb6 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004028:	ed97 0a06 	vldr	s0, [r7, #24]
 800402c:	f00c ff58 	bl	8010ee0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004030:	480e      	ldr	r0, [pc, #56]	; (800406c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 8004032:	f00c ff40 	bl	8010eb6 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8004036:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e7c4      	b.n	8003fe6 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 800405c:	bf00      	nop
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000000 	.word	0x20000000
 8004068:	0801e050 	.word	0x0801e050
 800406c:	0801e030 	.word	0x0801e030

08004070 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d82a      	bhi.n	80040de <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	4413      	add	r3, r2
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	613b      	str	r3, [r7, #16]

        if (debug) {
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4811      	ldr	r0, [pc, #68]	; (80040ec <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 80040a6:	f00c ff06 	bl	8010eb6 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80040aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80040ae:	f00c ff17 	bl	8010ee0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80040b2:	480f      	ldr	r0, [pc, #60]	; (80040f0 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 80040b4:	f00c feff 	bl	8010eb6 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 80040b8:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	3304      	adds	r3, #4
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3301      	adds	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e7d1      	b.n	8004082 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000000 	.word	0x20000000
 80040ec:	0801e050 	.word	0x0801e050
 80040f0:	0801e030 	.word	0x0801e030

080040f4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    ei_unique_ptr_t& p_tensor_arena) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_calloc);
 8004102:	4842      	ldr	r0, [pc, #264]	; (800420c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x118>)
 8004104:	f012 faf0 	bl	80166e8 <_Z18trained_model_initPFPvjjE>
 8004108:	4603      	mov	r3, r0
 800410a:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	4619      	mov	r1, r3
 8004116:	483e      	ldr	r0, [pc, #248]	; (8004210 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x11c>)
 8004118:	f00c fecd 	bl	8010eb6 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 800411c:	f06f 0305 	mvn.w	r3, #5
 8004120:	e070      	b.n	8004204 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x110>
    }
    p_tensor_arena = ei_unique_ptr_t(tensor_arena, ei_aligned_free);
#endif
#endif

    *ctx_start_us = ei_read_timer_us();
 8004122:	f00c feb9 	bl	8010e98 <_Z16ei_read_timer_usv>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	e9c1 2300 	strd	r2, r3, [r1]
    resolver.AddCustom("TFLite_Detection_PostProcess", &post_process_op);
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 8004130:	2000      	movs	r0, #0
 8004132:	f012 fd19 	bl	8016b68 <_Z19trained_model_inputi>
 8004136:	4602      	mov	r2, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_DATA_TENSOR);
 800413c:	2000      	movs	r0, #0
 800413e:	f012 fd25 	bl	8016b8c <_Z20trained_model_outputi>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d058      	beq.n	8004202 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x10e>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b09      	cmp	r3, #9
 8004158:	d006      	beq.n	8004168 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x74>
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x124>)
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 800415e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004162:	482f      	ldr	r0, [pc, #188]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 8004164:	f016 fd6e 	bl	801ac44 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b09      	cmp	r3, #9
 8004170:	d006      	beq.n	8004180 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x8c>
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x130>)
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 8004176:	f240 21bd 	movw	r1, #701	; 0x2bd
 800417a:	4829      	ldr	r0, [pc, #164]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 800417c:	f016 fd62 	bl	801ac44 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	edd3 7a03 	vldr	s15, [r3, #12]
 8004188:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004228 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x134>
 800418c:	eef4 7a47 	vcmp.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d006      	beq.n	80041a4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xb0>
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x138>)
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 800419a:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 800419e:	4820      	ldr	r0, [pc, #128]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 80041a0:	f016 fd50 	bl	801ac44 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80041ae:	d006      	beq.n	80041be <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xca>
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x13c>)
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 80041b4:	f240 21c5 	movw	r1, #709	; 0x2c5
 80041b8:	4819      	ldr	r0, [pc, #100]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 80041ba:	f016 fd43 	bl	801ac44 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80041c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004234 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x140>
 80041ca:	eef4 7a47 	vcmp.f32	s15, s14
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d006      	beq.n	80041e2 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0xee>
 80041d4:	4b18      	ldr	r3, [pc, #96]	; (8004238 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x144>)
 80041d6:	4a11      	ldr	r2, [pc, #68]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 80041d8:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80041dc:	4810      	ldr	r0, [pc, #64]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 80041de:	f016 fd31 	bl	801ac44 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80041ec:	d006      	beq.n	80041fc <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x108>
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x148>)
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x128>)
 80041f2:	f240 21c9 	movw	r1, #713	; 0x2c9
 80041f6:	480a      	ldr	r0, [pc, #40]	; (8004220 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x12c>)
 80041f8:	f016 fd24 	bl	801ac44 <__assert_func>
        }
#endif
        tflite_first_run = false;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE+0x120>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	08001499 	.word	0x08001499
 8004210:	0801e058 	.word	0x0801e058
 8004214:	20000050 	.word	0x20000050
 8004218:	0801e08c 	.word	0x0801e08c
 800421c:	0801e0c4 	.word	0x0801e0c4
 8004220:	0801e138 	.word	0x0801e138
 8004224:	0801e1c0 	.word	0x0801e1c0
 8004228:	3d8cecd9 	.word	0x3d8cecd9
 800422c:	0801e1f8 	.word	0x0801e1f8
 8004230:	0801e234 	.word	0x0801e234
 8004234:	3b800000 	.word	0x3b800000
 8004238:	0801e278 	.word	0x0801e278
 800423c:	0801e2b8 	.word	0x0801e2b8

08004240 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    if(trained_model_invoke() != kTfLiteOk) {
 800424e:	f012 fcaf 	bl	8016bb0 <_Z20trained_model_invokev>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x28>
        return EI_IMPULSE_TFLITE_ERROR;
 8004262:	f06f 0302 	mvn.w	r3, #2
 8004266:	e060      	b.n	800432a <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_us = ei_read_timer_us();
 8004268:	f00c fe16 	bl	8010e98 <_Z16ei_read_timer_usv>
 800426c:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8004270:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004278:	1a84      	subs	r4, r0, r2
 800427a:	eb61 0503 	sbc.w	r5, r1, r3
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004284:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800428e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f7fc fd11 	bl	8000cbc <__aeabi_ldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80042a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x76>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4619      	mov	r1, r3
 80042b0:	4820      	ldr	r0, [pc, #128]	; (8004334 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf4>)
 80042b2:	f00c fe00 	bl	8010eb6 <_Z9ei_printfPKcz>
    }
#elif EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b09      	cmp	r3, #9
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb6>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80042e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80042e4:	461a      	mov	r2, r3
 80042e6:	eef0 0a47 	vmov.f32	s1, s14
 80042ea:	eeb0 0a67 	vmov.f32	s0, s15
 80042ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042f0:	f7ff fe6c 	bl	8003fcc <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 80042f4:	e007      	b.n	8004306 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xc6>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80042fe:	4619      	mov	r1, r3
 8004300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004302:	f7ff feb5 	bl	8004070 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 8004306:	480c      	ldr	r0, [pc, #48]	; (8004338 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xf8>)
 8004308:	f012 fc88 	bl	8016c1c <_Z19trained_model_resetPFvPvE>
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800430c:	f00c fdbc 	bl	8010e88 <_Z29ei_run_impulse_check_canceledv>
 8004310:	4603      	mov	r3, r0
 8004312:	f113 0f02 	cmn.w	r3, #2
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xe8>
        return EI_IMPULSE_CANCELED;
 8004322:	f06f 0301 	mvn.w	r3, #1
 8004326:	e000      	b.n	800432a <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xea>
    }

    return EI_IMPULSE_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bdb0      	pop	{r4, r5, r7, pc}
 8004332:	bf00      	nop
 8004334:	0801e300 	.word	0x0801e300
 8004338:	0800151d 	.word	0x0800151d

0800433c <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b09e      	sub	sp, #120	; 0x78
 8004342:	af02      	add	r7, sp, #8
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	4613      	mov	r3, r2
 800434a:	71fb      	strb	r3, [r7, #7]
 800434c:	2400      	movs	r4, #0
        TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        TfLiteTensor* output_scores;
        TfLiteTensor* output_labels;
#endif
        uint64_t ctx_start_us = ei_read_timer_us();
 800434e:	f00c fda3 	bl	8010e98 <_Z16ei_read_timer_usv>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 800435a:	4b88      	ldr	r3, [pc, #544]	; (800457c <run_inference+0x240>)
 800435c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004362:	f107 0320 	add.w	r3, r7, #32
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe08 	bl	8004f7e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004376:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800437a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800437e:	f7ff feb9 	bl	80040f4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            &output_labels,
            &output_scores,
    #endif
            &interpreter, p_tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8004388:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <run_inference+0x5c>
            return init_res;
 8004390:	f997 4067 	ldrsb.w	r4, [r7, #103]	; 0x67
 8004394:	2500      	movs	r5, #0
 8004396:	e075      	b.n	8004484 <run_inference+0x148>
        }

        uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8004398:	f107 0320 	add.w	r3, r7, #32
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fe24 	bl	8004fea <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 80043a2:	6638      	str	r0, [r7, #96]	; 0x60
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80043b4:	2300      	movs	r3, #0
 80043b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6892      	ldr	r2, [r2, #8]
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d239      	bcs.n	800443e <run_inference+0x102>
            // Quantize the input if it is int8
            if (int8_input) {
 80043ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d025      	beq.n	800441e <run_inference+0xe2>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	ed93 7a00 	vldr	s14, [r3]
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80043e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043ea:	eeb0 0a66 	vmov.f32	s0, s13
 80043ee:	f7fc fe97 	bl	8001120 <_ZSt5roundf>
 80043f2:	eeb0 7a40 	vmov.f32	s14, s0
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440c:	4413      	add	r3, r2
 800440e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004412:	edc7 7a00 	vstr	s15, [r7]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	b252      	sxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e00b      	b.n	8004436 <run_inference+0xfa>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	3301      	adds	r3, #1
 800443a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800443c:	e7bc      	b.n	80043b8 <run_inference+0x7c>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 800443e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444e:	f7ff fef7 	bl	8004240 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8004458:	f00c fd1e 	bl	8010e98 <_Z16ei_read_timer_usv>
 800445c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004460:	ebb0 0a02 	subs.w	sl, r0, r2
 8004464:	eb61 0b03 	sbc.w	fp, r1, r3
 8004468:	4652      	mov	r2, sl
 800446a:	465b      	mov	r3, fp
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

        if (run_res != EI_IMPULSE_OK) {
 8004472:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <run_inference+0x146>
            return run_res;
 800447a:	f997 405e 	ldrsb.w	r4, [r7, #94]	; 0x5e
 800447e:	2500      	movs	r5, #0
 8004480:	e000      	b.n	8004484 <run_inference+0x148>
        ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 8004482:	2501      	movs	r5, #1
 8004484:	f107 0320 	add.w	r3, r7, #32
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fd8d 	bl	8004fa8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 800448e:	2d01      	cmp	r5, #1
 8004490:	d16d      	bne.n	800456e <run_inference+0x232>
 8004492:	bf00      	nop

#if EI_CLASSIFIER_HAS_ANOMALY == 1

    // Anomaly detection
    {
        uint64_t anomaly_start_us = ei_read_timer_us();
 8004494:	f00c fd00 	bl	8010e98 <_Z16ei_read_timer_usv>
 8004498:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50

        float input[EI_CLASSIFIER_ANOM_AXIS_SIZE];
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 800449c:	2300      	movs	r3, #0
 800449e:	66bb      	str	r3, [r7, #104]	; 0x68
 80044a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d813      	bhi.n	80044ce <run_inference+0x192>
            input[ix] = fmatrix->buffer[EI_CLASSIFIER_ANOM_AXIS[ix]];
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4935      	ldr	r1, [pc, #212]	; (8004580 <run_inference+0x244>)
 80044ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80044c0:	440b      	add	r3, r1
 80044c2:	3b5c      	subs	r3, #92	; 0x5c
 80044c4:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < EI_CLASSIFIER_ANOM_AXIS_SIZE; ix++) {
 80044c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c8:	3301      	adds	r3, #1
 80044ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80044cc:	e7e8      	b.n	80044a0 <run_inference+0x164>
        }
        standard_scaler(input, ei_classifier_anom_scale, ei_classifier_anom_mean, EI_CLASSIFIER_ANOM_AXIS_SIZE);
 80044ce:	f107 0014 	add.w	r0, r7, #20
 80044d2:	2303      	movs	r3, #3
 80044d4:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <run_inference+0x248>)
 80044d6:	492c      	ldr	r1, [pc, #176]	; (8004588 <run_inference+0x24c>)
 80044d8:	f7fc fe32 	bl	8001140 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
        float anomaly = get_min_distance_to_cluster(
 80044dc:	f107 0014 	add.w	r0, r7, #20
 80044e0:	2320      	movs	r3, #32
 80044e2:	4a2a      	ldr	r2, [pc, #168]	; (800458c <run_inference+0x250>)
 80044e4:	2103      	movs	r1, #3
 80044e6:	f7fc fea7 	bl	8001238 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 80044ea:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            input, EI_CLASSIFIER_ANOM_AXIS_SIZE, ei_classifier_anom_clusters, EI_CLASSIFIER_ANOM_CLUSTER_COUNT);

        uint64_t anomaly_end_us = ei_read_timer_us();
 80044ee:	f00c fcd3 	bl	8010e98 <_Z16ei_read_timer_usv>
 80044f2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

        result->timing.anomaly_us = anomaly_end_us - anomaly_start_us;
 80044f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80044fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044fe:	ebb0 0802 	subs.w	r8, r0, r2
 8004502:	eb61 0903 	sbc.w	r9, r1, r3
 8004506:	4642      	mov	r2, r8
 8004508:	464b      	mov	r3, r9
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        result->timing.anomaly = (int)(result->timing.anomaly_us / 1000);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	f7fc fbcd 	bl	8000cbc <__aeabi_ldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	635a      	str	r2, [r3, #52]	; 0x34
        result->anomaly = anomaly;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452e:	621a      	str	r2, [r3, #32]

        if (debug) {
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00c      	beq.n	8004550 <run_inference+0x214>
            ei_printf("Anomaly score (time: %d ms.): ", result->timing.anomaly);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	4619      	mov	r1, r3
 800453c:	4814      	ldr	r0, [pc, #80]	; (8004590 <run_inference+0x254>)
 800453e:	f00c fcba 	bl	8010eb6 <_Z9ei_printfPKcz>
            ei_printf_float(anomaly);
 8004542:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8004546:	f00c fccb 	bl	8010ee0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 800454a:	4812      	ldr	r0, [pc, #72]	; (8004594 <run_inference+0x258>)
 800454c:	f00c fcb3 	bl	8010eb6 <_Z9ei_printfPKcz>
        }
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004550:	f00c fc9a 	bl	8010e88 <_Z29ei_run_impulse_check_canceledv>
 8004554:	4603      	mov	r3, r0
 8004556:	f113 0f02 	cmn.w	r3, #2
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <run_inference+0x230>
        return EI_IMPULSE_CANCELED;
 8004566:	f06f 0401 	mvn.w	r4, #1
 800456a:	e000      	b.n	800456e <run_inference+0x232>
    }

    return EI_IMPULSE_OK;
 800456c:	2400      	movs	r4, #0
 800456e:	4623      	mov	r3, r4
}
 8004570:	4618      	mov	r0, r3
 8004572:	3770      	adds	r7, #112	; 0x70
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	0800151d 	.word	0x0800151d
 8004580:	0801f630 	.word	0x0801f630
 8004584:	0801f644 	.word	0x0801f644
 8004588:	0801f638 	.word	0x0801f638
 800458c:	0801f650 	.word	0x0801f650
 8004590:	0801e320 	.word	0x0801e320
 8004594:	0801e030 	.word	0x0801e030

08004598 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800459c:	b0a1      	sub	sp, #132	; 0x84
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	4613      	mov	r3, r2
 80045a6:	71fb      	strb	r3, [r7, #7]
 80045a8:	2600      	movs	r6, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 80045aa:	f000 f8ff 	bl	80047ac <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <run_classifier+0x38>
        return run_classifier_image_quantized(signal, result, debug);
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	461a      	mov	r2, r3
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f8fb 	bl	80047c0 <run_classifier_image_quantized>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461e      	mov	r6, r3
 80045ce:	e0d6      	b.n	800477e <run_classifier+0x1e6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80045d0:	2250      	movs	r2, #80	; 0x50
 80045d2:	2100      	movs	r1, #0
 80045d4:	68b8      	ldr	r0, [r7, #8]
 80045d6:	f016 fbd7 	bl	801ad88 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80045da:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80045de:	2300      	movs	r3, #0
 80045e0:	2221      	movs	r2, #33	; 0x21
 80045e2:	2101      	movs	r1, #1
 80045e4:	f7fc fed3 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_us = ei_read_timer_us();
 80045e8:	f00c fc56 	bl	8010e98 <_Z16ei_read_timer_usv>
 80045ec:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80045f4:	2300      	movs	r3, #0
 80045f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80045f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d16c      	bne.n	80046d8 <run_classifier+0x140>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80045fe:	4963      	ldr	r1, [pc, #396]	; (800478c <run_classifier+0x1f4>)
 8004600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004610:	461d      	mov	r5, r3
 8004612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 800461a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800461c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800461e:	4413      	add	r3, r2
 8004620:	2b21      	cmp	r3, #33	; 0x21
 8004622:	d905      	bls.n	8004630 <run_classifier+0x98>
            ei_printf("ERR: Would write outside feature buffer\n");
 8004624:	485a      	ldr	r0, [pc, #360]	; (8004790 <run_classifier+0x1f8>)
 8004626:	f00c fc46 	bl	8010eb6 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800462a:	f06f 0604 	mvn.w	r6, #4
 800462e:	e0a0      	b.n	8004772 <run_classifier+0x1da>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8004630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800463e:	460a      	mov	r2, r1
 8004640:	2101      	movs	r1, #1
 8004642:	f7fc fea4 	bl	800138e <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8004646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464a:	f107 0010 	add.w	r0, r7, #16
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f7ff fc02 	bl	8003e58 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8004654:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fc2a 	bl	8003eb4 <_ZN14SignalWithAxes10get_signalEv>
 8004660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004666:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8004794 <run_classifier+0x1fc>
 800466a:	4619      	mov	r1, r3
 800466c:	47a0      	blx	r4
 800466e:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8004670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <run_classifier+0xee>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004676:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004678:	4847      	ldr	r0, [pc, #284]	; (8004798 <run_classifier+0x200>)
 800467a:	f00c fc1c 	bl	8010eb6 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800467e:	f06f 0604 	mvn.w	r6, #4
 8004682:	2400      	movs	r4, #0
 8004684:	e013      	b.n	80046ae <run_classifier+0x116>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004686:	f00c fbff 	bl	8010e88 <_Z29ei_run_impulse_check_canceledv>
 800468a:	4603      	mov	r3, r0
 800468c:	f113 0f02 	cmn.w	r3, #2
 8004690:	bf0c      	ite	eq
 8004692:	2301      	moveq	r3, #1
 8004694:	2300      	movne	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <run_classifier+0x10c>
            return EI_IMPULSE_CANCELED;
 800469c:	f06f 0601 	mvn.w	r6, #1
 80046a0:	2400      	movs	r4, #0
 80046a2:	e004      	b.n	80046ae <run_classifier+0x116>
        }

        out_features_index += block.n_output_features;
 80046a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80046a8:	4413      	add	r3, r2
 80046aa:	67fb      	str	r3, [r7, #124]	; 0x7c
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 80046ac:	2401      	movs	r4, #1
 80046ae:	f107 0310 	add.w	r3, r7, #16
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fc7b 	bl	8003fae <_ZN14SignalWithAxesD1Ev>
 80046b8:	2c01      	cmp	r4, #1
 80046ba:	d001      	beq.n	80046c0 <run_classifier+0x128>
 80046bc:	2400      	movs	r4, #0
 80046be:	e000      	b.n	80046c2 <run_classifier+0x12a>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80046c0:	2401      	movs	r4, #1
 80046c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc fe8c 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 80046cc:	2c01      	cmp	r4, #1
 80046ce:	d150      	bne.n	8004772 <run_classifier+0x1da>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80046d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d2:	3301      	adds	r3, #1
 80046d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046d6:	e78f      	b.n	80045f8 <run_classifier+0x60>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 80046d8:	f00c fbde 	bl	8010e98 <_Z16ei_read_timer_usv>
 80046dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046e0:	ebb0 0802 	subs.w	r8, r0, r2
 80046e4:	eb61 0903 	sbc.w	r9, r1, r3
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80046f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f7fc fadc 	bl	8000cbc <__aeabi_ldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c

    if (debug) {
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01f      	beq.n	8004752 <run_classifier+0x1ba>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4619      	mov	r1, r3
 8004718:	4820      	ldr	r0, [pc, #128]	; (800479c <run_classifier+0x204>)
 800471a:	f00c fbcc 	bl	8010eb6 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800471e:	2300      	movs	r3, #0
 8004720:	677b      	str	r3, [r7, #116]	; 0x74
 8004722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004724:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004726:	429a      	cmp	r2, r3
 8004728:	d210      	bcs.n	800474c <run_classifier+0x1b4>
            ei_printf_float(features_matrix.buffer[ix]);
 800472a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800472c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	f00c fbd1 	bl	8010ee0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800473e:	4818      	ldr	r0, [pc, #96]	; (80047a0 <run_classifier+0x208>)
 8004740:	f00c fbb9 	bl	8010eb6 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8004744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004746:	3301      	adds	r3, #1
 8004748:	677b      	str	r3, [r7, #116]	; 0x74
 800474a:	e7ea      	b.n	8004722 <run_classifier+0x18a>
        }
        ei_printf("\n");
 800474c:	4815      	ldr	r0, [pc, #84]	; (80047a4 <run_classifier+0x20c>)
 800474e:	f00c fbb2 	bl	8010eb6 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <run_classifier+0x1c6>
        ei_printf("Running neural network...\n");
 8004758:	4813      	ldr	r0, [pc, #76]	; (80047a8 <run_classifier+0x210>)
 800475a:	f00c fbac 	bl	8010eb6 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 800475e:	79fa      	ldrb	r2, [r7, #7]
 8004760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fde8 	bl	800433c <run_inference>
 800476c:	4603      	mov	r3, r0
 800476e:	461e      	mov	r6, r3
 8004770:	e000      	b.n	8004774 <run_classifier+0x1dc>
            return EI_IMPULSE_DSP_ERROR;
 8004772:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc fe33 	bl	80013e4 <_ZN2ei9ei_matrixD1Ev>
 800477e:	4633      	mov	r3, r6
}
 8004780:	4618      	mov	r0, r3
 8004782:	3784      	adds	r7, #132	; 0x84
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800478a:	bf00      	nop
 800478c:	2000003c 	.word	0x2000003c
 8004790:	0801df74 	.word	0x0801df74
 8004794:	427a0000 	.word	0x427a0000
 8004798:	0801dfec 	.word	0x0801dfec
 800479c:	0801e340 	.word	0x0801e340
 80047a0:	0801e02c 	.word	0x0801e02c
 80047a4:	0801e030 	.word	0x0801e030
 80047a8:	0801e034 	.word	0x0801e034

080047ac <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
#if (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE)
    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
#endif

#if EI_CLASSIFIER_HAS_ANOMALY == 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80047b0:	f06f 0308 	mvn.w	r3, #8
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    return EI_IMPULSE_OK;
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80047c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c4:	b099      	sub	sp, #100	; 0x64
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 80047d0:	f7ff ffec 	bl	80047ac <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (verify_res != EI_IMPULSE_OK) {
 80047da:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <run_classifier_image_quantized+0x28>
        return verify_res;
 80047e2:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 80047e6:	e0de      	b.n	80049a6 <run_classifier_image_quantized+0x1e6>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80047e8:	2250      	movs	r2, #80	; 0x50
 80047ea:	2100      	movs	r1, #0
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f016 facb 	bl	801ad88 <memset>
    TfLiteTensor* output;
#if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
#endif
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 80047f2:	4b73      	ldr	r3, [pc, #460]	; (80049c0 <run_classifier_image_quantized+0x200>)
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80047fa:	f107 0320 	add.w	r3, r7, #32
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fbbc 	bl	8004f7e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_us, &input, &output,
 8004806:	f107 0320 	add.w	r3, r7, #32
 800480a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800480e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004812:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004816:	f7ff fc6d 	bl	80040f4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_RSt10unique_ptrIvPFvPvEE>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        &output_scores,
    #endif
        &interpreter,
        p_tensor_arena);
#endif
    if (init_res != EI_IMPULSE_OK) {
 8004820:	f997 3052 	ldrsb.w	r3, [r7, #82]	; 0x52
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <run_classifier_image_quantized+0x6e>
        return init_res;
 8004828:	f997 4052 	ldrsb.w	r4, [r7, #82]	; 0x52
 800482c:	e0b6      	b.n	800499c <run_classifier_image_quantized+0x1dc>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b09      	cmp	r3, #9
 8004834:	d002      	beq.n	800483c <run_classifier_image_quantized+0x7c>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8004836:	f06f 0408 	mvn.w	r4, #8
 800483a:	e0af      	b.n	800499c <run_classifier_image_quantized+0x1dc>
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 800483c:	f00c fb2c 	bl	8010e98 <_Z16ei_read_timer_usv>
 8004840:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f107 0010 	add.w	r0, r7, #16
 800484c:	2221      	movs	r2, #33	; 0x21
 800484e:	2101      	movs	r1, #1
 8004850:	f7fc fdde 	bl	8001410 <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 8004854:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <run_classifier_image_quantized+0x204>)
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	f107 0310 	add.w	r3, r7, #16
 800485c:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80049c8 <run_classifier_image_quantized+0x208>
 8004860:	4619      	mov	r1, r3
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff f934 	bl	8003ad0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8004868:	6478      	str	r0, [r7, #68]	; 0x44
    if (ret != EIDSP_OK) {
 800486a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <run_classifier_image_quantized+0xbe>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004870:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004872:	4856      	ldr	r0, [pc, #344]	; (80049cc <run_classifier_image_quantized+0x20c>)
 8004874:	f00c fb1f 	bl	8010eb6 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8004878:	f06f 0404 	mvn.w	r4, #4
 800487c:	e089      	b.n	8004992 <run_classifier_image_quantized+0x1d2>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800487e:	f00c fb03 	bl	8010e88 <_Z29ei_run_impulse_check_canceledv>
 8004882:	4603      	mov	r3, r0
 8004884:	f113 0f02 	cmn.w	r3, #2
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <run_classifier_image_quantized+0xda>
        return EI_IMPULSE_CANCELED;
 8004894:	f06f 0401 	mvn.w	r4, #1
 8004898:	e07b      	b.n	8004992 <run_classifier_image_quantized+0x1d2>
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 800489a:	f00c fafd 	bl	8010e98 <_Z16ei_read_timer_usv>
 800489e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048a2:	ebb0 0802 	subs.w	r8, r0, r2
 80048a6:	eb61 0903 	sbc.w	r9, r1, r3
 80048aa:	4642      	mov	r2, r8
 80048ac:	464b      	mov	r3, r9
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80048ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	f7fc f9fb 	bl	8000cbc <__aeabi_ldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (debug) {
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02e      	beq.n	8004932 <run_classifier_image_quantized+0x172>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4619      	mov	r1, r3
 80048da:	483d      	ldr	r0, [pc, #244]	; (80049d0 <run_classifier_image_quantized+0x210>)
 80048dc:	f00c faeb 	bl	8010eb6 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80048e0:	2300      	movs	r3, #0
 80048e2:	657b      	str	r3, [r7, #84]	; 0x54
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d21f      	bcs.n	800492c <run_classifier_image_quantized+0x16c>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	4413      	add	r3, r2
 80048f2:	f993 3000 	ldrsb.w	r3, [r3]
 80048f6:	3380      	adds	r3, #128	; 0x80
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fb fe2d 	bl	8000558 <__aeabi_i2d>
 80048fe:	a32e      	add	r3, pc, #184	; (adr r3, 80049b8 <run_classifier_image_quantized+0x1f8>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fe92 	bl	800062c <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f7fc f984 	bl	8000c1c <__aeabi_d2f>
 8004914:	4603      	mov	r3, r0
 8004916:	ee00 3a10 	vmov	s0, r3
 800491a:	f00c fae1 	bl	8010ee0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 800491e:	482d      	ldr	r0, [pc, #180]	; (80049d4 <run_classifier_image_quantized+0x214>)
 8004920:	f00c fac9 	bl	8010eb6 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8004924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004926:	3301      	adds	r3, #1
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
 800492a:	e7db      	b.n	80048e4 <run_classifier_image_quantized+0x124>
        }
        ei_printf("\n");
 800492c:	482a      	ldr	r0, [pc, #168]	; (80049d8 <run_classifier_image_quantized+0x218>)
 800492e:	f00c fac2 	bl	8010eb6 <_Z9ei_printfPKcz>
    }

    ctx_start_us = ei_read_timer_us();
 8004932:	f00c fab1 	bl	8010e98 <_Z16ei_read_timer_usv>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 800493e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8004942:	6abe      	ldr	r6, [r7, #40]	; 0x28
    #if EI_CLASSIFIER_OBJDET_HAS_SCORE_TENSOR
        output_labels,
        output_scores,
    #endif
        static_cast<uint8_t*>(p_tensor_arena.get()),
 8004944:	f107 0320 	add.w	r3, r7, #32
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fb4e 	bl	8004fea <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800494e:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_us, output,
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	9301      	str	r3, [sp, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	4632      	mov	r2, r6
 800495c:	4640      	mov	r0, r8
 800495e:	4649      	mov	r1, r9
 8004960:	f7ff fc6e 	bl	8004240 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        interpreter,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result, debug);
#endif

    if (run_res != EI_IMPULSE_OK) {
 800496a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <run_classifier_image_quantized+0x1b8>
        return run_res;
 8004972:	f997 4043 	ldrsb.w	r4, [r7, #67]	; 0x43
 8004976:	e00c      	b.n	8004992 <run_classifier_image_quantized+0x1d2>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8004978:	f00c fa8e 	bl	8010e98 <_Z16ei_read_timer_usv>
 800497c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004980:	1a84      	subs	r4, r0, r2
 8004982:	eb61 0503 	sbc.w	r5, r1, r3
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return EI_IMPULSE_OK;
 8004990:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8004992:	f107 0310 	add.w	r3, r7, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f7fc fd64 	bl	8001464 <_ZN2ei12ei_matrix_i8D1Ev>
    ei_unique_ptr_t p_tensor_arena(nullptr,ei_aligned_free);
 800499c:	f107 0320 	add.w	r3, r7, #32
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fb01 	bl	8004fa8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80049a6:	4623      	mov	r3, r4
#endif // EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	375c      	adds	r7, #92	; 0x5c
 80049ac:	46bd      	mov	sp, r7
 80049ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	20000000 	.word	0x20000000
 80049bc:	3fb19d9b 	.word	0x3fb19d9b
 80049c0:	0800151d 	.word	0x0800151d
 80049c4:	2000003c 	.word	0x2000003c
 80049c8:	427a0000 	.word	0x427a0000
 80049cc:	0801dfec 	.word	0x0801dfec
 80049d0:	0801e340 	.word	0x0801e340
 80049d4:	0801e02c 	.word	0x0801e02c
 80049d8:	0801e030 	.word	0x0801e030

080049dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b09f      	sub	sp, #124	; 0x7c
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049e2:	f002 fc45 	bl	8007270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049e6:	f000 f88f 	bl	8004b08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 80049ea:	f000 f8f7 	bl	8004bdc <_ZL11MX_CRC_Initv>
  /* USER CODE BEGIN 2 */
   signal_t signal;            // Wrapper for raw input buffer
 80049ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fedc 	bl	80037b0 <_ZN2ei11ei_signal_tC1Ev>
    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Calculate the length of the buffer
    size_t buf_len = sizeof(input_buf) / sizeof(input_buf[0]);
 80049f8:	2300      	movs	r3, #0
 80049fa:	673b      	str	r3, [r7, #112]	; 0x70

    // Make sure that the length of the buffer matches expected input length
    if (buf_len != EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE) {
 80049fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049fe:	f240 1277 	movw	r2, #375	; 0x177
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <main+0x42>
        printf("ERROR: The size of the input buffer is not correct.\r\n");
 8004a06:	4836      	ldr	r0, [pc, #216]	; (8004ae0 <main+0x104>)
 8004a08:	f016 fdf4 	bl	801b5f4 <puts>
        printf("Expected %d items, but got %d\r\n", 
 8004a0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f240 1177 	movw	r1, #375	; 0x177
 8004a14:	4833      	ldr	r0, [pc, #204]	; (8004ae4 <main+0x108>)
 8004a16:	f016 fd67 	bl	801b4e8 <iprintf>
                EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, 
                (int)buf_len);
        return 1;
 8004a1a:	2401      	movs	r4, #1
 8004a1c:	e055      	b.n	8004aca <main+0xee>
    }

    // Assign callback function to fill buffer used for preprocessing/inference
    signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
 8004a1e:	f240 1377 	movw	r3, #375	; 0x177
 8004a22:	667b      	str	r3, [r7, #100]	; 0x64
    signal.get_data = &get_signal_data;
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <main+0x10c>)
 8004a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a28:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fa64 	bl	8004f00 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // Perform DSP pre-processing and inference
    res = run_classifier(&signal, &result, false);
 8004a38:	4639      	mov	r1, r7
 8004a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff fda9 	bl	8004598 <run_classifier>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    // Print return code and how long it took to perform inference
    printf("run_classifier returned: %d\r\n", res);
 8004a4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004a50:	4619      	mov	r1, r3
 8004a52:	4826      	ldr	r0, [pc, #152]	; (8004aec <main+0x110>)
 8004a54:	f016 fd48 	bl	801b4e8 <iprintf>
    printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n", 
 8004a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5e:	4824      	ldr	r0, [pc, #144]	; (8004af0 <main+0x114>)
 8004a60:	f016 fd42 	bl	801b4e8 <iprintf>
                bb.height);
    }

    // Print the prediction results (classification)
#else
    printf("Predictions:\r\n");
 8004a64:	4823      	ldr	r0, [pc, #140]	; (8004af4 <main+0x118>)
 8004a66:	f016 fdc5 	bl	801b5f4 <puts>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8004a70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d81e      	bhi.n	8004ab6 <main+0xda>
        printf("  %s: ", ei_classifier_inferencing_categories[i]);
 8004a78:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <main+0x11c>)
 8004a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a82:	4619      	mov	r1, r3
 8004a84:	481d      	ldr	r0, [pc, #116]	; (8004afc <main+0x120>)
 8004a86:	f016 fd2f 	bl	801b4e8 <iprintf>
        printf("%.5f\r\n", result.classification[i].value);
 8004a8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004a94:	4413      	add	r3, r2
 8004a96:	3b74      	subs	r3, #116	; 0x74
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fb fd6e 	bl	800057c <__aeabi_f2d>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4816      	ldr	r0, [pc, #88]	; (8004b00 <main+0x124>)
 8004aa6:	f016 fd1f 	bl	801b4e8 <iprintf>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 8004aaa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8004ab4:	e7dc      	b.n	8004a70 <main+0x94>
    }
#endif

    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    printf("Anomaly prediction: %.3f\r\n", result.anomaly);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fd5f 	bl	800057c <__aeabi_f2d>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4810      	ldr	r0, [pc, #64]	; (8004b04 <main+0x128>)
 8004ac4:	f016 fd10 	bl	801b4e8 <iprintf>
#endif

    return 0;
 8004ac8:	2400      	movs	r4, #0
   signal_t signal;            // Wrapper for raw input buffer
 8004aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fe7b 	bl	80037ca <_ZN2ei11ei_signal_tD1Ev>
 8004ad4:	4623      	mov	r3, r4
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	377c      	adds	r7, #124	; 0x7c
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	0801e37c 	.word	0x0801e37c
 8004ae4:	0801e3b4 	.word	0x0801e3b4
 8004ae8:	08004c0d 	.word	0x08004c0d
 8004aec:	0801e3d4 	.word	0x0801e3d4
 8004af0:	0801e3f4 	.word	0x0801e3f4
 8004af4:	0801e428 	.word	0x0801e428
 8004af8:	20000000 	.word	0x20000000
 8004afc:	0801e438 	.word	0x0801e438
 8004b00:	0801e440 	.word	0x0801e440
 8004b04:	0801e448 	.word	0x0801e448

08004b08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b094      	sub	sp, #80	; 0x50
 8004b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b0e:	f107 0320 	add.w	r3, r7, #32
 8004b12:	2230      	movs	r2, #48	; 0x30
 8004b14:	2100      	movs	r1, #0
 8004b16:	4618      	mov	r0, r3
 8004b18:	f016 f936 	bl	801ad88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	609a      	str	r2, [r3, #8]
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <_Z18SystemClock_Configv+0xcc>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	4a27      	ldr	r2, [pc, #156]	; (8004bd4 <_Z18SystemClock_Configv+0xcc>)
 8004b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <_Z18SystemClock_Configv+0xcc>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	607b      	str	r3, [r7, #4]
 8004b4c:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <_Z18SystemClock_Configv+0xd0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b54:	4a20      	ldr	r2, [pc, #128]	; (8004bd8 <_Z18SystemClock_Configv+0xd0>)
 8004b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <_Z18SystemClock_Configv+0xd0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b70:	2310      	movs	r3, #16
 8004b72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b78:	f107 0320 	add.w	r3, r7, #32
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f002 fceb 	bl	8007558 <HAL_RCC_OscConfig>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8004b92:	f000 f861 	bl	8004c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b96:	230f      	movs	r3, #15
 8004b98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 ff49 	bl	8007a48 <HAL_RCC_ClockConfig>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8004bc6:	f000 f847 	bl	8004c58 <Error_Handler>
  }
}
 8004bca:	bf00      	nop
 8004bcc:	3750      	adds	r7, #80	; 0x50
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40007000 	.word	0x40007000

08004bdc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_ZL11MX_CRC_Initv+0x28>)
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <_ZL11MX_CRC_Initv+0x2c>)
 8004be4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004be6:	4807      	ldr	r0, [pc, #28]	; (8004c04 <_ZL11MX_CRC_Initv+0x28>)
 8004be8:	f002 fc99 	bl	800751e <HAL_CRC_Init>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8004bfc:	f000 f82c 	bl	8004c58 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000368 	.word	0x20000368
 8004c08:	40023000 	.word	0x40023000

08004c0c <_ZL15get_signal_datajjPf>:

/* USER CODE BEGIN 4 */
// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < length; i++) {
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d20f      	bcs.n	8004c44 <_ZL15get_signal_datajjPf+0x38>
        out_ptr[i] = (input_buf + offset)[i];
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <_ZL15get_signal_datajjPf+0x48>)
 8004c2e:	441a      	add	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	440b      	add	r3, r1
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e7eb      	b.n	8004c1c <_ZL15get_signal_datajjPf+0x10>
    }

    return EIDSP_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000370 	.word	0x20000370

08004c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c5c:	b672      	cpsid	i
}
 8004c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c60:	e7fe      	b.n	8004c60 <Error_Handler+0x8>

08004c62 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8004c62:	b5b0      	push	{r4, r5, r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c6c:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fb fc84 	bl	800057c <__aeabi_f2d>
 8004c74:	4604      	mov	r4, r0
 8004c76:	460d      	mov	r5, r1
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	f7fb fc6d 	bl	8000558 <__aeabi_i2d>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	ec43 2b11 	vmov	d1, r2, r3
 8004c86:	ec45 4b10 	vmov	d0, r4, r5
 8004c8a:	f013 fc73 	bl	8018574 <pow>
 8004c8e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c92:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004c96:	eeb0 0a47 	vmov.f32	s0, s14
 8004c9a:	eef0 0a67 	vmov.f32	s1, s15
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bdb0      	pop	{r4, r5, r7, pc}

08004ca4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fb fc53 	bl	8000558 <__aeabi_i2d>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	ec43 2b10 	vmov	d0, r2, r3
 8004cba:	f013 fd09 	bl	80186d0 <sqrt>
 8004cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8004cc2:	eef0 7a60 	vmov.f32	s15, s1
 8004cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8004cca:	eef0 0a67 	vmov.f32	s1, s15
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fb40 	bl	800136c <_ZNKSt14_Function_base8_M_emptyEv>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8004cf2:	f7fc fbcd 	bl	8001490 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68dc      	ldr	r4, [r3, #12]
 8004cfa:	68fd      	ldr	r5, [r7, #12]
 8004cfc:	f107 0308 	add.w	r3, r7, #8
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f9a0 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004d06:	4606      	mov	r6, r0
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f99b 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004d10:	4680      	mov	r8, r0
 8004d12:	463b      	mov	r3, r7
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f9a1 	bl	800505c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47a0      	blx	r4
 8004d24:	4603      	mov	r3, r0
    }
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d30 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fb fc0d 	bl	8000558 <__aeabi_i2d>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	ec43 2b17 	vmov	d7, r2, r3
 8004d46:	eeb0 0a47 	vmov.f32	s0, s14
 8004d4a:	eef0 0a67 	vmov.f32	s1, s15
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f988 	bl	8005072 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f990 	bl	800508a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_Vector_impl_dataC1Ev>
	{ }
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f998 	bl	80050b2 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8004da4:	461a      	mov	r2, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f98e 	bl	80050c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      }
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd fe2a 	bl	8002a08 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004dbe:	b5b0      	push	{r4, r5, r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681c      	ldr	r4, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f98c 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004dd6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4629      	mov	r1, r5
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 f991 	bl	8005104 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ffd1 	bl	8004d8c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bdb0      	pop	{r4, r5, r7, pc}

08004df4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00d      	beq.n	8004e26 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	f000 f984 	bl	8005120 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f103 0208 	add.w	r2, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004e24:	e008      	b.n	8004e38 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f81a 	bl	8004e60 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f99e 	bl	8005174 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f107 030c 	add.w	r3, r7, #12
 8004e4e:	4611      	mov	r1, r2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fa4b 	bl	80052ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	1d1a      	adds	r2, r3, #4
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fa3a 	bl	80052ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>:
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004e82:	b590      	push	{r4, r7, lr}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fa3c 	bl	800530c <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 8004e94:	4622      	mov	r2, r4
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa49 	bl	8005330 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	10db      	asrs	r3, r3, #3
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
      }
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc fa1a 	bl	800132a <_ZNSt14_Function_baseC1Ev>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004f0a:	6838      	ldr	r0, [r7, #0]
 8004f0c:	f000 fa3d 	bl	800538a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f10:	4603      	mov	r3, r0
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f107 0308 	add.w	r3, r7, #8
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa40 	bl	80053a0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f86c 	bl	8005004 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fc30 	bl	8003796 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004f36:	687b      	ldr	r3, [r7, #4]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSB_JjjS0_EEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004f4a:	6838      	ldr	r0, [r7, #0]
 8004f4c:	f000 fa52 	bl	80053f4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8004f50:	4602      	mov	r2, r0
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	6811      	ldr	r1, [r2, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fa57 	bl	800540c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f84d 	bl	8005004 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fc11 	bl	8003796 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004f74:	687b      	ldr	r3, [r7, #4]
	}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
       *
       * The deleter will be initialized with @p std::move(__d)
       */
      template<typename _Del = deleter_type,
	       typename = _Require<is_move_constructible<_Del>>>
	unique_ptr(pointer __p,
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
		   __enable_if_t<!is_lvalue_reference<_Del>::value,
				 _Del&&> __d) noexcept
	: _M_t(__p, std::move(__d))
 8004f8a:	68fc      	ldr	r4, [r7, #12]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa67 	bl	8005460 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fa6c 	bl	8005476 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
	{ }
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa75 	bl	80054a2 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8004fb8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa7a 	bl	80054bc <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	681c      	ldr	r4, [r3, #0]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fa82 	bl	80054d6 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	47a0      	blx	r4
	__ptr = pointer();
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
      }
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}

08004fea <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fa79 	bl	80054ec <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa82 	bl	800551e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f103 0208 	add.w	r2, r3, #8
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 faab 	bl	8005582 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 020c 	add.w	r2, r3, #12
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 facc 	bl	80055d6 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 faca 	bl	8005614 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	609a      	str	r2, [r3, #8]
	{ }
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	if (__p)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 faa2 	bl	800562a <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>
      }
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fa98 	bl	8005648 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>
    }
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa98 	bl	8005662 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fa9d 	bl	8005678 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f805 	bl	800515c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005152:	4603      	mov	r3, r0
      }
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005164:	2301      	movs	r3, #1
      }
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8005174:	b5b0      	push	{r4, r5, r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8005180:	4a59      	ldr	r2, [pc, #356]	; (80052e8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x174>)
 8005182:	2101      	movs	r1, #1
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fa90 	bl	80056aa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>
 800518a:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff fe51 	bl	8004e40 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	f107 0214 	add.w	r2, r7, #20
 80051a6:	f107 0308 	add.w	r3, r7, #8
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fac3 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80051b2:	4603      	mov	r3, r0
 80051b4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fad1 	bl	8005762 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>
 80051c0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80051c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	18d5      	adds	r5, r2, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fa46 	bl	8005662 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	4629      	mov	r1, r5
 80051dc:	4620      	mov	r0, r4
 80051de:	f7ff ff9f 	bl	8005120 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80051e2:	2300      	movs	r3, #0
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80051e6:	f7ff ffae 	bl	8005146 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d027      	beq.n	8005240 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fadc 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 80051fa:	4603      	mov	r3, r0
 80051fc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff74 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005206:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4621      	mov	r1, r4
 800520c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800520e:	f000 fabc 	bl	800578a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 8005212:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	3308      	adds	r3, #8
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fac7 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005224:	4603      	mov	r3, r0
 8005226:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff5f 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005230:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	4620      	mov	r0, r4
 8005238:	f000 faa7 	bl	800578a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>
 800523c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800523e:	e026      	b.n	800528e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fab4 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800524a:	4603      	mov	r3, r0
 800524c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ff4c 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005256:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4621      	mov	r1, r4
 800525c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525e:	f000 fab3 	bl	80057c8 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8005262:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	3308      	adds	r3, #8
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fa9f 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005274:	4603      	mov	r3, r0
 8005276:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff37 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005280:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	6a39      	ldr	r1, [r7, #32]
 8005286:	4620      	mov	r0, r4
 8005288:	f000 fa9e 	bl	80057c8 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 800528c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800528e:	f7ff ff5a 	bl	8005146 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE15_S_use_relocateEv>
 8005292:	4603      	mov	r3, r0
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ff24 	bl	80050ee <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 80052a6:	4603      	mov	r3, r0
 80052a8:	461a      	mov	r2, r3
 80052aa:	6a39      	ldr	r1, [r7, #32]
 80052ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ae:	f7ff ff29 	bl	8005104 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80052b2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 80052be:	461a      	mov	r2, r3
 80052c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052c2:	f7ff ff01 	bl	80050c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	609a      	str	r2, [r3, #8]
    }
 80052de:	bf00      	nop
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bdb0      	pop	{r4, r5, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	0801e498 	.word	0x0801e498

080052ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fa6f 	bl	80057fa <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800531c:	f107 030c 	add.w	r3, r7, #12
 8005320:	4629      	mov	r1, r5
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fa74 	bl	8005810 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8005328:	4620      	mov	r0, r4
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bdb0      	pop	{r4, r5, r7, pc}

08005330 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800533c:	f107 0208 	add.w	r2, r7, #8
 8005340:	f107 030c 	add.w	r3, r7, #12
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fa70 	bl	800582c <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d017      	beq.n	8005382 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8005352:	f107 020c 	add.w	r2, r7, #12
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f9eb 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005362:	4603      	mov	r3, r0
 8005364:	4618      	mov	r0, r3
 8005366:	f7fb ff9b 	bl	80012a0 <_ZSt4__lgi>
 800536a:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800536c:	005a      	lsls	r2, r3, #1
 800536e:	793b      	ldrb	r3, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa72 	bl	800585c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8005378:	793a      	ldrb	r2, [r7, #4]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 faa4 	bl	80058ca <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fb ffbc 	bl	800132a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fac0 	bl	800593a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80053c0:	687c      	ldr	r4, [r7, #4]
 80053c2:	463b      	mov	r3, r7
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fac8 	bl	800595a <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4619      	mov	r1, r3
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 face 	bl	8005970 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a05      	ldr	r2, [pc, #20]	; (80053ec <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 80053d8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 80053de:	609a      	str	r2, [r3, #8]
      }
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd90      	pop	{r4, r7, pc}
 80053ea:	bf00      	nop
 80053ec:	08005995 	.word	0x08005995
 80053f0:	080059dd 	.word	0x080059dd

080053f4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb ff86 	bl	800132a <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800541e:	463b      	mov	r3, r7
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fb06 	bl	8005a32 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00f      	beq.n	800544c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800542c:	687c      	ldr	r4, [r7, #4]
 800542e:	463b      	mov	r3, r7
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fb09 	bl	8005a48 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8005436:	4603      	mov	r3, r0
 8005438:	4619      	mov	r1, r3
 800543a:	4620      	mov	r0, r4
 800543c:	f000 fb0f 	bl	8005a5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a05      	ldr	r2, [pc, #20]	; (8005458 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 8005444:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a04      	ldr	r2, [pc, #16]	; (800545c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 800544a:	609a      	str	r2, [r3, #8]
      }
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	bf00      	nop
 8005458:	08005a83 	.word	0x08005a83
 800545c:	08005acb 	.word	0x08005acb

08005460 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005476:	b590      	push	{r4, r7, lr}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005482:	68fc      	ldr	r4, [r7, #12]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fb4b 	bl	8005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800548a:	4602      	mov	r2, r0
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	4619      	mov	r1, r3
 8005492:	4620      	mov	r0, r4
 8005494:	f000 fb4f 	bl	8005b36 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}

080054a2 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fb5b 	bl	8005b68 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb5b 	bl	8005b82 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fb50 	bl	8005b9c <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 80054fc:	4603      	mov	r3, r0
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ffed 	bl	8005508 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800552e:	4602      	mov	r2, r0
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005538:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800553c:	6838      	ldr	r0, [r7, #0]
 800553e:	f7ff ffe3 	bl	8005508 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005542:	4602      	mov	r2, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800554a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ffd8 	bl	8005508 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005558:	4602      	mov	r2, r0
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005560:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ffed 	bl	800556c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005592:	4603      	mov	r3, r0
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005598:	6838      	ldr	r0, [r7, #0]
 800559a:	f7ff ffe7 	bl	800556c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800559e:	4603      	mov	r3, r0
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80055a6:	f107 030c 	add.w	r3, r7, #12
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ffde 	bl	800556c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80055b0:	4603      	mov	r3, r0
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]
    }
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ffed 	bl	80055c0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80055e6:	4603      	mov	r3, r0
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80055ec:	6838      	ldr	r0, [r7, #0]
 80055ee:	f7ff ffe7 	bl	80055c0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 80055f2:	4603      	mov	r3, r0
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff ffde 	bl	80055c0 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005604:	4603      	mov	r3, r0
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	601a      	str	r2, [r3, #0]
    }
 800560c:	bf00      	nop
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fabb 	bl	8005bb6 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fabb 	bl	8005bd0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>
    }
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ffec 	bl	8005662 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800568a:	4604      	mov	r4, r0
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4619      	mov	r1, r3
 8005690:	2008      	movs	r0, #8
 8005692:	f7fb fe14 	bl	80012be <_ZnwjPv>
 8005696:	4603      	mov	r3, r0
 8005698:	4622      	mov	r2, r4
 800569a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800569e:	e883 0003 	stmia.w	r3, {r0, r1}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd90      	pop	{r4, r7, pc}

080056aa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80056aa:	b590      	push	{r4, r7, lr}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fa95 	bl	8005be6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 80056bc:	4604      	mov	r4, r0
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fbf1 	bl	8004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80056c4:	4603      	mov	r3, r0
 80056c6:	1ae2      	subs	r2, r4, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	bf34      	ite	cc
 80056ce:	2301      	movcc	r3, #1
 80056d0:	2300      	movcs	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f012 fd43 	bl	8018164 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fbe1 	bl	8004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80056e4:	4604      	mov	r4, r0
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff fbdd 	bl	8004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80056ec:	4603      	mov	r3, r0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	f107 0208 	add.w	r2, r7, #8
 80056f4:	f107 0310 	add.w	r3, r7, #16
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fa84 	bl	8005c08 <_ZSt3maxIjERKT_S2_S2_>
 8005700:	4603      	mov	r3, r0
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4423      	add	r3, r4
 8005706:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fbcc 	bl	8004ea6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 800570e:	4602      	mov	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4293      	cmp	r3, r2
 8005714:	d306      	bcc.n	8005724 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x7a>
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa65 	bl	8005be6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 800571c:	4602      	mov	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4293      	cmp	r3, r2
 8005722:	d904      	bls.n	800572e <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x84>
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa5e 	bl	8005be6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 800572a:	4603      	mov	r3, r0
 800572c:	e000      	b.n	8005730 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x86>
 800572e:	697b      	ldr	r3, [r7, #20]
      }
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}

08005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f835 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005748:	4603      	mov	r3, r0
 800574a:	681c      	ldr	r4, [r3, #0]
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f000 f830 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005752:	4603      	mov	r3, r0
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1ae3      	subs	r3, r4, r3
 8005758:	10db      	asrs	r3, r3, #3
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bd90      	pop	{r4, r7, pc}

08005762 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x1e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fa5a 	bl	8005c30 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>
 800577c:	4603      	mov	r3, r0
 800577e:	e000      	b.n	8005782 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x20>
 8005780:	2300      	movs	r3, #0
      }
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_relocateEPS3_S6_S6_RS4_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800578a:	b590      	push	{r4, r7, lr}
 800578c:	b089      	sub	sp, #36	; 0x24
 800578e:	af02      	add	r7, sp, #8
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005798:	f88d 4000 	strb.w	r4, [sp]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fa53 	bl	8005c4e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>
 80057a8:	4603      	mov	r3, r0
      }
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd90      	pop	{r4, r7, pc}

080057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fa4b 	bl	8005c72 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 80057dc:	4604      	mov	r4, r0
 80057de:	68b8      	ldr	r0, [r7, #8]
 80057e0:	f000 fa47 	bl	8005c72 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 80057e4:	4601      	mov	r1, r0
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fa50 	bl	8005c90 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 80057f0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd90      	pop	{r4, r7, pc}

080057fa <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800581a:	463b      	mov	r3, r7
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ffec 	bl	80057fa <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffbb 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800583c:	4603      	mov	r3, r0
 800583e:	681c      	ldr	r4, [r3, #0]
 8005840:	6838      	ldr	r0, [r7, #0]
 8005842:	f7ff ffb6 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005846:	4603      	mov	r3, r0
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	429c      	cmp	r4, r3
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}

0800585c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800586a:	f107 020c 	add.w	r2, r7, #12
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff ff5f 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800587a:	4603      	mov	r3, r0
 800587c:	2b10      	cmp	r3, #16
 800587e:	bfcc      	ite	gt
 8005880:	2301      	movgt	r3, #1
 8005882:	2300      	movle	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01c      	beq.n	80058c4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  if (__depth_limit == 0)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8005890:	783b      	ldrb	r3, [r7, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 fa0b 	bl	8005cb2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
 800589c:	e012      	b.n	80058c4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  --__depth_limit;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 80058a4:	783a      	ldrb	r2, [r7, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fa19 	bl	8005ce0 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>
 80058ae:	4603      	mov	r3, r0
 80058b0:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80058b2:	783b      	ldrb	r3, [r7, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	6978      	ldr	r0, [r7, #20]
 80058ba:	f7ff ffcf 	bl	800585c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  __last = __cut;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80058c2:	e7d2      	b.n	800586a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xe>
    }
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 80058d6:	f107 020c 	add.w	r2, r7, #12
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	4611      	mov	r1, r2
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff ff29 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	bfcc      	ite	gt
 80058ec:	2301      	movgt	r3, #1
 80058ee:	2300      	movle	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80058f6:	f107 030c 	add.w	r3, r7, #12
 80058fa:	2110      	movs	r1, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fa31 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005902:	4603      	mov	r3, r0
 8005904:	793a      	ldrb	r2, [r7, #4]
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fa43 	bl	8005d94 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	2110      	movs	r1, #16
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa25 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800591a:	4603      	mov	r3, r0
 800591c:	793a      	ldrb	r2, [r7, #4]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 faa3 	bl	8005e6c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005926:	e004      	b.n	8005932 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8005928:	793a      	ldrb	r2, [r7, #4]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fa31 	bl	8005d94 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800597a:	6838      	ldr	r0, [r7, #0]
 800597c:	f7ff ffed 	bl	800595a <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005980:	4603      	mov	r3, r0
 8005982:	4622      	mov	r2, r4
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa94 	bl	8005eb4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bd90      	pop	{r4, r7, pc}

08005994 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa9f 	bl	8005ee6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80059a8:	4603      	mov	r3, r0
 80059aa:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80059ac:	68b8      	ldr	r0, [r7, #8]
 80059ae:	f7ff fb4a 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80059b2:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80059b4:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fb45 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80059bc:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80059be:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80059c0:	6838      	ldr	r0, [r7, #0]
 80059c2:	f7ff fb4b 	bl	800505c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80059c6:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47a0      	blx	r4
 80059d2:	4603      	mov	r3, r0
      }
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059dc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d016      	beq.n	8005a1e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	dc19      	bgt.n	8005a28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d002      	beq.n	80059fe <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d00a      	beq.n	8005a12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80059fc:	e014      	b.n	8005a28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fa82 	bl	8005f08 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8005a04:	4604      	mov	r4, r0
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f000 fa6d 	bl	8005ee6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	6023      	str	r3, [r4, #0]
	      break;
 8005a10:	e00a      	b.n	8005a28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8005a12:	462a      	mov	r2, r5
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fa82 	bl	8005f20 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005a1c:	e004      	b.n	8005a28 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8005a1e:	4621      	mov	r1, r4
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fa96 	bl	8005f52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005a26:	bf00      	nop
	  return false;
 8005a28:	2300      	movs	r3, #0
	}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}

08005a32 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
	  { return true; }
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005a5e:	b590      	push	{r4, r7, lr}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005a68:	6838      	ldr	r0, [r7, #0]
 8005a6a:	f7ff ffed 	bl	8005a48 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4622      	mov	r2, r4
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fa78 	bl	8005f6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}

08005a82 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fa83 	bl	8005f9c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8005a96:	4606      	mov	r6, r0
	    std::forward<_ArgTypes>(__args)...);
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f7ff fad4 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005a9e:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005aa0:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff facf 	bl	8005046 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005aa8:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005aaa:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005aac:	6838      	ldr	r0, [r7, #0]
 8005aae:	f7ff fad5 	bl	800505c <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005ab2:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7fe f9e6 	bl	8003e8c <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8005ac0:	4603      	mov	r3, r0
      }
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aca <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8005aca:	b5b0      	push	{r4, r5, r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d016      	beq.n	8005b0c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	dc19      	bgt.n	8005b16 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d002      	beq.n	8005aec <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d00a      	beq.n	8005b00 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8005aea:	e014      	b.n	8005b16 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fa66 	bl	8005fbe <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8005af2:	4604      	mov	r4, r0
 8005af4:	68b8      	ldr	r0, [r7, #8]
 8005af6:	f000 fa51 	bl	8005f9c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8005afa:	4603      	mov	r3, r0
 8005afc:	6023      	str	r3, [r4, #0]
	      break;
 8005afe:	e00a      	b.n	8005b16 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8005b00:	462a      	mov	r2, r5
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fa66 	bl	8005fd6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005b0a:	e004      	b.n	8005b16 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa7a 	bl	8006008 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005b14:	bf00      	nop
	  return false;
 8005b16:	2300      	movs	r3, #0
	}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bdb0      	pop	{r4, r5, r7, pc}

08005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
                    _MoveConstructibleTuple<_U1, _U2>()
                  && _TMC::template
                    _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
	          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
	bool>::type = true>
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005b36:	b5b0      	push	{r4, r5, r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005b42:	68fc      	ldr	r4, [r7, #12]
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f000 fa6b 	bl	8006020 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 8005b4a:	4605      	mov	r5, r0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffe7 	bl	8005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	4629      	mov	r1, r5
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fa6c 	bl	8006036 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bdb0      	pop	{r4, r5, r7, pc}

08005b68 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fa7d 	bl	8006072 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fa7c 	bl	800608a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa7c 	bl	80060a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f012 fab4 	bl	8018130 <_ZdlPv>
      }
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fa91 	bl	8006118 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fa73 	bl	80060e4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_max_sizeERKS4_>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d201      	bcs.n	8005c22 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	e000      	b.n	8005c24 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005c22:	687b      	ldr	r3, [r7, #4]
    }
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa75 	bl	800612e <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>
 8005c44:	4603      	mov	r3, r0
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE14_S_do_relocateEPS3_S6_S6_RS4_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fa81 	bl	800616a <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8005c68:	4603      	mov	r3, r0
      }
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005c7a:	f107 030c 	add.w	r3, r7, #12
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fa8f 	bl	80061a4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fa8d 	bl	80061c2 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
 8005cbe:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8005cc0:	783b      	ldrb	r3, [r7, #0]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fa8d 	bl	80061e6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8005ccc:	463b      	mov	r3, r7
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fab9 	bl	800624a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
    }
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b089      	sub	sp, #36	; 0x24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8005cec:	f107 020c 	add.w	r2, r7, #12
 8005cf0:	f107 0308 	add.w	r3, r7, #8
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fd1e 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	0fda      	lsrs	r2, r3, #31
 8005d00:	4413      	add	r3, r2
 8005d02:	105b      	asrs	r3, r3, #1
 8005d04:	461a      	mov	r2, r3
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 f829 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005d12:	4603      	mov	r3, r0
 8005d14:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005d16:	f107 030c 	add.w	r3, r7, #12
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f821 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005d22:	4604      	mov	r4, r0
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fab3 	bl	8006296 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>
 8005d30:	4602      	mov	r2, r0
 8005d32:	793b      	ldrb	r3, [r7, #4]
 8005d34:	f88d 3000 	strb.w	r3, [sp]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 fade 	bl	8006300 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005d44:	f107 030c 	add.w	r3, r7, #12
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 f80a 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005d50:	793b      	ldrb	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	f000 fb28 	bl	80063aa <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>
 8005d5a:	4603      	mov	r3, r0
    }
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	f107 020c 	add.w	r2, r7, #12
 8005d7e:	f107 0308 	add.w	r3, r7, #8
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fab1 	bl	80052ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8005da0:	f107 0208 	add.w	r2, r7, #8
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb45 	bl	800643a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d156      	bne.n	8005e64 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ffd1 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	f107 0208 	add.w	r2, r7, #8
 8005dca:	f107 031c 	add.w	r3, r7, #28
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fd2b 	bl	800582c <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d044      	beq.n	8005e66 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd2>
	  if (__comp(__i, __first))
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	69f9      	ldr	r1, [r7, #28]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fa70 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d02d      	beq.n	8005e4a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8005dee:	f107 031c 	add.w	r3, r7, #28
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fb4a 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fb52 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005e00:	4602      	mov	r2, r0
 8005e02:	f107 0314 	add.w	r3, r7, #20
 8005e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e0a:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8005e0e:	f107 031c 	add.w	r3, r7, #28
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ffa5 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	69f9      	ldr	r1, [r7, #28]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fb4a 	bl	80064ba <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>
	      *__first = _GLIBCXX_MOVE(__val);
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fb3a 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005e30:	4604      	mov	r4, r0
 8005e32:	f107 030c 	add.w	r3, r7, #12
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fb28 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4622      	mov	r2, r4
 8005e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e44:	e883 0003 	stmia.w	r3, {r0, r1}
 8005e48:	e006      	b.n	8005e58 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 8005e4a:	7938      	ldrb	r0, [r7, #4]
 8005e4c:	f000 fb4d 	bl	80064ea <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8005e50:	4629      	mov	r1, r5
 8005e52:	69f8      	ldr	r0, [r7, #28]
 8005e54:	f000 fb5c 	bl	8006510 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8005e58:	f107 031c 	add.w	r3, r7, #28
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fb04 	bl	800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8005e62:	e7b0      	b.n	8005dc6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x32>
      if (__first == __last) return;
 8005e64:	bf00      	nop
    }
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bdb0      	pop	{r4, r5, r7, pc}

08005e6c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 8005e6c:	b590      	push	{r4, r7, lr}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	f107 0208 	add.w	r2, r7, #8
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fcd0 	bl	800582c <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8005e92:	7938      	ldrb	r0, [r7, #4]
 8005e94:	f000 fb29 	bl	80064ea <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f000 fb38 	bl	8006510 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005ea0:	f107 0314 	add.w	r3, r7, #20
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fae0 	bl	800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8005eaa:	e7e7      	b.n	8005e7c <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x10>
    }
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8005ec0:	68b8      	ldr	r0, [r7, #8]
 8005ec2:	f7ff fd4a 	bl	800595a <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7fb fa17 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	2004      	movs	r0, #4
 8005ed6:	f7fb f9f2 	bl	80012be <_ZnwjPv>
 8005eda:	4603      	mov	r3, r0
 8005edc:	601c      	str	r4, [r3, #0]
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}

08005ee6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fb63 	bl	80065ba <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8005ef4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fb6b 	bl	80065d2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8005efc:	4603      	mov	r3, r0
 8005efe:	bf00      	nop
	}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fb f9f4 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f000 fb44 	bl	80065ba <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8005f32:	4603      	mov	r3, r0
 8005f34:	681c      	ldr	r4, [r3, #0]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7fb f9e1 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4619      	mov	r1, r3
 8005f40:	2004      	movs	r0, #4
 8005f42:	f7fb f9bc 	bl	80012be <_ZnwjPv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	601c      	str	r4, [r3, #0]
	}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}

08005f52 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b082      	sub	sp, #8
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fb43 	bl	80065e8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8005f6a:	b590      	push	{r4, r7, lr}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8005f76:	68b8      	ldr	r0, [r7, #8]
 8005f78:	f7ff fd66 	bl	8005a48 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7fb f9bd 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005f84:	4603      	mov	r3, r0
 8005f86:	4619      	mov	r1, r3
 8005f88:	2004      	movs	r0, #4
 8005f8a:	f7fb f998 	bl	80012be <_ZnwjPv>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd90      	pop	{r4, r7, pc}

08005f9c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fb2b 	bl	8006600 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8005faa:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fb33 	bl	8006618 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	bf00      	nop
	}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fb f999 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8005fd6:	b590      	push	{r4, r7, lr}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8005fe2:	68b8      	ldr	r0, [r7, #8]
 8005fe4:	f000 fb0c 	bl	8006600 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7fb f987 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	2004      	movs	r0, #4
 8005ff6:	f7fb f962 	bl	80012be <_ZnwjPv>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	6013      	str	r3, [r2, #0]
	}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	bd90      	pop	{r4, r7, pc}

08006008 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fb0b 	bl	800662e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8006036:	b590      	push	{r4, r7, lr}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8006042:	68fc      	ldr	r4, [r7, #12]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fd6b 	bl	8005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800604a:	4603      	mov	r3, r0
 800604c:	4619      	mov	r1, r3
 800604e:	4620      	mov	r0, r4
 8006050:	f000 faf9 	bl	8006646 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1d1c      	adds	r4, r3, #4
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f7ff ffe1 	bl	8006020 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800605e:	4603      	mov	r3, r0
 8006060:	4619      	mov	r1, r3
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fb02 	bl	800666c <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}

08006072 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb07 	bl	800668e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 8006080:	4603      	mov	r3, r0
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fb08 	bl	80066aa <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800609a:	4603      	mov	r3, r0
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb08 	bl	80066c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 80060b2:	4603      	mov	r3, r0
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d201      	bcs.n	80060d6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	e000      	b.n	80060d8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80060d6:	687b      	ldr	r3, [r7, #4]
    }
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_S_max_sizeERKS4_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80060ec:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80060f0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 faf3 	bl	80066de <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>
 80060f8:	4603      	mov	r3, r0
 80060fa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80060fc:	f107 0208 	add.w	r2, r7, #8
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	4611      	mov	r1, r2
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff ffd8 	bl	80060bc <_ZSt3minIjERKT_S2_S2_>
 800610c:	4603      	mov	r3, r0
 800610e:	681b      	ldr	r3, [r3, #0]
      }
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fadb 	bl	80066f6 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 8006140:	4602      	mov	r2, r0
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4293      	cmp	r3, r2
 8006146:	bf8c      	ite	hi
 8006148:	2301      	movhi	r3, #1
 800614a:	2300      	movls	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006152:	f012 f804 	bl	801815e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4618      	mov	r0, r3
 800615c:	f011 ffec 	bl	8018138 <_Znwj>
 8006160:	4603      	mov	r3, r0
      }
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800616a:	b5b0      	push	{r4, r5, r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fac8 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800617e:	4604      	mov	r4, r0
 8006180:	68b8      	ldr	r0, [r7, #8]
 8006182:	f000 fac4 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006186:	4605      	mov	r5, r0
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fac0 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800618e:	4602      	mov	r2, r0
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	4629      	mov	r1, r5
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fac5 	bl	8006724 <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>
 800619a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bdb0      	pop	{r4, r5, r7, pc}

080061a4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80061ce:	2301      	movs	r3, #1
 80061d0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fac2 	bl	8006760 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>
 80061dc:	4603      	mov	r3, r0
    }
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __heap_select(_RandomAccessIterator __first,
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 80061f4:	463b      	mov	r3, r7
 80061f6:	461a      	mov	r2, r3
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fac0 	bl	8006780 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	1d3a      	adds	r2, r7, #4
 8006206:	f107 0314 	add.w	r3, r7, #20
 800620a:	4611      	mov	r1, r2
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fb16 	bl	800683e <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d014      	beq.n	8006242 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x5c>
	if (__comp(__i, __first))
 8006218:	463b      	mov	r3, r7
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 f852 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800622a:	463b      	mov	r3, r7
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fb1c 	bl	800686e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f915 	bl	800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8006240:	e7e0      	b.n	8006204 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x1e>
    }
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8006256:	f107 020c 	add.w	r2, r7, #12
 800625a:	f107 0308 	add.w	r3, r7, #8
 800625e:	4611      	mov	r1, r2
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fa69 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8006266:	4603      	mov	r3, r0
 8006268:	2b01      	cmp	r3, #1
 800626a:	bfcc      	ite	gt
 800626c:	2301      	movgt	r3, #1
 800626e:	2300      	movle	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x44>
	{
	  --__last;
 8006276:	f107 0308 	add.w	r3, r7, #8
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fb43 	bl	8006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 faf1 	bl	800686e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      while (__last - __first > 1)
 800628c:	e7e3      	b.n	8006256 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xc>
	}
    }
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	425b      	negs	r3, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	f107 020c 	add.w	r2, r7, #12
 80062b2:	f107 0308 	add.w	r3, r7, #8
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff f817 	bl	80052ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 80062d4:	68fc      	ldr	r4, [r7, #12]
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f8d6 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80062e0:	4605      	mov	r5, r0
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f8d1 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80062ea:	4603      	mov	r3, r0
 80062ec:	461a      	mov	r2, r3
 80062ee:	4629      	mov	r1, r5
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7fc fbaf 	bl	8002a54 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bdb0      	pop	{r4, r5, r7, pc}

08006300 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	f107 0018 	add.w	r0, r7, #24
 8006316:	f7ff ffd7 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x62>
	  if (__comp(__b, __c))
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	f107 0018 	add.w	r0, r7, #24
 8006328:	f7ff ffce 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 faf7 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 800633a:	e032      	b.n	80063a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	  else if (__comp(__a, __c))
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	f107 0018 	add.w	r0, r7, #24
 8006344:	f7ff ffc0 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x58>
	    std::iter_swap(__result, __c);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fae9 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006356:	e024      	b.n	80063a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fae4 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006360:	e01f      	b.n	80063a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__a, __c))
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	f107 0018 	add.w	r0, r7, #24
 800636a:	f7ff ffad 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x7e>
	std::iter_swap(__result, __a);
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fad6 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 800637c:	e011      	b.n	80063a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__b, __c))
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	f107 0018 	add.w	r0, r7, #24
 8006386:	f7ff ff9f 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x9a>
	std::iter_swap(__result, __c);
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fac8 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006398:	e003      	b.n	80063a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	std::iter_swap(__result, __b);
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fac3 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 80063b8:	463b      	mov	r3, r7
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ff82 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x2c>
	    ++__first;
 80063ca:	f107 030c 	add.w	r3, r7, #12
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f84b 	bl	800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 80063d4:	e7f0      	b.n	80063b8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
	  --__last;
 80063d6:	f107 0308 	add.w	r3, r7, #8
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa93 	bl	8006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 80063e0:	463b      	mov	r3, r7
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ff6e 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x54>
	    --__last;
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fa85 	bl	8006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 80063fc:	e7f0      	b.n	80063e0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x36>
	  if (!(__first < __last))
 80063fe:	f107 0208 	add.w	r2, r7, #8
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4611      	mov	r1, r2
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fa18 	bl	800683e <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800640e:	4603      	mov	r3, r0
 8006410:	f083 0301 	eor.w	r3, r3, #1
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x74>
	    return __first;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	e009      	b.n	8006432 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x88>
	  std::iter_swap(__first, __last);
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fa81 	bl	8006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
	  ++__first;
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f81d 	bl	800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 8006430:	e7c2      	b.n	80063b8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
    }
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800643a:	b590      	push	{r4, r7, lr}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff f9b4 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800644a:	4603      	mov	r3, r0
 800644c:	681c      	ldr	r4, [r3, #0]
 800644e:	6838      	ldr	r0, [r7, #0]
 8006450:	f7ff f9af 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006454:	4603      	mov	r3, r0
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	429c      	cmp	r4, r3
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}

0800646a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f103 0208 	add.w	r2, r3, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
	return *this;
 800647e:	687b      	ldr	r3, [r7, #4]
      }
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80064ba:	b590      	push	{r4, r7, lr}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fa45 	bl	8006956 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 80064cc:	4604      	mov	r4, r0
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f000 fa41 	bl	8006956 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 80064d4:	4603      	mov	r3, r0
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	4619      	mov	r1, r3
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 fa46 	bl	800696c <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>
 80064e0:	4603      	mov	r3, r0
    }
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd90      	pop	{r4, r7, pc}

080064ea <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 80064ea:	b590      	push	{r4, r7, lr}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fa5a 	bl	80069ae <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 80064fa:	4602      	mov	r2, r0
 80064fc:	f107 030c 	add.w	r3, r7, #12
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa5e 	bl	80069c4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8006508:	4620      	mov	r0, r4
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	bd90      	pop	{r4, r7, pc}

08006510 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8006510:	b590      	push	{r4, r7, lr}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff ffb5 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006522:	4603      	mov	r3, r0
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ffbd 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800652a:	4602      	mov	r2, r0
 800652c:	f107 0310 	add.w	r3, r7, #16
 8006530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006534:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]
      --__next;
 800653c:	f107 030c 	add.w	r3, r7, #12
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f9e0 	bl	8006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8006546:	f107 0110 	add.w	r1, r7, #16
 800654a:	463b      	mov	r3, r7
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fa46 	bl	80069e0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff94 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006564:	4603      	mov	r3, r0
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff9c 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800656c:	4604      	mov	r4, r0
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff ff8b 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006576:	4603      	mov	r3, r0
 8006578:	4622      	mov	r2, r4
 800657a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800657e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	607b      	str	r3, [r7, #4]
	  --__next;
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f9bb 	bl	8006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8006590:	e7d9      	b.n	8006546 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff ff84 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800659c:	4604      	mov	r4, r0
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff ff73 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4622      	mov	r2, r4
 80065aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd90      	pop	{r4, r7, pc}

080065ba <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fa fea6 	bl	8001314 <_ZNKSt9_Any_data9_M_accessEv>
 80065c8:	4603      	mov	r3, r0
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fa fe84 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 80065f6:	4603      	mov	r3, r0
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7fa fe83 	bl	8001314 <_ZNKSt9_Any_data9_M_accessEv>
 800660e:	4603      	mov	r3, r0
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fa fe61 	bl	80012fe <_ZNSt9_Any_data9_M_accessEv>
 800663c:	4603      	mov	r3, r0
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8006646:	b590      	push	{r4, r7, lr}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8006650:	687c      	ldr	r4, [r7, #4]
 8006652:	6838      	ldr	r0, [r7, #0]
 8006654:	f7ff fa64 	bl	8005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006658:	4603      	mov	r3, r0
 800665a:	4619      	mov	r1, r3
 800665c:	4620      	mov	r0, r4
 800665e:	f000 f9d5 	bl	8006a0c <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bd90      	pop	{r4, r7, pc}

0800666c <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006676:	6838      	ldr	r0, [r7, #0]
 8006678:	f7ff fcd2 	bl	8006020 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800667c:	4603      	mov	r3, r0
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f9c7 	bl	8006a2e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 80066a0:	4603      	mov	r3, r0
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9c6 	bl	8006a44 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 80066b8:	4603      	mov	r3, r0
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f9c5 	bl	8006a5e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f805 	bl	80066f6 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 80066ec:	4603      	mov	r3, r0
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80066fe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	10db      	asrs	r3, r3, #3
 800673a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dd06      	ble.n	8006750 <_ZSt14__relocate_a_1IN2ei8spectral10processing11freq_peak_tES3_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS6_E4typeES8_S8_S8_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	461a      	mov	r2, r3
 8006748:	68f9      	ldr	r1, [r7, #12]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f014 fb02 	bl	801ad54 <memmove>
      return __result + __count;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4413      	add	r3, r2
    }
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f97f 	bl	8006a74 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8006776:	4603      	mov	r3, r0
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800678c:	f107 020c 	add.w	r2, r7, #12
 8006790:	f107 0308 	add.w	r3, r7, #8
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe ffce 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	bfd4      	ite	le
 80067a2:	2301      	movle	r3, #1
 80067a4:	2300      	movgt	r3, #0
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d142      	bne.n	8006832 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 80067ac:	f107 020c 	add.w	r2, r7, #12
 80067b0:	f107 0308 	add.w	r3, r7, #8
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe ffbe 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80067bc:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	3b02      	subs	r3, #2
 80067c2:	0fda      	lsrs	r2, r3, #31
 80067c4:	4413      	add	r3, r2
 80067c6:	105b      	asrs	r3, r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80067ca:	f107 030c 	add.w	r3, r7, #12
 80067ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fac7 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80067d6:	4603      	mov	r3, r0
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	f107 031c 	add.w	r3, r7, #28
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fe54 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80067e4:	4603      	mov	r3, r0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe5c 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f107 0314 	add.w	r3, r7, #20
 80067f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067f6:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fe50 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006804:	4603      	mov	r3, r0
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	ed93 7a00 	vldr	s14, [r3]
 800680c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006810:	7813      	ldrb	r3, [r2, #0]
 8006812:	eeb0 0a47 	vmov.f32	s0, s14
 8006816:	eef0 0a67 	vmov.f32	s1, s15
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f940 	bl	8006aa4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
	  if (__parent == 0)
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb6>
	  __parent--;
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	3b01      	subs	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 8006830:	e7cb      	b.n	80067ca <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x4a>
	return;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb8>
	    return;
 8006836:	bf00      	nop
    }
 8006838:	3728      	adds	r7, #40	; 0x28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800683e:	b590      	push	{r4, r7, lr}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fe ffb2 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800684e:	4603      	mov	r3, r0
 8006850:	681c      	ldr	r4, [r3, #0]
 8006852:	6838      	ldr	r0, [r7, #0]
 8006854:	f7fe ffad 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006858:	4603      	mov	r3, r0
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	429c      	cmp	r4, r3
 800685e:	bf34      	ite	cc
 8006860:	2301      	movcc	r3, #1
 8006862:	2300      	movcs	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bd90      	pop	{r4, r7, pc}

0800686e <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800686e:	b590      	push	{r4, r7, lr}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff fe04 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006884:	4603      	mov	r3, r0
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fe0c 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800688c:	4602      	mov	r2, r0
 800688e:	f107 0310 	add.w	r3, r7, #16
 8006892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006896:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fdf4 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80068a4:	4603      	mov	r3, r0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fdfc 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80068ac:	4604      	mov	r4, r0
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fdeb 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4622      	mov	r2, r4
 80068ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068be:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 80068c2:	f107 020c 	add.w	r2, r7, #12
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe ff33 	bl	8005738 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80068d2:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fde3 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80068de:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	ed93 7a00 	vldr	s14, [r3]
 80068e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80068ea:	7813      	ldrb	r3, [r2, #0]
 80068ec:	eeb0 0a47 	vmov.f32	s0, s14
 80068f0:	eef0 0a67 	vmov.f32	s1, s15
 80068f4:	4622      	mov	r2, r4
 80068f6:	2100      	movs	r1, #0
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f8d3 	bl	8006aa4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
    }
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}

08006906 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
	--_M_current;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1a3 0208 	sub.w	r2, r3, #8
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
	return *this;
 800691a:	687b      	ldr	r3, [r7, #4]
      }
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fda9 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800693a:	4604      	mov	r4, r0
 800693c:	463b      	mov	r3, r7
 800693e:	4618      	mov	r0, r3
 8006940:	f7ff fda4 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006944:	4603      	mov	r3, r0
 8006946:	4619      	mov	r1, r3
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f96e 	bl	8006c2a <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}

08006956 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800696c:	b5b0      	push	{r4, r5, r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f97d 	bl	8006c78 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 800697e:	4604      	mov	r4, r0
 8006980:	68b8      	ldr	r0, [r7, #8]
 8006982:	f000 f979 	bl	8006c78 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006986:	4605      	mov	r5, r0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f975 	bl	8006c78 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 800698e:	4603      	mov	r3, r0
 8006990:	461a      	mov	r2, r3
 8006992:	4629      	mov	r1, r5
 8006994:	4620      	mov	r0, r4
 8006996:	f000 f97d 	bl	8006c94 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800699a:	4603      	mov	r3, r0
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f98a 	bl	8006cb8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEES6_ET_SB_T0_>
 80069a4:	4603      	mov	r3, r0
    }
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bdb0      	pop	{r4, r5, r7, pc}

080069ae <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ff12 	bl	80057fa <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 80069ec:	68fc      	ldr	r4, [r7, #12]
 80069ee:	1d3b      	adds	r3, r7, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fd4b 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4620      	mov	r0, r4
 80069fe:	f7fc f829 	bl	8002a54 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8006a02:	4603      	mov	r3, r0
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd90      	pop	{r4, r7, pc}

08006a0c <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8006a16:	6838      	ldr	r0, [r7, #0]
 8006a18:	f7ff f882 	bl	8005b20 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f949 	bl	8006ce6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 8006a54:	4603      	mov	r3, r0
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f93b 	bl	8006cfc <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006a86:	4604      	mov	r4, r0
 8006a88:	68b8      	ldr	r0, [r7, #8]
 8006a8a:	f000 f937 	bl	8006cfc <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	4619      	mov	r1, r3
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 f942 	bl	8006d1e <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8006a9a:	4603      	mov	r3, r0
    }
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd90      	pop	{r4, r7, pc}

08006aa4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8006aa4:	b590      	push	{r4, r7, lr}
 8006aa6:	b08f      	sub	sp, #60	; 0x3c
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6178      	str	r0, [r7, #20]
 8006aac:	6139      	str	r1, [r7, #16]
 8006aae:	60fa      	str	r2, [r7, #12]
 8006ab0:	eeb0 7a40 	vmov.f32	s14, s0
 8006ab4:	eef0 7a60 	vmov.f32	s15, s1
 8006ab8:	703b      	strb	r3, [r7, #0]
 8006aba:	ed87 7a01 	vstr	s14, [r7, #4]
 8006abe:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	0fda      	lsrs	r2, r3, #31
 8006ad0:	4413      	add	r3, r2
 8006ad2:	105b      	asrs	r3, r3, #1
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	da46      	bge.n	8006b6a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	3301      	adds	r3, #1
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff f93a 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006af0:	4604      	mov	r4, r0
 8006af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	f107 0314 	add.w	r3, r7, #20
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f931 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b02:	4602      	mov	r2, r0
 8006b04:	463b      	mov	r3, r7
 8006b06:	4621      	mov	r1, r4
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fbdd 	bl	80062c8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x76>
	    __secondChild--;
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	3b01      	subs	r3, #1
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff f91f 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b26:	4603      	mov	r3, r0
 8006b28:	623b      	str	r3, [r7, #32]
 8006b2a:	f107 0320 	add.w	r3, r7, #32
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff fcac 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006b34:	4603      	mov	r3, r0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fcb4 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	f107 0314 	add.w	r3, r7, #20
 8006b42:	6939      	ldr	r1, [r7, #16]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff f90d 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fc9a 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b60:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8006b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b66:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8006b68:	e7af      	b.n	8006aca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d136      	bne.n	8006be2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b02      	subs	r3, #2
 8006b78:	0fda      	lsrs	r2, r3, #31
 8006b7a:	4413      	add	r3, r2
 8006b7c:	105b      	asrs	r3, r3, #1
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d12d      	bne.n	8006be2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	3301      	adds	r3, #1
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	1e5a      	subs	r2, r3, #1
 8006b92:	f107 0314 	add.w	r3, r7, #20
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff f8e3 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fc70 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fc78 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	f107 0314 	add.w	r3, r7, #20
 8006bba:	6939      	ldr	r1, [r7, #16]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff f8d1 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fc5e 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bd8:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	3b01      	subs	r3, #1
 8006be0:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8006be2:	463b      	mov	r3, r7
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fee2 	bl	80069ae <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8006bea:	4602      	mov	r2, r0
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f8b6 	bl	8006d64 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fc52 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c00:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8006c02:	f107 021c 	add.w	r2, r7, #28
 8006c06:	ed93 7a00 	vldr	s14, [r3]
 8006c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	eeb0 0a47 	vmov.f32	s0, s14
 8006c14:	eef0 0a67 	vmov.f32	s1, s15
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	6939      	ldr	r1, [r7, #16]
 8006c1c:	6978      	ldr	r0, [r7, #20]
 8006c1e:	f000 f8af 	bl	8006d80 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>
    }
 8006c22:	bf00      	nop
 8006c24:	373c      	adds	r7, #60	; 0x3c
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}

08006c2a <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fc35 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c44:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006c48:	6838      	ldr	r0, [r7, #0]
 8006c4a:	f7ff fc2b 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c56:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006c5a:	f107 0308 	add.w	r3, r7, #8
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fc20 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c64:	4602      	mov	r2, r0
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006c80:	1d3b      	adds	r3, r7, #4
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fd95 	bl	80057b2 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f8e0 	bl	8006e6e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006cae:	4603      	mov	r3, r0
    }
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEES6_ET_SB_T0_>:
    __niter_wrap(_From __from, _To __res)
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ffd8 	bl	8006c78 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	10db      	asrs	r3, r3, #3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	1d3b      	adds	r3, r7, #4
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff f844 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f8d3 	bl	8006eb2 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f8db 	bl	8006eca <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d14:	4603      	mov	r3, r0
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006d1e:	b5b0      	push	{r4, r5, r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fcef 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d30:	4604      	mov	r4, r0
 8006d32:	68b8      	ldr	r0, [r7, #8]
 8006d34:	f7ff fceb 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d38:	4605      	mov	r5, r0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fce6 	bl	800670e <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	4629      	mov	r1, r5
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 f8c9 	bl	8006ee0 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f8d5 	bl	8006f04 <_ZSt12__niter_wrapIPN2ei8spectral10processing11freq_peak_tEET_RKS5_S5_>
 8006d5a:	4603      	mov	r3, r0
    }
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdb0      	pop	{r4, r5, r7, pc}

08006d64 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fd42 	bl	80057fa <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b08b      	sub	sp, #44	; 0x2c
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6178      	str	r0, [r7, #20]
 8006d88:	6139      	str	r1, [r7, #16]
 8006d8a:	60fa      	str	r2, [r7, #12]
 8006d8c:	eeb0 7a40 	vmov.f32	s14, s0
 8006d90:	eef0 7a60 	vmov.f32	s15, s1
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	ed87 7a01 	vstr	s14, [r7, #4]
 8006d9a:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	0fda      	lsrs	r2, r3, #31
 8006da4:	4413      	add	r3, r2
 8006da6:	105b      	asrs	r3, r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	dd10      	ble.n	8006dd4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 8006db2:	f107 0314 	add.w	r3, r7, #20
 8006db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe ffd3 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6838      	ldr	r0, [r7, #0]
 8006dc6:	f000 f8a9 	bl	8006f1c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x56>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d02d      	beq.n	8006e36 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006dda:	f107 0314 	add.w	r3, r7, #20
 8006dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe ffbf 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006de6:	4603      	mov	r3, r0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fb4c 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006df4:	4603      	mov	r3, r0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fb54 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	f107 0314 	add.w	r3, r7, #20
 8006e02:	6939      	ldr	r1, [r7, #16]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe ffad 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	f107 031c 	add.w	r3, r7, #28
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fb3a 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e20:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	0fda      	lsrs	r2, r3, #31
 8006e2e:	4413      	add	r3, r2
 8006e30:	105b      	asrs	r3, r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006e34:	e7b9      	b.n	8006daa <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006e36:	1d3b      	adds	r3, r7, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff fb33 	bl	80064a4 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006e3e:	4604      	mov	r4, r0
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	6939      	ldr	r1, [r7, #16]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe ff8c 	bl	8005d64 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	623b      	str	r3, [r7, #32]
 8006e50:	f107 0320 	add.w	r3, r7, #32
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fb19 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006e66:	bf00      	nop
 8006e68:	372c      	adds	r7, #44	; 0x2c
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd90      	pop	{r4, r7, pc}

08006e6e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	10db      	asrs	r3, r3, #3
 8006e82:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	425b      	negs	r3, r3
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	18d0      	adds	r0, r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	f013 ff5a 	bl	801ad54 <memmove>
	  return __result - _Num;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	425b      	negs	r3, r3
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	4413      	add	r3, r2
	}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __miter_base(_Iterator __it)
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f828 	bl	8006f4a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006efa:	4603      	mov	r3, r0
    }
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <_ZSt12__niter_wrapIPN2ei8spectral10processing11freq_peak_tEET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8006f1c:	b590      	push	{r4, r7, lr}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8006f28:	68fc      	ldr	r4, [r7, #12]
 8006f2a:	f107 0308 	add.w	r3, r7, #8
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff faac 	bl	800648c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006f34:	4603      	mov	r3, r0
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7fb fd8a 	bl	8002a54 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}

08006f4a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	10db      	asrs	r3, r3, #3
 8006f5e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f013 fef0 	bl	801ad54 <memmove>
	  return __result + _Num;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	4413      	add	r3, r2
	}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f98:	6453      	str	r3, [r2, #68]	; 0x44
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb6:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <HAL_MspInit+0x4c>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40023800 	.word	0x40023800

08006fd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0b      	ldr	r2, [pc, #44]	; (8007010 <HAL_CRC_MspInit+0x3c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d10d      	bne.n	8007002 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <HAL_CRC_MspInit+0x40>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <HAL_CRC_MspInit+0x40>)
 8006ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff6:	4b07      	ldr	r3, [pc, #28]	; (8007014 <HAL_CRC_MspInit+0x40>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40023000 	.word	0x40023000
 8007014:	40023800 	.word	0x40023800

08007018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800701c:	e7fe      	b.n	800701c <NMI_Handler+0x4>

0800701e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007022:	e7fe      	b.n	8007022 <HardFault_Handler+0x4>

08007024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007024:	b480      	push	{r7}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007028:	e7fe      	b.n	8007028 <MemManage_Handler+0x4>

0800702a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800702a:	b480      	push	{r7}
 800702c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800702e:	e7fe      	b.n	800702e <BusFault_Handler+0x4>

08007030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007034:	e7fe      	b.n	8007034 <UsageFault_Handler+0x4>

08007036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007036:	b480      	push	{r7}
 8007038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007048:	bf00      	nop
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007052:	b480      	push	{r7}
 8007054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007056:	bf00      	nop
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007064:	f000 f956 	bl	8007314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007068:	bf00      	nop
 800706a:	bd80      	pop	{r7, pc}

0800706c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
	return 1;
 8007070:	2301      	movs	r3, #1
}
 8007072:	4618      	mov	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <_kill>:

int _kill(int pid, int sig)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007086:	f013 fe07 	bl	801ac98 <__errno>
 800708a:	4603      	mov	r3, r0
 800708c:	2216      	movs	r2, #22
 800708e:	601a      	str	r2, [r3, #0]
	return -1;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <_exit>:

void _exit (int status)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80070a4:	f04f 31ff 	mov.w	r1, #4294967295
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff ffe7 	bl	800707c <_kill>
	while (1) {}		/* Make sure we hang here */
 80070ae:	e7fe      	b.n	80070ae <_exit+0x12>

080070b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e00a      	b.n	80070d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80070c2:	f3af 8000 	nop.w
 80070c6:	4601      	mov	r1, r0
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	60ba      	str	r2, [r7, #8]
 80070ce:	b2ca      	uxtb	r2, r1
 80070d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	3301      	adds	r3, #1
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	429a      	cmp	r2, r3
 80070de:	dbf0      	blt.n	80070c2 <_read+0x12>
	}

return len;
 80070e0:	687b      	ldr	r3, [r7, #4]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e009      	b.n	8007110 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	60ba      	str	r2, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	3301      	adds	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	dbf1      	blt.n	80070fc <_write+0x12>
	}
	return len;
 8007118:	687b      	ldr	r3, [r7, #4]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <_close>:

int _close(int file)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
	return -1;
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800714a:	605a      	str	r2, [r3, #4]
	return 0;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <_isatty>:

int _isatty(int file)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
	return 1;
 8007162:	2301      	movs	r3, #1
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
	return 0;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007194:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <_sbrk+0x5c>)
 8007196:	4b15      	ldr	r3, [pc, #84]	; (80071ec <_sbrk+0x60>)
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <_sbrk+0x64>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <_sbrk+0x64>)
 80071aa:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <_sbrk+0x68>)
 80071ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <_sbrk+0x64>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d207      	bcs.n	80071cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071bc:	f013 fd6c 	bl	801ac98 <__errno>
 80071c0:	4603      	mov	r3, r0
 80071c2:	220c      	movs	r2, #12
 80071c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	e009      	b.n	80071e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071cc:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <_sbrk+0x64>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <_sbrk+0x64>)
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	4a05      	ldr	r2, [pc, #20]	; (80071f0 <_sbrk+0x64>)
 80071dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20030000 	.word	0x20030000
 80071ec:	00000400 	.word	0x00000400
 80071f0:	20000370 	.word	0x20000370
 80071f4:	20000848 	.word	0x20000848

080071f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80071fc:	4b06      	ldr	r3, [pc, #24]	; (8007218 <SystemInit+0x20>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	4a05      	ldr	r2, [pc, #20]	; (8007218 <SystemInit+0x20>)
 8007204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800720c:	bf00      	nop
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800721c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007254 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007220:	480d      	ldr	r0, [pc, #52]	; (8007258 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007222:	490e      	ldr	r1, [pc, #56]	; (800725c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007224:	4a0e      	ldr	r2, [pc, #56]	; (8007260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007228:	e002      	b.n	8007230 <LoopCopyDataInit>

0800722a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800722a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800722c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800722e:	3304      	adds	r3, #4

08007230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007234:	d3f9      	bcc.n	800722a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007236:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007238:	4c0b      	ldr	r4, [pc, #44]	; (8007268 <LoopFillZerobss+0x26>)
  movs r3, #0
 800723a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800723c:	e001      	b.n	8007242 <LoopFillZerobss>

0800723e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800723e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007240:	3204      	adds	r2, #4

08007242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007244:	d3fb      	bcc.n	800723e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007246:	f7ff ffd7 	bl	80071f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800724a:	f013 fd3d 	bl	801acc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800724e:	f7fd fbc5 	bl	80049dc <main>
  bx  lr    
 8007252:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007254:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800725c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8007260:	080209f4 	.word	0x080209f4
  ldr r2, =_sbss
 8007264:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8007268:	20000844 	.word	0x20000844

0800726c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800726c:	e7fe      	b.n	800726c <ADC_IRQHandler>
	...

08007270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007274:	4b0e      	ldr	r3, [pc, #56]	; (80072b0 <HAL_Init+0x40>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a0d      	ldr	r2, [pc, #52]	; (80072b0 <HAL_Init+0x40>)
 800727a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800727e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <HAL_Init+0x40>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <HAL_Init+0x40>)
 8007286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800728a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800728c:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <HAL_Init+0x40>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a07      	ldr	r2, [pc, #28]	; (80072b0 <HAL_Init+0x40>)
 8007292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007296:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007298:	2003      	movs	r0, #3
 800729a:	f000 f90d 	bl	80074b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800729e:	200f      	movs	r0, #15
 80072a0:	f000 f808 	bl	80072b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072a4:	f7ff fe6e 	bl	8006f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40023c00 	.word	0x40023c00

080072b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80072bc:	4b12      	ldr	r3, [pc, #72]	; (8007308 <HAL_InitTick+0x54>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <HAL_InitTick+0x58>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f917 	bl	8007506 <HAL_SYSTICK_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e00e      	b.n	8007300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b0f      	cmp	r3, #15
 80072e6:	d80a      	bhi.n	80072fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072e8:	2200      	movs	r2, #0
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	f000 f8ed 	bl	80074ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072f4:	4a06      	ldr	r2, [pc, #24]	; (8007310 <HAL_InitTick+0x5c>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e000      	b.n	8007300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000054 	.word	0x20000054
 800730c:	2000005c 	.word	0x2000005c
 8007310:	20000058 	.word	0x20000058

08007314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <HAL_IncTick+0x20>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <HAL_IncTick+0x24>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4413      	add	r3, r2
 8007324:	4a04      	ldr	r2, [pc, #16]	; (8007338 <HAL_IncTick+0x24>)
 8007326:	6013      	str	r3, [r2, #0]
}
 8007328:	bf00      	nop
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000005c 	.word	0x2000005c
 8007338:	20000830 	.word	0x20000830

0800733c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return uwTick;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_GetTick+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000830 	.word	0x20000830

08007354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <__NVIC_SetPriorityGrouping+0x44>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007370:	4013      	ands	r3, r2
 8007372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800737c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <__NVIC_SetPriorityGrouping+0x44>)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	60d3      	str	r3, [r2, #12]
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	e000ed00 	.word	0xe000ed00

0800739c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073a0:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <__NVIC_GetPriorityGrouping+0x18>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	f003 0307 	and.w	r3, r3, #7
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000ed00 	.word	0xe000ed00

080073b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db0a      	blt.n	80073e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	490c      	ldr	r1, [pc, #48]	; (8007404 <__NVIC_SetPriority+0x4c>)
 80073d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073d6:	0112      	lsls	r2, r2, #4
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	440b      	add	r3, r1
 80073dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073e0:	e00a      	b.n	80073f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	4908      	ldr	r1, [pc, #32]	; (8007408 <__NVIC_SetPriority+0x50>)
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	3b04      	subs	r3, #4
 80073f0:	0112      	lsls	r2, r2, #4
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	440b      	add	r3, r1
 80073f6:	761a      	strb	r2, [r3, #24]
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	e000e100 	.word	0xe000e100
 8007408:	e000ed00 	.word	0xe000ed00

0800740c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f1c3 0307 	rsb	r3, r3, #7
 8007426:	2b04      	cmp	r3, #4
 8007428:	bf28      	it	cs
 800742a:	2304      	movcs	r3, #4
 800742c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	3304      	adds	r3, #4
 8007432:	2b06      	cmp	r3, #6
 8007434:	d902      	bls.n	800743c <NVIC_EncodePriority+0x30>
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3b03      	subs	r3, #3
 800743a:	e000      	b.n	800743e <NVIC_EncodePriority+0x32>
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007440:	f04f 32ff 	mov.w	r2, #4294967295
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	401a      	ands	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007454:	f04f 31ff 	mov.w	r1, #4294967295
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	43d9      	mvns	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007464:	4313      	orrs	r3, r2
         );
}
 8007466:	4618      	mov	r0, r3
 8007468:	3724      	adds	r7, #36	; 0x24
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3b01      	subs	r3, #1
 8007480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007484:	d301      	bcc.n	800748a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007486:	2301      	movs	r3, #1
 8007488:	e00f      	b.n	80074aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <SysTick_Config+0x40>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3b01      	subs	r3, #1
 8007490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007492:	210f      	movs	r1, #15
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	f7ff ff8e 	bl	80073b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <SysTick_Config+0x40>)
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074a2:	4b04      	ldr	r3, [pc, #16]	; (80074b4 <SysTick_Config+0x40>)
 80074a4:	2207      	movs	r2, #7
 80074a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	e000e010 	.word	0xe000e010

080074b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ff47 	bl	8007354 <__NVIC_SetPriorityGrouping>
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b086      	sub	sp, #24
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	4603      	mov	r3, r0
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	607a      	str	r2, [r7, #4]
 80074da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80074e0:	f7ff ff5c 	bl	800739c <__NVIC_GetPriorityGrouping>
 80074e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f7ff ff8e 	bl	800740c <NVIC_EncodePriority>
 80074f0:	4602      	mov	r2, r0
 80074f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ff5d 	bl	80073b8 <__NVIC_SetPriority>
}
 80074fe:	bf00      	nop
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff ffb0 	bl	8007474 <SysTick_Config>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e00e      	b.n	800754e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	795b      	ldrb	r3, [r3, #5]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fd47 	bl	8006fd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e264      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d075      	beq.n	8007662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007576:	4ba3      	ldr	r3, [pc, #652]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	2b04      	cmp	r3, #4
 8007580:	d00c      	beq.n	800759c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007582:	4ba0      	ldr	r3, [pc, #640]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800758a:	2b08      	cmp	r3, #8
 800758c:	d112      	bne.n	80075b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758e:	4b9d      	ldr	r3, [pc, #628]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800759a:	d10b      	bne.n	80075b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800759c:	4b99      	ldr	r3, [pc, #612]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d05b      	beq.n	8007660 <HAL_RCC_OscConfig+0x108>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d157      	bne.n	8007660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e23f      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075bc:	d106      	bne.n	80075cc <HAL_RCC_OscConfig+0x74>
 80075be:	4b91      	ldr	r3, [pc, #580]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a90      	ldr	r2, [pc, #576]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	e01d      	b.n	8007608 <HAL_RCC_OscConfig+0xb0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x98>
 80075d6:	4b8b      	ldr	r3, [pc, #556]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a8a      	ldr	r2, [pc, #552]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4b88      	ldr	r3, [pc, #544]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a87      	ldr	r2, [pc, #540]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e00b      	b.n	8007608 <HAL_RCC_OscConfig+0xb0>
 80075f0:	4b84      	ldr	r3, [pc, #528]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a83      	ldr	r2, [pc, #524]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b81      	ldr	r3, [pc, #516]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a80      	ldr	r2, [pc, #512]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d013      	beq.n	8007638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007610:	f7ff fe94 	bl	800733c <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007618:	f7ff fe90 	bl	800733c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b64      	cmp	r3, #100	; 0x64
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e204      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	4b76      	ldr	r3, [pc, #472]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0f0      	beq.n	8007618 <HAL_RCC_OscConfig+0xc0>
 8007636:	e014      	b.n	8007662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007638:	f7ff fe80 	bl	800733c <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007640:	f7ff fe7c 	bl	800733c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b64      	cmp	r3, #100	; 0x64
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e1f0      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007652:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0xe8>
 800765e:	e000      	b.n	8007662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d063      	beq.n	8007736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800766e:	4b65      	ldr	r3, [pc, #404]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007682:	2b08      	cmp	r3, #8
 8007684:	d11c      	bne.n	80076c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007686:	4b5f      	ldr	r3, [pc, #380]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d116      	bne.n	80076c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007692:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCC_OscConfig+0x152>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e1c4      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076aa:	4b56      	ldr	r3, [pc, #344]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4952      	ldr	r1, [pc, #328]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076be:	e03a      	b.n	8007736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c8:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <HAL_RCC_OscConfig+0x2b0>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ce:	f7ff fe35 	bl	800733c <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076d6:	f7ff fe31 	bl	800733c <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e1a5      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e8:	4b46      	ldr	r3, [pc, #280]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	4940      	ldr	r1, [pc, #256]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]
 8007708:	e015      	b.n	8007736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770a:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <HAL_RCC_OscConfig+0x2b0>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7ff fe14 	bl	800733c <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007718:	f7ff fe10 	bl	800733c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e184      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772a:	4b36      	ldr	r3, [pc, #216]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d030      	beq.n	80077a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774a:	4b30      	ldr	r3, [pc, #192]	; (800780c <HAL_RCC_OscConfig+0x2b4>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007750:	f7ff fdf4 	bl	800733c <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007758:	f7ff fdf0 	bl	800733c <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e164      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0x200>
 8007776:	e015      	b.n	80077a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007778:	4b24      	ldr	r3, [pc, #144]	; (800780c <HAL_RCC_OscConfig+0x2b4>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800777e:	f7ff fddd 	bl	800733c <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007786:	f7ff fdd9 	bl	800733c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e14d      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 800779a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1f0      	bne.n	8007786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a0 	beq.w	80078f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	4a0e      	ldr	r2, [pc, #56]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6413      	str	r3, [r2, #64]	; 0x40
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d121      	bne.n	8007832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a07      	ldr	r2, [pc, #28]	; (8007810 <HAL_RCC_OscConfig+0x2b8>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fa:	f7ff fd9f 	bl	800733c <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007800:	e011      	b.n	8007826 <HAL_RCC_OscConfig+0x2ce>
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800
 8007808:	42470000 	.word	0x42470000
 800780c:	42470e80 	.word	0x42470e80
 8007810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007814:	f7ff fd92 	bl	800733c <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d901      	bls.n	8007826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e106      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007826:	4b85      	ldr	r3, [pc, #532]	; (8007a3c <HAL_RCC_OscConfig+0x4e4>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0f0      	beq.n	8007814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d106      	bne.n	8007848 <HAL_RCC_OscConfig+0x2f0>
 800783a:	4b81      	ldr	r3, [pc, #516]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a80      	ldr	r2, [pc, #512]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
 8007846:	e01c      	b.n	8007882 <HAL_RCC_OscConfig+0x32a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d10c      	bne.n	800786a <HAL_RCC_OscConfig+0x312>
 8007850:	4b7b      	ldr	r3, [pc, #492]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a7a      	ldr	r2, [pc, #488]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007856:	f043 0304 	orr.w	r3, r3, #4
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	4b78      	ldr	r3, [pc, #480]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a77      	ldr	r2, [pc, #476]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	e00b      	b.n	8007882 <HAL_RCC_OscConfig+0x32a>
 800786a:	4b75      	ldr	r3, [pc, #468]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a74      	ldr	r2, [pc, #464]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	4b72      	ldr	r3, [pc, #456]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a71      	ldr	r2, [pc, #452]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d015      	beq.n	80078b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7ff fd57 	bl	800733c <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7ff fd53 	bl	800733c <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e0c5      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a8:	4b65      	ldr	r3, [pc, #404]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0ee      	beq.n	8007892 <HAL_RCC_OscConfig+0x33a>
 80078b4:	e014      	b.n	80078e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b6:	f7ff fd41 	bl	800733c <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078bc:	e00a      	b.n	80078d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078be:	f7ff fd3d 	bl	800733c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e0af      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d4:	4b5a      	ldr	r3, [pc, #360]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ee      	bne.n	80078be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078e6:	4b56      	ldr	r3, [pc, #344]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a55      	ldr	r2, [pc, #340]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 809b 	beq.w	8007a32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078fc:	4b50      	ldr	r3, [pc, #320]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d05c      	beq.n	80079c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d141      	bne.n	8007994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007910:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007916:	f7ff fd11 	bl	800733c <HAL_GetTick>
 800791a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791c:	e008      	b.n	8007930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800791e:	f7ff fd0d 	bl	800733c <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e081      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007930:	4b43      	ldr	r3, [pc, #268]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f0      	bne.n	800791e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	019b      	lsls	r3, r3, #6
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	3b01      	subs	r3, #1
 8007956:	041b      	lsls	r3, r3, #16
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	4937      	ldr	r1, [pc, #220]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007966:	4b37      	ldr	r3, [pc, #220]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800796c:	f7ff fce6 	bl	800733c <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007974:	f7ff fce2 	bl	800733c <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e056      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007986:	4b2e      	ldr	r3, [pc, #184]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f0      	beq.n	8007974 <HAL_RCC_OscConfig+0x41c>
 8007992:	e04e      	b.n	8007a32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799a:	f7ff fccf 	bl	800733c <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a2:	f7ff fccb 	bl	800733c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e03f      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f0      	bne.n	80079a2 <HAL_RCC_OscConfig+0x44a>
 80079c0:	e037      	b.n	8007a32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e032      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d028      	beq.n	8007a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d121      	bne.n	8007a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d11a      	bne.n	8007a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079fe:	4013      	ands	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d111      	bne.n	8007a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	3b01      	subs	r3, #1
 8007a18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d107      	bne.n	8007a2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d001      	beq.n	8007a32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40007000 	.word	0x40007000
 8007a40:	40023800 	.word	0x40023800
 8007a44:	42470060 	.word	0x42470060

08007a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0cc      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a5c:	4b68      	ldr	r3, [pc, #416]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d90c      	bls.n	8007a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6a:	4b65      	ldr	r3, [pc, #404]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a72:	4b63      	ldr	r3, [pc, #396]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d001      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0b8      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d020      	beq.n	8007ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a9c:	4b59      	ldr	r3, [pc, #356]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	4a58      	ldr	r2, [pc, #352]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007aa6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ab4:	4b53      	ldr	r3, [pc, #332]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a52      	ldr	r2, [pc, #328]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ac0:	4b50      	ldr	r3, [pc, #320]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	494d      	ldr	r1, [pc, #308]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d044      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	4b47      	ldr	r3, [pc, #284]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d119      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e07f      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d003      	beq.n	8007b06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d107      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b06:	4b3f      	ldr	r3, [pc, #252]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e06f      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b16:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e067      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b26:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f023 0203 	bic.w	r2, r3, #3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	4934      	ldr	r1, [pc, #208]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b38:	f7ff fc00 	bl	800733c <HAL_GetTick>
 8007b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3e:	e00a      	b.n	8007b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b40:	f7ff fbfc 	bl	800733c <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d901      	bls.n	8007b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e04f      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b56:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 020c 	and.w	r2, r3, #12
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d1eb      	bne.n	8007b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d20c      	bcs.n	8007b90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b76:	4b22      	ldr	r3, [pc, #136]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <HAL_RCC_ClockConfig+0x1b8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e032      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d008      	beq.n	8007bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4916      	ldr	r1, [pc, #88]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bba:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	490e      	ldr	r1, [pc, #56]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bce:	f000 f821 	bl	8007c14 <HAL_RCC_GetSysClockFreq>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	f003 030f 	and.w	r3, r3, #15
 8007bde:	490a      	ldr	r1, [pc, #40]	; (8007c08 <HAL_RCC_ClockConfig+0x1c0>)
 8007be0:	5ccb      	ldrb	r3, [r1, r3]
 8007be2:	fa22 f303 	lsr.w	r3, r2, r3
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <HAL_RCC_ClockConfig+0x1c4>)
 8007be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bea:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <HAL_RCC_ClockConfig+0x1c8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff fb60 	bl	80072b4 <HAL_InitTick>

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40023c00 	.word	0x40023c00
 8007c04:	40023800 	.word	0x40023800
 8007c08:	0801f850 	.word	0x0801f850
 8007c0c:	20000054 	.word	0x20000054
 8007c10:	20000058 	.word	0x20000058

08007c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6079      	str	r1, [r7, #4]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	60f9      	str	r1, [r7, #12]
 8007c22:	2100      	movs	r1, #0
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c26:	2100      	movs	r1, #0
 8007c28:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c2a:	4952      	ldr	r1, [pc, #328]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c2c:	6889      	ldr	r1, [r1, #8]
 8007c2e:	f001 010c 	and.w	r1, r1, #12
 8007c32:	2908      	cmp	r1, #8
 8007c34:	d00d      	beq.n	8007c52 <HAL_RCC_GetSysClockFreq+0x3e>
 8007c36:	2908      	cmp	r1, #8
 8007c38:	f200 8094 	bhi.w	8007d64 <HAL_RCC_GetSysClockFreq+0x150>
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d002      	beq.n	8007c46 <HAL_RCC_GetSysClockFreq+0x32>
 8007c40:	2904      	cmp	r1, #4
 8007c42:	d003      	beq.n	8007c4c <HAL_RCC_GetSysClockFreq+0x38>
 8007c44:	e08e      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c46:	4b4c      	ldr	r3, [pc, #304]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x164>)
 8007c48:	60bb      	str	r3, [r7, #8]
       break;
 8007c4a:	e08e      	b.n	8007d6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c4c:	4b4b      	ldr	r3, [pc, #300]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x168>)
 8007c4e:	60bb      	str	r3, [r7, #8]
      break;
 8007c50:	e08b      	b.n	8007d6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c52:	4948      	ldr	r1, [pc, #288]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c54:	6849      	ldr	r1, [r1, #4]
 8007c56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007c5a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c5c:	4945      	ldr	r1, [pc, #276]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c5e:	6849      	ldr	r1, [r1, #4]
 8007c60:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d024      	beq.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c68:	4942      	ldr	r1, [pc, #264]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c6a:	6849      	ldr	r1, [r1, #4]
 8007c6c:	0989      	lsrs	r1, r1, #6
 8007c6e:	4608      	mov	r0, r1
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007c78:	f04f 0500 	mov.w	r5, #0
 8007c7c:	ea00 0204 	and.w	r2, r0, r4
 8007c80:	ea01 0305 	and.w	r3, r1, r5
 8007c84:	493d      	ldr	r1, [pc, #244]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x168>)
 8007c86:	fb01 f003 	mul.w	r0, r1, r3
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	fb01 f102 	mul.w	r1, r1, r2
 8007c90:	1844      	adds	r4, r0, r1
 8007c92:	493a      	ldr	r1, [pc, #232]	; (8007d7c <HAL_RCC_GetSysClockFreq+0x168>)
 8007c94:	fba2 0101 	umull	r0, r1, r2, r1
 8007c98:	1863      	adds	r3, r4, r1
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	f7f9 f85a 	bl	8000d5c <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4613      	mov	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e04a      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb2:	4b30      	ldr	r3, [pc, #192]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	099b      	lsrs	r3, r3, #6
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cc2:	f04f 0100 	mov.w	r1, #0
 8007cc6:	ea02 0400 	and.w	r4, r2, r0
 8007cca:	ea03 0501 	and.w	r5, r3, r1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	014b      	lsls	r3, r1, #5
 8007cdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ce0:	0142      	lsls	r2, r0, #5
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	1b00      	subs	r0, r0, r4
 8007ce8:	eb61 0105 	sbc.w	r1, r1, r5
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	018b      	lsls	r3, r1, #6
 8007cf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cfa:	0182      	lsls	r2, r0, #6
 8007cfc:	1a12      	subs	r2, r2, r0
 8007cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f04f 0100 	mov.w	r1, #0
 8007d0a:	00d9      	lsls	r1, r3, #3
 8007d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d10:	00d0      	lsls	r0, r2, #3
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	1912      	adds	r2, r2, r4
 8007d18:	eb45 0303 	adc.w	r3, r5, r3
 8007d1c:	f04f 0000 	mov.w	r0, #0
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	0299      	lsls	r1, r3, #10
 8007d26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d2a:	0290      	lsls	r0, r2, #10
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	f7f9 f80e 	bl	8000d5c <__aeabi_uldivmod>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4613      	mov	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d48:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	3301      	adds	r3, #1
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	60bb      	str	r3, [r7, #8]
      break;
 8007d62:	e002      	b.n	8007d6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <HAL_RCC_GetSysClockFreq+0x164>)
 8007d66:	60bb      	str	r3, [r7, #8]
      break;
 8007d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bdb0      	pop	{r4, r5, r7, pc}
 8007d74:	40023800 	.word	0x40023800
 8007d78:	00f42400 	.word	0x00f42400
 8007d7c:	017d7840 	.word	0x017d7840

08007d80 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b08b      	sub	sp, #44	; 0x2c
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	ed87 0a02 	vstr	s0, [r7, #8]
 8007d8c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	fb03 f302 	mul.w	r3, r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8007dae:	e010      	b.n	8007dd2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	1d1a      	adds	r2, r3, #4
 8007db4:	627a      	str	r2, [r7, #36]	; 0x24
 8007db6:	ed93 7a00 	vldr	s14, [r3]
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	1d1a      	adds	r2, r3, #4
 8007dbe:	623a      	str	r2, [r7, #32]
 8007dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8007dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1eb      	bne.n	8007db0 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8007ddc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	372c      	adds	r7, #44	; 0x2c
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b08b      	sub	sp, #44	; 0x2c
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	885b      	ldrh	r3, [r3, #2]
 8007e0c:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8007e0e:	89fb      	ldrh	r3, [r7, #14]
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8007e20:	89bb      	ldrh	r3, [r7, #12]
 8007e22:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8007e24:	e00d      	b.n	8007e42 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	1d1a      	adds	r2, r3, #4
 8007e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8007e32:	89fb      	ldrh	r3, [r7, #14]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	6a3a      	ldr	r2, [r7, #32]
 8007e38:	4413      	add	r3, r2
 8007e3a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ee      	bne.n	8007e26 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1dd      	bne.n	8007e16 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8007e5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	372c      	adds	r7, #44	; 0x2c
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8007e84:	e00d      	b.n	8007ea2 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1d1a      	adds	r2, r3, #4
 8007e8a:	60fa      	str	r2, [r7, #12]
 8007e8c:	edd3 7a00 	vldr	s15, [r3]
 8007e90:	ed97 7a04 	vldr	s14, [r7, #16]
 8007e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e98:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1ee      	bne.n	8007e86 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007eb2:	edd7 6a04 	vldr	s13, [r7, #16]
 8007eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	edc3 7a00 	vstr	s15, [r3]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8007ee2:	e011      	b.n	8007f08 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	1d1a      	adds	r2, r3, #4
 8007ee8:	60fa      	str	r2, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8007eee:	edd7 7a07 	vldr	s15, [r7, #28]
 8007ef2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007ef6:	ed97 7a08 	vldr	s14, [r7, #32]
 8007efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007efe:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	3b01      	subs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1ea      	bne.n	8007ee4 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f18:	edd7 6a08 	vldr	s13, [r7, #32]
 8007f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f20:	edc7 7a06 	vstr	s15, [r7, #24]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8007f28:	edd7 7a06 	vldr	s15, [r7, #24]
 8007f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f34:	db09      	blt.n	8007f4a <arm_rms_f32+0x7e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8007f36:	ed97 0a06 	vldr	s0, [r7, #24]
 8007f3a:	f010 fc71 	bl	8018820 <sqrtf>
 8007f3e:	eef0 7a40 	vmov.f32	s15, s0
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8007f48:	e004      	b.n	8007f54 <arm_rms_f32+0x88>
    }
    else
    {
      *pOut = 0.0f;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8007f52:	bf00      	nop
}
 8007f54:	bf00      	nop
 8007f56:	3728      	adds	r7, #40	; 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b089      	sub	sp, #36	; 0x24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	460b      	mov	r3, r1
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	e043      	b.n	8007ff8 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4413      	add	r3, r2
 8007f78:	881b      	ldrh	r3, [r3, #0]
 8007f7a:	089b      	lsrs	r3, r3, #2
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	3301      	adds	r3, #1
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	089b      	lsrs	r3, r3, #2
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	440b      	add	r3, r1
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	440b      	add	r3, r1
 8007fe0:	6812      	ldr	r2, [r2, #0]
 8007fe2:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	601a      	str	r2, [r3, #0]

    i += 2;
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8007ff8:	897b      	ldrh	r3, [r7, #10]
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3b7      	bcc.n	8007f70 <arm_bitreversal_32+0x14>
  }
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	3724      	adds	r7, #36	; 0x24
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b0a0      	sub	sp, #128	; 0x80
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800801e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4413      	add	r3, r2
 8008026:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8008032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008034:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8008036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800803c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	4413      	add	r3, r2
 8008044:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8008046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800804c:	4413      	add	r3, r2
 800804e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8008050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008052:	089b      	lsrs	r3, r3, #2
 8008054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008056:	e1b6      	b.n	80083c6 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8008070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8008076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800807c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8008082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8008088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800808e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8008094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800809a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 80080a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80080a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80080ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80080b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80080b8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80080bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	603a      	str	r2, [r7, #0]
 80080c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080ca:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 80080ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80080d2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	1d1a      	adds	r2, r3, #4
 80080da:	603a      	str	r2, [r7, #0]
 80080dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080e0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80080e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80080e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	1d1a      	adds	r2, r3, #4
 80080f0:	603a      	str	r2, [r7, #0]
 80080f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080f6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80080fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80080fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	603a      	str	r2, [r7, #0]
 8008108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800810c:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8008110:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008114:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800811c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8008120:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008124:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800812c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8008130:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008134:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800813c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8008140:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008144:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800814c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8008150:	ed97 7a06 	vldr	s14, [r7, #24]
 8008154:	edd7 7a02 	vldr	s15, [r7, #8]
 8008158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800815a:	1d1a      	adds	r2, r3, #4
 800815c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800815e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008162:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8008166:	ed97 7a07 	vldr	s14, [r7, #28]
 800816a:	edd7 7a03 	vldr	s15, [r7, #12]
 800816e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008170:	1d1a      	adds	r2, r3, #4
 8008172:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008178:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800817c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008180:	edd7 7a04 	vldr	s15, [r7, #16]
 8008184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008186:	1d1a      	adds	r2, r3, #4
 8008188:	67fa      	str	r2, [r7, #124]	; 0x7c
 800818a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800818e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8008192:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008196:	edd7 7a05 	vldr	s15, [r7, #20]
 800819a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081a4:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80081a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80081ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80081b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081b4:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80081b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80081bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80081c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081c4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80081c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80081cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80081d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081d4:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80081d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80081dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80081e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081e4:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80081e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	673a      	str	r2, [r7, #112]	; 0x70
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80081f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081f4:	1d1a      	adds	r2, r3, #4
 80081f6:	673a      	str	r2, [r7, #112]	; 0x70
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80081fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008200:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008208:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800820c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008210:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008218:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800821c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008220:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008228:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800822c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008230:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008238:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800823c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	677a      	str	r2, [r7, #116]	; 0x74
 8008242:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008246:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800824a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800824e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8008252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008254:	1d1a      	adds	r2, r3, #4
 8008256:	677a      	str	r2, [r7, #116]	; 0x74
 8008258:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800825c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008264:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8008268:	edd7 7a02 	vldr	s15, [r7, #8]
 800826c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008274:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8008278:	edd7 7a03 	vldr	s15, [r7, #12]
 800827c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008284:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8008288:	edd7 7a03 	vldr	s15, [r7, #12]
 800828c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008294:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8008298:	edd7 7a02 	vldr	s15, [r7, #8]
 800829c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80082a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80082a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082aa:	1d1a      	adds	r2, r3, #4
 80082ac:	67ba      	str	r2, [r7, #120]	; 0x78
 80082ae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80082b2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80082b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082ba:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80082be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c0:	1d1a      	adds	r2, r3, #4
 80082c2:	67ba      	str	r2, [r7, #120]	; 0x78
 80082c4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80082c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80082cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082d0:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80082d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d6:	1d1a      	adds	r2, r3, #4
 80082d8:	673a      	str	r2, [r7, #112]	; 0x70
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80082de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082e0:	1d1a      	adds	r2, r3, #4
 80082e2:	673a      	str	r2, [r7, #112]	; 0x70
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 80082e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80082ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80082f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80082fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008304:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8008308:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800830c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008314:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8008318:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800831c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008324:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8008328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	677a      	str	r2, [r7, #116]	; 0x74
 800832e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008332:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800833a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800833e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008340:	1d1a      	adds	r2, r3, #4
 8008342:	677a      	str	r2, [r7, #116]	; 0x74
 8008344:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008348:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800834c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008350:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8008354:	edd7 7a04 	vldr	s15, [r7, #16]
 8008358:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800835c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008360:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8008364:	edd7 7a05 	vldr	s15, [r7, #20]
 8008368:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800836c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008370:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8008374:	edd7 7a05 	vldr	s15, [r7, #20]
 8008378:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800837c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008380:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8008384:	edd7 7a04 	vldr	s15, [r7, #16]
 8008388:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800838c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008390:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8008394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008396:	1d1a      	adds	r2, r3, #4
 8008398:	67ba      	str	r2, [r7, #120]	; 0x78
 800839a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800839e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80083a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083a6:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80083aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ac:	1d1a      	adds	r2, r3, #4
 80083ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80083b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80083b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80083b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083bc:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80083c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c2:	3b01      	subs	r3, #1
 80083c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f47f ae45 	bne.w	8008058 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80083ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083d0:	b299      	uxth	r1, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	2302      	movs	r3, #2
 80083d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80083da:	f000 fef1 	bl	80091c0 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80083de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083e0:	b299      	uxth	r1, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	2302      	movs	r3, #2
 80083e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80083ea:	f000 fee9 	bl	80091c0 <arm_radix8_butterfly_f32>
}
 80083ee:	bf00      	nop
 80083f0:	3780      	adds	r7, #128	; 0x80
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b0ac      	sub	sp, #176	; 0xb0
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	b29b      	uxth	r3, r3
 8008408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800840c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4413      	add	r3, r2
 8008416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800841a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008424:	4413      	add	r3, r2
 8008426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800842a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008434:	4413      	add	r3, r2
 8008436:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800843e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008442:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8008444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008448:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800844a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800844e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8008450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008454:	3b04      	subs	r3, #4
 8008456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800845a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845e:	3b04      	subs	r3, #4
 8008460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8008464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008468:	3b04      	subs	r3, #4
 800846a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800846e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008478:	4413      	add	r3, r2
 800847a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800848a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800848e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8008496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80084a0:	2302      	movs	r3, #2
 80084a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80084a4:	2304      	movs	r3, #4
 80084a6:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80084a8:	2306      	movs	r3, #6
 80084aa:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	ed93 7a00 	vldr	s14, [r3]
 80084b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084b6:	edd3 7a00 	vldr	s15, [r3]
 80084ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	ed93 7a00 	vldr	s14, [r3]
 80084c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084cc:	edd3 7a00 	vldr	s15, [r3]
 80084d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	3304      	adds	r3, #4
 80084dc:	ed93 7a00 	vldr	s14, [r3]
 80084e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084e4:	3304      	adds	r3, #4
 80084e6:	edd3 7a00 	vldr	s15, [r3]
 80084ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084ee:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	3304      	adds	r3, #4
 80084f6:	ed93 7a00 	vldr	s14, [r3]
 80084fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084fe:	3304      	adds	r3, #4
 8008500:	edd3 7a00 	vldr	s15, [r3]
 8008504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008508:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800850c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008510:	3304      	adds	r3, #4
 8008512:	ed93 7a00 	vldr	s14, [r3]
 8008516:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800851a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800851e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008522:	3304      	adds	r3, #4
 8008524:	edd3 7a00 	vldr	s15, [r3]
 8008528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008534:	edd3 7a00 	vldr	s15, [r3]
 8008538:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800853c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008544:	edd3 7a00 	vldr	s15, [r3]
 8008548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800854c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008554:	edd3 7a00 	vldr	s15, [r3]
 8008558:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800855c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008564:	edd3 7a00 	vldr	s15, [r3]
 8008568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800856c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008570:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008574:	3304      	adds	r3, #4
 8008576:	edd3 7a00 	vldr	s15, [r3]
 800857a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800857e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008586:	3304      	adds	r3, #4
 8008588:	edd3 7a00 	vldr	s15, [r3]
 800858c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008590:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008598:	3304      	adds	r3, #4
 800859a:	edd3 7a00 	vldr	s15, [r3]
 800859e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80085a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085aa:	3304      	adds	r3, #4
 80085ac:	edd3 7a00 	vldr	s15, [r3]
 80085b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085b4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80085b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085bc:	ed93 7a00 	vldr	s14, [r3]
 80085c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80085c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085cc:	edd3 7a00 	vldr	s15, [r3]
 80085d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085d4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80085d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085dc:	ed93 7a00 	vldr	s14, [r3]
 80085e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80085e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ec:	edd3 7a00 	vldr	s15, [r3]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085fa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80085fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008602:	3304      	adds	r3, #4
 8008604:	ed93 7a00 	vldr	s14, [r3]
 8008608:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800860c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008610:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008614:	3304      	adds	r3, #4
 8008616:	edd3 7a00 	vldr	s15, [r3]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	1d1a      	adds	r2, r3, #4
 800861e:	603a      	str	r2, [r7, #0]
 8008620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008624:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8008628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008634:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8008636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800863a:	1d1a      	adds	r2, r3, #4
 800863c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008642:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8008644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008648:	1d1a      	adds	r2, r3, #4
 800864a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8008652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008656:	1d1a      	adds	r2, r3, #4
 8008658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800865c:	6a3a      	ldr	r2, [r7, #32]
 800865e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8008660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008664:	1d1a      	adds	r2, r3, #4
 8008666:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800866e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008684:	4413      	add	r3, r2
 8008686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800868a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008692:	4413      	add	r3, r2
 8008694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8008698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086a0:	4413      	add	r3, r2
 80086a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80086a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086aa:	3b02      	subs	r3, #2
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086b2:	e31a      	b.n	8008cea <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	ed93 7a00 	vldr	s14, [r3]
 80086ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086be:	edd3 7a00 	vldr	s15, [r3]
 80086c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	ed93 7a00 	vldr	s14, [r3]
 80086d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086d4:	edd3 7a00 	vldr	s15, [r3]
 80086d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086dc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3304      	adds	r3, #4
 80086e4:	ed93 7a00 	vldr	s14, [r3]
 80086e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086ec:	3304      	adds	r3, #4
 80086ee:	edd3 7a00 	vldr	s15, [r3]
 80086f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086f6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	3304      	adds	r3, #4
 80086fe:	ed93 7a00 	vldr	s14, [r3]
 8008702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008706:	3304      	adds	r3, #4
 8008708:	edd3 7a00 	vldr	s15, [r3]
 800870c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008710:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008718:	3304      	adds	r3, #4
 800871a:	ed93 7a00 	vldr	s14, [r3]
 800871e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800872a:	3304      	adds	r3, #4
 800872c:	edd3 7a00 	vldr	s15, [r3]
 8008730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008734:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800873c:	edd3 7a00 	vldr	s15, [r3]
 8008740:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800874c:	edd3 7a00 	vldr	s15, [r3]
 8008750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008754:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800875c:	edd3 7a00 	vldr	s15, [r3]
 8008760:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800876c:	edd3 7a00 	vldr	s15, [r3]
 8008770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008774:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800877c:	3304      	adds	r3, #4
 800877e:	edd3 7a00 	vldr	s15, [r3]
 8008782:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800878a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800878e:	3304      	adds	r3, #4
 8008790:	edd3 7a00 	vldr	s15, [r3]
 8008794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008798:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800879c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087a0:	3304      	adds	r3, #4
 80087a2:	edd3 7a00 	vldr	s15, [r3]
 80087a6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80087aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80087ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087b2:	3304      	adds	r3, #4
 80087b4:	edd3 7a00 	vldr	s15, [r3]
 80087b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087bc:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80087c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087c4:	ed93 7a00 	vldr	s14, [r3]
 80087c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80087cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087d4:	edd3 7a00 	vldr	s15, [r3]
 80087d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087dc:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 80087e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087e4:	ed93 7a00 	vldr	s14, [r3]
 80087e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80087ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087f4:	edd3 7a00 	vldr	s15, [r3]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	1d1a      	adds	r2, r3, #4
 80087fc:	603a      	str	r2, [r7, #0]
 80087fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008802:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800880a:	3304      	adds	r3, #4
 800880c:	ed93 7a00 	vldr	s14, [r3]
 8008810:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800881c:	3304      	adds	r3, #4
 800881e:	edd3 7a00 	vldr	s15, [r3]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	603a      	str	r2, [r7, #0]
 8008828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800882c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8008830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008834:	3b04      	subs	r3, #4
 8008836:	ed93 7a00 	vldr	s14, [r3]
 800883a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800883e:	3b04      	subs	r3, #4
 8008840:	edd3 7a00 	vldr	s15, [r3]
 8008844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008848:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800884c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008850:	3b04      	subs	r3, #4
 8008852:	ed93 7a00 	vldr	s14, [r3]
 8008856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800885a:	3b04      	subs	r3, #4
 800885c:	edd3 7a00 	vldr	s15, [r3]
 8008860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008864:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8008868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800886c:	ed93 7a00 	vldr	s14, [r3]
 8008870:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008874:	edd3 7a00 	vldr	s15, [r3]
 8008878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800887c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8008880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008884:	ed93 7a00 	vldr	s14, [r3]
 8008888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800888c:	edd3 7a00 	vldr	s15, [r3]
 8008890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008894:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8008898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800889c:	ed93 7a00 	vldr	s14, [r3]
 80088a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088a4:	edd3 7a00 	vldr	s15, [r3]
 80088a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80088b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088b4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80088b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088bc:	ed93 7a00 	vldr	s14, [r3]
 80088c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088c4:	edd3 7a00 	vldr	s15, [r3]
 80088c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088d0:	3b04      	subs	r3, #4
 80088d2:	edd3 7a00 	vldr	s15, [r3]
 80088d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088de:	3b04      	subs	r3, #4
 80088e0:	edd3 7a00 	vldr	s15, [r3]
 80088e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80088ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088f0:	3b04      	subs	r3, #4
 80088f2:	edd3 7a00 	vldr	s15, [r3]
 80088f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80088fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008902:	3b04      	subs	r3, #4
 8008904:	edd3 7a00 	vldr	s15, [r3]
 8008908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800890c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8008910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008914:	edd3 7a00 	vldr	s15, [r3]
 8008918:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800891c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008920:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008924:	edd3 7a00 	vldr	s15, [r3]
 8008928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800892c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8008930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008934:	ed93 7a00 	vldr	s14, [r3]
 8008938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800893c:	edd3 7a00 	vldr	s15, [r3]
 8008940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008944:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800894c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8008950:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008954:	3b04      	subs	r3, #4
 8008956:	ed93 7a00 	vldr	s14, [r3]
 800895a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800895e:	3b04      	subs	r3, #4
 8008960:	edd3 7a00 	vldr	s15, [r3]
 8008964:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008968:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800896c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008970:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8008974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008978:	ed93 7a00 	vldr	s14, [r3]
 800897c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008984:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008988:	edd3 7a00 	vldr	s15, [r3]
 800898c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008990:	1f1a      	subs	r2, r3, #4
 8008992:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800899a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800899e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089a2:	3b04      	subs	r3, #4
 80089a4:	ed93 7a00 	vldr	s14, [r3]
 80089a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80089ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089b4:	3b04      	subs	r3, #4
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089be:	1f1a      	subs	r2, r3, #4
 80089c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089c8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 80089cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 80089da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089de:	1d1a      	adds	r2, r3, #4
 80089e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 80089e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80089ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80089f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 80089f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80089fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8008a08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008a0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8008a18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008a1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8008a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a2c:	1d1a      	adds	r2, r3, #4
 8008a2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008a32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008a36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a3e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8008a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a46:	1d1a      	adds	r2, r3, #4
 8008a48:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008a4c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008a50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a58:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8008a5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008a60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8008a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008a70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a78:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8008a7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008a80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8008a8c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008a90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8008a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008aa0:	1f1a      	subs	r2, r3, #4
 8008aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008aa6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008aaa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ab2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8008ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008aba:	1f1a      	subs	r2, r3, #4
 8008abc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ac0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008ac4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008acc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8008ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8008ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8008ae0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ae8:	4413      	add	r3, r2
 8008aea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8008aee:	edd7 7a07 	vldr	s15, [r7, #28]
 8008af2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8008afe:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8008b0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8008b1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8008b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b38:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b44:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8008b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b52:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008b56:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b5e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8008b62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b66:	eef1 7a67 	vneg.f32	s15, s15
 8008b6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8008b76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b7a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b82:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8008b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b8a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8008b96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b9a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8008ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008baa:	1f1a      	subs	r2, r3, #4
 8008bac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008bb0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008bb4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bbc:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8008bc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bc4:	1f1a      	subs	r2, r3, #4
 8008bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008bca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008bce:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bd6:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8008bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8008be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8008bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8008bf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008bfc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c04:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8008c08:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8008c18:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c1c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c24:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8008c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8008c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c3c:	1d1a      	adds	r2, r3, #4
 8008c3e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008c42:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008c46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c4e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8008c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c56:	1d1a      	adds	r2, r3, #4
 8008c58:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008c5c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008c60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c68:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8008c6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8008c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c88:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8008c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c90:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8008c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ca0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8008cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cb0:	1f1a      	subs	r2, r3, #4
 8008cb2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008cb6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008cba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cc2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8008cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cca:	1f1a      	subs	r2, r3, #4
 8008ccc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008cd0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008cd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cdc:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8008ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f47f ace0 	bne.w	80086b4 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	ed93 7a00 	vldr	s14, [r3]
 8008cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cfe:	edd3 7a00 	vldr	s15, [r3]
 8008d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	ed93 7a00 	vldr	s14, [r3]
 8008d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d14:	edd3 7a00 	vldr	s15, [r3]
 8008d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d1c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	ed93 7a00 	vldr	s14, [r3]
 8008d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	edd3 7a00 	vldr	s15, [r3]
 8008d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d36:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	ed93 7a00 	vldr	s14, [r3]
 8008d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d46:	3304      	adds	r3, #4
 8008d48:	edd3 7a00 	vldr	s15, [r3]
 8008d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d50:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d58:	3304      	adds	r3, #4
 8008d5a:	ed93 7a00 	vldr	s14, [r3]
 8008d5e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d6a:	3304      	adds	r3, #4
 8008d6c:	edd3 7a00 	vldr	s15, [r3]
 8008d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d74:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d7c:	edd3 7a00 	vldr	s15, [r3]
 8008d80:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d8c:	edd3 7a00 	vldr	s15, [r3]
 8008d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d94:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d9c:	edd3 7a00 	vldr	s15, [r3]
 8008da0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008da4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dac:	edd3 7a00 	vldr	s15, [r3]
 8008db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008db4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	edd3 7a00 	vldr	s15, [r3]
 8008dc2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008dce:	3304      	adds	r3, #4
 8008dd0:	edd3 7a00 	vldr	s15, [r3]
 8008dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dd8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008de0:	3304      	adds	r3, #4
 8008de2:	edd3 7a00 	vldr	s15, [r3]
 8008de6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008df2:	3304      	adds	r3, #4
 8008df4:	edd3 7a00 	vldr	s15, [r3]
 8008df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dfc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e04:	ed93 7a00 	vldr	s14, [r3]
 8008e08:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e14:	edd3 7a00 	vldr	s15, [r3]
 8008e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e1c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008e20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e24:	ed93 7a00 	vldr	s14, [r3]
 8008e28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e34:	edd3 7a00 	vldr	s15, [r3]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	603a      	str	r2, [r7, #0]
 8008e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e42:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	ed93 7a00 	vldr	s14, [r3]
 8008e50:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	edd3 7a00 	vldr	s15, [r3]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	1d1a      	adds	r2, r3, #4
 8008e66:	603a      	str	r2, [r7, #0]
 8008e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e6c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8008e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8008e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8008e80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8008e90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8008ea0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008ea4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8008eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008eb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8008ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008eca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008ece:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ed6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8008eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ede:	1d1a      	adds	r2, r3, #4
 8008ee0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008ee4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008ee8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ef0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8008ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8008efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8008f04:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f10:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8008f14:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f18:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8008f24:	edd7 7a08 	vldr	s15, [r7, #32]
 8008f28:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f30:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8008f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f38:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8008f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f48:	1d1a      	adds	r2, r3, #4
 8008f4a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f4e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f5a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8008f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f68:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008f6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f74:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8008f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8008f80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8008f88:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f94:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8008f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f9c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8008fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8008fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fbc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8008fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008fd2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008fd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fde:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8008fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008fec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008ff0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ff8:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8008ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009000:	b299      	uxth	r1, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	2304      	movs	r3, #4
 8009008:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800900a:	f000 f8d9 	bl	80091c0 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800900e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009012:	b299      	uxth	r1, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	2304      	movs	r3, #4
 800901a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800901c:	f000 f8d0 	bl	80091c0 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8009020:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009024:	b299      	uxth	r1, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	2304      	movs	r3, #4
 800902c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800902e:	f000 f8c7 	bl	80091c0 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8009032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009036:	b299      	uxth	r1, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	2304      	movs	r3, #4
 800903e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009040:	f000 f8be 	bl	80091c0 <arm_radix8_butterfly_f32>
}
 8009044:	bf00      	nop
 8009046:	37b0      	adds	r7, #176	; 0xb0
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4611      	mov	r1, r2
 8009058:	461a      	mov	r2, r3
 800905a:	460b      	mov	r3, r1
 800905c:	71fb      	strb	r3, [r7, #7]
 800905e:	4613      	mov	r3, r2
 8009060:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d117      	bne.n	800909e <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	3304      	adds	r3, #4
 8009072:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009074:	2300      	movs	r3, #0
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e00d      	b.n	8009096 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	edd3 7a00 	vldr	s15, [r3]
 8009080:	eef1 7a67 	vneg.f32	s15, s15
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	3308      	adds	r3, #8
 800908e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	429a      	cmp	r2, r3
 800909c:	d3ed      	bcc.n	800907a <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a4:	d040      	beq.n	8009128 <arm_cfft_f32+0xdc>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ac:	d845      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090b4:	d033      	beq.n	800911e <arm_cfft_f32+0xd2>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090bc:	d83d      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c4:	d026      	beq.n	8009114 <arm_cfft_f32+0xc8>
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090cc:	d835      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d4:	d028      	beq.n	8009128 <arm_cfft_f32+0xdc>
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090dc:	d82d      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e4:	d01b      	beq.n	800911e <arm_cfft_f32+0xd2>
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ec:	d825      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b80      	cmp	r3, #128	; 0x80
 80090f2:	d00f      	beq.n	8009114 <arm_cfft_f32+0xc8>
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b80      	cmp	r3, #128	; 0x80
 80090f8:	d81f      	bhi.n	800913a <arm_cfft_f32+0xee>
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	d013      	beq.n	8009128 <arm_cfft_f32+0xdc>
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b40      	cmp	r3, #64	; 0x40
 8009104:	d819      	bhi.n	800913a <arm_cfft_f32+0xee>
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b10      	cmp	r3, #16
 800910a:	d003      	beq.n	8009114 <arm_cfft_f32+0xc8>
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b20      	cmp	r3, #32
 8009110:	d005      	beq.n	800911e <arm_cfft_f32+0xd2>
 8009112:	e012      	b.n	800913a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7fe ff79 	bl	800800e <arm_cfft_radix8by2_f32>
    break;
 800911c:	e00d      	b.n	800913a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff f968 	bl	80083f6 <arm_cfft_radix8by4_f32>
    break;
 8009126:	e008      	b.n	800913a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	b299      	uxth	r1, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	2301      	movs	r3, #1
 8009132:	68b8      	ldr	r0, [r7, #8]
 8009134:	f000 f844 	bl	80091c0 <arm_radix8_butterfly_f32>
    break;
 8009138:	bf00      	nop
  }

  if ( bitReverseFlag )
 800913a:	79bb      	ldrb	r3, [r7, #6]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8999      	ldrh	r1, [r3, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	461a      	mov	r2, r3
 800914a:	68b8      	ldr	r0, [r7, #8]
 800914c:	f7fe ff06 	bl	8007f5c <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d130      	bne.n	80091b8 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	ee07 3a90 	vmov	s15, r3
 800915c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009168:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e01c      	b.n	80091b0 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	1d1a      	adds	r2, r3, #4
 800917a:	61ba      	str	r2, [r7, #24]
 800917c:	ed93 7a00 	vldr	s14, [r3]
 8009180:	edd7 7a04 	vldr	s15, [r7, #16]
 8009184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009188:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	edd3 7a00 	vldr	s15, [r3]
 8009192:	eeb1 7a67 	vneg.f32	s14, s15
 8009196:	edd7 7a04 	vldr	s15, [r7, #16]
 800919a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	3304      	adds	r3, #4
 80091a8:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	3301      	adds	r3, #1
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d3de      	bcc.n	8009176 <arm_cfft_f32+0x12a>
    }
  }
}
 80091b8:	bf00      	nop
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b0bd      	sub	sp, #244	; 0xf4
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	461a      	mov	r2, r3
 80091cc:	460b      	mov	r3, r1
 80091ce:	817b      	strh	r3, [r7, #10]
 80091d0:	4613      	mov	r3, r2
 80091d2:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80091d4:	4b09      	ldr	r3, [pc, #36]	; (80091fc <arm_radix8_butterfly_f32+0x3c>)
 80091d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 80091da:	897b      	ldrh	r3, [r7, #10]
 80091dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 80091e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ec:	08db      	lsrs	r3, r3, #3
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091f8:	e002      	b.n	8009200 <arm_radix8_butterfly_f32+0x40>
 80091fa:	bf00      	nop
 80091fc:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8009200:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009208:	4413      	add	r3, r2
 800920a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800920e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009216:	4413      	add	r3, r2
 8009218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800921c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009224:	4413      	add	r3, r2
 8009226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800922a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800922e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009232:	4413      	add	r3, r2
 8009234:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8009238:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009240:	4413      	add	r3, r2
 8009242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8009246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924e:	4413      	add	r3, r2
 8009250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8009254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925c:	4413      	add	r3, r2
 800925e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8009262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	ed93 7a00 	vldr	s14, [r3]
 8009270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	edd3 7a00 	vldr	s15, [r3]
 800927e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009282:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8009286:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	ed93 7a00 	vldr	s14, [r3]
 8009294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	edd3 7a00 	vldr	s15, [r3]
 80092a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092a6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80092aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	ed93 7a00 	vldr	s14, [r3]
 80092b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	edd3 7a00 	vldr	s15, [r3]
 80092c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80092ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	ed93 7a00 	vldr	s14, [r3]
 80092dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	edd3 7a00 	vldr	s15, [r3]
 80092ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092ee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80092f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	ed93 7a00 	vldr	s14, [r3]
 8009300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4413      	add	r3, r2
 800930a:	edd3 7a00 	vldr	s15, [r3]
 800930e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009312:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	ed93 7a00 	vldr	s14, [r3]
 8009324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	edd3 7a00 	vldr	s15, [r3]
 8009332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009336:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800933a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4413      	add	r3, r2
 8009344:	ed93 7a00 	vldr	s14, [r3]
 8009348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	edd3 7a00 	vldr	s15, [r3]
 8009356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800935a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800935e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4413      	add	r3, r2
 8009368:	ed93 7a00 	vldr	s14, [r3]
 800936c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	edd3 7a00 	vldr	s15, [r3]
 800937a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800937e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8009382:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009386:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800938a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800938e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8009392:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009396:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800939a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800939e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80093a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80093a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80093aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80093b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80093b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80093ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 80093c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80093d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80093d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80093dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80093ea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80093ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093f2:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80093f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	3304      	adds	r3, #4
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	ed93 7a00 	vldr	s14, [r3]
 8009406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	3304      	adds	r3, #4
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4413      	add	r3, r2
 8009412:	edd3 7a00 	vldr	s15, [r3]
 8009416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800941a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800941e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	3304      	adds	r3, #4
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	ed93 7a00 	vldr	s14, [r3]
 800942e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	3304      	adds	r3, #4
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	edd3 7a00 	vldr	s15, [r3]
 800943e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009442:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	3304      	adds	r3, #4
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	ed93 7a00 	vldr	s14, [r3]
 8009456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	3304      	adds	r3, #4
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	4413      	add	r3, r2
 8009462:	edd3 7a00 	vldr	s15, [r3]
 8009466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800946a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800946e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	3304      	adds	r3, #4
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	ed93 7a00 	vldr	s14, [r3]
 800947e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	3304      	adds	r3, #4
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	edd3 7a00 	vldr	s15, [r3]
 800948e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009492:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	3304      	adds	r3, #4
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	4413      	add	r3, r2
 80094a2:	ed93 7a00 	vldr	s14, [r3]
 80094a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	3304      	adds	r3, #4
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	edd3 7a00 	vldr	s15, [r3]
 80094b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094ba:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80094be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	3304      	adds	r3, #4
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	ed93 7a00 	vldr	s14, [r3]
 80094ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	3304      	adds	r3, #4
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	edd3 7a00 	vldr	s15, [r3]
 80094de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094e2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80094e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	3304      	adds	r3, #4
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4413      	add	r3, r2
 80094f2:	ed93 7a00 	vldr	s14, [r3]
 80094f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	3304      	adds	r3, #4
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4413      	add	r3, r2
 8009502:	edd3 7a00 	vldr	s15, [r3]
 8009506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800950e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	3304      	adds	r3, #4
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4413      	add	r3, r2
 800951a:	ed93 7a00 	vldr	s14, [r3]
 800951e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	3304      	adds	r3, #4
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	edd3 7a00 	vldr	s15, [r3]
 800952e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009532:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8009536:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800953a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800953e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009542:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8009546:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800954a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800954e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009552:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8009556:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800955a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800955e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009562:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8009566:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800956a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800956e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009572:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8009576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	3304      	adds	r3, #4
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4413      	add	r3, r2
 8009582:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009586:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800958a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800958e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8009592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	3304      	adds	r3, #4
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80095a2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80095a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095aa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80095ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80095bc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80095c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095c4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80095c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80095d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80095da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80095e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	3304      	adds	r3, #4
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80095f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80095f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80095fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	3304      	adds	r3, #4
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800960e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009616:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800961a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800961e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009626:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8009632:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009636:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800963a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800963e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800964a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800964e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009656:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800965a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8009662:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009666:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800966a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800966e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800967a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800967e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009686:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800968a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800968e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009696:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800969a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800969e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80096a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096a6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80096aa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80096ae:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80096b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 80096ba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80096be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80096c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80096ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80096ce:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80096d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80096da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80096de:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80096e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096e6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80096ea:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80096ee:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80096f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80096fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009708:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800970c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009710:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8009714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009722:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800972a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800972e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800973c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009744:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8009748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	4413      	add	r3, r2
 8009752:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800975a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8009762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	3304      	adds	r3, #4
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4413      	add	r3, r2
 800976e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009772:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800977a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800977e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	3304      	adds	r3, #4
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800978e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009796:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800979a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	3304      	adds	r3, #4
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80097aa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80097ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 80097b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	3304      	adds	r3, #4
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80097c6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80097ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ce:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 80097d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80097d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097da:	4413      	add	r3, r2
 80097dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 80097e0:	897b      	ldrh	r3, [r7, #10]
 80097e2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80097e6:	429a      	cmp	r2, r3
 80097e8:	f4ff ad0a 	bcc.w	8009200 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	f240 84e3 	bls.w	800a1bc <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8009802:	893b      	ldrh	r3, [r7, #8]
 8009804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009808:	4413      	add	r3, r2
 800980a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800980c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800980e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8009812:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009816:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009818:	4413      	add	r3, r2
 800981a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800981c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800981e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009820:	4413      	add	r3, r2
 8009822:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8009824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009828:	4413      	add	r3, r2
 800982a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800982c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800982e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009830:	4413      	add	r3, r2
 8009832:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8009834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009838:	4413      	add	r3, r2
 800983a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800983c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800983e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009840:	4413      	add	r3, r2
 8009842:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8009844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8009852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009854:	00db      	lsls	r3, r3, #3
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	4413      	add	r3, r2
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800985e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009860:	00db      	lsls	r3, r3, #3
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4413      	add	r3, r2
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800986a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4413      	add	r3, r2
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8009882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800988e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800989a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	3304      	adds	r3, #4
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	4413      	add	r3, r2
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80098aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	3304      	adds	r3, #4
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	4413      	add	r3, r2
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 80098b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	3304      	adds	r3, #4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 80098c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	3304      	adds	r3, #4
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80098d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	3304      	adds	r3, #4
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80098e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	3304      	adds	r3, #4
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 80098f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	3304      	adds	r3, #4
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4413      	add	r3, r2
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8009906:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	4413      	add	r3, r2
 8009910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8009914:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991c:	4413      	add	r3, r2
 800991e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8009922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992a:	4413      	add	r3, r2
 800992c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8009930:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009938:	4413      	add	r3, r2
 800993a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800993e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009946:	4413      	add	r3, r2
 8009948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800994c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009954:	4413      	add	r3, r2
 8009956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800995a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800995e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009962:	4413      	add	r3, r2
 8009964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8009968:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	ed93 7a00 	vldr	s14, [r3]
 8009976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	edd3 7a00 	vldr	s15, [r3]
 8009984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009988:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800998c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4413      	add	r3, r2
 8009996:	ed93 7a00 	vldr	s14, [r3]
 800999a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	edd3 7a00 	vldr	s15, [r3]
 80099a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ac:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80099b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	ed93 7a00 	vldr	s14, [r3]
 80099be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	edd3 7a00 	vldr	s15, [r3]
 80099cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80099d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4413      	add	r3, r2
 80099de:	ed93 7a00 	vldr	s14, [r3]
 80099e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	edd3 7a00 	vldr	s15, [r3]
 80099f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80099f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	ed93 7a00 	vldr	s14, [r3]
 8009a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	edd3 7a00 	vldr	s15, [r3]
 8009a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a18:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009a1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	ed93 7a00 	vldr	s14, [r3]
 8009a2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a2e:	00db      	lsls	r3, r3, #3
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	edd3 7a00 	vldr	s15, [r3]
 8009a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a3c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009a40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	ed93 7a00 	vldr	s14, [r3]
 8009a4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	edd3 7a00 	vldr	s15, [r3]
 8009a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a60:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8009a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	ed93 7a00 	vldr	s14, [r3]
 8009a72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	edd3 7a00 	vldr	s15, [r3]
 8009a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a84:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8009a88:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009a8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a94:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8009a98:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009a9c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aa4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8009aa8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009aac:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ab4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8009ab8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009abc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ac4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8009ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009acc:	00db      	lsls	r3, r3, #3
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ad6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ade:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8009ae2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ae6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009af6:	00db      	lsls	r3, r3, #3
 8009af8:	3304      	adds	r3, #4
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	ed93 7a00 	vldr	s14, [r3]
 8009b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	3304      	adds	r3, #4
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	edd3 7a00 	vldr	s15, [r3]
 8009b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8009b1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	3304      	adds	r3, #4
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	ed93 7a00 	vldr	s14, [r3]
 8009b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	3304      	adds	r3, #4
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	edd3 7a00 	vldr	s15, [r3]
 8009b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b3e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	3304      	adds	r3, #4
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	ed93 7a00 	vldr	s14, [r3]
 8009b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	3304      	adds	r3, #4
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	edd3 7a00 	vldr	s15, [r3]
 8009b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8009b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	3304      	adds	r3, #4
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	ed93 7a00 	vldr	s14, [r3]
 8009b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	3304      	adds	r3, #4
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4413      	add	r3, r2
 8009b86:	edd3 7a00 	vldr	s15, [r3]
 8009b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b8e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009b92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	3304      	adds	r3, #4
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	ed93 7a00 	vldr	s14, [r3]
 8009ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	3304      	adds	r3, #4
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	4413      	add	r3, r2
 8009bae:	edd3 7a00 	vldr	s15, [r3]
 8009bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bb6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8009bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	ed93 7a00 	vldr	s14, [r3]
 8009bca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	edd3 7a00 	vldr	s15, [r3]
 8009bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bde:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8009be2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	3304      	adds	r3, #4
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	ed93 7a00 	vldr	s14, [r3]
 8009bf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	edd3 7a00 	vldr	s15, [r3]
 8009c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c06:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8009c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	3304      	adds	r3, #4
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	ed93 7a00 	vldr	s14, [r3]
 8009c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	3304      	adds	r3, #4
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4413      	add	r3, r2
 8009c26:	edd3 7a00 	vldr	s15, [r3]
 8009c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c2e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8009c32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009c36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8009c42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009c46:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8009c52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009c56:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8009c62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009c66:	edd7 7a08 	vldr	s15, [r7, #32]
 8009c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8009c72:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009c76:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8009c82:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009c86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c8e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8009c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ca2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009caa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8009cae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009cb2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8009cbe:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009cc2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8009cce:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009cd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8009cde:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009ce2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cea:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8009cee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009cf2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8009cfe:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009d02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8009d0e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009d12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8009d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4413      	add	r3, r2
 8009d28:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d34:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8009d38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d3c:	00db      	lsls	r3, r3, #3
 8009d3e:	3304      	adds	r3, #4
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8009d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d50:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8009d54:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009d58:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d60:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8009d64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d70:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8009d74:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009d78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d80:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8009d84:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009d88:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d90:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8009d94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8009da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009daa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8009dae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	3304      	adds	r3, #4
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	ed97 7a05 	vldr	s14, [r7, #20]
 8009dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8009dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dc6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8009dca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009dce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8009dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8009dda:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009dde:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8009dea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009dee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8009dfa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009dfe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8009e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	ed97 7a07 	vldr	s14, [r7, #28]
 8009e18:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e20:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8009e24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e3c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8009e40:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009e44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e54:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8009e58:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009e5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e64:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8009e70:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009e74:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e7c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8009e88:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009e8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e94:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8009ea0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009ea4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8009eb0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009eb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ebc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8009ec0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009ec4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ecc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8009ed0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009ed4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009edc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8009ee0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009ee4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8009ef0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009ef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009efc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8009f00:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009f04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8009f10:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009f14:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f1c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8009f20:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009f24:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f2c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8009f30:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009f34:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f3c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8009f40:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009f44:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f4c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8009f50:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009f54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f5c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8009f60:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009f64:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f6c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8009f70:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009f74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f7c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8009f80:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009f84:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f8c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8009f90:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009f94:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f9c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8009fa0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009fa4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8009fb0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009fb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8009fc0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009fc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fcc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8009fd0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009fd4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fdc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8009fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	ed97 7a07 	vldr	s14, [r7, #28]
 8009fee:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8009ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	3304      	adds	r3, #4
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	4413      	add	r3, r2
 800a006:	ed97 7a05 	vldr	s14, [r7, #20]
 800a00a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a00e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a012:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800a016:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a01a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a022:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800a026:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a02a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800a036:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a03a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800a046:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a04a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800a056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4413      	add	r3, r2
 800a060:	ed97 7a07 	vldr	s14, [r7, #28]
 800a064:	edd7 7a06 	vldr	s15, [r7, #24]
 800a068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a06c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800a070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a074:	00db      	lsls	r3, r3, #3
 800a076:	3304      	adds	r3, #4
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a080:	edd7 7a04 	vldr	s15, [r7, #16]
 800a084:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a088:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800a08c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a090:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a098:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800a09c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800a0ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a0b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800a0bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0c0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800a0cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	ed97 7a07 	vldr	s14, [r7, #28]
 800a0da:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800a0e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0ea:	00db      	lsls	r3, r3, #3
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	ed97 7a05 	vldr	s14, [r7, #20]
 800a0f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0fe:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800a102:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a106:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a10e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800a112:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a116:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800a122:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a126:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800a132:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a136:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a13e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800a142:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	4413      	add	r3, r2
 800a14c:	ed97 7a07 	vldr	s14, [r7, #28]
 800a150:	edd7 7a06 	vldr	s15, [r7, #24]
 800a154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a158:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800a15c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	3304      	adds	r3, #4
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4413      	add	r3, r2
 800a168:	ed97 7a05 	vldr	s14, [r7, #20]
 800a16c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a174:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800a178:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a17c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a180:	4413      	add	r3, r2
 800a182:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800a186:	897b      	ldrh	r3, [r7, #10]
 800a188:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a18c:	429a      	cmp	r2, r3
 800a18e:	f4ff abba 	bcc.w	8009906 <arm_radix8_butterfly_f32+0x746>

         j++;
 800a192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a196:	3301      	adds	r3, #1
 800a198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800a19c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	f4ff ab2c 	bcc.w	8009802 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800a1aa:	893b      	ldrh	r3, [r7, #8]
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800a1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	f63f a813 	bhi.w	80091e0 <arm_radix8_butterfly_f32+0x20>
}
 800a1ba:	e000      	b.n	800a1be <arm_radix8_butterfly_f32+0xffe>
         break;
 800a1bc:	bf00      	nop
}
 800a1be:	bf00      	nop
 800a1c0:	37f4      	adds	r7, #244	; 0xf4
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop

0800a1cc <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b095      	sub	sp, #84	; 0x54
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800a1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800a1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800a1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800a200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800a206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a208:	1d1a      	adds	r2, r3, #4
 800a20a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800a210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a212:	1d1a      	adds	r2, r3, #4
 800a214:	64ba      	str	r2, [r7, #72]	; 0x48
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800a21a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a21e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a222:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a226:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800a22a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a22e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a232:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a236:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800a23a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a23e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a242:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	1d1a      	adds	r2, r3, #4
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a250:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a254:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800a258:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a25c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a260:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	1d1a      	adds	r2, r3, #4
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a26e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a272:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800a276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	4413      	add	r3, r2
 800a27e:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800a280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a282:	3308      	adds	r3, #8
 800a284:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800a286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800a28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800a292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800a298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800a29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a0:	1d1a      	adds	r2, r3, #4
 800a2a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800a2b2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a2b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800a2c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a2c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ce:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800a2d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a2d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2de:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800a2e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ee:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800a2f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a2f6:	edd7 7a08 	vldr	s15, [r7, #32]
 800a2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fe:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800a302:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a306:	edd7 7a08 	vldr	s15, [r7, #32]
 800a30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30e:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800a312:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a316:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a31a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a31e:	edd7 7a07 	vldr	s15, [r7, #28]
 800a322:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a326:	edd7 7a04 	vldr	s15, [r7, #16]
 800a32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	1d1a      	adds	r2, r3, #4
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a33c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800a340:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a344:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a34c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a350:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a354:	edd7 7a05 	vldr	s15, [r7, #20]
 800a358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a36a:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800a36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a370:	3308      	adds	r3, #8
 800a372:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a376:	3b08      	subs	r3, #8
 800a378:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37c:	3b01      	subs	r3, #1
 800a37e:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 800a380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a382:	2b00      	cmp	r3, #0
 800a384:	f73f af7f 	bgt.w	800a286 <stage_rfft_f32+0xba>
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	3754      	adds	r7, #84	; 0x54
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800a396:	b480      	push	{r7}
 800a398:	b095      	sub	sp, #84	; 0x54
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800a3b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800a3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800a3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800a3ca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a3ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a3d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3e4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800a3e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a3ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a3f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	1d1a      	adds	r2, r3, #4
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a402:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800a406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800a410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a412:	3308      	adds	r3, #8
 800a414:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 800a416:	e07c      	b.n	800a512 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800a418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800a41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800a424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800a42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800a430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a432:	1d1a      	adds	r2, r3, #4
 800a434:	64ba      	str	r2, [r7, #72]	; 0x48
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800a444:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a448:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a44c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a450:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800a454:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a458:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a45c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a460:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800a464:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a468:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a46c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a470:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800a474:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a478:	edd7 7a08 	vldr	s15, [r7, #32]
 800a47c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a480:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800a484:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a488:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a490:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800a494:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a498:	edd7 7a08 	vldr	s15, [r7, #32]
 800a49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a0:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800a4a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a4a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4b0:	edd7 7a07 	vldr	s15, [r7, #28]
 800a4b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800a4bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a4ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4ce:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800a4d2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a4d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a4da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4de:	edd7 7a05 	vldr	s15, [r7, #20]
 800a4e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	1d1a      	adds	r2, r3, #4
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a4f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a4fc:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a502:	3308      	adds	r3, #8
 800a504:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a508:	3b08      	subs	r3, #8
 800a50a:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a50e:	3b01      	subs	r3, #1
 800a510:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 800a512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a514:	2b00      	cmp	r3, #0
 800a516:	f73f af7f 	bgt.w	800a418 <merge_rfft_f32+0x82>
   }

}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	3754      	adds	r7, #84	; 0x54
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff ff26 	bl	800a396 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800a54a:	78fa      	ldrb	r2, [r7, #3]
 800a54c:	2301      	movs	r3, #1
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	6978      	ldr	r0, [r7, #20]
 800a552:	f7fe fd7b 	bl	800904c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800a556:	e00a      	b.n	800a56e <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800a558:	78fa      	ldrb	r2, [r7, #3]
 800a55a:	2301      	movs	r3, #1
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7fe fd74 	bl	800904c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68b9      	ldr	r1, [r7, #8]
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fe2f 	bl	800a1cc <stage_rfft_f32>
}
 800a56e:	bf00      	nop
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <arm_fully_connected_s8>:
                                  const q7_t *kernel,
                                  const cmsis_nn_dims *bias_dims,
                                  const int32_t *bias,
                                  const cmsis_nn_dims *output_dims,
                                  q7_t *output)
{
 800a576:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a578:	b093      	sub	sp, #76	; 0x4c
 800a57a:	af0a      	add	r7, sp, #40	; 0x28
 800a57c:	6178      	str	r0, [r7, #20]
 800a57e:	6139      	str	r1, [r7, #16]
 800a580:	60fa      	str	r2, [r7, #12]
 800a582:	60bb      	str	r3, [r7, #8]
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	61fb      	str	r3, [r7, #28]

    while (batch_cnt)
 800a58a:	e033      	b.n	800a5f4 <arm_fully_connected_s8+0x7e>
    {
        arm_nn_vec_mat_mult_t_s8(input,
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	607b      	str	r3, [r7, #4]
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	6852      	ldr	r2, [r2, #4]
 800a596:	6939      	ldr	r1, [r7, #16]
 800a598:	6889      	ldr	r1, [r1, #8]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	6800      	ldr	r0, [r0, #0]
 800a59e:	68fc      	ldr	r4, [r7, #12]
 800a5a0:	6864      	ldr	r4, [r4, #4]
 800a5a2:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 800a5a4:	682d      	ldr	r5, [r5, #0]
 800a5a6:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 800a5a8:	68f6      	ldr	r6, [r6, #12]
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	9307      	str	r3, [sp, #28]
 800a5ba:	9606      	str	r6, [sp, #24]
 800a5bc:	9505      	str	r5, [sp, #20]
 800a5be:	9404      	str	r4, [sp, #16]
 800a5c0:	9003      	str	r0, [sp, #12]
 800a5c2:	9102      	str	r1, [sp, #8]
 800a5c4:	9201      	str	r2, [sp, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5d2:	f000 f822 	bl	800a61a <arm_nn_vec_mat_mult_t_s8>
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800a5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	4413      	add	r3, r2
 800a5e0:	63bb      	str	r3, [r7, #56]	; 0x38
        output += output_dims->c;
 800a5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ea:	4413      	add	r3, r2
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50
        batch_cnt--;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	61fb      	str	r3, [r7, #28]
    while (batch_cnt)
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1c8      	bne.n	800a58c <arm_fully_connected_s8+0x16>
    }
    return (ARM_MATH_SUCCESS);
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3724      	adds	r7, #36	; 0x24
 800a600:	46bd      	mov	sp, r7
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a604 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
    (void)filter_dims;
    return 0;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800a61a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a61e:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
 800a622:	af00      	add	r7, sp, #0
 800a624:	f107 0414 	add.w	r4, r7, #20
 800a628:	6020      	str	r0, [r4, #0]
 800a62a:	f107 0010 	add.w	r0, r7, #16
 800a62e:	6001      	str	r1, [r0, #0]
 800a630:	f107 010c 	add.w	r1, r7, #12
 800a634:	600a      	str	r2, [r1, #0]
 800a636:	f107 0208 	add.w	r2, r7, #8
 800a63a:	6013      	str	r3, [r2, #0]
        *dst = MIN(acc_0, activation_max);
        dst++;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 800a63c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800a640:	3b04      	subs	r3, #4
 800a642:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
    const int16_t lhs_offset_s16 = lhs_offset;
 800a646:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 800a64a:	f8a7 35d2 	strh.w	r3, [r7, #1490]	; 0x5d2
    const int16_t rhs_offset_s16 = rhs_offset;
 800a64e:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800a652:	f8a7 35d0 	strh.w	r3, [r7, #1488]	; 0x5d0

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800a656:	f9b7 35d2 	ldrsh.w	r3, [r7, #1490]	; 0x5d2
 800a65a:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800a65e:	f9b7 35d2 	ldrsh.w	r3, [r7, #1490]	; 0x5d2
 800a662:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 800a666:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 800a66a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800a66e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800a672:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800a676:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800a67a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800a67e:	f9b7 35d0 	ldrsh.w	r3, [r7, #1488]	; 0x5d0
 800a682:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800a686:	f9b7 35d0 	ldrsh.w	r3, [r7, #1488]	; 0x5d0
 800a68a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800a68e:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800a692:	f8d7 25b8 	ldr.w	r2, [r7, #1464]	; 0x5b8
 800a696:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 800a69a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800a69e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800a6a2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800a6ac:	f001 b966 	b.w	800b97c <arm_nn_vec_mat_mult_t_s8+0x1362>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800a6b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800a6b4:	f107 0214 	add.w	r2, r7, #20
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800a6bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a6c0:	f107 0210 	add.w	r2, r7, #16
 800a6c4:	6812      	ldr	r2, [r2, #0]
 800a6c6:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        q31_t res01 = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
        if (bias)
 800a6d4:	f107 030c 	add.w	r3, r7, #12
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d013      	beq.n	800a706 <arm_nn_vec_mat_mult_t_s8+0xec>
        {
            res00 = *bias++;
 800a6de:	f107 030c 	add.w	r3, r7, #12
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f107 020c 	add.w	r2, r7, #12
 800a6e8:	1d19      	adds	r1, r3, #4
 800a6ea:	6011      	str	r1, [r2, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            res01 = *bias++;
 800a6f2:	f107 030c 	add.w	r3, r7, #12
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f107 020c 	add.w	r2, r7, #12
 800a6fc:	1d19      	adds	r1, r3, #4
 800a6fe:	6011      	str	r1, [r2, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
        }

        int32_t rhs_cols_idx = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0

        q31_t val0, val1, val2, val3, val4, val5;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800a70c:	f000 bf05 	b.w	800b51a <arm_nn_vec_mat_mult_t_s8+0xf00>
 800a710:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800a714:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a718:	601a      	str	r2, [r3, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 800a71a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	461a      	mov	r2, r3
 800a726:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a72a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a72c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	1d1a      	adds	r2, r3, #4
 800a736:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	601a      	str	r2, [r3, #0]

    return (val);
 800a73e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a742:	681b      	ldr	r3, [r3, #0]
        {
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800a744:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800a748:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800a74c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800a750:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800a754:	6019      	str	r1, [r3, #0]
 800a756:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 800a75a:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a75c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	fa23 f282 	sxtab16	r2, r3, r2
 800a76c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800a770:	601a      	str	r2, [r3, #0]
  return(result);
 800a772:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800a77c:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800a780:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800a784:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800a786:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a796:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800a798:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	601a      	str	r2, [r3, #0]
    return (val);
 800a7aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a7ae:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800a7b0:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800a7b4:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800a7b8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800a7c2:	2208      	movs	r2, #8
 800a7c4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800a7c6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800a7ca:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800a7ce:	6812      	ldr	r2, [r2, #0]
 800a7d0:	f002 021f 	and.w	r2, r2, #31
 800a7d4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800a7d6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <arm_nn_vec_mat_mult_t_s8+0x1ce>
    return op1;
 800a7e0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	e007      	b.n	800a7f8 <arm_nn_vec_mat_mult_t_s8+0x1de>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a7e8:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800a7ec:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	fa62 f303 	ror.w	r3, r2, r3
 800a7f8:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800a7fc:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800a800:	6011      	str	r1, [r2, #0]
 800a802:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 800a806:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a808:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 800a812:	6812      	ldr	r2, [r2, #0]
 800a814:	fa23 f282 	sxtab16	r2, r3, r2
 800a818:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a81c:	601a      	str	r2, [r3, #0]
  return(result);
 800a81e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800a828:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800a82c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 800a830:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800a834:	6019      	str	r1, [r3, #0]
 800a836:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800a83a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a83c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800a846:	6812      	ldr	r2, [r2, #0]
 800a848:	fa23 f282 	sxtab16	r2, r3, r2
 800a84c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800a850:	601a      	str	r2, [r3, #0]
  return(result);
 800a852:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800a85c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800a866:	441a      	add	r2, r3
 800a868:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	461a      	mov	r2, r3
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 800a878:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a87c:	601a      	str	r2, [r3, #0]

    return (val);
 800a87e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800a888:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800a88c:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a896:	2208      	movs	r2, #8
 800a898:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800a89a:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a89e:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 800a8a2:	6812      	ldr	r2, [r2, #0]
 800a8a4:	f002 021f 	and.w	r2, r2, #31
 800a8a8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800a8aa:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <arm_nn_vec_mat_mult_t_s8+0x2a2>
    return op1;
 800a8b4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	e007      	b.n	800a8cc <arm_nn_vec_mat_mult_t_s8+0x2b2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a8bc:	f507 7240 	add.w	r2, r7, #768	; 0x300
 800a8c0:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	fa62 f303 	ror.w	r3, r2, r3
 800a8cc:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 800a8d0:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800a8d4:	6011      	str	r1, [r2, #0]
 800a8d6:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800a8da:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a8dc:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800a8e6:	6812      	ldr	r2, [r2, #0]
 800a8e8:	fa23 f282 	sxtab16	r2, r3, r2
 800a8ec:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800a8f0:	601a      	str	r2, [r3, #0]
  return(result);
 800a8f2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800a8fc:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800a900:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800a904:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800a908:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800a90c:	6018      	str	r0, [r3, #0]
 800a90e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800a912:	6019      	str	r1, [r3, #0]
 800a914:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800a918:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a91a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800a924:	6812      	ldr	r2, [r2, #0]
 800a926:	f507 7145 	add.w	r1, r7, #788	; 0x314
 800a92a:	6809      	ldr	r1, [r1, #0]
 800a92c:	fb23 1202 	smlad	r2, r3, r2, r1
 800a930:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800a934:	601a      	str	r2, [r3, #0]
  return(result);
 800a936:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800a940:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800a944:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800a948:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800a94c:	6019      	str	r1, [r3, #0]
 800a94e:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800a952:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800a954:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800a95e:	6812      	ldr	r2, [r2, #0]
 800a960:	fa23 f282 	sxtab16	r2, r3, r2
 800a964:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800a968:	601a      	str	r2, [r3, #0]
  return(result);
 800a96a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
            res00 = __SMLAD(val1, val0, res00);
 800a974:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800a978:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800a97c:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800a980:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800a984:	6018      	str	r0, [r3, #0]
 800a986:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800a98a:	6019      	str	r1, [r3, #0]
 800a98c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800a990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800a992:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	f507 714c 	add.w	r1, r7, #816	; 0x330
 800a9a2:	6809      	ldr	r1, [r1, #0]
 800a9a4:	fb23 1202 	smlad	r2, r3, r2, r1
 800a9a8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a9ac:	601a      	str	r2, [r3, #0]
  return(result);
 800a9ae:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800a9b8:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800a9bc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800a9c6:	2208      	movs	r2, #8
 800a9c8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800a9ca:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800a9ce:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 800a9d2:	6812      	ldr	r2, [r2, #0]
 800a9d4:	f002 021f 	and.w	r2, r2, #31
 800a9d8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800a9da:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d103      	bne.n	800a9ec <arm_nn_vec_mat_mult_t_s8+0x3d2>
    return op1;
 800a9e4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	e007      	b.n	800a9fc <arm_nn_vec_mat_mult_t_s8+0x3e2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800a9ec:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800a9f0:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	fa62 f303 	ror.w	r3, r2, r3
 800a9fc:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 800aa00:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800aa0a:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800aa0c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800aa16:	6812      	ldr	r2, [r2, #0]
 800aa18:	fa23 f282 	sxtab16	r2, r3, r2
 800aa1c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800aa20:	601a      	str	r2, [r3, #0]
  return(result);
 800aa22:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 800aa2c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800aa30:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800aa34:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800aa36:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	461a      	mov	r2, r3
 800aa42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aa46:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800aa48:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	1d1a      	adds	r2, r3, #4
 800aa52:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	601a      	str	r2, [r3, #0]
    return (val);
 800aa5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aa5e:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800aa60:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            res01 = __SMLAD(val3, val5, res01);
 800aa64:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800aa68:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800aa6c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800aa70:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800aa74:	6018      	str	r0, [r3, #0]
 800aa76:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800aa7a:	6019      	str	r1, [r3, #0]
 800aa7c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800aa80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800aa82:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f507 7257 	add.w	r2, r7, #860	; 0x35c
 800aa8c:	6812      	ldr	r2, [r2, #0]
 800aa8e:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800aa92:	6809      	ldr	r1, [r1, #0]
 800aa94:	fb23 1202 	smlad	r2, r3, r2, r1
 800aa98:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800aa9c:	601a      	str	r2, [r3, #0]
  return(result);
 800aa9e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            res01 = __SMLAD(val1, val4, res01);
 800aaa8:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800aaac:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800aab0:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800aab4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800aab8:	6018      	str	r0, [r3, #0]
 800aaba:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800aabe:	6019      	str	r1, [r3, #0]
 800aac0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800aac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800aac6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 800aad0:	6812      	ldr	r2, [r2, #0]
 800aad2:	f507 715a 	add.w	r1, r7, #872	; 0x368
 800aad6:	6809      	ldr	r1, [r1, #0]
 800aad8:	fb23 1202 	smlad	r2, r3, r2, r1
 800aadc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800aae0:	601a      	str	r2, [r3, #0]
  return(result);
 800aae2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800aaec:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800aaf0:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800aaf4:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800aaf8:	6019      	str	r1, [r3, #0]
 800aafa:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800aafe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ab00:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800ab0a:	6812      	ldr	r2, [r2, #0]
 800ab0c:	fa23 f282 	sxtab16	r2, r3, r2
 800ab10:	f507 735d 	add.w	r3, r7, #884	; 0x374
 800ab14:	601a      	str	r2, [r3, #0]
  return(result);
 800ab16:	f507 735d 	add.w	r3, r7, #884	; 0x374
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800ab20:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800ab24:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800ab28:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ab2a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ab3a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ab3c:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	1d1a      	adds	r2, r3, #4
 800ab46:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	601a      	str	r2, [r3, #0]
    return (val);
 800ab4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ab52:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ab54:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ab58:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800ab5c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800ab66:	2208      	movs	r2, #8
 800ab68:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ab6a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800ab6e:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	f002 021f 	and.w	r2, r2, #31
 800ab78:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ab7a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d103      	bne.n	800ab8c <arm_nn_vec_mat_mult_t_s8+0x572>
    return op1;
 800ab84:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	e007      	b.n	800ab9c <arm_nn_vec_mat_mult_t_s8+0x582>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ab8c:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800ab90:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	fa62 f303 	ror.w	r3, r2, r3
 800ab9c:	f507 7265 	add.w	r2, r7, #916	; 0x394
 800aba0:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800abaa:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800abac:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800abb6:	6812      	ldr	r2, [r2, #0]
 800abb8:	fa23 f282 	sxtab16	r2, r3, r2
 800abbc:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800abc0:	601a      	str	r2, [r3, #0]
  return(result);
 800abc2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800abcc:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800abd0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800abd4:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800abd8:	6019      	str	r1, [r3, #0]
 800abda:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800abde:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800abe0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 800abea:	6812      	ldr	r2, [r2, #0]
 800abec:	fa23 f282 	sxtab16	r2, r3, r2
 800abf0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800abf4:	601a      	str	r2, [r3, #0]
  return(result);
 800abf6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800ac00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800ac0a:	441a      	add	r2, r3
 800ac0c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800ac1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ac20:	601a      	str	r2, [r3, #0]
    return (val);
 800ac22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800ac2c:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800ac30:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ac3e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800ac42:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	f002 021f 	and.w	r2, r2, #31
 800ac4c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ac4e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d103      	bne.n	800ac60 <arm_nn_vec_mat_mult_t_s8+0x646>
    return op1;
 800ac58:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	e007      	b.n	800ac70 <arm_nn_vec_mat_mult_t_s8+0x656>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ac60:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800ac64:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	fa62 f303 	ror.w	r3, r2, r3
 800ac70:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800ac74:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800ac78:	6011      	str	r1, [r2, #0]
 800ac7a:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800ac7e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ac80:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	fa23 f282 	sxtab16	r2, r3, r2
 800ac90:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac94:	601a      	str	r2, [r3, #0]
  return(result);
 800ac96:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800aca0:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800aca4:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800aca8:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800acac:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800acb6:	6019      	str	r1, [r3, #0]
 800acb8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800acbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800acbe:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800acc8:	6812      	ldr	r2, [r2, #0]
 800acca:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 800acce:	6809      	ldr	r1, [r1, #0]
 800acd0:	fb23 1202 	smlad	r2, r3, r2, r1
 800acd4:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800acd8:	601a      	str	r2, [r3, #0]
  return(result);
 800acda:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800ace4:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800ace8:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 800acec:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800acf0:	6019      	str	r1, [r3, #0]
 800acf2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800acf6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800acf8:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
 800ad02:	6812      	ldr	r2, [r2, #0]
 800ad04:	fa23 f282 	sxtab16	r2, r3, r2
 800ad08:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800ad0c:	601a      	str	r2, [r3, #0]
  return(result);
 800ad0e:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
            res00 = __SMLAD(val1, val0, res00);
 800ad18:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800ad1c:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800ad20:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800ad24:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800ad28:	6018      	str	r0, [r3, #0]
 800ad2a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800ad2e:	6019      	str	r1, [r3, #0]
 800ad30:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800ad34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ad36:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800ad40:	6812      	ldr	r2, [r2, #0]
 800ad42:	f507 7177 	add.w	r1, r7, #988	; 0x3dc
 800ad46:	6809      	ldr	r1, [r1, #0]
 800ad48:	fb23 1202 	smlad	r2, r3, r2, r1
 800ad4c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800ad50:	601a      	str	r2, [r3, #0]
  return(result);
 800ad52:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800ad5c:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800ad60:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800ad64:	601a      	str	r2, [r3, #0]
 800ad66:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800ad6a:	2208      	movs	r2, #8
 800ad6c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ad6e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800ad72:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	f002 021f 	and.w	r2, r2, #31
 800ad7c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800ad7e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d103      	bne.n	800ad90 <arm_nn_vec_mat_mult_t_s8+0x776>
    return op1;
 800ad88:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	e007      	b.n	800ada0 <arm_nn_vec_mat_mult_t_s8+0x786>
  return (op1 >> op2) | (op1 << (32U - op2));
 800ad90:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800ad94:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800ad98:	6812      	ldr	r2, [r2, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	fa62 f303 	ror.w	r3, r2, r3
 800ada0:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800ada4:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800ada8:	6011      	str	r1, [r2, #0]
 800adaa:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 800adae:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800adb0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f507 727d 	add.w	r2, r7, #1012	; 0x3f4
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	fa23 f282 	sxtab16	r2, r3, r2
 800adc0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800adc4:	601a      	str	r2, [r3, #0]
  return(result);
 800adc6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 800add0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800add4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800add8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800adda:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	461a      	mov	r2, r3
 800ade6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800adea:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800adec:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	1d1a      	adds	r2, r3, #4
 800adf6:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	601a      	str	r2, [r3, #0]
    return (val);
 800adfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ae02:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ae04:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            res01 = __SMLAD(val3, val5, res01);
 800ae08:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800ae0c:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800ae10:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ae14:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800ae18:	6018      	str	r0, [r3, #0]
 800ae1a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800ae1e:	6019      	str	r1, [r3, #0]
 800ae20:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800ae24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae26:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	f207 4104 	addw	r1, r7, #1028	; 0x404
 800ae36:	6809      	ldr	r1, [r1, #0]
 800ae38:	fb23 1202 	smlad	r2, r3, r2, r1
 800ae3c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800ae40:	601a      	str	r2, [r3, #0]
  return(result);
 800ae42:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            res01 = __SMLAD(val1, val4, res01);
 800ae4c:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800ae50:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800ae54:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800ae58:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800ae5c:	6018      	str	r0, [r3, #0]
 800ae5e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800ae62:	6019      	str	r1, [r3, #0]
 800ae64:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800ae68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ae6a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800ae74:	6812      	ldr	r2, [r2, #0]
 800ae76:	f207 4114 	addw	r1, r7, #1044	; 0x414
 800ae7a:	6809      	ldr	r1, [r1, #0]
 800ae7c:	fb23 1202 	smlad	r2, r3, r2, r1
 800ae80:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800ae84:	601a      	str	r2, [r3, #0]
  return(result);
 800ae86:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800ae90:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800ae94:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800ae98:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800ae9c:	6019      	str	r1, [r3, #0]
 800ae9e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800aea2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800aea4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	fa23 f282 	sxtab16	r2, r3, r2
 800aeb4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800aeb8:	601a      	str	r2, [r3, #0]
  return(result);
 800aeba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800aec4:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800aec8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800aecc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800aece:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	461a      	mov	r2, r3
 800aeda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aede:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800aee0:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	601a      	str	r2, [r3, #0]
    return (val);
 800aef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aef6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800aef8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800aefc:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800af00:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800af0a:	2208      	movs	r2, #8
 800af0c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800af0e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800af12:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800af16:	6812      	ldr	r2, [r2, #0]
 800af18:	f002 021f 	and.w	r2, r2, #31
 800af1c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800af1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d103      	bne.n	800af30 <arm_nn_vec_mat_mult_t_s8+0x916>
    return op1;
 800af28:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	e007      	b.n	800af40 <arm_nn_vec_mat_mult_t_s8+0x926>
  return (op1 >> op2) | (op1 << (32U - op2));
 800af30:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800af34:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	fa62 f303 	ror.w	r3, r2, r3
 800af40:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800af44:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800af48:	6011      	str	r1, [r2, #0]
 800af4a:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800af4e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800af50:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800af5a:	6812      	ldr	r2, [r2, #0]
 800af5c:	fa23 f282 	sxtab16	r2, r3, r2
 800af60:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800af64:	601a      	str	r2, [r3, #0]
  return(result);
 800af66:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800af70:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800af74:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800af78:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800af82:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800af84:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	fa23 f282 	sxtab16	r2, r3, r2
 800af94:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800af98:	601a      	str	r2, [r3, #0]
  return(result);
 800af9a:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800afa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800afae:	441a      	add	r2, r3
 800afb0:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800afc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800afc4:	601a      	str	r2, [r3, #0]
    return (val);
 800afc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800afd0:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 800afd4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800afde:	2208      	movs	r2, #8
 800afe0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800afe2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800afe6:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	f002 021f 	and.w	r2, r2, #31
 800aff0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800aff2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <arm_nn_vec_mat_mult_t_s8+0x9ea>
    return op1;
 800affc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	e007      	b.n	800b014 <arm_nn_vec_mat_mult_t_s8+0x9fa>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b004:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800b008:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800b00c:	6812      	ldr	r2, [r2, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	fa62 f303 	ror.w	r3, r2, r3
 800b014:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800b018:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800b01c:	6011      	str	r1, [r2, #0]
 800b01e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800b022:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b024:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800b02e:	6812      	ldr	r2, [r2, #0]
 800b030:	fa23 f282 	sxtab16	r2, r3, r2
 800b034:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800b038:	601a      	str	r2, [r3, #0]
  return(result);
 800b03a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b044:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800b048:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800b04c:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b050:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800b054:	6018      	str	r0, [r3, #0]
 800b056:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800b05a:	6019      	str	r1, [r3, #0]
 800b05c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 800b060:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b062:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 800b072:	6809      	ldr	r1, [r1, #0]
 800b074:	fb23 1202 	smlad	r2, r3, r2, r1
 800b078:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800b07c:	601a      	str	r2, [r3, #0]
  return(result);
 800b07e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b088:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800b08c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800b090:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800b094:	6019      	str	r1, [r3, #0]
 800b096:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800b09a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b09c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 800b0a6:	6812      	ldr	r2, [r2, #0]
 800b0a8:	fa23 f282 	sxtab16	r2, r3, r2
 800b0ac:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b0b0:	601a      	str	r2, [r3, #0]
  return(result);
 800b0b2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
            res00 = __SMLAD(val1, val0, res00);
 800b0bc:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800b0c0:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 800b0c4:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b0c8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800b0cc:	6018      	str	r0, [r3, #0]
 800b0ce:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800b0d2:	6019      	str	r1, [r3, #0]
 800b0d4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800b0d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b0da:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 800b0ea:	6809      	ldr	r1, [r1, #0]
 800b0ec:	fb23 1202 	smlad	r2, r3, r2, r1
 800b0f0:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800b0f4:	601a      	str	r2, [r3, #0]
  return(result);
 800b0f6:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b100:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800b104:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800b108:	601a      	str	r2, [r3, #0]
 800b10a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800b10e:	2208      	movs	r2, #8
 800b110:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800b112:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800b116:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	f002 021f 	and.w	r2, r2, #31
 800b120:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800b122:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d103      	bne.n	800b134 <arm_nn_vec_mat_mult_t_s8+0xb1a>
    return op1;
 800b12c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	e007      	b.n	800b144 <arm_nn_vec_mat_mult_t_s8+0xb2a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b134:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800b138:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	fa62 f303 	ror.w	r3, r2, r3
 800b144:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 800b148:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800b14c:	6011      	str	r1, [r2, #0]
 800b14e:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800b152:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b154:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800b15e:	6812      	ldr	r2, [r2, #0]
 800b160:	fa23 f282 	sxtab16	r2, r3, r2
 800b164:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800b168:	601a      	str	r2, [r3, #0]
  return(result);
 800b16a:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 800b174:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b178:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800b17c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800b17e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b18e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b190:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	1d1a      	adds	r2, r3, #4
 800b19a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	601a      	str	r2, [r3, #0]
    return (val);
 800b1a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b1a6:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the RHS matrix
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800b1a8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            res01 = __SMLAD(val3, val5, res01);
 800b1ac:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800b1b0:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800b1b4:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b1b8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800b1bc:	6018      	str	r0, [r3, #0]
 800b1be:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 800b1c2:	6019      	str	r1, [r3, #0]
 800b1c4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800b1c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b1ca:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 800b1da:	6809      	ldr	r1, [r1, #0]
 800b1dc:	fb23 1202 	smlad	r2, r3, r2, r1
 800b1e0:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800b1e4:	601a      	str	r2, [r3, #0]
  return(result);
 800b1e6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            res01 = __SMLAD(val1, val4, res01);
 800b1f0:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 800b1f4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 800b1f8:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b1fc:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800b200:	6018      	str	r0, [r3, #0]
 800b202:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 800b206:	6019      	str	r1, [r3, #0]
 800b208:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800b20c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b20e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 800b218:	6812      	ldr	r2, [r2, #0]
 800b21a:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800b21e:	6809      	ldr	r1, [r1, #0]
 800b220:	fb23 1202 	smlad	r2, r3, r2, r1
 800b224:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800b228:	601a      	str	r2, [r3, #0]
  return(result);
 800b22a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

            val2 = __SXTAB16(rhs_offset_s16x2, val0);
 800b234:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800b238:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 800b23c:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800b240:	6019      	str	r1, [r3, #0]
 800b242:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800b246:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b248:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800b252:	6812      	ldr	r2, [r2, #0]
 800b254:	fa23 f282 	sxtab16	r2, r3, r2
 800b258:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800b25c:	601a      	str	r2, [r3, #0]
  return(result);
 800b25e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800b268:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b26c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800b270:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800b272:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b282:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b284:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	1d1a      	adds	r2, r3, #4
 800b28e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	601a      	str	r2, [r3, #0]
    return (val);
 800b296:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b29a:	681b      	ldr	r3, [r3, #0]
            // Read 4 x int8 values from the LHS vector
            val1 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800b29c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800b2a0:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800b2a4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800b2ae:	2208      	movs	r2, #8
 800b2b0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800b2b2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800b2b6:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 800b2ba:	6812      	ldr	r2, [r2, #0]
 800b2bc:	f002 021f 	and.w	r2, r2, #31
 800b2c0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800b2c2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d103      	bne.n	800b2d4 <arm_nn_vec_mat_mult_t_s8+0xcba>
    return op1;
 800b2cc:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	e007      	b.n	800b2e4 <arm_nn_vec_mat_mult_t_s8+0xcca>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b2d4:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800b2d8:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	fa62 f303 	ror.w	r3, r2, r3
 800b2e4:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800b2e8:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800b2ec:	6011      	str	r1, [r2, #0]
 800b2ee:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800b2f2:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b2f4:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800b2fe:	6812      	ldr	r2, [r2, #0]
 800b300:	fa23 f282 	sxtab16	r2, r3, r2
 800b304:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800b308:	601a      	str	r2, [r3, #0]
  return(result);
 800b30a:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
            val3 = __SXTAB16(lhs_offset_s16x2, val1);
 800b314:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800b318:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b31c:	f8c7 24f8 	str.w	r2, [r7, #1272]	; 0x4f8
 800b320:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b324:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 800b328:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 800b32c:	fa23 f282 	sxtab16	r2, r3, r2
 800b330:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800b334:	601a      	str	r2, [r3, #0]
  return(result);
 800b336:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
            // Read 4 x int8 values from the RHS matrix
            val4 = arm_nn_read_q7x4((const q7_t *)rhs_ptr + off0);
 800b340:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800b34a:	4413      	add	r3, r2
 800b34c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800b350:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 800b358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b35c:	601a      	str	r2, [r3, #0]
    return (val);
 800b35e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
            val1 = __SXTAB16(lhs_offset_s16x2, __ROR(val1, 8));
 800b368:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800b36c:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800b370:	2308      	movs	r3, #8
 800b372:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  op2 %= 32U;
 800b376:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800b37a:	f003 031f 	and.w	r3, r3, #31
 800b37e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (op2 == 0U)
 800b382:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <arm_nn_vec_mat_mult_t_s8+0xd76>
    return op1;
 800b38a:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 800b38e:	e005      	b.n	800b39c <arm_nn_vec_mat_mult_t_s8+0xd82>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b390:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 800b394:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800b398:	fa62 f303 	ror.w	r3, r2, r3
 800b39c:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800b3a0:	f8c7 2510 	str.w	r2, [r7, #1296]	; 0x510
 800b3a4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b3a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800b3ac:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 800b3b0:	fa23 f382 	sxtab16	r3, r3, r2
 800b3b4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
  return(result);
 800b3b8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800b3bc:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

            // Perform the accumulations
            res00 = __SMLAD(val3, val2, res00);
 800b3c0:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800b3c4:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800b3c8:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800b3cc:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 800b3d0:	f8c7 251c 	str.w	r2, [r7, #1308]	; 0x51c
 800b3d4:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b3d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800b3dc:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800b3e0:	f8d7 1518 	ldr.w	r1, [r7, #1304]	; 0x518
 800b3e4:	fb23 1302 	smlad	r3, r3, r2, r1
 800b3e8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
  return(result);
 800b3ec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800b3f0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val5 = __SXTAB16(rhs_offset_s16x2, val4);
 800b3f4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800b3f8:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800b3fc:	f8c7 252c 	str.w	r2, [r7, #1324]	; 0x52c
 800b400:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b404:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800b408:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800b40c:	fa23 f382 	sxtab16	r3, r3, r2
 800b410:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  return(result);
 800b414:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800b418:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
            res00 = __SMLAD(val1, val0, res00);
 800b41c:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800b420:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800b424:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800b428:	f8c7 153c 	str.w	r1, [r7, #1340]	; 0x53c
 800b42c:	f8c7 2538 	str.w	r2, [r7, #1336]	; 0x538
 800b430:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b434:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800b438:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800b43c:	f8d7 1534 	ldr.w	r1, [r7, #1332]	; 0x534
 800b440:	fb23 1302 	smlad	r3, r3, r2, r1
 800b444:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
  return(result);
 800b448:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800b44c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            val4 = __SXTAB16(rhs_offset_s16x2, __ROR(val4, 8));
 800b450:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800b454:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800b458:	2308      	movs	r3, #8
 800b45a:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  op2 %= 32U;
 800b45e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b462:	f003 031f 	and.w	r3, r3, #31
 800b466:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
  if (op2 == 0U)
 800b46a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d102      	bne.n	800b478 <arm_nn_vec_mat_mult_t_s8+0xe5e>
    return op1;
 800b472:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800b476:	e005      	b.n	800b484 <arm_nn_vec_mat_mult_t_s8+0xe6a>
  return (op1 >> op2) | (op1 << (32U - op2));
 800b478:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800b47c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800b480:	fa62 f303 	ror.w	r3, r2, r3
 800b484:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800b488:	f8c7 2550 	str.w	r2, [r7, #1360]	; 0x550
 800b48c:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800b490:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 800b494:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 800b498:	fa23 f382 	sxtab16	r3, r3, r2
 800b49c:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
  return(result);
 800b4a0:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800b4a4:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
            res01 = __SMLAD(val3, val5, res01);
 800b4a8:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 800b4ac:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800b4b0:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 800b4b4:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 800b4b8:	f8c7 255c 	str.w	r2, [r7, #1372]	; 0x55c
 800b4bc:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b4c0:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800b4c4:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 800b4c8:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 800b4cc:	fb23 1302 	smlad	r3, r3, r2, r1
 800b4d0:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
  return(result);
 800b4d4:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800b4d8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
            res01 = __SMLAD(val1, val4, res01);
 800b4dc:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 800b4e0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800b4e4:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 800b4e8:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 800b4ec:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
 800b4f0:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800b4f4:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800b4f8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 800b4fc:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800b500:	fb23 1302 	smlad	r3, r3, r2, r1
 800b504:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
  return(result);
 800b508:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800b50c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800b510:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800b514:	3310      	adds	r3, #16
 800b516:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800b51a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b51e:	3b0f      	subs	r3, #15
 800b520:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800b524:	429a      	cmp	r2, r3
 800b526:	f6ff a8f3 	blt.w	800a710 <arm_nn_vec_mat_mult_t_s8+0xf6>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800b52a:	e04c      	b.n	800b5c6 <arm_nn_vec_mat_mult_t_s8+0xfac>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800b52c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f993 3000 	ldrsb.w	r3, [r3]
 800b536:	461a      	mov	r2, r3
 800b538:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b53c:	4413      	add	r3, r2
 800b53e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800b542:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b54c:	4413      	add	r3, r2
 800b54e:	f993 3000 	ldrsb.w	r3, [r3]
 800b552:	461a      	mov	r2, r3
 800b554:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800b558:	4413      	add	r3, r2
 800b55a:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800b55e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f993 3000 	ldrsb.w	r3, [r3]
 800b568:	461a      	mov	r2, r3
 800b56a:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 800b56e:	4413      	add	r3, r2
 800b570:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

            res00 += lhs_value * rhs_value0;
 800b574:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800b578:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b584:	4413      	add	r3, r2
 800b586:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
            res01 += lhs_value * rhs_value1;
 800b58a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800b58e:	f8d7 2590 	ldr.w	r2, [r7, #1424]	; 0x590
 800b592:	fb02 f303 	mul.w	r3, r2, r3
 800b596:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b59a:	4413      	add	r3, r2
 800b59c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

            ++rhs_ptr;
 800b5a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b5ac:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800b5ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b5ba:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800b5bc:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800b5c6:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800b5ca:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	dbac      	blt.n	800b52c <arm_nn_vec_mat_mult_t_s8+0xf12>
 800b5d2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800b5d6:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800b5e0:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800b5ea:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800b5ee:	601a      	str	r2, [r3, #0]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b5f0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b5fa:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	409a      	lsls	r2, r3
 800b602:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800b60c:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800b614:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800b61c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b624:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800b626:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b62a:	2200      	movs	r2, #0
 800b62c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800b62e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b632:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b636:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b642:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b64e:	fb02 fc01 	mul.w	ip, r2, r1
 800b652:	fb00 f603 	mul.w	r6, r0, r3
 800b656:	4466      	add	r6, ip
 800b658:	fba0 2302 	umull	r2, r3, r0, r2
 800b65c:	18f1      	adds	r1, r6, r3
 800b65e:	460b      	mov	r3, r1
 800b660:	18a1      	adds	r1, r4, r2
 800b662:	6039      	str	r1, [r7, #0]
 800b664:	eb45 0303 	adc.w	r3, r5, r3
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b66e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b672:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800b676:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b67a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b67e:	f04f 0200 	mov.w	r2, #0
 800b682:	f04f 0300 	mov.w	r3, #0
 800b686:	0fc2      	lsrs	r2, r0, #31
 800b688:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800b68c:	17cb      	asrs	r3, r1, #31
 800b68e:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 800b692:	4613      	mov	r3, r2
 800b694:	600b      	str	r3, [r1, #0]
    return result;
 800b696:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800b69a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b69c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dc04      	bgt.n	800b6b0 <arm_nn_vec_mat_mult_t_s8+0x1096>
 800b6a6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	e000      	b.n	800b6b2 <arm_nn_vec_mat_mult_t_s8+0x1098>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800b6b6:	6011      	str	r1, [r2, #0]
 800b6b8:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800b6bc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800b6be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800b6c6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	409a      	lsls	r2, r3
 800b6d0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800b6d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b6dc:	f507 711e 	add.w	r1, r7, #632	; 0x278
 800b6e0:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800b6e4:	6809      	ldr	r1, [r1, #0]
 800b6e6:	6812      	ldr	r2, [r2, #0]
 800b6e8:	400a      	ands	r2, r1
 800b6ea:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800b6ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b6f0:	f507 711e 	add.w	r1, r7, #632	; 0x278
 800b6f4:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800b6f8:	6809      	ldr	r1, [r1, #0]
 800b6fa:	6812      	ldr	r2, [r2, #0]
 800b6fc:	fa41 f202 	asr.w	r2, r1, r2
 800b700:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800b702:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800b706:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800b70a:	6812      	ldr	r2, [r2, #0]
 800b70c:	1052      	asrs	r2, r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800b710:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	da06      	bge.n	800b728 <arm_nn_vec_mat_mult_t_s8+0x110e>
        threshold++;
 800b71a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800b71e:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800b722:	6812      	ldr	r2, [r2, #0]
 800b724:	3201      	adds	r2, #1
 800b726:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800b728:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b72c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	dd06      	ble.n	800b746 <arm_nn_vec_mat_mult_t_s8+0x112c>
        result++;
 800b738:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b73c:	f507 721c 	add.w	r2, r7, #624	; 0x270
 800b740:	6812      	ldr	r2, [r2, #0]
 800b742:	3201      	adds	r2, #1
 800b744:	601a      	str	r2, [r3, #0]
    return result;
 800b746:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b74a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b74c:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800b74e:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 800b752:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800b756:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800b760:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800b76a:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b77a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	409a      	lsls	r2, r3
 800b782:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800b78c:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800b790:	6812      	ldr	r2, [r2, #0]
 800b792:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800b794:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800b79c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b7a4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800b7a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800b7ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b7b6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b7c2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b7ce:	fb02 fc01 	mul.w	ip, r2, r1
 800b7d2:	fb00 f603 	mul.w	r6, r0, r3
 800b7d6:	4466      	add	r6, ip
 800b7d8:	fba0 2302 	umull	r2, r3, r0, r2
 800b7dc:	18f1      	adds	r1, r6, r3
 800b7de:	460b      	mov	r3, r1
 800b7e0:	eb14 0a02 	adds.w	sl, r4, r2
 800b7e4:	eb45 0b03 	adc.w	fp, r5, r3
 800b7e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7ec:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800b7f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b7f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7f8:	f04f 0200 	mov.w	r2, #0
 800b7fc:	f04f 0300 	mov.w	r3, #0
 800b800:	0fc2      	lsrs	r2, r0, #31
 800b802:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800b806:	17cb      	asrs	r3, r1, #31
 800b808:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 800b80c:	4613      	mov	r3, r2
 800b80e:	600b      	str	r3, [r1, #0]
    return result;
 800b810:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800b814:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b816:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dc04      	bgt.n	800b82a <arm_nn_vec_mat_mult_t_s8+0x1210>
 800b820:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	425b      	negs	r3, r3
 800b828:	e000      	b.n	800b82c <arm_nn_vec_mat_mult_t_s8+0x1212>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800b830:	6011      	str	r1, [r2, #0]
 800b832:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800b836:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800b838:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800b83c:	2200      	movs	r2, #0
 800b83e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800b840:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800b844:	2201      	movs	r2, #1
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	409a      	lsls	r2, r3
 800b84a:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800b84e:	3a01      	subs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800b852:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800b856:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800b85a:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800b85e:	6809      	ldr	r1, [r1, #0]
 800b860:	6812      	ldr	r2, [r2, #0]
 800b862:	400a      	ands	r2, r1
 800b864:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800b866:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800b86a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 800b86e:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 800b872:	6809      	ldr	r1, [r1, #0]
 800b874:	6812      	ldr	r2, [r2, #0]
 800b876:	fa41 f202 	asr.w	r2, r1, r2
 800b87a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800b87c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800b880:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800b884:	6812      	ldr	r2, [r2, #0]
 800b886:	1052      	asrs	r2, r2, #1
 800b888:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800b88a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	da06      	bge.n	800b8a2 <arm_nn_vec_mat_mult_t_s8+0x1288>
        threshold++;
 800b894:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800b898:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800b89c:	6812      	ldr	r2, [r2, #0]
 800b89e:	3201      	adds	r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800b8a2:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800b8a6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 800b8aa:	6812      	ldr	r2, [r2, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	dd06      	ble.n	800b8c0 <arm_nn_vec_mat_mult_t_s8+0x12a6>
        result++;
 800b8b2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800b8b6:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	3201      	adds	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
    return result;
 800b8c0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800b8c4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800b8c6:	bf00      	nop
        res01 = arm_nn_requantize(res01, dst_multiplier, dst_shift);
 800b8c8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

        // Add offset
        res00 += dst_offset;
 800b8cc:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b8d0:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        res01 += dst_offset;
 800b8da:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b8de:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800b8e8:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b8ec:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	bfb8      	it	lt
 800b8f4:	4613      	movlt	r3, r2
 800b8f6:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        res00 = MIN(res00, activation_max);
 800b8fa:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b8fe:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 800b902:	4293      	cmp	r3, r2
 800b904:	bfa8      	it	ge
 800b906:	4613      	movge	r3, r2
 800b908:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        res01 = MAX(res01, activation_min);
 800b90c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b910:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800b914:	4293      	cmp	r3, r2
 800b916:	bfb8      	it	lt
 800b918:	4613      	movlt	r3, r2
 800b91a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
        res01 = MIN(res01, activation_max);
 800b91e:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b922:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 800b926:	4293      	cmp	r3, r2
 800b928:	bfa8      	it	ge
 800b92a:	4613      	movge	r3, r2
 800b92c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

        *dst++ = (q7_t)res00;
 800b930:	f107 0308 	add.w	r3, r7, #8
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f107 0208 	add.w	r2, r7, #8
 800b93a:	1c59      	adds	r1, r3, #1
 800b93c:	6011      	str	r1, [r2, #0]
 800b93e:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800b942:	b252      	sxtb	r2, r2
 800b944:	701a      	strb	r2, [r3, #0]
        *dst++ = (q7_t)res01;
 800b946:	f107 0308 	add.w	r3, r7, #8
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f107 0208 	add.w	r2, r7, #8
 800b950:	1c59      	adds	r1, r3, #1
 800b952:	6011      	str	r1, [r2, #0]
 800b954:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 800b958:	b252      	sxtb	r2, r2
 800b95a:	701a      	strb	r2, [r3, #0]

        rhs += 2 * rhs_cols;
 800b95c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	4619      	mov	r1, r3
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	f107 0210 	add.w	r2, r7, #16
 800b96c:	6812      	ldr	r2, [r2, #0]
 800b96e:	440a      	add	r2, r1
 800b970:	601a      	str	r2, [r3, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800b972:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 800b976:	3302      	adds	r3, #2
 800b978:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800b97c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b980:	3b01      	subs	r3, #1
 800b982:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 800b986:	429a      	cmp	r2, r3
 800b988:	f6fe ae92 	blt.w	800a6b0 <arm_nn_vec_mat_mult_t_s8+0x96>
    }

    if (rhs_rows % 2)
 800b98c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 85d8 	beq.w	800c54a <arm_nn_vec_mat_mult_t_s8+0x1f30>
    {
        const q7_t *lhs_ptr = &lhs[0];
 800b99a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b99e:	f107 0214 	add.w	r2, r7, #20
 800b9a2:	6812      	ldr	r2, [r2, #0]
 800b9a4:	601a      	str	r2, [r3, #0]
        const q7_t *rhs_ptr = &rhs[0];
 800b9a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9aa:	f107 0210 	add.w	r2, r7, #16
 800b9ae:	6812      	ldr	r2, [r2, #0]
 800b9b0:	601a      	str	r2, [r3, #0]

        q31_t res00 = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        if (bias)
 800b9b8:	f107 030c 	add.w	r3, r7, #12
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d009      	beq.n	800b9d6 <arm_nn_vec_mat_mult_t_s8+0x13bc>
        {
            res00 = *bias++;
 800b9c2:	f107 030c 	add.w	r3, r7, #12
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f107 020c 	add.w	r2, r7, #12
 800b9cc:	1d19      	adds	r1, r3, #4
 800b9ce:	6011      	str	r1, [r2, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        }

        int32_t rhs_cols_idx = 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800b9dc:	f000 bc95 	b.w	800c30a <arm_nn_vec_mat_mult_t_s8+0x1cf0>
 800b9e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b9e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b9e8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800b9ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9fa:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800b9fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	1d1a      	adds	r2, r3, #4
 800ba06:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	601a      	str	r2, [r3, #0]
    return (val);
 800ba0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba12:	681b      	ldr	r3, [r3, #0]
        {
            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800ba14:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800ba18:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800ba1c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ba20:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800ba24:	6019      	str	r1, [r3, #0]
 800ba26:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ba2a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800ba2c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800ba36:	6812      	ldr	r2, [r2, #0]
 800ba38:	fa23 f282 	sxtab16	r2, r3, r2
 800ba3c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800ba40:	601a      	str	r2, [r3, #0]
  return(result);
 800ba42:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800ba4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ba50:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ba54:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800ba56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba66:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800ba68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	1d1a      	adds	r2, r3, #4
 800ba72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	601a      	str	r2, [r3, #0]
    return (val);
 800ba7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba7e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800ba80:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800ba84:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800ba88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ba92:	2208      	movs	r2, #8
 800ba94:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800ba96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ba9a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800ba9e:	6812      	ldr	r2, [r2, #0]
 800baa0:	f002 021f 	and.w	r2, r2, #31
 800baa4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800baa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d103      	bne.n	800bab8 <arm_nn_vec_mat_mult_t_s8+0x149e>
    return op1;
 800bab0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	e007      	b.n	800bac8 <arm_nn_vec_mat_mult_t_s8+0x14ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bab8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800babc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800bac0:	6812      	ldr	r2, [r2, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	fa62 f303 	ror.w	r3, r2, r3
 800bac8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800bacc:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800bad0:	6011      	str	r1, [r2, #0]
 800bad2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800bad6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bad8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800bae2:	6812      	ldr	r2, [r2, #0]
 800bae4:	fa23 f282 	sxtab16	r2, r3, r2
 800bae8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800baec:	601a      	str	r2, [r3, #0]
  return(result);
 800baee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800baf8:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bafc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800bb00:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bb04:	6019      	str	r1, [r3, #0]
 800bb06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800bb0a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bb0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800bb16:	6812      	ldr	r2, [r2, #0]
 800bb18:	fa23 f282 	sxtab16	r2, r3, r2
 800bb1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bb20:	601a      	str	r2, [r3, #0]
  return(result);
 800bb22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800bb2c:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bb30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bb3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800bb42:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800bb46:	6812      	ldr	r2, [r2, #0]
 800bb48:	f002 021f 	and.w	r2, r2, #31
 800bb4c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bb4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d103      	bne.n	800bb60 <arm_nn_vec_mat_mult_t_s8+0x1546>
    return op1;
 800bb58:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	e007      	b.n	800bb70 <arm_nn_vec_mat_mult_t_s8+0x1556>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bb60:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800bb64:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800bb68:	6812      	ldr	r2, [r2, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	fa62 f303 	ror.w	r3, r2, r3
 800bb70:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bb74:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800bb7e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bb80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800bb8a:	6812      	ldr	r2, [r2, #0]
 800bb8c:	fa23 f282 	sxtab16	r2, r3, r2
 800bb90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb94:	601a      	str	r2, [r3, #0]
  return(result);
 800bb96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800bba0:	f8d7 0598 	ldr.w	r0, [r7, #1432]	; 0x598
 800bba4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800bba8:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bbac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbb0:	6018      	str	r0, [r3, #0]
 800bbb2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800bbb6:	6019      	str	r1, [r3, #0]
 800bbb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bbbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800bbc8:	6812      	ldr	r2, [r2, #0]
 800bbca:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800bbce:	6809      	ldr	r1, [r1, #0]
 800bbd0:	fb23 1202 	smlad	r2, r3, r2, r1
 800bbd4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800bbd8:	601a      	str	r2, [r3, #0]
  return(result);
 800bbda:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            res00 = __SMLAD(val2, val0, res00);
 800bbe4:	f8d7 059c 	ldr.w	r0, [r7, #1436]	; 0x59c
 800bbe8:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800bbec:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bbf0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800bbf4:	6018      	str	r0, [r3, #0]
 800bbf6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800bbfa:	6019      	str	r1, [r3, #0]
 800bbfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bc00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800bc02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800bc0c:	6812      	ldr	r2, [r2, #0]
 800bc0e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800bc12:	6809      	ldr	r1, [r1, #0]
 800bc14:	fb23 1202 	smlad	r2, r3, r2, r1
 800bc18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800bc1c:	601a      	str	r2, [r3, #0]
  return(result);
 800bc1e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800bc28:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bc30:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800bc32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc42:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bc44:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	1d1a      	adds	r2, r3, #4
 800bc4e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	601a      	str	r2, [r3, #0]
    return (val);
 800bc56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc5a:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800bc5c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800bc60:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800bc64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bc68:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800bc6c:	6019      	str	r1, [r3, #0]
 800bc6e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800bc72:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bc74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	fa23 f282 	sxtab16	r2, r3, r2
 800bc84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc88:	601a      	str	r2, [r3, #0]
  return(result);
 800bc8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800bc94:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bc98:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bc9c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800bc9e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcae:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bcb0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1d1a      	adds	r2, r3, #4
 800bcba:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	601a      	str	r2, [r3, #0]
    return (val);
 800bcc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bcc6:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bcc8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bccc:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800bcd0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcda:	2208      	movs	r2, #8
 800bcdc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bcde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bce2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800bce6:	6812      	ldr	r2, [r2, #0]
 800bce8:	f002 021f 	and.w	r2, r2, #31
 800bcec:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bcee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d103      	bne.n	800bd00 <arm_nn_vec_mat_mult_t_s8+0x16e6>
    return op1;
 800bcf8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	e007      	b.n	800bd10 <arm_nn_vec_mat_mult_t_s8+0x16f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bd00:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 800bd04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800bd08:	6812      	ldr	r2, [r2, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	fa62 f303 	ror.w	r3, r2, r3
 800bd10:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800bd14:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800bd1e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800bd2a:	6812      	ldr	r2, [r2, #0]
 800bd2c:	fa23 f282 	sxtab16	r2, r3, r2
 800bd30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd34:	601a      	str	r2, [r3, #0]
  return(result);
 800bd36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800bd40:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bd44:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800bd48:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bd4c:	6019      	str	r1, [r3, #0]
 800bd4e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800bd52:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bd54:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800bd5e:	6812      	ldr	r2, [r2, #0]
 800bd60:	fa23 f282 	sxtab16	r2, r3, r2
 800bd64:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bd68:	601a      	str	r2, [r3, #0]
  return(result);
 800bd6a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800bd74:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bd78:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800bd82:	2208      	movs	r2, #8
 800bd84:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bd86:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800bd8a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800bd8e:	6812      	ldr	r2, [r2, #0]
 800bd90:	f002 021f 	and.w	r2, r2, #31
 800bd94:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bd96:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d103      	bne.n	800bda8 <arm_nn_vec_mat_mult_t_s8+0x178e>
    return op1;
 800bda0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	e007      	b.n	800bdb8 <arm_nn_vec_mat_mult_t_s8+0x179e>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bda8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 800bdac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800bdb0:	6812      	ldr	r2, [r2, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	fa62 f303 	ror.w	r3, r2, r3
 800bdb8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800bdbc:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bdc0:	6011      	str	r1, [r2, #0]
 800bdc2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800bdc6:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bdc8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800bdd2:	6812      	ldr	r2, [r2, #0]
 800bdd4:	fa23 f282 	sxtab16	r2, r3, r2
 800bdd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800bddc:	601a      	str	r2, [r3, #0]
  return(result);
 800bdde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800bde8:	f8d7 0598 	ldr.w	r0, [r7, #1432]	; 0x598
 800bdec:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800bdf0:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800bdf4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800bdf8:	6018      	str	r0, [r3, #0]
 800bdfa:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800bdfe:	6019      	str	r1, [r3, #0]
 800be00:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800be04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be06:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800be10:	6812      	ldr	r2, [r2, #0]
 800be12:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800be16:	6809      	ldr	r1, [r1, #0]
 800be18:	fb23 1202 	smlad	r2, r3, r2, r1
 800be1c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800be20:	601a      	str	r2, [r3, #0]
  return(result);
 800be22:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            res00 = __SMLAD(val2, val0, res00);
 800be2c:	f8d7 059c 	ldr.w	r0, [r7, #1436]	; 0x59c
 800be30:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800be34:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800be38:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800be3c:	6018      	str	r0, [r3, #0]
 800be3e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800be42:	6019      	str	r1, [r3, #0]
 800be44:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800be48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800be4a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 800be54:	6812      	ldr	r2, [r2, #0]
 800be56:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800be5a:	6809      	ldr	r1, [r1, #0]
 800be5c:	fb23 1202 	smlad	r2, r3, r2, r1
 800be60:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800be64:	601a      	str	r2, [r3, #0]
  return(result);
 800be66:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800be70:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800be74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800be78:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800be7a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	461a      	mov	r2, r3
 800be86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be8a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800be8c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	1d1a      	adds	r2, r3, #4
 800be96:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	601a      	str	r2, [r3, #0]
    return (val);
 800be9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bea2:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800bea4:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800bea8:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800beac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800beb0:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800beb4:	6019      	str	r1, [r3, #0]
 800beb6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800beba:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bebc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800bec6:	6812      	ldr	r2, [r2, #0]
 800bec8:	fa23 f282 	sxtab16	r2, r3, r2
 800becc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bed0:	601a      	str	r2, [r3, #0]
  return(result);
 800bed2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800bedc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800bee0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800bee4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800bee6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	f107 0320 	add.w	r3, r7, #32
 800bef6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800bef8:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	1d1a      	adds	r2, r3, #4
 800bf02:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	601a      	str	r2, [r3, #0]
    return (val);
 800bf0a:	f107 0320 	add.w	r3, r7, #32
 800bf0e:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800bf10:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800bf14:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800bf18:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800bf22:	2208      	movs	r2, #8
 800bf24:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bf26:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800bf2a:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 800bf2e:	6812      	ldr	r2, [r2, #0]
 800bf30:	f002 021f 	and.w	r2, r2, #31
 800bf34:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bf36:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <arm_nn_vec_mat_mult_t_s8+0x192e>
    return op1;
 800bf40:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	e007      	b.n	800bf58 <arm_nn_vec_mat_mult_t_s8+0x193e>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bf48:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800bf4c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800bf50:	6812      	ldr	r2, [r2, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	fa62 f303 	ror.w	r3, r2, r3
 800bf58:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800bf5c:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800bf60:	6011      	str	r1, [r2, #0]
 800bf62:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800bf66:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bf68:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	fa23 f282 	sxtab16	r2, r3, r2
 800bf78:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800bf7c:	601a      	str	r2, [r3, #0]
  return(result);
 800bf7e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800bf88:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bf8c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800bf90:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800bf94:	6019      	str	r1, [r3, #0]
 800bf96:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800bf9a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800bf9c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800bfa6:	6812      	ldr	r2, [r2, #0]
 800bfa8:	fa23 f282 	sxtab16	r2, r3, r2
 800bfac:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800bfb0:	601a      	str	r2, [r3, #0]
  return(result);
 800bfb2:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800bfbc:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800bfc0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800bfca:	2208      	movs	r2, #8
 800bfcc:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800bfce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800bfd2:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	f002 021f 	and.w	r2, r2, #31
 800bfdc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800bfde:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d103      	bne.n	800bff0 <arm_nn_vec_mat_mult_t_s8+0x19d6>
    return op1;
 800bfe8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	e007      	b.n	800c000 <arm_nn_vec_mat_mult_t_s8+0x19e6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800bff0:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800bff4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	fa62 f303 	ror.w	r3, r2, r3
 800c000:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800c004:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c008:	6011      	str	r1, [r2, #0]
 800c00a:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800c00e:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c010:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 800c01a:	6812      	ldr	r2, [r2, #0]
 800c01c:	fa23 f282 	sxtab16	r2, r3, r2
 800c020:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800c024:	601a      	str	r2, [r3, #0]
  return(result);
 800c026:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c030:	f8d7 0598 	ldr.w	r0, [r7, #1432]	; 0x598
 800c034:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800c038:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c03c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800c040:	6018      	str	r0, [r3, #0]
 800c042:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800c046:	6019      	str	r1, [r3, #0]
 800c048:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800c04c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c04e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 800c058:	6812      	ldr	r2, [r2, #0]
 800c05a:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 800c05e:	6809      	ldr	r1, [r1, #0]
 800c060:	fb23 1202 	smlad	r2, r3, r2, r1
 800c064:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800c068:	601a      	str	r2, [r3, #0]
  return(result);
 800c06a:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            res00 = __SMLAD(val2, val0, res00);
 800c074:	f8d7 059c 	ldr.w	r0, [r7, #1436]	; 0x59c
 800c078:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800c07c:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c080:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800c084:	6018      	str	r0, [r3, #0]
 800c086:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800c08a:	6019      	str	r1, [r3, #0]
 800c08c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c092:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800c09c:	6812      	ldr	r2, [r2, #0]
 800c09e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800c0a2:	6809      	ldr	r1, [r1, #0]
 800c0a4:	fb23 1202 	smlad	r2, r3, r2, r1
 800c0a8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800c0ac:	601a      	str	r2, [r3, #0]
  return(result);
 800c0ae:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800c0b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800c0bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c0c0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c0c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f107 031c 	add.w	r3, r7, #28
 800c0d2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c0d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	1d1a      	adds	r2, r3, #4
 800c0de:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	601a      	str	r2, [r3, #0]
    return (val);
 800c0e6:	f107 031c 	add.w	r3, r7, #28
 800c0ea:	681b      	ldr	r3, [r3, #0]

            val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 800c0ec:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val1 = __SXTAB16(rhs_offset_s16x2, val0);
 800c0f0:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800c0f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800c0f8:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800c0fc:	6019      	str	r1, [r3, #0]
 800c0fe:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800c102:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f507 7201 	add.w	r2, r7, #516	; 0x204
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	fa23 f282 	sxtab16	r2, r3, r2
 800c114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c118:	601a      	str	r2, [r3, #0]
  return(result);
 800c11a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800c124:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c128:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800c12c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800c12e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	461a      	mov	r2, r3
 800c13a:	f107 0318 	add.w	r3, r7, #24
 800c13e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 800c140:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	1d1a      	adds	r2, r3, #4
 800c14a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	601a      	str	r2, [r3, #0]
    return (val);
 800c152:	f107 0318 	add.w	r3, r7, #24
 800c156:	681b      	ldr	r3, [r3, #0]
            val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 800c158:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
            val0 = __SXTAB16(rhs_offset_s16x2, __ROR(val0, 8));
 800c15c:	f8d7 25a4 	ldr.w	r2, [r7, #1444]	; 0x5a4
 800c160:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c16a:	2208      	movs	r2, #8
 800c16c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c16e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c172:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800c176:	6812      	ldr	r2, [r2, #0]
 800c178:	f002 021f 	and.w	r2, r2, #31
 800c17c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c17e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d103      	bne.n	800c190 <arm_nn_vec_mat_mult_t_s8+0x1b76>
    return op1;
 800c188:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	e007      	b.n	800c1a0 <arm_nn_vec_mat_mult_t_s8+0x1b86>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c190:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800c194:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	fa62 f303 	ror.w	r3, r2, r3
 800c1a0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800c1a4:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800c1a8:	6011      	str	r1, [r2, #0]
 800c1aa:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 800c1ae:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c1b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	fa23 f282 	sxtab16	r2, r3, r2
 800c1c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c1c4:	601a      	str	r2, [r3, #0]
  return(result);
 800c1c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
            val3 = __SXTAB16(lhs_offset_s16x2, val2);
 800c1d0:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800c1d4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800c1d8:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c1dc:	6019      	str	r1, [r3, #0]
 800c1de:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c1e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c1e4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c1ee:	6812      	ldr	r2, [r2, #0]
 800c1f0:	fa23 f282 	sxtab16	r2, r3, r2
 800c1f4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800c1f8:	601a      	str	r2, [r3, #0]
  return(result);
 800c1fa:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
            val2 = __SXTAB16(lhs_offset_s16x2, __ROR(val2, 8));
 800c204:	f8d7 259c 	ldr.w	r2, [r7, #1436]	; 0x59c
 800c208:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c212:	2208      	movs	r2, #8
 800c214:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800c216:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c21a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800c21e:	6812      	ldr	r2, [r2, #0]
 800c220:	f002 021f 	and.w	r2, r2, #31
 800c224:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800c226:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d103      	bne.n	800c238 <arm_nn_vec_mat_mult_t_s8+0x1c1e>
    return op1;
 800c230:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	e007      	b.n	800c248 <arm_nn_vec_mat_mult_t_s8+0x1c2e>
  return (op1 >> op2) | (op1 << (32U - op2));
 800c238:	f507 720d 	add.w	r2, r7, #564	; 0x234
 800c23c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800c240:	6812      	ldr	r2, [r2, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	fa62 f303 	ror.w	r3, r2, r3
 800c248:	f507 7210 	add.w	r2, r7, #576	; 0x240
 800c24c:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800c250:	6011      	str	r1, [r2, #0]
 800c252:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 800c256:	6013      	str	r3, [r2, #0]
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800c258:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 800c262:	6812      	ldr	r2, [r2, #0]
 800c264:	fa23 f282 	sxtab16	r2, r3, r2
 800c268:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800c26c:	601a      	str	r2, [r3, #0]
  return(result);
 800c26e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
 800c278:	f8d7 0598 	ldr.w	r0, [r7, #1432]	; 0x598
 800c27c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 800c280:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800c288:	6018      	str	r0, [r3, #0]
 800c28a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800c28e:	6019      	str	r1, [r3, #0]
 800c290:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800c294:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c296:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800c2a0:	6812      	ldr	r2, [r2, #0]
 800c2a2:	f507 7112 	add.w	r1, r7, #584	; 0x248
 800c2a6:	6809      	ldr	r1, [r1, #0]
 800c2a8:	fb23 1202 	smlad	r2, r3, r2, r1
 800c2ac:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800c2b0:	601a      	str	r2, [r3, #0]
  return(result);
 800c2b2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
            res00 = __SMLAD(val2, val0, res00);
 800c2bc:	f8d7 059c 	ldr.w	r0, [r7, #1436]	; 0x59c
 800c2c0:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 800c2c4:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c2c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800c2cc:	6018      	str	r0, [r3, #0]
 800c2ce:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800c2d2:	6019      	str	r1, [r3, #0]
 800c2d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800c2d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800c2da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800c2ea:	6809      	ldr	r1, [r1, #0]
 800c2ec:	fb23 1202 	smlad	r2, r3, r2, r1
 800c2f0:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800c2f4:	601a      	str	r2, [r3, #0]
  return(result);
 800c2f6:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800c300:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 800c304:	3310      	adds	r3, #16
 800c306:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 800c30a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c30e:	3b0f      	subs	r3, #15
 800c310:	f8d7 25d8 	ldr.w	r2, [r7, #1496]	; 0x5d8
 800c314:	429a      	cmp	r2, r3
 800c316:	f6ff ab63 	blt.w	800b9e0 <arm_nn_vec_mat_mult_t_s8+0x13c6>
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c31a:	e033      	b.n	800c384 <arm_nn_vec_mat_mult_t_s8+0x1d6a>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800c31c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f993 3000 	ldrsb.w	r3, [r3]
 800c326:	461a      	mov	r2, r3
 800c328:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800c32c:	4413      	add	r3, r2
 800c32e:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
            q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800c332:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f993 3000 	ldrsb.w	r3, [r3]
 800c33c:	461a      	mov	r2, r3
 800c33e:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 800c342:	4413      	add	r3, r2
 800c344:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8

            res00 += lhs_value * rhs_value0;
 800c348:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800c34c:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800c350:	fb02 f303 	mul.w	r3, r2, r3
 800c354:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c358:	4413      	add	r3, r2
 800c35a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

            ++rhs_ptr;
 800c35e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c36a:	601a      	str	r2, [r3, #0]
            ++lhs_ptr;
 800c36c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c378:	601a      	str	r2, [r3, #0]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800c37a:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 800c37e:	3301      	adds	r3, #1
 800c380:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 800c384:	f8d7 25d8 	ldr.w	r2, [r7, #1496]	; 0x5d8
 800c388:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800c38c:	429a      	cmp	r2, r3
 800c38e:	dbc5      	blt.n	800c31c <arm_nn_vec_mat_mult_t_s8+0x1d02>
 800c390:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800c394:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800c39e:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c3a8:	f8d7 2620 	ldr.w	r2, [r7, #1568]	; 0x620
 800c3ac:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c3ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c3b8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800c3bc:	6812      	ldr	r2, [r2, #0]
 800c3be:	409a      	lsls	r2, r3
 800c3c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c3ca:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800c3ce:	6812      	ldr	r2, [r2, #0]
 800c3d0:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800c3d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800c3da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c3de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3e2:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 800c3e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c3ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c3f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c3f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c400:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c40c:	fb02 fc01 	mul.w	ip, r2, r1
 800c410:	fb00 f603 	mul.w	r6, r0, r3
 800c414:	4466      	add	r6, ip
 800c416:	fba0 2302 	umull	r2, r3, r0, r2
 800c41a:	18f1      	adds	r1, r6, r3
 800c41c:	460b      	mov	r3, r1
 800c41e:	eb14 0802 	adds.w	r8, r4, r2
 800c422:	eb45 0903 	adc.w	r9, r5, r3
 800c426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c42a:	e9c3 8900 	strd	r8, r9, [r3]
    result = (int32_t)(mult.long_long >> 31);
 800c42e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c432:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c436:	f04f 0200 	mov.w	r2, #0
 800c43a:	f04f 0300 	mov.w	r3, #0
 800c43e:	0fc2      	lsrs	r2, r0, #31
 800c440:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c444:	17cb      	asrs	r3, r1, #31
 800c446:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800c44a:	4613      	mov	r3, r2
 800c44c:	600b      	str	r3, [r1, #0]
    return result;
 800c44e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c452:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c454:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dc04      	bgt.n	800c468 <arm_nn_vec_mat_mult_t_s8+0x1e4e>
 800c45e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	425b      	negs	r3, r3
 800c466:	e000      	b.n	800c46a <arm_nn_vec_mat_mult_t_s8+0x1e50>
 800c468:	2300      	movs	r3, #0
 800c46a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800c46e:	6011      	str	r1, [r2, #0]
 800c470:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c474:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c47e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c482:	2201      	movs	r2, #1
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	409a      	lsls	r2, r3
 800c488:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800c48c:	3a01      	subs	r2, #1
 800c48e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800c490:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c494:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800c498:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800c49c:	6809      	ldr	r1, [r1, #0]
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	400a      	ands	r2, r1
 800c4a2:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800c4a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c4a8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800c4ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c4b0:	6809      	ldr	r1, [r1, #0]
 800c4b2:	6812      	ldr	r2, [r2, #0]
 800c4b4:	fa41 f202 	asr.w	r2, r1, r2
 800c4b8:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800c4ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c4be:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	1052      	asrs	r2, r2, #1
 800c4c6:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800c4c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	da06      	bge.n	800c4e0 <arm_nn_vec_mat_mult_t_s8+0x1ec6>
        threshold++;
 800c4d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c4d6:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800c4da:	6812      	ldr	r2, [r2, #0]
 800c4dc:	3201      	adds	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 800c4e0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800c4e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	dd06      	ble.n	800c4fe <arm_nn_vec_mat_mult_t_s8+0x1ee4>
        result++;
 800c4f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c4f4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800c4f8:	6812      	ldr	r2, [r2, #0]
 800c4fa:	3201      	adds	r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]
    return result;
 800c4fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c502:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c504:	bf00      	nop
        }

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);
 800c506:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

        // Add offset
        res00 += dst_offset;
 800c50a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c50e:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800c512:	4413      	add	r3, r2
 800c514:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800c518:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c51c:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 800c520:	4293      	cmp	r3, r2
 800c522:	bfb8      	it	lt
 800c524:	4613      	movlt	r3, r2
 800c526:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        res00 = MIN(res00, activation_max);
 800c52a:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800c52e:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 800c532:	4293      	cmp	r3, r2
 800c534:	bfa8      	it	ge
 800c536:	4613      	movge	r3, r2
 800c538:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc

        *dst = (q7_t)res00;
 800c53c:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800c540:	b25a      	sxtb	r2, r3
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	701a      	strb	r2, [r3, #0]

        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	f507 67be 	add.w	r7, r7, #1520	; 0x5f0
 800c552:	46bd      	mov	sp, r7
 800c554:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c558:	4770      	bx	lr
 800c55a:	0000      	movs	r0, r0
 800c55c:	0000      	movs	r0, r0
	...

0800c560 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800c560:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c564:	f5ad 6dbf 	sub.w	sp, sp, #1528	; 0x5f8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	f507 740d 	add.w	r4, r7, #564	; 0x234
 800c56e:	6020      	str	r0, [r4, #0]
 800c570:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800c574:	6001      	str	r1, [r0, #0]
 800c576:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 800c57a:	600a      	str	r2, [r1, #0]
 800c57c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800c580:	6013      	str	r3, [r2, #0]

        input += row_size;
        output += row_size;
    }
#else
    const int32_t mask = (1 << shift);
 800c582:	2201      	movs	r2, #1
 800c584:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800c588:	fa02 f303 	lsl.w	r3, r2, r3
 800c58c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4

    int32_t col = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800c596:	2300      	movs	r3, #0
 800c598:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 800c59c:	f003 b846 	b.w	800f62c <arm_softmax_s8+0x30cc>
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800c5a0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef

        for (col = 1; col < row_size; ++col)
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c5b2:	e013      	b.n	800c5dc <arm_softmax_s8+0x7c>
        {
            max = MAX(max, input[col]);
 800c5b4:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800c5b8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f993 2000 	ldrsb.w	r2, [r3]
 800c5c4:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bfb8      	it	lt
 800c5cc:	4613      	movlt	r3, r2
 800c5ce:	f887 35ef 	strb.w	r3, [r7, #1519]	; 0x5ef
        for (col = 1; col < row_size; ++col)
 800c5d2:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c5dc:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800c5e0:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	dbe4      	blt.n	800c5b4 <arm_softmax_s8+0x54>
        }

        int32_t diff = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
        int32_t sum = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

        for (col = 0; col < row_size; ++col)
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800c5fc:	f001 b8a1 	b.w	800d742 <arm_softmax_s8+0x11e2>
        {
            diff = input[col] - max;
 800c600:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800c604:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4413      	add	r3, r2
 800c60c:	f993 3000 	ldrsb.w	r3, [r3]
 800c610:	461a      	mov	r2, r3
 800c612:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 800c61c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800c620:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800c624:	429a      	cmp	r2, r3
 800c626:	f2c1 8087 	blt.w	800d738 <arm_softmax_s8+0x11d8>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800c62a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800c62e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 800c632:	fb03 f202 	mul.w	r2, r3, r2
 800c636:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800c640:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800c648:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800c64c:	2300      	movs	r3, #0
 800c64e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800c650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 800c65c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800c660:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	0fdb      	lsrs	r3, r3, #31
 800c668:	b2da      	uxtb	r2, r3
 800c66a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	0fdb      	lsrs	r3, r3, #31
 800c672:	b2db      	uxtb	r3, r3
 800c674:	4053      	eors	r3, r2
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d014      	beq.n	800c6a6 <arm_softmax_s8+0x146>
        mult = 1 - mult;
 800c67c:	f04f 0001 	mov.w	r0, #1
 800c680:	f04f 0100 	mov.w	r1, #0
 800c684:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	1a84      	subs	r4, r0, r2
 800c68e:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800c692:	eb61 0303 	sbc.w	r3, r1, r3
 800c696:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800c69a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800c69e:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c6a2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800c6a6:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c6b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c6be:	fb02 f501 	mul.w	r5, r2, r1
 800c6c2:	fb00 f403 	mul.w	r4, r0, r3
 800c6c6:	442c      	add	r4, r5
 800c6c8:	fba0 0102 	umull	r0, r1, r0, r2
 800c6cc:	1863      	adds	r3, r4, r1
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d8:	1814      	adds	r4, r2, r0
 800c6da:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800c6de:	414b      	adcs	r3, r1
 800c6e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800c6e4:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800c6e8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800c6ec:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800c6f0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f171 0300 	sbcs.w	r3, r1, #0
 800c702:	da06      	bge.n	800c712 <arm_softmax_s8+0x1b2>
 800c704:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	1880      	adds	r0, r0, r2
 800c70e:	eb43 0101 	adc.w	r1, r3, r1
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	f04f 0300 	mov.w	r3, #0
 800c71a:	0fc2      	lsrs	r2, r0, #31
 800c71c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c720:	17cb      	asrs	r3, r1, #31
 800c722:	4610      	mov	r0, r2
 800c724:	4619      	mov	r1, r3
 800c726:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800c72a:	4603      	mov	r3, r0
 800c72c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800c72e:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 800c732:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800c736:	6812      	ldr	r2, [r2, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d10a      	bne.n	800c754 <arm_softmax_s8+0x1f4>
 800c73e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c748:	d104      	bne.n	800c754 <arm_softmax_s8+0x1f4>
        result = Q31_MAX;
 800c74a:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800c74e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c752:	6013      	str	r3, [r2, #0]
    return result;
 800c754:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8

// @note The following functions are used only for softmax layer, scaled bits = 5 assumed

__STATIC_FORCEINLINE int32_t arm_nn_exp_on_negative_values(int32_t val)
{
    int32_t mask = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    int32_t shift = 24;
 800c764:	2318      	movs	r3, #24
 800c766:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0

    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 800c770:	fa02 f303 	lsl.w	r3, r2, r3
 800c774:	1e5a      	subs	r2, r3, #1
 800c776:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800c77a:	ea02 0103 	and.w	r1, r2, r3
 800c77e:	2201      	movs	r2, #1
 800c780:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 800c784:	fa02 f303 	lsl.w	r3, r2, r3
 800c788:	1acb      	subs	r3, r1, r3
 800c78a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
    const int32_t remainder = val_mod_minus_quarter - val;
 800c78e:	f8d7 25ac 	ldr.w	r2, [r7, #1452]	; 0x5ac
 800c792:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800c79c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800c7a0:	015b      	lsls	r3, r3, #5
 800c7a2:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800c7a6:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800c7aa:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800c7ae:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800c7b2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800c7b6:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
    q31_t result = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    q63_t mult = 1 << 30;
 800c7c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c7c4:	f04f 0300 	mov.w	r3, #0
 800c7c8:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 800c7cc:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800c7d0:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800c7d4:	0fdb      	lsrs	r3, r3, #31
 800c7d6:	b2da      	uxtb	r2, r3
 800c7d8:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800c7dc:	0fdb      	lsrs	r3, r3, #31
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	4053      	eors	r3, r2
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d014      	beq.n	800c812 <arm_softmax_s8+0x2b2>
        mult = 1 - mult;
 800c7e8:	f04f 0001 	mov.w	r0, #1
 800c7ec:	f04f 0100 	mov.w	r1, #0
 800c7f0:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	1a84      	subs	r4, r0, r2
 800c7fa:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800c7fe:	eb61 0303 	sbc.w	r3, r1, r3
 800c802:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800c806:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800c80a:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800c80e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800c812:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800c816:	4618      	mov	r0, r3
 800c818:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c81c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800c820:	461a      	mov	r2, r3
 800c822:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c826:	fb02 f501 	mul.w	r5, r2, r1
 800c82a:	fb00 f403 	mul.w	r4, r0, r3
 800c82e:	442c      	add	r4, r5
 800c830:	fba0 0102 	umull	r0, r1, r0, r2
 800c834:	1863      	adds	r3, r4, r1
 800c836:	4619      	mov	r1, r3
 800c838:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c840:	1814      	adds	r4, r2, r0
 800c842:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800c846:	414b      	adcs	r3, r1
 800c848:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800c84c:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800c850:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800c854:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800c858:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4610      	mov	r0, r2
 800c862:	4619      	mov	r1, r3
 800c864:	2800      	cmp	r0, #0
 800c866:	f171 0300 	sbcs.w	r3, r1, #0
 800c86a:	da06      	bge.n	800c87a <arm_softmax_s8+0x31a>
 800c86c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	1880      	adds	r0, r0, r2
 800c876:	eb43 0101 	adc.w	r1, r3, r1
 800c87a:	f04f 0200 	mov.w	r2, #0
 800c87e:	f04f 0300 	mov.w	r3, #0
 800c882:	0fc2      	lsrs	r2, r0, #31
 800c884:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c888:	17cb      	asrs	r3, r1, #31
 800c88a:	4613      	mov	r3, r2
 800c88c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800c890:	f8d7 25a0 	ldr.w	r2, [r7, #1440]	; 0x5a0
 800c894:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800c898:	429a      	cmp	r2, r3
 800c89a:	d108      	bne.n	800c8ae <arm_softmax_s8+0x34e>
 800c89c:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 800c8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8a4:	d103      	bne.n	800c8ae <arm_softmax_s8+0x34e>
        result = Q31_MAX;
 800c8a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c8aa:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
    return result;
 800c8ae:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
    const int32_t x2 = MUL_SAT(x, x);
 800c8b2:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800c8b6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800c8ba:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 800c8be:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800c8c2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    q31_t result = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    q63_t mult = 1 << 30;
 800c8cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c8d0:	f04f 0300 	mov.w	r3, #0
 800c8d4:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 800c8d8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800c8dc:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800c8e0:	0fdb      	lsrs	r3, r3, #31
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800c8e8:	0fdb      	lsrs	r3, r3, #31
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	4053      	eors	r3, r2
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d014      	beq.n	800c91e <arm_softmax_s8+0x3be>
        mult = 1 - mult;
 800c8f4:	f04f 0001 	mov.w	r0, #1
 800c8f8:	f04f 0100 	mov.w	r1, #0
 800c8fc:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	1a84      	subs	r4, r0, r2
 800c906:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800c90a:	eb61 0303 	sbc.w	r3, r1, r3
 800c90e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800c912:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800c916:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800c91a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800c91e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800c922:	4618      	mov	r0, r3
 800c924:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800c928:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800c92c:	461a      	mov	r2, r3
 800c92e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c932:	fb02 f501 	mul.w	r5, r2, r1
 800c936:	fb00 f403 	mul.w	r4, r0, r3
 800c93a:	442c      	add	r4, r5
 800c93c:	fba0 0102 	umull	r0, r1, r0, r2
 800c940:	1863      	adds	r3, r4, r1
 800c942:	4619      	mov	r1, r3
 800c944:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	1814      	adds	r4, r2, r0
 800c94e:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800c952:	414b      	adcs	r3, r1
 800c954:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800c958:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800c95c:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 800c960:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800c964:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	4610      	mov	r0, r2
 800c96e:	4619      	mov	r1, r3
 800c970:	2800      	cmp	r0, #0
 800c972:	f171 0300 	sbcs.w	r3, r1, #0
 800c976:	da06      	bge.n	800c986 <arm_softmax_s8+0x426>
 800c978:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c97c:	f04f 0300 	mov.w	r3, #0
 800c980:	1880      	adds	r0, r0, r2
 800c982:	eb43 0101 	adc.w	r1, r3, r1
 800c986:	f04f 0200 	mov.w	r2, #0
 800c98a:	f04f 0300 	mov.w	r3, #0
 800c98e:	0fc2      	lsrs	r2, r0, #31
 800c990:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800c994:	17cb      	asrs	r3, r1, #31
 800c996:	4613      	mov	r3, r2
 800c998:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800c99c:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800c9a0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d108      	bne.n	800c9ba <arm_softmax_s8+0x45a>
 800c9a8:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800c9ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9b0:	d103      	bne.n	800c9ba <arm_softmax_s8+0x45a>
        result = Q31_MAX;
 800c9b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c9b6:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    return result;
 800c9ba:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800c9be:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    q31_t result = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t remainder = remainder_mask & dividend;
 800c9d0:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800c9d4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800c9d8:	4013      	ands	r3, r2
 800c9da:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    result = dividend >> exponent;
 800c9de:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800c9e2:	109b      	asrs	r3, r3, #2
 800c9e4:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    q31_t threshold = remainder_mask >> 1;
 800c9e8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800c9ec:	105b      	asrs	r3, r3, #1
 800c9ee:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (result < 0)
 800c9f2:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	da04      	bge.n	800ca04 <arm_softmax_s8+0x4a4>
        threshold++;
 800c9fa:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800c9fe:	3301      	adds	r3, #1
 800ca00:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    if (remainder > threshold)
 800ca04:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 800ca08:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	dd04      	ble.n	800ca1a <arm_softmax_s8+0x4ba>
        result++;
 800ca10:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 800ca14:	3301      	adds	r3, #1
 800ca16:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    return result;
 800ca1a:	f8d7 6570 	ldr.w	r6, [r7, #1392]	; 0x570
 800ca1e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800ca22:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 800ca26:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800ca2a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    q31_t result = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    q63_t mult = 1 << 30;
 800ca34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca38:	f04f 0300 	mov.w	r3, #0
 800ca3c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800ca40:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800ca44:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800ca48:	0fdb      	lsrs	r3, r3, #31
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800ca50:	0fdb      	lsrs	r3, r3, #31
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	4053      	eors	r3, r2
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d014      	beq.n	800ca86 <arm_softmax_s8+0x526>
        mult = 1 - mult;
 800ca5c:	f04f 0001 	mov.w	r0, #1
 800ca60:	f04f 0100 	mov.w	r1, #0
 800ca64:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	1a84      	subs	r4, r0, r2
 800ca6e:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800ca72:	eb61 0303 	sbc.w	r3, r1, r3
 800ca76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800ca7a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800ca7e:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800ca82:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ca86:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ca90:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800ca94:	461a      	mov	r2, r3
 800ca96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ca9a:	fb02 f501 	mul.w	r5, r2, r1
 800ca9e:	fb00 f403 	mul.w	r4, r0, r3
 800caa2:	442c      	add	r4, r5
 800caa4:	fba0 0102 	umull	r0, r1, r0, r2
 800caa8:	1863      	adds	r3, r4, r1
 800caaa:	4619      	mov	r1, r3
 800caac:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	1814      	adds	r4, r2, r0
 800cab6:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800caba:	414b      	adcs	r3, r1
 800cabc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cac0:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800cac4:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800cac8:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cacc:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	4610      	mov	r0, r2
 800cad6:	4619      	mov	r1, r3
 800cad8:	2800      	cmp	r0, #0
 800cada:	f171 0300 	sbcs.w	r3, r1, #0
 800cade:	da06      	bge.n	800caee <arm_softmax_s8+0x58e>
 800cae0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cae4:	f04f 0300 	mov.w	r3, #0
 800cae8:	1880      	adds	r0, r0, r2
 800caea:	eb43 0101 	adc.w	r1, r3, r1
 800caee:	f04f 0200 	mov.w	r2, #0
 800caf2:	f04f 0300 	mov.w	r3, #0
 800caf6:	0fc2      	lsrs	r2, r0, #31
 800caf8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cafc:	17cb      	asrs	r3, r1, #31
 800cafe:	4613      	mov	r3, r2
 800cb00:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800cb04:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 800cb08:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d108      	bne.n	800cb22 <arm_softmax_s8+0x5c2>
 800cb10:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800cb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb18:	d103      	bne.n	800cb22 <arm_softmax_s8+0x5c2>
        result = Q31_MAX;
 800cb1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cb1e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    return result;
 800cb22:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558

    int32_t result = 1895147668 +
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800cb26:	4433      	add	r3, r6
 800cb28:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    q31_t result = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    q63_t mult = 1 << 30;
 800cb32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cb36:	f04f 0300 	mov.w	r3, #0
 800cb3a:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 800cb3e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cb42:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800cb46:	0fdb      	lsrs	r3, r3, #31
 800cb48:	b2da      	uxtb	r2, r3
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	4053      	eors	r3, r2
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d014      	beq.n	800cb7e <arm_softmax_s8+0x61e>
        mult = 1 - mult;
 800cb54:	f04f 0001 	mov.w	r0, #1
 800cb58:	f04f 0100 	mov.w	r1, #0
 800cb5c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	1a84      	subs	r4, r0, r2
 800cb66:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800cb6a:	eb61 0303 	sbc.w	r3, r1, r3
 800cb6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cb72:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800cb76:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800cb7a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800cb7e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800cb82:	4618      	mov	r0, r3
 800cb84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cb88:	a3d2      	add	r3, pc, #840	; (adr r3, 800ced4 <arm_softmax_s8+0x974>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	fb02 f501 	mul.w	r5, r2, r1
 800cb92:	fb00 f403 	mul.w	r4, r0, r3
 800cb96:	442c      	add	r4, r5
 800cb98:	fba0 0102 	umull	r0, r1, r0, r2
 800cb9c:	1863      	adds	r3, r4, r1
 800cb9e:	4619      	mov	r1, r3
 800cba0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	1814      	adds	r4, r2, r0
 800cbaa:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800cbae:	414b      	adcs	r3, r1
 800cbb0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800cbb4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800cbb8:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800cbbc:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cbc0:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800cbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc8:	4610      	mov	r0, r2
 800cbca:	4619      	mov	r1, r3
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f171 0300 	sbcs.w	r3, r1, #0
 800cbd2:	da06      	bge.n	800cbe2 <arm_softmax_s8+0x682>
 800cbd4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cbd8:	f04f 0300 	mov.w	r3, #0
 800cbdc:	1880      	adds	r0, r0, r2
 800cbde:	eb43 0101 	adc.w	r1, r3, r1
 800cbe2:	f04f 0200 	mov.w	r2, #0
 800cbe6:	f04f 0300 	mov.w	r3, #0
 800cbea:	0fc2      	lsrs	r2, r0, #31
 800cbec:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cbf0:	17cb      	asrs	r3, r1, #31
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800cbf8:	f8d7 254c 	ldr.w	r2, [r7, #1356]	; 0x54c
 800cbfc:	4bb2      	ldr	r3, [pc, #712]	; (800cec8 <arm_softmax_s8+0x968>)
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d108      	bne.n	800cc14 <arm_softmax_s8+0x6b4>
 800cc02:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800cc06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc0a:	d103      	bne.n	800cc14 <arm_softmax_s8+0x6b4>
        result = Q31_MAX;
 800cc0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cc10:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    return result;
 800cc14:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800cc18:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    q31_t result = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    const q31_t remainder_mask = (1 << exponent) - 1;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t remainder = remainder_mask & dividend;
 800cc30:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800cc34:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800cc38:	4013      	ands	r3, r2
 800cc3a:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    result = dividend >> exponent;
 800cc3e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800cc42:	105b      	asrs	r3, r3, #1
 800cc44:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    q31_t threshold = remainder_mask >> 1;
 800cc48:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800cc4c:	105b      	asrs	r3, r3, #1
 800cc4e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (result < 0)
 800cc52:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da04      	bge.n	800cc64 <arm_softmax_s8+0x704>
        threshold++;
 800cc5a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800cc5e:	3301      	adds	r3, #1
 800cc60:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    if (remainder > threshold)
 800cc64:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 800cc68:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	dd04      	ble.n	800cc7a <arm_softmax_s8+0x71a>
        result++;
 800cc70:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800cc74:	3301      	adds	r3, #1
 800cc76:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    return result;
 800cc7a:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800cc7e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800cc82:	4413      	add	r3, r2
 800cc84:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    q31_t result = 0;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    q63_t mult = 1 << 30;
 800cc8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cc92:	f04f 0300 	mov.w	r3, #0
 800cc96:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800cc9a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800cca4:	0fdb      	lsrs	r3, r3, #31
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	4053      	eors	r3, r2
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d014      	beq.n	800ccda <arm_softmax_s8+0x77a>
        mult = 1 - mult;
 800ccb0:	f04f 0001 	mov.w	r0, #1
 800ccb4:	f04f 0100 	mov.w	r1, #0
 800ccb8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	1a84      	subs	r4, r0, r2
 800ccc2:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800ccc6:	eb61 0303 	sbc.w	r3, r1, r3
 800ccca:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ccce:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800ccd2:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800ccd6:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800ccda:	a177      	add	r1, pc, #476	; (adr r1, 800ceb8 <arm_softmax_s8+0x958>)
 800ccdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800cce4:	461a      	mov	r2, r3
 800cce6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ccea:	fb02 f501 	mul.w	r5, r2, r1
 800ccee:	fb00 f403 	mul.w	r4, r0, r3
 800ccf2:	442c      	add	r4, r5
 800ccf4:	fba0 0102 	umull	r0, r1, r0, r2
 800ccf8:	1863      	adds	r3, r4, r1
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	1814      	adds	r4, r2, r0
 800cd06:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800cd0a:	414b      	adcs	r3, r1
 800cd0c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800cd10:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800cd14:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800cd18:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cd1c:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	4610      	mov	r0, r2
 800cd26:	4619      	mov	r1, r3
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f171 0300 	sbcs.w	r3, r1, #0
 800cd2e:	da06      	bge.n	800cd3e <arm_softmax_s8+0x7de>
 800cd30:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cd34:	f04f 0300 	mov.w	r3, #0
 800cd38:	1880      	adds	r0, r0, r2
 800cd3a:	eb43 0101 	adc.w	r1, r3, r1
 800cd3e:	f04f 0200 	mov.w	r2, #0
 800cd42:	f04f 0300 	mov.w	r3, #0
 800cd46:	0fc2      	lsrs	r2, r0, #31
 800cd48:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cd4c:	17cb      	asrs	r3, r1, #31
 800cd4e:	4613      	mov	r3, r2
 800cd50:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    return result;
 800cd54:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
    int32_t result = 1895147668 +
 800cd58:	4b5c      	ldr	r3, [pc, #368]	; (800cecc <arm_softmax_s8+0x96c>)
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    {                                                                                                                  \
        mask = MASK_IF_NON_ZERO(remainder & (1 << shift++));                                                           \
        result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result);                                                  \
    }

    SELECT_IF_NON_ZERO(1672461947)
 800cd60:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800cd64:	1c53      	adds	r3, r2, #1
 800cd66:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	fa03 f202 	lsl.w	r2, r3, r2
 800cd70:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800cd74:	4013      	ands	r3, r2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <arm_softmax_s8+0x820>
 800cd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7e:	e000      	b.n	800cd82 <arm_softmax_s8+0x822>
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800cd86:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800cd8a:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    q31_t result = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    q63_t mult = 1 << 30;
 800cd94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 800cda0:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cda4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800cda8:	0fdb      	lsrs	r3, r3, #31
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	2300      	movs	r3, #0
 800cdae:	4053      	eors	r3, r2
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d014      	beq.n	800cde0 <arm_softmax_s8+0x880>
        mult = 1 - mult;
 800cdb6:	f04f 0001 	mov.w	r0, #1
 800cdba:	f04f 0100 	mov.w	r1, #0
 800cdbe:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	1a84      	subs	r4, r0, r2
 800cdc8:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800cdcc:	eb61 0303 	sbc.w	r3, r1, r3
 800cdd0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800cdd4:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800cdd8:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800cddc:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800cde0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800cde4:	4618      	mov	r0, r3
 800cde6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cdea:	a335      	add	r3, pc, #212	; (adr r3, 800cec0 <arm_softmax_s8+0x960>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	fb02 f501 	mul.w	r5, r2, r1
 800cdf4:	fb00 f403 	mul.w	r4, r0, r3
 800cdf8:	442c      	add	r4, r5
 800cdfa:	fba0 0102 	umull	r0, r1, r0, r2
 800cdfe:	1863      	adds	r3, r4, r1
 800ce00:	4619      	mov	r1, r3
 800ce02:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	1814      	adds	r4, r2, r0
 800ce0c:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800ce10:	414b      	adcs	r3, r1
 800ce12:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800ce16:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800ce1a:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800ce1e:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800ce22:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f171 0300 	sbcs.w	r3, r1, #0
 800ce34:	da06      	bge.n	800ce44 <arm_softmax_s8+0x8e4>
 800ce36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	1880      	adds	r0, r0, r2
 800ce40:	eb43 0101 	adc.w	r1, r3, r1
 800ce44:	f04f 0200 	mov.w	r2, #0
 800ce48:	f04f 0300 	mov.w	r3, #0
 800ce4c:	0fc2      	lsrs	r2, r0, #31
 800ce4e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ce52:	17cb      	asrs	r3, r1, #31
 800ce54:	4613      	mov	r3, r2
 800ce56:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ce5a:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 800ce5e:	4b1c      	ldr	r3, [pc, #112]	; (800ced0 <arm_softmax_s8+0x970>)
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d108      	bne.n	800ce76 <arm_softmax_s8+0x916>
 800ce64:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800ce68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce6c:	d103      	bne.n	800ce76 <arm_softmax_s8+0x916>
        result = Q31_MAX;
 800ce6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce72:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    return result;
 800ce76:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
    SELECT_IF_NON_ZERO(1672461947)
 800ce7a:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800ce7e:	ea02 0103 	and.w	r1, r2, r3
 800ce82:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800ce86:	43da      	mvns	r2, r3
 800ce88:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	404b      	eors	r3, r1
 800ce90:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(1302514674)
 800ce94:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800ce98:	1c53      	adds	r3, r2, #1
 800ce9a:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800ce9e:	2301      	movs	r3, #1
 800cea0:	fa03 f202 	lsl.w	r2, r3, r2
 800cea4:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800cea8:	4013      	ands	r3, r2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d016      	beq.n	800cedc <arm_softmax_s8+0x97c>
 800ceae:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb2:	e014      	b.n	800cede <arm_softmax_s8+0x97e>
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	70f5a894 	.word	0x70f5a894
 800cebc:	00000000 	.word	0x00000000
 800cec0:	63afbe7b 	.word	0x63afbe7b
 800cec4:	00000000 	.word	0x00000000
 800cec8:	2aaaaaab 	.word	0x2aaaaaab
 800cecc:	70f5a894 	.word	0x70f5a894
 800ced0:	63afbe7b 	.word	0x63afbe7b
 800ced4:	2aaaaaab 	.word	0x2aaaaaab
 800ced8:	00000000 	.word	0x00000000
 800cedc:	2300      	movs	r3, #0
 800cede:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800cee2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800cee6:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    q31_t result = 0;
 800ceea:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800ceee:	2300      	movs	r3, #0
 800cef0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800cef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cef6:	f04f 0300 	mov.w	r3, #0
 800cefa:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 800cefe:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800cf02:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800cf06:	0fdb      	lsrs	r3, r3, #31
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	4053      	eors	r3, r2
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d014      	beq.n	800cf3e <arm_softmax_s8+0x9de>
        mult = 1 - mult;
 800cf14:	f04f 0001 	mov.w	r0, #1
 800cf18:	f04f 0100 	mov.w	r1, #0
 800cf1c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	1a84      	subs	r4, r0, r2
 800cf26:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800cf2a:	eb61 0303 	sbc.w	r3, r1, r3
 800cf2e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cf32:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800cf36:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800cf3a:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800cf3e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800cf42:	4618      	mov	r0, r3
 800cf44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800cf48:	a3e0      	add	r3, pc, #896	; (adr r3, 800d2cc <arm_softmax_s8+0xd6c>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	fb02 f501 	mul.w	r5, r2, r1
 800cf52:	fb00 f403 	mul.w	r4, r0, r3
 800cf56:	442c      	add	r4, r5
 800cf58:	fba0 0102 	umull	r0, r1, r0, r2
 800cf5c:	1863      	adds	r3, r4, r1
 800cf5e:	4619      	mov	r1, r3
 800cf60:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	1814      	adds	r4, r2, r0
 800cf6a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800cf6e:	414b      	adcs	r3, r1
 800cf70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800cf74:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800cf78:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800cf7c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800cf80:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f171 0300 	sbcs.w	r3, r1, #0
 800cf92:	da06      	bge.n	800cfa2 <arm_softmax_s8+0xa42>
 800cf94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cf98:	f04f 0300 	mov.w	r3, #0
 800cf9c:	1880      	adds	r0, r0, r2
 800cf9e:	eb43 0101 	adc.w	r1, r3, r1
 800cfa2:	f04f 0200 	mov.w	r2, #0
 800cfa6:	f04f 0300 	mov.w	r3, #0
 800cfaa:	0fc2      	lsrs	r2, r0, #31
 800cfac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cfb0:	17cb      	asrs	r3, r1, #31
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800cfbe:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 800cfc2:	4bbf      	ldr	r3, [pc, #764]	; (800d2c0 <arm_softmax_s8+0xd60>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d109      	bne.n	800cfdc <arm_softmax_s8+0xa7c>
 800cfc8:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800cfcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfd0:	d104      	bne.n	800cfdc <arm_softmax_s8+0xa7c>
        result = Q31_MAX;
 800cfd2:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800cfd6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cfda:	6013      	str	r3, [r2, #0]
    return result;
 800cfdc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800cfe0:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800cfe2:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800cfe6:	ea02 0103 	and.w	r1, r2, r3
 800cfea:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800cfee:	43da      	mvns	r2, r3
 800cff0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800cff4:	4013      	ands	r3, r2
 800cff6:	404b      	eors	r3, r1
 800cff8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(790015084)
 800cffc:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800d000:	1c53      	adds	r3, r2, #1
 800d002:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d006:	2301      	movs	r3, #1
 800d008:	fa03 f202 	lsl.w	r2, r3, r2
 800d00c:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d010:	4013      	ands	r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <arm_softmax_s8+0xabc>
 800d016:	f04f 33ff 	mov.w	r3, #4294967295
 800d01a:	e000      	b.n	800d01e <arm_softmax_s8+0xabe>
 800d01c:	2300      	movs	r3, #0
 800d01e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d022:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800d026:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d02a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d02c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800d030:	2300      	movs	r3, #0
 800d032:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d038:	f04f 0300 	mov.w	r3, #0
 800d03c:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 800d040:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d044:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	0fdb      	lsrs	r3, r3, #31
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	2300      	movs	r3, #0
 800d050:	4053      	eors	r3, r2
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d014      	beq.n	800d082 <arm_softmax_s8+0xb22>
        mult = 1 - mult;
 800d058:	f04f 0001 	mov.w	r0, #1
 800d05c:	f04f 0100 	mov.w	r1, #0
 800d060:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d068:	1a84      	subs	r4, r0, r2
 800d06a:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800d06e:	eb61 0303 	sbc.w	r3, r1, r3
 800d072:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d076:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800d07a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800d07e:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d082:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4618      	mov	r0, r3
 800d08a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d08e:	a388      	add	r3, pc, #544	; (adr r3, 800d2b0 <arm_softmax_s8+0xd50>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	fb02 f501 	mul.w	r5, r2, r1
 800d098:	fb00 f403 	mul.w	r4, r0, r3
 800d09c:	442c      	add	r4, r5
 800d09e:	fba0 0102 	umull	r0, r1, r0, r2
 800d0a2:	1863      	adds	r3, r4, r1
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	1814      	adds	r4, r2, r0
 800d0b0:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800d0b4:	414b      	adcs	r3, r1
 800d0b6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800d0ba:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800d0be:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800d0c2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d0c6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	f171 0300 	sbcs.w	r3, r1, #0
 800d0d8:	da06      	bge.n	800d0e8 <arm_softmax_s8+0xb88>
 800d0da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d0de:	f04f 0300 	mov.w	r3, #0
 800d0e2:	1880      	adds	r0, r0, r2
 800d0e4:	eb43 0101 	adc.w	r1, r3, r1
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	0fc2      	lsrs	r2, r0, #31
 800d0f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d0f6:	17cb      	asrs	r3, r1, #31
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800d100:	4603      	mov	r3, r0
 800d102:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d104:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	4b6e      	ldr	r3, [pc, #440]	; (800d2c4 <arm_softmax_s8+0xd64>)
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d10a      	bne.n	800d126 <arm_softmax_s8+0xbc6>
 800d110:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d11a:	d104      	bne.n	800d126 <arm_softmax_s8+0xbc6>
        result = Q31_MAX;
 800d11c:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800d120:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d124:	6013      	str	r3, [r2, #0]
    return result;
 800d126:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800d12a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800d12c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d130:	ea02 0103 	and.w	r1, r2, r3
 800d134:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d138:	43da      	mvns	r2, r3
 800d13a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d13e:	4013      	ands	r3, r2
 800d140:	404b      	eors	r3, r1
 800d142:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(290630308)
 800d146:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800d14a:	1c53      	adds	r3, r2, #1
 800d14c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d150:	2301      	movs	r3, #1
 800d152:	fa03 f202 	lsl.w	r2, r3, r2
 800d156:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <arm_softmax_s8+0xc06>
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	e000      	b.n	800d168 <arm_softmax_s8+0xc08>
 800d166:	2300      	movs	r3, #0
 800d168:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d16c:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 800d170:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d174:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d176:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800d17a:	2300      	movs	r3, #0
 800d17c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d17e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d182:	f04f 0300 	mov.w	r3, #0
 800d186:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 800d18a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d18e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	0fdb      	lsrs	r3, r3, #31
 800d196:	b2da      	uxtb	r2, r3
 800d198:	2300      	movs	r3, #0
 800d19a:	4053      	eors	r3, r2
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d014      	beq.n	800d1cc <arm_softmax_s8+0xc6c>
        mult = 1 - mult;
 800d1a2:	f04f 0001 	mov.w	r0, #1
 800d1a6:	f04f 0100 	mov.w	r1, #0
 800d1aa:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	1a84      	subs	r4, r0, r2
 800d1b4:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800d1b8:	eb61 0303 	sbc.w	r3, r1, r3
 800d1bc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800d1c0:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800d1c4:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800d1c8:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d1cc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d1d8:	a337      	add	r3, pc, #220	; (adr r3, 800d2b8 <arm_softmax_s8+0xd58>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	fb02 f501 	mul.w	r5, r2, r1
 800d1e2:	fb00 f403 	mul.w	r4, r0, r3
 800d1e6:	442c      	add	r4, r5
 800d1e8:	fba0 0102 	umull	r0, r1, r0, r2
 800d1ec:	1863      	adds	r3, r4, r1
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	1814      	adds	r4, r2, r0
 800d1fa:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800d1fe:	414b      	adcs	r3, r1
 800d200:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d204:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800d208:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800d20c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d210:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	4610      	mov	r0, r2
 800d21a:	4619      	mov	r1, r3
 800d21c:	2800      	cmp	r0, #0
 800d21e:	f171 0300 	sbcs.w	r3, r1, #0
 800d222:	da06      	bge.n	800d232 <arm_softmax_s8+0xcd2>
 800d224:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d228:	f04f 0300 	mov.w	r3, #0
 800d22c:	1880      	adds	r0, r0, r2
 800d22e:	eb43 0101 	adc.w	r1, r3, r1
 800d232:	f04f 0200 	mov.w	r2, #0
 800d236:	f04f 0300 	mov.w	r3, #0
 800d23a:	0fc2      	lsrs	r2, r0, #31
 800d23c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d240:	17cb      	asrs	r3, r1, #31
 800d242:	4610      	mov	r0, r2
 800d244:	4619      	mov	r1, r3
 800d246:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800d24a:	4603      	mov	r3, r0
 800d24c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d24e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	4b1c      	ldr	r3, [pc, #112]	; (800d2c8 <arm_softmax_s8+0xd68>)
 800d256:	429a      	cmp	r2, r3
 800d258:	d10a      	bne.n	800d270 <arm_softmax_s8+0xd10>
 800d25a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d264:	d104      	bne.n	800d270 <arm_softmax_s8+0xd10>
        result = Q31_MAX;
 800d266:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800d26a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d26e:	6013      	str	r3, [r2, #0]
    return result;
 800d270:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800d274:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800d276:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d27a:	ea02 0103 	and.w	r1, r2, r3
 800d27e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d282:	43da      	mvns	r2, r3
 800d284:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d288:	4013      	ands	r3, r2
 800d28a:	404b      	eors	r3, r1
 800d28c:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(39332535)
 800d290:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800d294:	1c53      	adds	r3, r2, #1
 800d296:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d29a:	2301      	movs	r3, #1
 800d29c:	fa03 f202 	lsl.w	r2, r3, r2
 800d2a0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d014      	beq.n	800d2d4 <arm_softmax_s8+0xd74>
 800d2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ae:	e012      	b.n	800d2d6 <arm_softmax_s8+0xd76>
 800d2b0:	2f16ac6c 	.word	0x2f16ac6c
 800d2b4:	00000000 	.word	0x00000000
 800d2b8:	1152aaa4 	.word	0x1152aaa4
 800d2bc:	00000000 	.word	0x00000000
 800d2c0:	4da2cbf2 	.word	0x4da2cbf2
 800d2c4:	2f16ac6c 	.word	0x2f16ac6c
 800d2c8:	1152aaa4 	.word	0x1152aaa4
 800d2cc:	4da2cbf2 	.word	0x4da2cbf2
 800d2d0:	00000000 	.word	0x00000000
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d2da:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 800d2de:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d2e2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d2e4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d2ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d2f0:	f04f 0300 	mov.w	r3, #0
 800d2f4:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800d2f8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d2fc:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	0fdb      	lsrs	r3, r3, #31
 800d304:	b2da      	uxtb	r2, r3
 800d306:	2300      	movs	r3, #0
 800d308:	4053      	eors	r3, r2
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d014      	beq.n	800d33a <arm_softmax_s8+0xdda>
        mult = 1 - mult;
 800d310:	f04f 0001 	mov.w	r0, #1
 800d314:	f04f 0100 	mov.w	r1, #0
 800d318:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d320:	1a84      	subs	r4, r0, r2
 800d322:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800d326:	eb61 0303 	sbc.w	r3, r1, r3
 800d32a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d32e:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800d332:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800d336:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d33a:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4618      	mov	r0, r3
 800d342:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d346:	a3d8      	add	r3, pc, #864	; (adr r3, 800d6a8 <arm_softmax_s8+0x1148>)
 800d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d34c:	fb02 f501 	mul.w	r5, r2, r1
 800d350:	fb00 f403 	mul.w	r4, r0, r3
 800d354:	442c      	add	r4, r5
 800d356:	fba0 0102 	umull	r0, r1, r0, r2
 800d35a:	1863      	adds	r3, r4, r1
 800d35c:	4619      	mov	r1, r3
 800d35e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	1814      	adds	r4, r2, r0
 800d368:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800d36c:	414b      	adcs	r3, r1
 800d36e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800d372:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800d376:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800d37a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d37e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	4610      	mov	r0, r2
 800d388:	4619      	mov	r1, r3
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f171 0300 	sbcs.w	r3, r1, #0
 800d390:	da06      	bge.n	800d3a0 <arm_softmax_s8+0xe40>
 800d392:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d396:	f04f 0300 	mov.w	r3, #0
 800d39a:	1880      	adds	r0, r0, r2
 800d39c:	eb43 0101 	adc.w	r1, r3, r1
 800d3a0:	f04f 0200 	mov.w	r2, #0
 800d3a4:	f04f 0300 	mov.w	r3, #0
 800d3a8:	0fc2      	lsrs	r2, r0, #31
 800d3aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d3ae:	17cb      	asrs	r3, r1, #31
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d3bc:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4bb7      	ldr	r3, [pc, #732]	; (800d6a0 <arm_softmax_s8+0x1140>)
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d10a      	bne.n	800d3de <arm_softmax_s8+0xe7e>
 800d3c8:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3d2:	d104      	bne.n	800d3de <arm_softmax_s8+0xe7e>
        result = Q31_MAX;
 800d3d4:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800d3d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d3dc:	6013      	str	r3, [r2, #0]
    return result;
 800d3de:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800d3e2:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800d3e4:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d3e8:	ea02 0103 	and.w	r1, r2, r3
 800d3ec:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d3f0:	43da      	mvns	r2, r3
 800d3f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	404b      	eors	r3, r1
 800d3fa:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(720401)
 800d3fe:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800d402:	1c53      	adds	r3, r2, #1
 800d404:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d408:	2301      	movs	r3, #1
 800d40a:	fa03 f202 	lsl.w	r2, r3, r2
 800d40e:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d412:	4013      	ands	r3, r2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <arm_softmax_s8+0xebe>
 800d418:	f04f 33ff 	mov.w	r3, #4294967295
 800d41c:	e000      	b.n	800d420 <arm_softmax_s8+0xec0>
 800d41e:	2300      	movs	r3, #0
 800d420:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d424:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 800d428:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d42c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d42e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800d432:	2300      	movs	r3, #0
 800d434:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d43a:	f04f 0300 	mov.w	r3, #0
 800d43e:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 800d442:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d446:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	0fdb      	lsrs	r3, r3, #31
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	2300      	movs	r3, #0
 800d452:	4053      	eors	r3, r2
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d014      	beq.n	800d484 <arm_softmax_s8+0xf24>
        mult = 1 - mult;
 800d45a:	f04f 0001 	mov.w	r0, #1
 800d45e:	f04f 0100 	mov.w	r1, #0
 800d462:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46a:	1a84      	subs	r4, r0, r2
 800d46c:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800d470:	eb61 0303 	sbc.w	r3, r1, r3
 800d474:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800d478:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800d47c:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800d480:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d484:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4618      	mov	r0, r3
 800d48c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d490:	4a84      	ldr	r2, [pc, #528]	; (800d6a4 <arm_softmax_s8+0x1144>)
 800d492:	f04f 0300 	mov.w	r3, #0
 800d496:	fb02 f501 	mul.w	r5, r2, r1
 800d49a:	fb00 f403 	mul.w	r4, r0, r3
 800d49e:	442c      	add	r4, r5
 800d4a0:	fba0 0102 	umull	r0, r1, r0, r2
 800d4a4:	1863      	adds	r3, r4, r1
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800d4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b0:	1814      	adds	r4, r2, r0
 800d4b2:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800d4b6:	414b      	adcs	r3, r1
 800d4b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800d4bc:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800d4c0:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800d4c4:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d4c8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800d4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f171 0300 	sbcs.w	r3, r1, #0
 800d4da:	da06      	bge.n	800d4ea <arm_softmax_s8+0xf8a>
 800d4dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d4e0:	f04f 0300 	mov.w	r3, #0
 800d4e4:	1880      	adds	r0, r0, r2
 800d4e6:	eb43 0101 	adc.w	r1, r3, r1
 800d4ea:	f04f 0200 	mov.w	r2, #0
 800d4ee:	f04f 0300 	mov.w	r3, #0
 800d4f2:	0fc2      	lsrs	r2, r0, #31
 800d4f4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d4f8:	17cb      	asrs	r3, r1, #31
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800d502:	4603      	mov	r3, r0
 800d504:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d506:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	4b65      	ldr	r3, [pc, #404]	; (800d6a4 <arm_softmax_s8+0x1144>)
 800d50e:	429a      	cmp	r2, r3
 800d510:	d10a      	bne.n	800d528 <arm_softmax_s8+0xfc8>
 800d512:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d51c:	d104      	bne.n	800d528 <arm_softmax_s8+0xfc8>
        result = Q31_MAX;
 800d51e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800d522:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d526:	6013      	str	r3, [r2, #0]
    return result;
 800d528:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800d52c:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800d52e:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d532:	ea02 0103 	and.w	r1, r2, r3
 800d536:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d53a:	43da      	mvns	r2, r3
 800d53c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d540:	4013      	ands	r3, r2
 800d542:	404b      	eors	r3, r1
 800d544:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    SELECT_IF_NON_ZERO(242)
 800d548:	f8d7 25b0 	ldr.w	r2, [r7, #1456]	; 0x5b0
 800d54c:	1c53      	adds	r3, r2, #1
 800d54e:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
 800d552:	2301      	movs	r3, #1
 800d554:	fa03 f202 	lsl.w	r2, r3, r2
 800d558:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800d55c:	4013      	ands	r3, r2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <arm_softmax_s8+0x1008>
 800d562:	f04f 33ff 	mov.w	r3, #4294967295
 800d566:	e000      	b.n	800d56a <arm_softmax_s8+0x100a>
 800d568:	2300      	movs	r3, #0
 800d56a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800d56e:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 800d572:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d576:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d578:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800d57c:	2300      	movs	r3, #0
 800d57e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d584:	f04f 0300 	mov.w	r3, #0
 800d588:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 800d58c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d590:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	0fdb      	lsrs	r3, r3, #31
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	2300      	movs	r3, #0
 800d59c:	4053      	eors	r3, r2
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d014      	beq.n	800d5ce <arm_softmax_s8+0x106e>
        mult = 1 - mult;
 800d5a4:	f04f 0001 	mov.w	r0, #1
 800d5a8:	f04f 0100 	mov.w	r1, #0
 800d5ac:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	1a84      	subs	r4, r0, r2
 800d5b6:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800d5ba:	eb61 0303 	sbc.w	r3, r1, r3
 800d5be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800d5c2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800d5c6:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800d5ca:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d5ce:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d5da:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800d5de:	f04f 0300 	mov.w	r3, #0
 800d5e2:	fb02 f501 	mul.w	r5, r2, r1
 800d5e6:	fb00 f403 	mul.w	r4, r0, r3
 800d5ea:	442c      	add	r4, r5
 800d5ec:	fba0 0102 	umull	r0, r1, r0, r2
 800d5f0:	1863      	adds	r3, r4, r1
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	1814      	adds	r4, r2, r0
 800d5fe:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800d602:	414b      	adcs	r3, r1
 800d604:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800d608:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800d60c:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800d610:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d614:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800d618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61c:	4610      	mov	r0, r2
 800d61e:	4619      	mov	r1, r3
 800d620:	2800      	cmp	r0, #0
 800d622:	f171 0300 	sbcs.w	r3, r1, #0
 800d626:	da06      	bge.n	800d636 <arm_softmax_s8+0x10d6>
 800d628:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d62c:	f04f 0300 	mov.w	r3, #0
 800d630:	1880      	adds	r0, r0, r2
 800d632:	eb43 0101 	adc.w	r1, r3, r1
 800d636:	f04f 0200 	mov.w	r2, #0
 800d63a:	f04f 0300 	mov.w	r3, #0
 800d63e:	0fc2      	lsrs	r2, r0, #31
 800d640:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d644:	17cb      	asrs	r3, r1, #31
 800d646:	4610      	mov	r0, r2
 800d648:	4619      	mov	r1, r3
 800d64a:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800d64e:	4603      	mov	r3, r0
 800d650:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d652:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2bf2      	cmp	r3, #242	; 0xf2
 800d65a:	d10a      	bne.n	800d672 <arm_softmax_s8+0x1112>
 800d65c:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d666:	d104      	bne.n	800d672 <arm_softmax_s8+0x1112>
        result = Q31_MAX;
 800d668:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800d66c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d670:	6013      	str	r3, [r2, #0]
    return result;
 800d672:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800d676:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 800d678:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d67c:	ea02 0103 	and.w	r1, r2, r3
 800d680:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d684:	43da      	mvns	r2, r3
 800d686:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d68a:	4013      	ands	r3, r2
 800d68c:	404b      	eors	r3, r1
 800d68e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 800d692:	f8d7 35b8 	ldr.w	r3, [r7, #1464]	; 0x5b8
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10a      	bne.n	800d6b0 <arm_softmax_s8+0x1150>
 800d69a:	f04f 33ff 	mov.w	r3, #4294967295
 800d69e:	e008      	b.n	800d6b2 <arm_softmax_s8+0x1152>
 800d6a0:	02582ab7 	.word	0x02582ab7
 800d6a4:	000afe11 	.word	0x000afe11
 800d6a8:	02582ab7 	.word	0x02582ab7
 800d6ac:	00000000 	.word	0x00000000
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 800d6b6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d6ba:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6be:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	; 0x5b4
 800d6c2:	43da      	mvns	r2, r3
 800d6c4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	404b      	eors	r3, r1
 800d6cc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
    q31_t result = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 800d6d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
    int32_t remainder = remainder_mask & dividend;
 800d6e0:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800d6e4:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    result = dividend >> exponent;
 800d6ee:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 800d6f2:	131b      	asrs	r3, r3, #12
 800d6f4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    q31_t threshold = remainder_mask >> 1;
 800d6f8:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	; 0x5c4
 800d6fc:	105b      	asrs	r3, r3, #1
 800d6fe:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (result < 0)
 800d702:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 800d706:	2b00      	cmp	r3, #0
 800d708:	da04      	bge.n	800d714 <arm_softmax_s8+0x11b4>
        threshold++;
 800d70a:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800d70e:	3301      	adds	r3, #1
 800d710:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
    if (remainder > threshold)
 800d714:	f8d7 25c0 	ldr.w	r2, [r7, #1472]	; 0x5c0
 800d718:	f8d7 35bc 	ldr.w	r3, [r7, #1468]	; 0x5bc
 800d71c:	429a      	cmp	r2, r3
 800d71e:	dd04      	ble.n	800d72a <arm_softmax_s8+0x11ca>
        result++;
 800d720:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 800d724:	3301      	adds	r3, #1
 800d726:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
    return result;
 800d72a:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800d72e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800d732:	4413      	add	r3, r2
 800d734:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
        for (col = 0; col < row_size; ++col)
 800d738:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800d73c:	3301      	adds	r3, #1
 800d73e:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800d742:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800d746:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	f6fe af57 	blt.w	800c600 <arm_softmax_s8+0xa0>
            }
        }

        const int32_t headroom = __CLZ(sum);
 800d752:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800d756:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800d75a:	601a      	str	r2, [r3, #0]
  if (value == 0U)
 800d75c:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <arm_softmax_s8+0x120a>
    return 32U;
 800d766:	2320      	movs	r3, #32
 800d768:	e005      	b.n	800d776 <arm_softmax_s8+0x1216>
  return __builtin_clz(value);
 800d76a:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	fab3 f383 	clz	r3, r3
 800d774:	b2db      	uxtb	r3, r3
 800d776:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 800d77a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800d77e:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 800d782:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 800d786:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 800d78a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800d78e:	fa02 f303 	lsl.w	r3, r2, r3
 800d792:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800d796:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800d79a:	601a      	str	r2, [r3, #0]
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 800d79c:	f207 4384 	addw	r3, r7, #1156	; 0x484
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d7a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d7ac:	f04f 0300 	mov.w	r3, #0
 800d7b0:	1884      	adds	r4, r0, r2
 800d7b2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800d7b6:	eb41 0303 	adc.w	r3, r1, r3
 800d7ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d7be:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800d7c2:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800d7c6:	e9c2 3400 	strd	r3, r4, [r2]
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 800d7ca:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	2a00      	cmp	r2, #0
 800d7d4:	f173 0300 	sbcs.w	r3, r3, #0
 800d7d8:	db04      	blt.n	800d7e4 <arm_softmax_s8+0x1284>
 800d7da:	f04f 0001 	mov.w	r0, #1
 800d7de:	f04f 0100 	mov.w	r1, #0
 800d7e2:	e003      	b.n	800d7ec <arm_softmax_s8+0x128c>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d7ec:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	eb10 0a02 	adds.w	sl, r0, r2
 800d7f8:	eb41 0b03 	adc.w	fp, r1, r3
 800d7fc:	ea4f 73db 	mov.w	r3, fp, lsr #31
 800d800:	461a      	mov	r2, r3
 800d802:	f04f 0300 	mov.w	r3, #0
 800d806:	eb12 080a 	adds.w	r8, r2, sl
 800d80a:	eb43 090b 	adc.w	r9, r3, fp
 800d80e:	f04f 0200 	mov.w	r2, #0
 800d812:	f04f 0300 	mov.w	r3, #0
 800d816:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800d81a:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800d81e:	ea4f 0369 	mov.w	r3, r9, asr #1
 800d822:	4610      	mov	r0, r2
 800d824:	4619      	mov	r1, r3
 800d826:	f207 4274 	addw	r2, r7, #1140	; 0x474
 800d82a:	4603      	mov	r3, r0
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800d832:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d83a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 800d83e:	2300      	movs	r3, #0
 800d840:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d846:	f04f 0300 	mov.w	r3, #0
 800d84a:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 800d84e:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d852:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	0fdb      	lsrs	r3, r3, #31
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	2301      	movs	r3, #1
 800d85e:	4053      	eors	r3, r2
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d014      	beq.n	800d890 <arm_softmax_s8+0x1330>
        mult = 1 - mult;
 800d866:	f04f 0001 	mov.w	r0, #1
 800d86a:	f04f 0100 	mov.w	r1, #0
 800d86e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800d872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d876:	1a84      	subs	r4, r0, r2
 800d878:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d87c:	eb61 0303 	sbc.w	r3, r1, r3
 800d880:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d884:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800d888:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800d88c:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d890:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d89c:	f60f 2358 	addw	r3, pc, #2648	; 0xa58
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	fb02 f501 	mul.w	r5, r2, r1
 800d8a8:	fb00 f403 	mul.w	r4, r0, r3
 800d8ac:	442c      	add	r4, r5
 800d8ae:	fba0 0102 	umull	r0, r1, r0, r2
 800d8b2:	1863      	adds	r3, r4, r1
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	1814      	adds	r4, r2, r0
 800d8c0:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800d8c4:	414b      	adcs	r3, r1
 800d8c6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800d8ca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800d8ce:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800d8d2:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800d8d6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	4610      	mov	r0, r2
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f171 0300 	sbcs.w	r3, r1, #0
 800d8e8:	da06      	bge.n	800d8f8 <arm_softmax_s8+0x1398>
 800d8ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	1880      	adds	r0, r0, r2
 800d8f4:	eb43 0101 	adc.w	r1, r3, r1
 800d8f8:	f04f 0200 	mov.w	r2, #0
 800d8fc:	f04f 0300 	mov.w	r3, #0
 800d900:	0fc2      	lsrs	r2, r0, #31
 800d902:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d906:	17cb      	asrs	r3, r1, #31
 800d908:	4610      	mov	r0, r2
 800d90a:	4619      	mov	r1, r3
 800d90c:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 800d910:	4603      	mov	r3, r0
 800d912:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800d914:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f113 3f3c 	cmn.w	r3, #1010580540	; 0x3c3c3c3c
 800d91e:	d10a      	bne.n	800d936 <arm_softmax_s8+0x13d6>
 800d920:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d92a:	d104      	bne.n	800d936 <arm_softmax_s8+0x13d6>
        result = Q31_MAX;
 800d92c:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 800d930:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d934:	6013      	str	r3, [r2, #0]
    return result;
 800d936:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 800d93a:	681b      	ldr	r3, [r3, #0]
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 800d93c:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800d940:	f103 335a 	add.w	r3, r3, #1515870810	; 0x5a5a5a5a
 800d944:	6013      	str	r3, [r2, #0]

    const int32_t shift = (1 << 29);
 800d946:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800d94a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800d954:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800d960:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800d968:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 800d96c:	2300      	movs	r3, #0
 800d96e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800d970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d974:	f04f 0300 	mov.w	r3, #0
 800d978:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 800d97c:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800d980:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	0fdb      	lsrs	r3, r3, #31
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	0fdb      	lsrs	r3, r3, #31
 800d992:	b2db      	uxtb	r3, r3
 800d994:	4053      	eors	r3, r2
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d014      	beq.n	800d9c6 <arm_softmax_s8+0x1466>
        mult = 1 - mult;
 800d99c:	f04f 0001 	mov.w	r0, #1
 800d9a0:	f04f 0100 	mov.w	r1, #0
 800d9a4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	1a84      	subs	r4, r0, r2
 800d9ae:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800d9b2:	eb61 0303 	sbc.w	r3, r1, r3
 800d9b6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800d9ba:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800d9be:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800d9c2:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800d9c6:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d9d2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	461a      	mov	r2, r3
 800d9da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d9de:	fb02 f501 	mul.w	r5, r2, r1
 800d9e2:	fb00 f403 	mul.w	r4, r0, r3
 800d9e6:	442c      	add	r4, r5
 800d9e8:	fba0 0102 	umull	r0, r1, r0, r2
 800d9ec:	1863      	adds	r3, r4, r1
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	1814      	adds	r4, r2, r0
 800d9fa:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800d9fe:	414b      	adcs	r3, r1
 800da00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800da04:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800da08:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800da0c:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800da10:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	4610      	mov	r0, r2
 800da1a:	4619      	mov	r1, r3
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f171 0300 	sbcs.w	r3, r1, #0
 800da22:	da06      	bge.n	800da32 <arm_softmax_s8+0x14d2>
 800da24:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800da28:	f04f 0300 	mov.w	r3, #0
 800da2c:	1880      	adds	r0, r0, r2
 800da2e:	eb43 0101 	adc.w	r1, r3, r1
 800da32:	f04f 0200 	mov.w	r2, #0
 800da36:	f04f 0300 	mov.w	r3, #0
 800da3a:	0fc2      	lsrs	r2, r0, #31
 800da3c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800da40:	17cb      	asrs	r3, r1, #31
 800da42:	4610      	mov	r0, r2
 800da44:	4619      	mov	r1, r3
 800da46:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 800da4a:	4603      	mov	r3, r0
 800da4c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800da4e:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800da52:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800da56:	6812      	ldr	r2, [r2, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d10a      	bne.n	800da74 <arm_softmax_s8+0x1514>
 800da5e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da68:	d104      	bne.n	800da74 <arm_softmax_s8+0x1514>
        result = Q31_MAX;
 800da6a:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 800da6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800da72:	6013      	str	r3, [r2, #0]
    return result;
 800da74:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800da78:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800da7a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	1a99      	subs	r1, r3, r2
 800da82:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800da86:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800da92:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800da94:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800da98:	2300      	movs	r3, #0
 800da9a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800da9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800daa0:	f04f 0300 	mov.w	r3, #0
 800daa4:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800daa8:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800daac:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	0fdb      	lsrs	r3, r3, #31
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	0fdb      	lsrs	r3, r3, #31
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	4053      	eors	r3, r2
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d014      	beq.n	800daf2 <arm_softmax_s8+0x1592>
        mult = 1 - mult;
 800dac8:	f04f 0001 	mov.w	r0, #1
 800dacc:	f04f 0100 	mov.w	r1, #0
 800dad0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad8:	1a84      	subs	r4, r0, r2
 800dada:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800dade:	eb61 0303 	sbc.w	r3, r1, r3
 800dae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800dae6:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800daea:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800daee:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800daf2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4618      	mov	r0, r3
 800dafa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800dafe:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	461a      	mov	r2, r3
 800db06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800db0a:	fb02 f501 	mul.w	r5, r2, r1
 800db0e:	fb00 f403 	mul.w	r4, r0, r3
 800db12:	442c      	add	r4, r5
 800db14:	fba0 0102 	umull	r0, r1, r0, r2
 800db18:	1863      	adds	r3, r4, r1
 800db1a:	4619      	mov	r1, r3
 800db1c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	1814      	adds	r4, r2, r0
 800db26:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800db2a:	414b      	adcs	r3, r1
 800db2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800db30:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800db34:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 800db38:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800db3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	4610      	mov	r0, r2
 800db46:	4619      	mov	r1, r3
 800db48:	2800      	cmp	r0, #0
 800db4a:	f171 0300 	sbcs.w	r3, r1, #0
 800db4e:	da06      	bge.n	800db5e <arm_softmax_s8+0x15fe>
 800db50:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800db54:	f04f 0300 	mov.w	r3, #0
 800db58:	1880      	adds	r0, r0, r2
 800db5a:	eb43 0101 	adc.w	r1, r3, r1
 800db5e:	f04f 0200 	mov.w	r2, #0
 800db62:	f04f 0300 	mov.w	r3, #0
 800db66:	0fc2      	lsrs	r2, r0, #31
 800db68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800db6c:	17cb      	asrs	r3, r1, #31
 800db6e:	4610      	mov	r0, r2
 800db70:	4619      	mov	r1, r3
 800db72:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800db76:	4603      	mov	r3, r0
 800db78:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800db7a:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800db7e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800db82:	6812      	ldr	r2, [r2, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d10a      	bne.n	800dba0 <arm_softmax_s8+0x1640>
 800db8a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db94:	d104      	bne.n	800dba0 <arm_softmax_s8+0x1640>
        result = Q31_MAX;
 800db96:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800db9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800db9e:	6013      	str	r3, [r2, #0]
    return result;
 800dba0:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800dbaa:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800dbac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800dbb0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800dbb8:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 800dbbc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800dbc6:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800dbca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	dd02      	ble.n	800dbdc <arm_softmax_s8+0x167c>
 800dbd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dbda:	e000      	b.n	800dbde <arm_softmax_s8+0x167e>
 800dbdc:	2100      	movs	r1, #0
 800dbde:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800dbe2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800dbe6:	6812      	ldr	r2, [r2, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	dd01      	ble.n	800dbf2 <arm_softmax_s8+0x1692>
 800dbee:	2200      	movs	r2, #0
 800dbf0:	e001      	b.n	800dbf6 <arm_softmax_s8+0x1696>
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf6:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 800dc02:	404b      	eors	r3, r1
 800dc04:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800dc06:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	425a      	negs	r2, r3
 800dc0e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4293      	cmp	r3, r2
 800dc16:	da02      	bge.n	800dc1e <arm_softmax_s8+0x16be>
 800dc18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dc1c:	e000      	b.n	800dc20 <arm_softmax_s8+0x16c0>
 800dc1e:	2100      	movs	r1, #0
 800dc20:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	425a      	negs	r2, r3
 800dc28:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	da01      	bge.n	800dc36 <arm_softmax_s8+0x16d6>
 800dc32:	2200      	movs	r2, #0
 800dc34:	e001      	b.n	800dc3a <arm_softmax_s8+0x16da>
 800dc36:	f04f 32ff 	mov.w	r2, #4294967295
 800dc3a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4013      	ands	r3, r2
 800dc42:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 800dc46:	404b      	eors	r3, r1
 800dc48:	6013      	str	r3, [r2, #0]
    return result;
 800dc4a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800dc4e:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800dc50:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800dc54:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	440b      	add	r3, r1
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800dc62:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6013      	str	r3, [r2, #0]
 800dc6a:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800dc6e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800dc76:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800dc7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dc82:	f04f 0300 	mov.w	r3, #0
 800dc86:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800dc8a:	e9c1 2300 	strd	r2, r3, [r1]
    if ((m1 < 0) ^ (m2 < 0))
 800dc8e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	0fdb      	lsrs	r3, r3, #31
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	0fdb      	lsrs	r3, r3, #31
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	4053      	eors	r3, r2
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d014      	beq.n	800dcd4 <arm_softmax_s8+0x1774>
        mult = 1 - mult;
 800dcaa:	f04f 0001 	mov.w	r0, #1
 800dcae:	f04f 0100 	mov.w	r1, #0
 800dcb2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	1a84      	subs	r4, r0, r2
 800dcbc:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800dcc0:	eb61 0303 	sbc.w	r3, r1, r3
 800dcc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800dcc8:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800dccc:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800dcd0:	e9c2 3400 	strd	r3, r4, [r2]
    mult = mult + (q63_t)m1 * m2;
 800dcd4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800dce0:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dcec:	fb02 f501 	mul.w	r5, r2, r1
 800dcf0:	fb00 f403 	mul.w	r4, r0, r3
 800dcf4:	442c      	add	r4, r5
 800dcf6:	fba0 0102 	umull	r0, r1, r0, r2
 800dcfa:	1863      	adds	r3, r4, r1
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	1814      	adds	r4, r2, r0
 800dd08:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800dd0c:	414b      	adcs	r3, r1
 800dd0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800dd12:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800dd16:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800dd1a:	e9c2 3400 	strd	r3, r4, [r2]
    result = (int32_t)(mult / (1ll << 31));
 800dd1e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	4610      	mov	r0, r2
 800dd28:	4619      	mov	r1, r3
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	f171 0300 	sbcs.w	r3, r1, #0
 800dd30:	da06      	bge.n	800dd40 <arm_softmax_s8+0x17e0>
 800dd32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800dd36:	f04f 0300 	mov.w	r3, #0
 800dd3a:	1880      	adds	r0, r0, r2
 800dd3c:	eb43 0101 	adc.w	r1, r3, r1
 800dd40:	f04f 0200 	mov.w	r2, #0
 800dd44:	f04f 0300 	mov.w	r3, #0
 800dd48:	0fc2      	lsrs	r2, r0, #31
 800dd4a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800dd4e:	17cb      	asrs	r3, r1, #31
 800dd50:	4610      	mov	r0, r2
 800dd52:	4619      	mov	r1, r3
 800dd54:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800dd58:	4603      	mov	r3, r0
 800dd5a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800dd5c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800dd60:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800dd64:	6812      	ldr	r2, [r2, #0]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d10a      	bne.n	800dd82 <arm_softmax_s8+0x1822>
 800dd6c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd76:	d104      	bne.n	800dd82 <arm_softmax_s8+0x1822>
        result = Q31_MAX;
 800dd78:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800dd7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd80:	6013      	str	r3, [r2, #0]
    return result;
 800dd82:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800dd86:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800dd88:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	1a99      	subs	r1, r3, r2
 800dd90:	f207 4204 	addw	r2, r7, #1028	; 0x404
 800dd94:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800dda0:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800dda2:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800dda6:	2300      	movs	r3, #0
 800dda8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ddaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ddae:	f04f 0300 	mov.w	r3, #0
 800ddb2:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    if ((m1 < 0) ^ (m2 < 0))
 800ddb6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	0fdb      	lsrs	r3, r3, #31
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	0fdb      	lsrs	r3, r3, #31
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	4053      	eors	r3, r2
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d010      	beq.n	800ddf4 <arm_softmax_s8+0x1894>
        mult = 1 - mult;
 800ddd2:	f04f 0001 	mov.w	r0, #1
 800ddd6:	f04f 0100 	mov.w	r1, #0
 800ddda:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800ddde:	1a84      	subs	r4, r0, r2
 800dde0:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800dde4:	eb61 0303 	sbc.w	r3, r1, r3
 800dde8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ddec:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800ddf0:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    mult = mult + (q63_t)m1 * m2;
 800ddf4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800de00:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	461a      	mov	r2, r3
 800de08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800de0c:	fb02 f501 	mul.w	r5, r2, r1
 800de10:	fb00 f403 	mul.w	r4, r0, r3
 800de14:	442c      	add	r4, r5
 800de16:	fba0 0102 	umull	r0, r1, r0, r2
 800de1a:	1863      	adds	r3, r4, r1
 800de1c:	4619      	mov	r1, r3
 800de1e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800de22:	1814      	adds	r4, r2, r0
 800de24:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800de28:	414b      	adcs	r3, r1
 800de2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800de2e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800de32:	e9c7 34fc 	strd	r3, r4, [r7, #1008]	; 0x3f0
    result = (int32_t)(mult / (1ll << 31));
 800de36:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800de3a:	4610      	mov	r0, r2
 800de3c:	4619      	mov	r1, r3
 800de3e:	2800      	cmp	r0, #0
 800de40:	f171 0300 	sbcs.w	r3, r1, #0
 800de44:	da06      	bge.n	800de54 <arm_softmax_s8+0x18f4>
 800de46:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800de4a:	f04f 0300 	mov.w	r3, #0
 800de4e:	1880      	adds	r0, r0, r2
 800de50:	eb43 0101 	adc.w	r1, r3, r1
 800de54:	f04f 0200 	mov.w	r2, #0
 800de58:	f04f 0300 	mov.w	r3, #0
 800de5c:	0fc2      	lsrs	r2, r0, #31
 800de5e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800de62:	17cb      	asrs	r3, r1, #31
 800de64:	4610      	mov	r0, r2
 800de66:	4619      	mov	r1, r3
 800de68:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800de6c:	4603      	mov	r3, r0
 800de6e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800de70:	f207 4204 	addw	r2, r7, #1028	; 0x404
 800de74:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800de78:	6812      	ldr	r2, [r2, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d10a      	bne.n	800de96 <arm_softmax_s8+0x1936>
 800de80:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de8a:	d104      	bne.n	800de96 <arm_softmax_s8+0x1936>
        result = Q31_MAX;
 800de8c:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800de90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800de94:	6013      	str	r3, [r2, #0]
    return result;
 800de96:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800dea0:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800dea2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800dea6:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800deaa:	3b01      	subs	r3, #1
 800deac:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800deae:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800deb2:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800debc:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800dec0:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800dec4:	6812      	ldr	r2, [r2, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	dd02      	ble.n	800ded2 <arm_softmax_s8+0x1972>
 800decc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ded0:	e000      	b.n	800ded4 <arm_softmax_s8+0x1974>
 800ded2:	2100      	movs	r1, #0
 800ded4:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 800ded8:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800dedc:	6812      	ldr	r2, [r2, #0]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	dd01      	ble.n	800dee8 <arm_softmax_s8+0x1988>
 800dee4:	2200      	movs	r2, #0
 800dee6:	e001      	b.n	800deec <arm_softmax_s8+0x198c>
 800dee8:	f04f 32ff 	mov.w	r2, #4294967295
 800deec:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4013      	ands	r3, r2
 800def4:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800def8:	404b      	eors	r3, r1
 800defa:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800defc:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	425a      	negs	r2, r3
 800df04:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4293      	cmp	r3, r2
 800df0c:	da02      	bge.n	800df14 <arm_softmax_s8+0x19b4>
 800df0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800df12:	e000      	b.n	800df16 <arm_softmax_s8+0x19b6>
 800df14:	2100      	movs	r1, #0
 800df16:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	425a      	negs	r2, r3
 800df1e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4293      	cmp	r3, r2
 800df26:	da01      	bge.n	800df2c <arm_softmax_s8+0x19cc>
 800df28:	2200      	movs	r2, #0
 800df2a:	e001      	b.n	800df30 <arm_softmax_s8+0x19d0>
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295
 800df30:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4013      	ands	r3, r2
 800df38:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800df3c:	404b      	eors	r3, r1
 800df3e:	6013      	str	r3, [r2, #0]
    return result;
 800df40:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800df44:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800df46:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800df4a:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	440b      	add	r3, r1
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800df58:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	6013      	str	r3, [r2, #0]
 800df60:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 800df64:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800df6c:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800df70:	2300      	movs	r3, #0
 800df72:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800df74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df78:	f04f 0300 	mov.w	r3, #0
 800df7c:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    if ((m1 < 0) ^ (m2 < 0))
 800df80:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	0fdb      	lsrs	r3, r3, #31
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	0fdb      	lsrs	r3, r3, #31
 800df92:	b2db      	uxtb	r3, r3
 800df94:	4053      	eors	r3, r2
 800df96:	b2db      	uxtb	r3, r3
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d010      	beq.n	800dfbe <arm_softmax_s8+0x1a5e>
        mult = 1 - mult;
 800df9c:	f04f 0001 	mov.w	r0, #1
 800dfa0:	f04f 0100 	mov.w	r1, #0
 800dfa4:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800dfa8:	1a84      	subs	r4, r0, r2
 800dfaa:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800dfae:	eb61 0303 	sbc.w	r3, r1, r3
 800dfb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dfb6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800dfba:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    mult = mult + (q63_t)m1 * m2;
 800dfbe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800dfca:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dfd6:	fb02 f501 	mul.w	r5, r2, r1
 800dfda:	fb00 f403 	mul.w	r4, r0, r3
 800dfde:	442c      	add	r4, r5
 800dfe0:	fba0 0102 	umull	r0, r1, r0, r2
 800dfe4:	1863      	adds	r3, r4, r1
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800dfec:	1814      	adds	r4, r2, r0
 800dfee:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800dff2:	414b      	adcs	r3, r1
 800dff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dff8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800dffc:	e9c7 34f4 	strd	r3, r4, [r7, #976]	; 0x3d0
    result = (int32_t)(mult / (1ll << 31));
 800e000:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800e004:	4610      	mov	r0, r2
 800e006:	4619      	mov	r1, r3
 800e008:	2800      	cmp	r0, #0
 800e00a:	f171 0300 	sbcs.w	r3, r1, #0
 800e00e:	da06      	bge.n	800e01e <arm_softmax_s8+0x1abe>
 800e010:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e014:	f04f 0300 	mov.w	r3, #0
 800e018:	1880      	adds	r0, r0, r2
 800e01a:	eb43 0101 	adc.w	r1, r3, r1
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	f04f 0300 	mov.w	r3, #0
 800e026:	0fc2      	lsrs	r2, r0, #31
 800e028:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e02c:	17cb      	asrs	r3, r1, #31
 800e02e:	4610      	mov	r0, r2
 800e030:	4619      	mov	r1, r3
 800e032:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800e036:	4603      	mov	r3, r0
 800e038:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e03a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800e03e:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800e042:	6812      	ldr	r2, [r2, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d10a      	bne.n	800e060 <arm_softmax_s8+0x1b00>
 800e04a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e054:	d104      	bne.n	800e060 <arm_softmax_s8+0x1b00>
        result = Q31_MAX;
 800e056:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800e05a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e05e:	6013      	str	r3, [r2, #0]
    return result;
 800e060:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800e064:	681a      	ldr	r2, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800e066:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	1a99      	subs	r1, r3, r2
 800e06e:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 800e072:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800e07e:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800e080:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800e084:	2300      	movs	r3, #0
 800e086:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e08c:	f04f 0300 	mov.w	r3, #0
 800e090:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    if ((m1 < 0) ^ (m2 < 0))
 800e094:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	0fdb      	lsrs	r3, r3, #31
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	0fdb      	lsrs	r3, r3, #31
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	4053      	eors	r3, r2
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d010      	beq.n	800e0d2 <arm_softmax_s8+0x1b72>
        mult = 1 - mult;
 800e0b0:	f04f 0001 	mov.w	r0, #1
 800e0b4:	f04f 0100 	mov.w	r1, #0
 800e0b8:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800e0bc:	1a84      	subs	r4, r0, r2
 800e0be:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800e0c2:	eb61 0303 	sbc.w	r3, r1, r3
 800e0c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0ca:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800e0ce:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    mult = mult + (q63_t)m1 * m2;
 800e0d2:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e0de:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e0ea:	fb02 f501 	mul.w	r5, r2, r1
 800e0ee:	fb00 f403 	mul.w	r4, r0, r3
 800e0f2:	442c      	add	r4, r5
 800e0f4:	fba0 0102 	umull	r0, r1, r0, r2
 800e0f8:	1863      	adds	r3, r4, r1
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800e100:	1814      	adds	r4, r2, r0
 800e102:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800e106:	414b      	adcs	r3, r1
 800e108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e10c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800e110:	e9c7 34ee 	strd	r3, r4, [r7, #952]	; 0x3b8
    result = (int32_t)(mult / (1ll << 31));
 800e114:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800e118:	4610      	mov	r0, r2
 800e11a:	4619      	mov	r1, r3
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f171 0300 	sbcs.w	r3, r1, #0
 800e122:	da06      	bge.n	800e132 <arm_softmax_s8+0x1bd2>
 800e124:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e128:	f04f 0300 	mov.w	r3, #0
 800e12c:	1880      	adds	r0, r0, r2
 800e12e:	eb43 0101 	adc.w	r1, r3, r1
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	f04f 0300 	mov.w	r3, #0
 800e13a:	0fc2      	lsrs	r2, r0, #31
 800e13c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e140:	17cb      	asrs	r3, r1, #31
 800e142:	4610      	mov	r0, r2
 800e144:	4619      	mov	r1, r3
 800e146:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800e14a:	4603      	mov	r3, r0
 800e14c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e14e:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 800e152:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800e156:	6812      	ldr	r2, [r2, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d10a      	bne.n	800e174 <arm_softmax_s8+0x1c14>
 800e15e:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e168:	d104      	bne.n	800e174 <arm_softmax_s8+0x1c14>
        result = Q31_MAX;
 800e16a:	f507 7271 	add.w	r2, r7, #964	; 0x3c4
 800e16e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e172:	6013      	str	r3, [r2, #0]
    return result;
 800e174:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800e17e:	601a      	str	r2, [r3, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800e180:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e184:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800e188:	3b01      	subs	r3, #1
 800e18a:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800e18c:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800e190:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800e19a:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800e19e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800e1a2:	6812      	ldr	r2, [r2, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	dd02      	ble.n	800e1b0 <arm_softmax_s8+0x1c50>
 800e1aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1ae:	e000      	b.n	800e1b2 <arm_softmax_s8+0x1c52>
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 800e1b6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800e1ba:	6812      	ldr	r2, [r2, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	dd01      	ble.n	800e1c6 <arm_softmax_s8+0x1c66>
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	e001      	b.n	800e1ca <arm_softmax_s8+0x1c6a>
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ca:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800e1d6:	404b      	eors	r3, r1
 800e1d8:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800e1da:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	425a      	negs	r2, r3
 800e1e2:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	da02      	bge.n	800e1f2 <arm_softmax_s8+0x1c92>
 800e1ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e1f0:	e000      	b.n	800e1f4 <arm_softmax_s8+0x1c94>
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	425a      	negs	r2, r3
 800e1fc:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4293      	cmp	r3, r2
 800e204:	da01      	bge.n	800e20a <arm_softmax_s8+0x1caa>
 800e206:	2200      	movs	r2, #0
 800e208:	e001      	b.n	800e20e <arm_softmax_s8+0x1cae>
 800e20a:	f04f 32ff 	mov.w	r2, #4294967295
 800e20e:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4013      	ands	r3, r2
 800e216:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800e21a:	404b      	eors	r3, r1
 800e21c:	6013      	str	r3, [r2, #0]
    return result;
 800e21e:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800e222:	6819      	ldr	r1, [r3, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 800e224:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800e228:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	440b      	add	r3, r1
 800e230:	6013      	str	r3, [r2, #0]
 800e232:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800e236:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6013      	str	r3, [r2, #0]
    const int32_t thresh = ((1 << (31 - exp)) - 1);
 800e23e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e242:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 800e246:	3b01      	subs	r3, #1
 800e248:	6013      	str	r3, [r2, #0]
    int32_t result = val << exp;
 800e24a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 800e24e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	005b      	lsls	r3, r3, #1
 800e256:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 800e258:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800e25c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800e260:	6812      	ldr	r2, [r2, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	429a      	cmp	r2, r3
 800e266:	dd02      	ble.n	800e26e <arm_softmax_s8+0x1d0e>
 800e268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e26c:	e000      	b.n	800e270 <arm_softmax_s8+0x1d10>
 800e26e:	2100      	movs	r1, #0
 800e270:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 800e274:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800e278:	6812      	ldr	r2, [r2, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	dd01      	ble.n	800e284 <arm_softmax_s8+0x1d24>
 800e280:	2200      	movs	r2, #0
 800e282:	e001      	b.n	800e288 <arm_softmax_s8+0x1d28>
 800e284:	f04f 32ff 	mov.w	r2, #4294967295
 800e288:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4013      	ands	r3, r2
 800e290:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 800e294:	404b      	eors	r3, r1
 800e296:	6013      	str	r3, [r2, #0]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 800e298:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	425a      	negs	r2, r3
 800e2a0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	da02      	bge.n	800e2b0 <arm_softmax_s8+0x1d50>
 800e2aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e2ae:	e000      	b.n	800e2b2 <arm_softmax_s8+0x1d52>
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	425a      	negs	r2, r3
 800e2ba:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	da01      	bge.n	800e2c8 <arm_softmax_s8+0x1d68>
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	e001      	b.n	800e2cc <arm_softmax_s8+0x1d6c>
 800e2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2cc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 800e2d8:	404b      	eors	r3, r1
 800e2da:	6013      	str	r3, [r2, #0]
    return result;
 800e2dc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800e2e0:	681b      	ldr	r3, [r3, #0]

    return MUL_POW2(x, 1);
 800e2e2:	bf00      	nop
 800e2e4:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4

        for (col = 0; col < row_size; ++col)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800e2ee:	f001 b97e 	b.w	800f5ee <arm_softmax_s8+0x308e>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
 800e2f8:	c3c3c3c4 	.word	0xc3c3c3c4
 800e2fc:	ffffffff 	.word	0xffffffff
        {
            diff = input[col] - max;
 800e300:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800e304:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4413      	add	r3, r2
 800e30c:	f993 3000 	ldrsb.w	r3, [r3]
 800e310:	461a      	mov	r2, r3
 800e312:	f997 35ef 	ldrsb.w	r3, [r7, #1519]	; 0x5ef
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
            if (diff >= diff_min)
 800e31c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800e320:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800e324:	429a      	cmp	r2, r3
 800e326:	f2c1 8156 	blt.w	800f5d6 <arm_softmax_s8+0x3076>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 800e32a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800e32e:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 800e332:	fb03 f202 	mul.w	r2, r3, r2
 800e336:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f507 7212 	add.w	r2, r7, #584	; 0x248
 800e340:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e348:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800e34c:	2300      	movs	r3, #0
 800e34e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e354:	f04f 0300 	mov.w	r3, #0
 800e358:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
    if ((m1 < 0) ^ (m2 < 0))
 800e35c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	0fdb      	lsrs	r3, r3, #31
 800e364:	b2da      	uxtb	r2, r3
 800e366:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	0fdb      	lsrs	r3, r3, #31
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	4053      	eors	r3, r2
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d010      	beq.n	800e39a <arm_softmax_s8+0x1e3a>
        mult = 1 - mult;
 800e378:	f04f 0001 	mov.w	r0, #1
 800e37c:	f04f 0100 	mov.w	r1, #0
 800e380:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800e384:	1a84      	subs	r4, r0, r2
 800e386:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800e38a:	eb61 0303 	sbc.w	r3, r1, r3
 800e38e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e392:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800e396:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    mult = mult + (q63_t)m1 * m2;
 800e39a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e3a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e3b2:	fb02 f501 	mul.w	r5, r2, r1
 800e3b6:	fb00 f403 	mul.w	r4, r0, r3
 800e3ba:	442c      	add	r4, r5
 800e3bc:	fba0 0102 	umull	r0, r1, r0, r2
 800e3c0:	1863      	adds	r3, r4, r1
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800e3c8:	1814      	adds	r4, r2, r0
 800e3ca:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800e3ce:	414b      	adcs	r3, r1
 800e3d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e3d4:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800e3d8:	e9c7 348e 	strd	r3, r4, [r7, #568]	; 0x238
    result = (int32_t)(mult / (1ll << 31));
 800e3dc:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f171 0300 	sbcs.w	r3, r1, #0
 800e3ea:	da06      	bge.n	800e3fa <arm_softmax_s8+0x1e9a>
 800e3ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e3f0:	f04f 0300 	mov.w	r3, #0
 800e3f4:	1880      	adds	r0, r0, r2
 800e3f6:	eb43 0101 	adc.w	r1, r3, r1
 800e3fa:	f04f 0200 	mov.w	r2, #0
 800e3fe:	f04f 0300 	mov.w	r3, #0
 800e402:	0fc2      	lsrs	r2, r0, #31
 800e404:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e408:	17cb      	asrs	r3, r1, #31
 800e40a:	4610      	mov	r0, r2
 800e40c:	4619      	mov	r1, r3
 800e40e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800e412:	4603      	mov	r3, r0
 800e414:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e416:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800e41a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800e41e:	6812      	ldr	r2, [r2, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	429a      	cmp	r2, r3
 800e424:	d10a      	bne.n	800e43c <arm_softmax_s8+0x1edc>
 800e426:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e430:	d104      	bne.n	800e43c <arm_softmax_s8+0x1edc>
        result = Q31_MAX;
 800e432:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800e436:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e43a:	6013      	str	r3, [r2, #0]
    return result;
 800e43c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800e446:	601a      	str	r2, [r3, #0]
    int32_t mask = 0;
 800e448:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800e44c:	2300      	movs	r3, #0
 800e44e:	6013      	str	r3, [r2, #0]
    int32_t shift = 24;
 800e450:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800e454:	2318      	movs	r3, #24
 800e456:	6013      	str	r3, [r2, #0]
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 800e458:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800e45c:	2201      	movs	r2, #1
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	fa02 f303 	lsl.w	r3, r2, r3
 800e464:	1e5a      	subs	r2, r3, #1
 800e466:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	ea02 0103 	and.w	r1, r2, r3
 800e470:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800e474:	2201      	movs	r2, #1
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	fa02 f303 	lsl.w	r3, r2, r3
 800e47c:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800e480:	1acb      	subs	r3, r1, r3
 800e482:	6013      	str	r3, [r2, #0]
    const int32_t remainder = val_mod_minus_quarter - val;
 800e484:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 800e488:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800e48c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800e490:	6812      	ldr	r2, [r2, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	600b      	str	r3, [r1, #0]
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 800e498:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	015b      	lsls	r3, r3, #5
 800e4a0:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800e4a4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800e4a8:	6013      	str	r3, [r2, #0]
 800e4aa:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800e4ae:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800e4ba:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e4c2:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e4ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e4ce:	f04f 0300 	mov.w	r3, #0
 800e4d2:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    if ((m1 < 0) ^ (m2 < 0))
 800e4d6:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	0fdb      	lsrs	r3, r3, #31
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	0fdb      	lsrs	r3, r3, #31
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	4053      	eors	r3, r2
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d010      	beq.n	800e514 <arm_softmax_s8+0x1fb4>
        mult = 1 - mult;
 800e4f2:	f04f 0001 	mov.w	r0, #1
 800e4f6:	f04f 0100 	mov.w	r1, #0
 800e4fa:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800e4fe:	1a84      	subs	r4, r0, r2
 800e500:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800e504:	eb61 0303 	sbc.w	r3, r1, r3
 800e508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e50c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800e510:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    mult = mult + (q63_t)m1 * m2;
 800e514:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4618      	mov	r0, r3
 800e51c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e520:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e52c:	fb02 f501 	mul.w	r5, r2, r1
 800e530:	fb00 f403 	mul.w	r4, r0, r3
 800e534:	442c      	add	r4, r5
 800e536:	fba0 0102 	umull	r0, r1, r0, r2
 800e53a:	1863      	adds	r3, r4, r1
 800e53c:	4619      	mov	r1, r3
 800e53e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800e542:	1814      	adds	r4, r2, r0
 800e544:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800e548:	414b      	adcs	r3, r1
 800e54a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e54e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800e552:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    result = (int32_t)(mult / (1ll << 31));
 800e556:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800e55a:	4610      	mov	r0, r2
 800e55c:	4619      	mov	r1, r3
 800e55e:	2800      	cmp	r0, #0
 800e560:	f171 0300 	sbcs.w	r3, r1, #0
 800e564:	da06      	bge.n	800e574 <arm_softmax_s8+0x2014>
 800e566:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e56a:	f04f 0300 	mov.w	r3, #0
 800e56e:	1880      	adds	r0, r0, r2
 800e570:	eb43 0101 	adc.w	r1, r3, r1
 800e574:	f04f 0200 	mov.w	r2, #0
 800e578:	f04f 0300 	mov.w	r3, #0
 800e57c:	0fc2      	lsrs	r2, r0, #31
 800e57e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e582:	17cb      	asrs	r3, r1, #31
 800e584:	4610      	mov	r0, r2
 800e586:	4619      	mov	r1, r3
 800e588:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 800e58c:	4603      	mov	r3, r0
 800e58e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e590:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800e594:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800e598:	6812      	ldr	r2, [r2, #0]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d10a      	bne.n	800e5b6 <arm_softmax_s8+0x2056>
 800e5a0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5aa:	d104      	bne.n	800e5b6 <arm_softmax_s8+0x2056>
        result = Q31_MAX;
 800e5ac:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 800e5b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5b4:	6013      	str	r3, [r2, #0]
    return result;
 800e5b6:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800e5ba:	681a      	ldr	r2, [r3, #0]
    const int32_t x2 = MUL_SAT(x, x);
 800e5bc:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800e5c6:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6013      	str	r3, [r2, #0]
 800e5ce:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800e5d2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e5da:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800e5de:	2300      	movs	r3, #0
 800e5e0:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e5e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e5e6:	f04f 0300 	mov.w	r3, #0
 800e5ea:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    if ((m1 < 0) ^ (m2 < 0))
 800e5ee:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	0fdb      	lsrs	r3, r3, #31
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	0fdb      	lsrs	r3, r3, #31
 800e600:	b2db      	uxtb	r3, r3
 800e602:	4053      	eors	r3, r2
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d010      	beq.n	800e62c <arm_softmax_s8+0x20cc>
        mult = 1 - mult;
 800e60a:	f04f 0001 	mov.w	r0, #1
 800e60e:	f04f 0100 	mov.w	r1, #0
 800e612:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800e616:	1a84      	subs	r4, r0, r2
 800e618:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800e61c:	eb61 0303 	sbc.w	r3, r1, r3
 800e620:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e624:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800e628:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    mult = mult + (q63_t)m1 * m2;
 800e62c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4618      	mov	r0, r3
 800e634:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e638:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e644:	fb02 f501 	mul.w	r5, r2, r1
 800e648:	fb00 f403 	mul.w	r4, r0, r3
 800e64c:	442c      	add	r4, r5
 800e64e:	fba0 0102 	umull	r0, r1, r0, r2
 800e652:	1863      	adds	r3, r4, r1
 800e654:	4619      	mov	r1, r3
 800e656:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800e65a:	1814      	adds	r4, r2, r0
 800e65c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800e660:	414b      	adcs	r3, r1
 800e662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e666:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800e66a:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    result = (int32_t)(mult / (1ll << 31));
 800e66e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800e672:	4610      	mov	r0, r2
 800e674:	4619      	mov	r1, r3
 800e676:	2800      	cmp	r0, #0
 800e678:	f171 0300 	sbcs.w	r3, r1, #0
 800e67c:	da06      	bge.n	800e68c <arm_softmax_s8+0x212c>
 800e67e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e682:	f04f 0300 	mov.w	r3, #0
 800e686:	1880      	adds	r0, r0, r2
 800e688:	eb43 0101 	adc.w	r1, r3, r1
 800e68c:	f04f 0200 	mov.w	r2, #0
 800e690:	f04f 0300 	mov.w	r3, #0
 800e694:	0fc2      	lsrs	r2, r0, #31
 800e696:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e69a:	17cb      	asrs	r3, r1, #31
 800e69c:	4610      	mov	r0, r2
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e6a8:	f507 724e 	add.w	r2, r7, #824	; 0x338
 800e6ac:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800e6b0:	6812      	ldr	r2, [r2, #0]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d10a      	bne.n	800e6ce <arm_softmax_s8+0x216e>
 800e6b8:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6c2:	d104      	bne.n	800e6ce <arm_softmax_s8+0x216e>
        result = Q31_MAX;
 800e6c4:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800e6c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e6cc:	6013      	str	r3, [r2, #0]
    return result;
 800e6ce:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800e6d8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e6da:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800e6de:	2300      	movs	r3, #0
 800e6e0:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e6e2:	2304      	movs	r3, #4
 800e6e4:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e6ec:	f507 7146 	add.w	r1, r7, #792	; 0x318
 800e6f0:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800e6f4:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800e6f8:	6812      	ldr	r2, [r2, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4013      	ands	r3, r2
 800e6fe:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e700:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800e704:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	109b      	asrs	r3, r3, #2
 800e70c:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 800e70e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 800e712:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	105b      	asrs	r3, r3, #1
 800e71a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e71c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	da06      	bge.n	800e734 <arm_softmax_s8+0x21d4>
        threshold++;
 800e726:	f507 7245 	add.w	r2, r7, #788	; 0x314
 800e72a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e734:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800e738:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800e73c:	6812      	ldr	r2, [r2, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	429a      	cmp	r2, r3
 800e742:	dd06      	ble.n	800e752 <arm_softmax_s8+0x21f2>
        result++;
 800e744:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800e748:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	3301      	adds	r3, #1
 800e750:	6013      	str	r3, [r2, #0]
    return result;
 800e752:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800e756:	681e      	ldr	r6, [r3, #0]
 800e758:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800e75c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6013      	str	r3, [r2, #0]
 800e764:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 800e768:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800e770:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800e774:	2300      	movs	r3, #0
 800e776:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e77c:	f04f 0300 	mov.w	r3, #0
 800e780:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    if ((m1 < 0) ^ (m2 < 0))
 800e784:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	0fdb      	lsrs	r3, r3, #31
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	0fdb      	lsrs	r3, r3, #31
 800e796:	b2db      	uxtb	r3, r3
 800e798:	4053      	eors	r3, r2
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d010      	beq.n	800e7c2 <arm_softmax_s8+0x2262>
        mult = 1 - mult;
 800e7a0:	f04f 0001 	mov.w	r0, #1
 800e7a4:	f04f 0100 	mov.w	r1, #0
 800e7a8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800e7ac:	1a84      	subs	r4, r0, r2
 800e7ae:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800e7b2:	eb61 0303 	sbc.w	r3, r1, r3
 800e7b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7ba:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800e7be:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    mult = mult + (q63_t)m1 * m2;
 800e7c2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e7ce:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e7da:	fb02 f501 	mul.w	r5, r2, r1
 800e7de:	fb00 f403 	mul.w	r4, r0, r3
 800e7e2:	442c      	add	r4, r5
 800e7e4:	fba0 0102 	umull	r0, r1, r0, r2
 800e7e8:	1863      	adds	r3, r4, r1
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800e7f0:	1814      	adds	r4, r2, r0
 800e7f2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800e7f6:	414b      	adcs	r3, r1
 800e7f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e7fc:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800e800:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    result = (int32_t)(mult / (1ll << 31));
 800e804:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800e808:	4610      	mov	r0, r2
 800e80a:	4619      	mov	r1, r3
 800e80c:	2800      	cmp	r0, #0
 800e80e:	f171 0300 	sbcs.w	r3, r1, #0
 800e812:	da06      	bge.n	800e822 <arm_softmax_s8+0x22c2>
 800e814:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e818:	f04f 0300 	mov.w	r3, #0
 800e81c:	1880      	adds	r0, r0, r2
 800e81e:	eb43 0101 	adc.w	r1, r3, r1
 800e822:	f04f 0200 	mov.w	r2, #0
 800e826:	f04f 0300 	mov.w	r3, #0
 800e82a:	0fc2      	lsrs	r2, r0, #31
 800e82c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e830:	17cb      	asrs	r3, r1, #31
 800e832:	4610      	mov	r0, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800e83a:	4603      	mov	r3, r0
 800e83c:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e83e:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800e842:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 800e846:	6812      	ldr	r2, [r2, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d10a      	bne.n	800e864 <arm_softmax_s8+0x2304>
 800e84e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e858:	d104      	bne.n	800e864 <arm_softmax_s8+0x2304>
        result = Q31_MAX;
 800e85a:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800e85e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e862:	6013      	str	r3, [r2, #0]
    return result;
 800e864:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800e868:	681b      	ldr	r3, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e86a:	18f2      	adds	r2, r6, r3
 800e86c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800e870:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e872:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800e876:	2300      	movs	r3, #0
 800e878:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e87a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e87e:	f04f 0300 	mov.w	r3, #0
 800e882:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    if ((m1 < 0) ^ (m2 < 0))
 800e886:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	0fdb      	lsrs	r3, r3, #31
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	2300      	movs	r3, #0
 800e892:	4053      	eors	r3, r2
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d010      	beq.n	800e8bc <arm_softmax_s8+0x235c>
        mult = 1 - mult;
 800e89a:	f04f 0001 	mov.w	r0, #1
 800e89e:	f04f 0100 	mov.w	r1, #0
 800e8a2:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800e8a6:	1a84      	subs	r4, r0, r2
 800e8a8:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800e8ac:	eb61 0303 	sbc.w	r3, r1, r3
 800e8b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8b4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800e8b8:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    mult = mult + (q63_t)m1 * m2;
 800e8bc:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e8c8:	a3de      	add	r3, pc, #888	; (adr r3, 800ec44 <arm_softmax_s8+0x26e4>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	fb02 f501 	mul.w	r5, r2, r1
 800e8d2:	fb00 f403 	mul.w	r4, r0, r3
 800e8d6:	442c      	add	r4, r5
 800e8d8:	fba0 0102 	umull	r0, r1, r0, r2
 800e8dc:	1863      	adds	r3, r4, r1
 800e8de:	4619      	mov	r1, r3
 800e8e0:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800e8e4:	1814      	adds	r4, r2, r0
 800e8e6:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800e8ea:	414b      	adcs	r3, r1
 800e8ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e8f0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800e8f4:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    result = (int32_t)(mult / (1ll << 31));
 800e8f8:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4619      	mov	r1, r3
 800e900:	2800      	cmp	r0, #0
 800e902:	f171 0300 	sbcs.w	r3, r1, #0
 800e906:	da06      	bge.n	800e916 <arm_softmax_s8+0x23b6>
 800e908:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e90c:	f04f 0300 	mov.w	r3, #0
 800e910:	1880      	adds	r0, r0, r2
 800e912:	eb43 0101 	adc.w	r1, r3, r1
 800e916:	f04f 0200 	mov.w	r2, #0
 800e91a:	f04f 0300 	mov.w	r3, #0
 800e91e:	0fc2      	lsrs	r2, r0, #31
 800e920:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800e924:	17cb      	asrs	r3, r1, #31
 800e926:	4610      	mov	r0, r2
 800e928:	4619      	mov	r1, r3
 800e92a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800e92e:	4603      	mov	r3, r0
 800e930:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800e932:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	4bbf      	ldr	r3, [pc, #764]	; (800ec38 <arm_softmax_s8+0x26d8>)
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d10a      	bne.n	800e954 <arm_softmax_s8+0x23f4>
 800e93e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e948:	d104      	bne.n	800e954 <arm_softmax_s8+0x23f4>
        result = Q31_MAX;
 800e94a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 800e94e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e952:	6013      	str	r3, [r2, #0]
    return result;
 800e954:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800e958:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e95a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	441a      	add	r2, r3
 800e962:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800e966:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e968:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800e96c:	2300      	movs	r3, #0
 800e96e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e970:	2302      	movs	r3, #2
 800e972:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 800e976:	3b01      	subs	r3, #1
 800e978:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800e97a:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800e97e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 800e982:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800e986:	6812      	ldr	r2, [r2, #0]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4013      	ands	r3, r2
 800e98c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800e98e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800e992:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	105b      	asrs	r3, r3, #1
 800e99a:	6013      	str	r3, [r2, #0]
    q31_t threshold = remainder_mask >> 1;
 800e99c:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800e9a0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	105b      	asrs	r3, r3, #1
 800e9a8:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800e9aa:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	da06      	bge.n	800e9c2 <arm_softmax_s8+0x2462>
        threshold++;
 800e9b4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800e9b8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800e9c2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800e9c6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800e9ca:	6812      	ldr	r2, [r2, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	dd06      	ble.n	800e9e0 <arm_softmax_s8+0x2480>
        result++;
 800e9d2:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800e9d6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	6013      	str	r3, [r2, #0]
    return result;
 800e9e0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800e9e4:	681a      	ldr	r2, [r3, #0]
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 800e9e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	441a      	add	r2, r3
 800e9ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800e9f2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800e9f4:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800e9fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ea00:	f04f 0300 	mov.w	r3, #0
 800ea04:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    if ((m1 < 0) ^ (m2 < 0))
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	0fdb      	lsrs	r3, r3, #31
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	4053      	eors	r3, r2
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d010      	beq.n	800ea3e <arm_softmax_s8+0x24de>
        mult = 1 - mult;
 800ea1c:	f04f 0001 	mov.w	r0, #1
 800ea20:	f04f 0100 	mov.w	r1, #0
 800ea24:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800ea28:	1a84      	subs	r4, r0, r2
 800ea2a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800ea2e:	eb61 0303 	sbc.w	r3, r1, r3
 800ea32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ea36:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800ea3a:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    mult = mult + (q63_t)m1 * m2;
 800ea3e:	a57a      	add	r5, pc, #488	; (adr r5, 800ec28 <arm_softmax_s8+0x26c8>)
 800ea40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea44:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ea50:	fb02 f005 	mul.w	r0, r2, r5
 800ea54:	fb04 f103 	mul.w	r1, r4, r3
 800ea58:	1846      	adds	r6, r0, r1
 800ea5a:	fba4 0102 	umull	r0, r1, r4, r2
 800ea5e:	1873      	adds	r3, r6, r1
 800ea60:	4619      	mov	r1, r3
 800ea62:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800ea66:	1814      	adds	r4, r2, r0
 800ea68:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800ea6c:	414b      	adcs	r3, r1
 800ea6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea72:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800ea76:	e9c7 34b2 	strd	r3, r4, [r7, #712]	; 0x2c8
    result = (int32_t)(mult / (1ll << 31));
 800ea7a:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4619      	mov	r1, r3
 800ea82:	2800      	cmp	r0, #0
 800ea84:	f171 0300 	sbcs.w	r3, r1, #0
 800ea88:	da06      	bge.n	800ea98 <arm_softmax_s8+0x2538>
 800ea8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ea8e:	f04f 0300 	mov.w	r3, #0
 800ea92:	1880      	adds	r0, r0, r2
 800ea94:	eb43 0101 	adc.w	r1, r3, r1
 800ea98:	f04f 0200 	mov.w	r2, #0
 800ea9c:	f04f 0300 	mov.w	r3, #0
 800eaa0:	0fc2      	lsrs	r2, r0, #31
 800eaa2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800eaa6:	17cb      	asrs	r3, r1, #31
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	4619      	mov	r1, r3
 800eaac:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 800eab0:	4603      	mov	r3, r0
 800eab2:	6013      	str	r3, [r2, #0]
    return result;
 800eab4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 800eab8:	6819      	ldr	r1, [r3, #0]
    int32_t result = 1895147668 +
 800eaba:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800eabe:	4b5f      	ldr	r3, [pc, #380]	; (800ec3c <arm_softmax_s8+0x26dc>)
 800eac0:	440b      	add	r3, r1
 800eac2:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1672461947)
 800eac4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800eac8:	6819      	ldr	r1, [r3, #0]
 800eaca:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800eace:	1c4b      	adds	r3, r1, #1
 800ead0:	6013      	str	r3, [r2, #0]
 800ead2:	2301      	movs	r3, #1
 800ead4:	fa03 f201 	lsl.w	r2, r3, r1
 800ead8:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	4013      	ands	r3, r2
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <arm_softmax_s8+0x258a>
 800eae4:	f04f 32ff 	mov.w	r2, #4294967295
 800eae8:	e000      	b.n	800eaec <arm_softmax_s8+0x258c>
 800eaea:	2200      	movs	r2, #0
 800eaec:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800eaf6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eafe:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800eb02:	2300      	movs	r3, #0
 800eb04:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eb06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eb0a:	f04f 0300 	mov.w	r3, #0
 800eb0e:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    if ((m1 < 0) ^ (m2 < 0))
 800eb12:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	0fdb      	lsrs	r3, r3, #31
 800eb1a:	b2da      	uxtb	r2, r3
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	4053      	eors	r3, r2
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00e      	beq.n	800eb44 <arm_softmax_s8+0x25e4>
        mult = 1 - mult;
 800eb26:	f04f 0001 	mov.w	r0, #1
 800eb2a:	f04f 0100 	mov.w	r1, #0
 800eb2e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800eb32:	1a84      	subs	r4, r0, r2
 800eb34:	67bc      	str	r4, [r7, #120]	; 0x78
 800eb36:	eb61 0303 	sbc.w	r3, r1, r3
 800eb3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eb3c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800eb40:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    mult = mult + (q63_t)m1 * m2;
 800eb44:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800eb50:	a337      	add	r3, pc, #220	; (adr r3, 800ec30 <arm_softmax_s8+0x26d0>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	fb02 f501 	mul.w	r5, r2, r1
 800eb5a:	fb00 f403 	mul.w	r4, r0, r3
 800eb5e:	442c      	add	r4, r5
 800eb60:	fba0 0102 	umull	r0, r1, r0, r2
 800eb64:	1863      	adds	r3, r4, r1
 800eb66:	4619      	mov	r1, r3
 800eb68:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800eb6c:	1814      	adds	r4, r2, r0
 800eb6e:	673c      	str	r4, [r7, #112]	; 0x70
 800eb70:	414b      	adcs	r3, r1
 800eb72:	677b      	str	r3, [r7, #116]	; 0x74
 800eb74:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800eb78:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
    result = (int32_t)(mult / (1ll << 31));
 800eb7c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800eb80:	4610      	mov	r0, r2
 800eb82:	4619      	mov	r1, r3
 800eb84:	2800      	cmp	r0, #0
 800eb86:	f171 0300 	sbcs.w	r3, r1, #0
 800eb8a:	da06      	bge.n	800eb9a <arm_softmax_s8+0x263a>
 800eb8c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800eb90:	f04f 0300 	mov.w	r3, #0
 800eb94:	1880      	adds	r0, r0, r2
 800eb96:	eb43 0101 	adc.w	r1, r3, r1
 800eb9a:	f04f 0200 	mov.w	r2, #0
 800eb9e:	f04f 0300 	mov.w	r3, #0
 800eba2:	0fc2      	lsrs	r2, r0, #31
 800eba4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800eba8:	17cb      	asrs	r3, r1, #31
 800ebaa:	4610      	mov	r0, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ebb6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	4b20      	ldr	r3, [pc, #128]	; (800ec40 <arm_softmax_s8+0x26e0>)
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d10a      	bne.n	800ebd8 <arm_softmax_s8+0x2678>
 800ebc2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebcc:	d104      	bne.n	800ebd8 <arm_softmax_s8+0x2678>
        result = Q31_MAX;
 800ebce:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 800ebd2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ebd6:	6013      	str	r3, [r2, #0]
    return result;
 800ebd8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 800ebdc:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1672461947)
 800ebde:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	ea02 0103 	and.w	r1, r2, r3
 800ebe8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	43da      	mvns	r2, r3
 800ebf0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800ebfc:	404b      	eors	r3, r1
 800ebfe:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800ec00:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ec04:	6819      	ldr	r1, [r3, #0]
 800ec06:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800ec0a:	1c4b      	adds	r3, r1, #1
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	2301      	movs	r3, #1
 800ec10:	fa03 f201 	lsl.w	r2, r3, r1
 800ec14:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4013      	ands	r3, r2
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d015      	beq.n	800ec4c <arm_softmax_s8+0x26ec>
 800ec20:	f04f 32ff 	mov.w	r2, #4294967295
 800ec24:	e013      	b.n	800ec4e <arm_softmax_s8+0x26ee>
 800ec26:	bf00      	nop
 800ec28:	70f5a894 	.word	0x70f5a894
 800ec2c:	00000000 	.word	0x00000000
 800ec30:	63afbe7b 	.word	0x63afbe7b
 800ec34:	00000000 	.word	0x00000000
 800ec38:	2aaaaaab 	.word	0x2aaaaaab
 800ec3c:	70f5a894 	.word	0x70f5a894
 800ec40:	63afbe7b 	.word	0x63afbe7b
 800ec44:	2aaaaaab 	.word	0x2aaaaaab
 800ec48:	00000000 	.word	0x00000000
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ec52:	601a      	str	r2, [r3, #0]
 800ec54:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 800ec58:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ec60:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800ec64:	2300      	movs	r3, #0
 800ec66:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800ec68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    if ((m1 < 0) ^ (m2 < 0))
 800ec74:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	0fdb      	lsrs	r3, r3, #31
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	2300      	movs	r3, #0
 800ec80:	4053      	eors	r3, r2
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00e      	beq.n	800eca6 <arm_softmax_s8+0x2746>
        mult = 1 - mult;
 800ec88:	f04f 0001 	mov.w	r0, #1
 800ec8c:	f04f 0100 	mov.w	r1, #0
 800ec90:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ec94:	1a84      	subs	r4, r0, r2
 800ec96:	66bc      	str	r4, [r7, #104]	; 0x68
 800ec98:	eb61 0303 	sbc.w	r3, r1, r3
 800ec9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec9e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800eca2:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    mult = mult + (q63_t)m1 * m2;
 800eca6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4618      	mov	r0, r3
 800ecae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ecb2:	a3da      	add	r3, pc, #872	; (adr r3, 800f01c <arm_softmax_s8+0x2abc>)
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	fb02 f501 	mul.w	r5, r2, r1
 800ecbc:	fb00 f403 	mul.w	r4, r0, r3
 800ecc0:	442c      	add	r4, r5
 800ecc2:	fba0 0102 	umull	r0, r1, r0, r2
 800ecc6:	1863      	adds	r3, r4, r1
 800ecc8:	4619      	mov	r1, r3
 800ecca:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ecce:	1814      	adds	r4, r2, r0
 800ecd0:	663c      	str	r4, [r7, #96]	; 0x60
 800ecd2:	414b      	adcs	r3, r1
 800ecd4:	667b      	str	r3, [r7, #100]	; 0x64
 800ecd6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800ecda:	e9c7 34a8 	strd	r3, r4, [r7, #672]	; 0x2a0
    result = (int32_t)(mult / (1ll << 31));
 800ecde:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800ece2:	4610      	mov	r0, r2
 800ece4:	4619      	mov	r1, r3
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f171 0300 	sbcs.w	r3, r1, #0
 800ecec:	da06      	bge.n	800ecfc <arm_softmax_s8+0x279c>
 800ecee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ecf2:	f04f 0300 	mov.w	r3, #0
 800ecf6:	1880      	adds	r0, r0, r2
 800ecf8:	eb43 0101 	adc.w	r1, r3, r1
 800ecfc:	f04f 0200 	mov.w	r2, #0
 800ed00:	f04f 0300 	mov.w	r3, #0
 800ed04:	0fc2      	lsrs	r2, r0, #31
 800ed06:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ed0a:	17cb      	asrs	r3, r1, #31
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	4619      	mov	r1, r3
 800ed10:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800ed14:	4603      	mov	r3, r0
 800ed16:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ed18:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	4bbc      	ldr	r3, [pc, #752]	; (800f010 <arm_softmax_s8+0x2ab0>)
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d10a      	bne.n	800ed3a <arm_softmax_s8+0x27da>
 800ed24:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed2e:	d104      	bne.n	800ed3a <arm_softmax_s8+0x27da>
        result = Q31_MAX;
 800ed30:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800ed34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ed38:	6013      	str	r3, [r2, #0]
    return result;
 800ed3a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ed3e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(1302514674)
 800ed40:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	ea02 0103 	and.w	r1, r2, r3
 800ed4a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	43da      	mvns	r2, r3
 800ed52:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4013      	ands	r3, r2
 800ed5a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800ed5e:	404b      	eors	r3, r1
 800ed60:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(790015084)
 800ed62:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800ed66:	6819      	ldr	r1, [r3, #0]
 800ed68:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800ed6c:	1c4b      	adds	r3, r1, #1
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	2301      	movs	r3, #1
 800ed72:	fa03 f201 	lsl.w	r2, r3, r1
 800ed76:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <arm_softmax_s8+0x2828>
 800ed82:	f04f 32ff 	mov.w	r2, #4294967295
 800ed86:	e000      	b.n	800ed8a <arm_softmax_s8+0x282a>
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800ed94:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800ed9c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800eda0:	2300      	movs	r3, #0
 800eda2:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eda4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eda8:	f04f 0300 	mov.w	r3, #0
 800edac:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    if ((m1 < 0) ^ (m2 < 0))
 800edb0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	0fdb      	lsrs	r3, r3, #31
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	2300      	movs	r3, #0
 800edbc:	4053      	eors	r3, r2
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00e      	beq.n	800ede2 <arm_softmax_s8+0x2882>
        mult = 1 - mult;
 800edc4:	f04f 0001 	mov.w	r0, #1
 800edc8:	f04f 0100 	mov.w	r1, #0
 800edcc:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800edd0:	1a84      	subs	r4, r0, r2
 800edd2:	65bc      	str	r4, [r7, #88]	; 0x58
 800edd4:	eb61 0303 	sbc.w	r3, r1, r3
 800edd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800edda:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800edde:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    mult = mult + (q63_t)m1 * m2;
 800ede2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4618      	mov	r0, r3
 800edea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800edee:	a384      	add	r3, pc, #528	; (adr r3, 800f000 <arm_softmax_s8+0x2aa0>)
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	fb02 f501 	mul.w	r5, r2, r1
 800edf8:	fb00 f403 	mul.w	r4, r0, r3
 800edfc:	442c      	add	r4, r5
 800edfe:	fba0 0102 	umull	r0, r1, r0, r2
 800ee02:	1863      	adds	r3, r4, r1
 800ee04:	4619      	mov	r1, r3
 800ee06:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800ee0a:	1814      	adds	r4, r2, r0
 800ee0c:	653c      	str	r4, [r7, #80]	; 0x50
 800ee0e:	414b      	adcs	r3, r1
 800ee10:	657b      	str	r3, [r7, #84]	; 0x54
 800ee12:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800ee16:	e9c7 34a4 	strd	r3, r4, [r7, #656]	; 0x290
    result = (int32_t)(mult / (1ll << 31));
 800ee1a:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 800ee1e:	4610      	mov	r0, r2
 800ee20:	4619      	mov	r1, r3
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f171 0300 	sbcs.w	r3, r1, #0
 800ee28:	da06      	bge.n	800ee38 <arm_softmax_s8+0x28d8>
 800ee2a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ee2e:	f04f 0300 	mov.w	r3, #0
 800ee32:	1880      	adds	r0, r0, r2
 800ee34:	eb43 0101 	adc.w	r1, r3, r1
 800ee38:	f04f 0200 	mov.w	r2, #0
 800ee3c:	f04f 0300 	mov.w	r3, #0
 800ee40:	0fc2      	lsrs	r2, r0, #31
 800ee42:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ee46:	17cb      	asrs	r3, r1, #31
 800ee48:	4610      	mov	r0, r2
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800ee50:	4603      	mov	r3, r0
 800ee52:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ee54:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	4b6e      	ldr	r3, [pc, #440]	; (800f014 <arm_softmax_s8+0x2ab4>)
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d10a      	bne.n	800ee76 <arm_softmax_s8+0x2916>
 800ee60:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee6a:	d104      	bne.n	800ee76 <arm_softmax_s8+0x2916>
        result = Q31_MAX;
 800ee6c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800ee70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee74:	6013      	str	r3, [r2, #0]
    return result;
 800ee76:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800ee7a:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(790015084)
 800ee7c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	ea02 0103 	and.w	r1, r2, r3
 800ee86:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	43da      	mvns	r2, r3
 800ee8e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4013      	ands	r3, r2
 800ee96:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800ee9a:	404b      	eors	r3, r1
 800ee9c:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(290630308)
 800ee9e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800eea2:	6819      	ldr	r1, [r3, #0]
 800eea4:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800eea8:	1c4b      	adds	r3, r1, #1
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	2301      	movs	r3, #1
 800eeae:	fa03 f201 	lsl.w	r2, r3, r1
 800eeb2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4013      	ands	r3, r2
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d002      	beq.n	800eec4 <arm_softmax_s8+0x2964>
 800eebe:	f04f 32ff 	mov.w	r2, #4294967295
 800eec2:	e000      	b.n	800eec6 <arm_softmax_s8+0x2966>
 800eec4:	2200      	movs	r2, #0
 800eec6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800eeca:	601a      	str	r2, [r3, #0]
 800eecc:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 800eed0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800eed8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800eedc:	2300      	movs	r3, #0
 800eede:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800eee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800eee4:	f04f 0300 	mov.w	r3, #0
 800eee8:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
    if ((m1 < 0) ^ (m2 < 0))
 800eeec:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	0fdb      	lsrs	r3, r3, #31
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	2300      	movs	r3, #0
 800eef8:	4053      	eors	r3, r2
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00e      	beq.n	800ef1e <arm_softmax_s8+0x29be>
        mult = 1 - mult;
 800ef00:	f04f 0001 	mov.w	r0, #1
 800ef04:	f04f 0100 	mov.w	r1, #0
 800ef08:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800ef0c:	1a84      	subs	r4, r0, r2
 800ef0e:	64bc      	str	r4, [r7, #72]	; 0x48
 800ef10:	eb61 0303 	sbc.w	r3, r1, r3
 800ef14:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef16:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800ef1a:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    mult = mult + (q63_t)m1 * m2;
 800ef1e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800ef2a:	a337      	add	r3, pc, #220	; (adr r3, 800f008 <arm_softmax_s8+0x2aa8>)
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	fb02 f501 	mul.w	r5, r2, r1
 800ef34:	fb00 f403 	mul.w	r4, r0, r3
 800ef38:	442c      	add	r4, r5
 800ef3a:	fba0 0102 	umull	r0, r1, r0, r2
 800ef3e:	1863      	adds	r3, r4, r1
 800ef40:	4619      	mov	r1, r3
 800ef42:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800ef46:	1814      	adds	r4, r2, r0
 800ef48:	643c      	str	r4, [r7, #64]	; 0x40
 800ef4a:	414b      	adcs	r3, r1
 800ef4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef4e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ef52:	e9c7 34a0 	strd	r3, r4, [r7, #640]	; 0x280
    result = (int32_t)(mult / (1ll << 31));
 800ef56:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f171 0300 	sbcs.w	r3, r1, #0
 800ef64:	da06      	bge.n	800ef74 <arm_softmax_s8+0x2a14>
 800ef66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	1880      	adds	r0, r0, r2
 800ef70:	eb43 0101 	adc.w	r1, r3, r1
 800ef74:	f04f 0200 	mov.w	r2, #0
 800ef78:	f04f 0300 	mov.w	r3, #0
 800ef7c:	0fc2      	lsrs	r2, r0, #31
 800ef7e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ef82:	17cb      	asrs	r3, r1, #31
 800ef84:	4610      	mov	r0, r2
 800ef86:	4619      	mov	r1, r3
 800ef88:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800ef90:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	4b20      	ldr	r3, [pc, #128]	; (800f018 <arm_softmax_s8+0x2ab8>)
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d10a      	bne.n	800efb2 <arm_softmax_s8+0x2a52>
 800ef9c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efa6:	d104      	bne.n	800efb2 <arm_softmax_s8+0x2a52>
        result = Q31_MAX;
 800efa8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800efac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800efb0:	6013      	str	r3, [r2, #0]
    return result;
 800efb2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800efb6:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(290630308)
 800efb8:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	ea02 0103 	and.w	r1, r2, r3
 800efc2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	43da      	mvns	r2, r3
 800efca:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4013      	ands	r3, r2
 800efd2:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800efd6:	404b      	eors	r3, r1
 800efd8:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(39332535)
 800efda:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800efde:	6819      	ldr	r1, [r3, #0]
 800efe0:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800efe4:	1c4b      	adds	r3, r1, #1
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	2301      	movs	r3, #1
 800efea:	fa03 f201 	lsl.w	r2, r3, r1
 800efee:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4013      	ands	r3, r2
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d014      	beq.n	800f024 <arm_softmax_s8+0x2ac4>
 800effa:	f04f 32ff 	mov.w	r2, #4294967295
 800effe:	e012      	b.n	800f026 <arm_softmax_s8+0x2ac6>
 800f000:	2f16ac6c 	.word	0x2f16ac6c
 800f004:	00000000 	.word	0x00000000
 800f008:	1152aaa4 	.word	0x1152aaa4
 800f00c:	00000000 	.word	0x00000000
 800f010:	4da2cbf2 	.word	0x4da2cbf2
 800f014:	2f16ac6c 	.word	0x2f16ac6c
 800f018:	1152aaa4 	.word	0x1152aaa4
 800f01c:	4da2cbf2 	.word	0x4da2cbf2
 800f020:	00000000 	.word	0x00000000
 800f024:	2200      	movs	r2, #0
 800f026:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f02a:	601a      	str	r2, [r3, #0]
 800f02c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800f030:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f038:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800f03c:	2300      	movs	r3, #0
 800f03e:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f044:	f04f 0300 	mov.w	r3, #0
 800f048:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
    if ((m1 < 0) ^ (m2 < 0))
 800f04c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	0fdb      	lsrs	r3, r3, #31
 800f054:	b2da      	uxtb	r2, r3
 800f056:	2300      	movs	r3, #0
 800f058:	4053      	eors	r3, r2
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00e      	beq.n	800f07e <arm_softmax_s8+0x2b1e>
        mult = 1 - mult;
 800f060:	f04f 0001 	mov.w	r0, #1
 800f064:	f04f 0100 	mov.w	r1, #0
 800f068:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800f06c:	1a84      	subs	r4, r0, r2
 800f06e:	63bc      	str	r4, [r7, #56]	; 0x38
 800f070:	eb61 0303 	sbc.w	r3, r1, r3
 800f074:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f076:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f07a:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    mult = mult + (q63_t)m1 * m2;
 800f07e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4618      	mov	r0, r3
 800f086:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f08a:	a3d1      	add	r3, pc, #836	; (adr r3, 800f3d0 <arm_softmax_s8+0x2e70>)
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	fb02 f501 	mul.w	r5, r2, r1
 800f094:	fb00 f403 	mul.w	r4, r0, r3
 800f098:	442c      	add	r4, r5
 800f09a:	fba0 0102 	umull	r0, r1, r0, r2
 800f09e:	1863      	adds	r3, r4, r1
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800f0a6:	1814      	adds	r4, r2, r0
 800f0a8:	633c      	str	r4, [r7, #48]	; 0x30
 800f0aa:	414b      	adcs	r3, r1
 800f0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ae:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f0b2:	e9c7 349c 	strd	r3, r4, [r7, #624]	; 0x270
    result = (int32_t)(mult / (1ll << 31));
 800f0b6:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	4619      	mov	r1, r3
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	f171 0300 	sbcs.w	r3, r1, #0
 800f0c4:	da06      	bge.n	800f0d4 <arm_softmax_s8+0x2b74>
 800f0c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f0ca:	f04f 0300 	mov.w	r3, #0
 800f0ce:	1880      	adds	r0, r0, r2
 800f0d0:	eb43 0101 	adc.w	r1, r3, r1
 800f0d4:	f04f 0200 	mov.w	r2, #0
 800f0d8:	f04f 0300 	mov.w	r3, #0
 800f0dc:	0fc2      	lsrs	r2, r0, #31
 800f0de:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f0e2:	17cb      	asrs	r3, r1, #31
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f0f0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	4bb4      	ldr	r3, [pc, #720]	; (800f3c8 <arm_softmax_s8+0x2e68>)
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d10a      	bne.n	800f112 <arm_softmax_s8+0x2bb2>
 800f0fc:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f106:	d104      	bne.n	800f112 <arm_softmax_s8+0x2bb2>
        result = Q31_MAX;
 800f108:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800f10c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f110:	6013      	str	r3, [r2, #0]
    return result;
 800f112:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800f116:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(39332535)
 800f118:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	ea02 0103 	and.w	r1, r2, r3
 800f122:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	43da      	mvns	r2, r3
 800f12a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4013      	ands	r3, r2
 800f132:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800f136:	404b      	eors	r3, r1
 800f138:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(720401)
 800f13a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800f13e:	6819      	ldr	r1, [r3, #0]
 800f140:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800f144:	1c4b      	adds	r3, r1, #1
 800f146:	6013      	str	r3, [r2, #0]
 800f148:	2301      	movs	r3, #1
 800f14a:	fa03 f201 	lsl.w	r2, r3, r1
 800f14e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4013      	ands	r3, r2
 800f156:	2b00      	cmp	r3, #0
 800f158:	d002      	beq.n	800f160 <arm_softmax_s8+0x2c00>
 800f15a:	f04f 32ff 	mov.w	r2, #4294967295
 800f15e:	e000      	b.n	800f162 <arm_softmax_s8+0x2c02>
 800f160:	2200      	movs	r2, #0
 800f162:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f166:	601a      	str	r2, [r3, #0]
 800f168:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800f16c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f174:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f178:	2300      	movs	r3, #0
 800f17a:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f17c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f180:	f04f 0300 	mov.w	r3, #0
 800f184:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
    if ((m1 < 0) ^ (m2 < 0))
 800f188:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	0fdb      	lsrs	r3, r3, #31
 800f190:	b2da      	uxtb	r2, r3
 800f192:	2300      	movs	r3, #0
 800f194:	4053      	eors	r3, r2
 800f196:	b2db      	uxtb	r3, r3
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00e      	beq.n	800f1ba <arm_softmax_s8+0x2c5a>
        mult = 1 - mult;
 800f19c:	f04f 0001 	mov.w	r0, #1
 800f1a0:	f04f 0100 	mov.w	r1, #0
 800f1a4:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f1a8:	1a84      	subs	r4, r0, r2
 800f1aa:	62bc      	str	r4, [r7, #40]	; 0x28
 800f1ac:	eb61 0303 	sbc.w	r3, r1, r3
 800f1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f1b6:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    mult = mult + (q63_t)m1 * m2;
 800f1ba:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f1c6:	4a81      	ldr	r2, [pc, #516]	; (800f3cc <arm_softmax_s8+0x2e6c>)
 800f1c8:	f04f 0300 	mov.w	r3, #0
 800f1cc:	fb02 f501 	mul.w	r5, r2, r1
 800f1d0:	fb00 f403 	mul.w	r4, r0, r3
 800f1d4:	442c      	add	r4, r5
 800f1d6:	fba0 0102 	umull	r0, r1, r0, r2
 800f1da:	1863      	adds	r3, r4, r1
 800f1dc:	4619      	mov	r1, r3
 800f1de:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f1e2:	1814      	adds	r4, r2, r0
 800f1e4:	623c      	str	r4, [r7, #32]
 800f1e6:	414b      	adcs	r3, r1
 800f1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f1ee:	e9c7 3498 	strd	r3, r4, [r7, #608]	; 0x260
    result = (int32_t)(mult / (1ll << 31));
 800f1f2:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	f171 0300 	sbcs.w	r3, r1, #0
 800f200:	da06      	bge.n	800f210 <arm_softmax_s8+0x2cb0>
 800f202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f206:	f04f 0300 	mov.w	r3, #0
 800f20a:	1880      	adds	r0, r0, r2
 800f20c:	eb43 0101 	adc.w	r1, r3, r1
 800f210:	f04f 0200 	mov.w	r2, #0
 800f214:	f04f 0300 	mov.w	r3, #0
 800f218:	0fc2      	lsrs	r2, r0, #31
 800f21a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f21e:	17cb      	asrs	r3, r1, #31
 800f220:	4610      	mov	r0, r2
 800f222:	4619      	mov	r1, r3
 800f224:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f228:	4603      	mov	r3, r0
 800f22a:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f22c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	4b66      	ldr	r3, [pc, #408]	; (800f3cc <arm_softmax_s8+0x2e6c>)
 800f234:	429a      	cmp	r2, r3
 800f236:	d10a      	bne.n	800f24e <arm_softmax_s8+0x2cee>
 800f238:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f242:	d104      	bne.n	800f24e <arm_softmax_s8+0x2cee>
        result = Q31_MAX;
 800f244:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f248:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f24c:	6013      	str	r3, [r2, #0]
    return result;
 800f24e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f252:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(720401)
 800f254:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	ea02 0103 	and.w	r1, r2, r3
 800f25e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	43da      	mvns	r2, r3
 800f266:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4013      	ands	r3, r2
 800f26e:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800f272:	404b      	eors	r3, r1
 800f274:	6013      	str	r3, [r2, #0]
    SELECT_IF_NON_ZERO(242)
 800f276:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800f27a:	6819      	ldr	r1, [r3, #0]
 800f27c:	f507 7259 	add.w	r2, r7, #868	; 0x364
 800f280:	1c4b      	adds	r3, r1, #1
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	2301      	movs	r3, #1
 800f286:	fa03 f201 	lsl.w	r2, r3, r1
 800f28a:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4013      	ands	r3, r2
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <arm_softmax_s8+0x2d3c>
 800f296:	f04f 32ff 	mov.w	r2, #4294967295
 800f29a:	e000      	b.n	800f29e <arm_softmax_s8+0x2d3e>
 800f29c:	2200      	movs	r2, #0
 800f29e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800f2a8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f2b0:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f2b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f2bc:	f04f 0300 	mov.w	r3, #0
 800f2c0:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
    if ((m1 < 0) ^ (m2 < 0))
 800f2c4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	0fdb      	lsrs	r3, r3, #31
 800f2cc:	b2da      	uxtb	r2, r3
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4053      	eors	r3, r2
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00e      	beq.n	800f2f6 <arm_softmax_s8+0x2d96>
        mult = 1 - mult;
 800f2d8:	f04f 0001 	mov.w	r0, #1
 800f2dc:	f04f 0100 	mov.w	r1, #0
 800f2e0:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800f2e4:	1a84      	subs	r4, r0, r2
 800f2e6:	61bc      	str	r4, [r7, #24]
 800f2e8:	eb61 0303 	sbc.w	r3, r1, r3
 800f2ec:	61fb      	str	r3, [r7, #28]
 800f2ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f2f2:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    mult = mult + (q63_t)m1 * m2;
 800f2f6:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f302:	f04f 02f2 	mov.w	r2, #242	; 0xf2
 800f306:	f04f 0300 	mov.w	r3, #0
 800f30a:	fb02 f501 	mul.w	r5, r2, r1
 800f30e:	fb00 f403 	mul.w	r4, r0, r3
 800f312:	442c      	add	r4, r5
 800f314:	fba0 0102 	umull	r0, r1, r0, r2
 800f318:	1863      	adds	r3, r4, r1
 800f31a:	4619      	mov	r1, r3
 800f31c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800f320:	1814      	adds	r4, r2, r0
 800f322:	613c      	str	r4, [r7, #16]
 800f324:	414b      	adcs	r3, r1
 800f326:	617b      	str	r3, [r7, #20]
 800f328:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f32c:	e9c7 3494 	strd	r3, r4, [r7, #592]	; 0x250
    result = (int32_t)(mult / (1ll << 31));
 800f330:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800f334:	4610      	mov	r0, r2
 800f336:	4619      	mov	r1, r3
 800f338:	2800      	cmp	r0, #0
 800f33a:	f171 0300 	sbcs.w	r3, r1, #0
 800f33e:	da06      	bge.n	800f34e <arm_softmax_s8+0x2dee>
 800f340:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f344:	f04f 0300 	mov.w	r3, #0
 800f348:	1880      	adds	r0, r0, r2
 800f34a:	eb43 0101 	adc.w	r1, r3, r1
 800f34e:	f04f 0200 	mov.w	r2, #0
 800f352:	f04f 0300 	mov.w	r3, #0
 800f356:	0fc2      	lsrs	r2, r0, #31
 800f358:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f35c:	17cb      	asrs	r3, r1, #31
 800f35e:	4610      	mov	r0, r2
 800f360:	4619      	mov	r1, r3
 800f362:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800f366:	4603      	mov	r3, r0
 800f368:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f36a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2bf2      	cmp	r3, #242	; 0xf2
 800f372:	d10a      	bne.n	800f38a <arm_softmax_s8+0x2e2a>
 800f374:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f37e:	d104      	bne.n	800f38a <arm_softmax_s8+0x2e2a>
        result = Q31_MAX;
 800f380:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800f384:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f388:	6013      	str	r3, [r2, #0]
    return result;
 800f38a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800f38e:	681a      	ldr	r2, [r3, #0]
    SELECT_IF_NON_ZERO(242)
 800f390:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	ea02 0103 	and.w	r1, r2, r3
 800f39a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	43da      	mvns	r2, r3
 800f3a2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4013      	ands	r3, r2
 800f3aa:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800f3ae:	404b      	eors	r3, r1
 800f3b0:	6013      	str	r3, [r2, #0]
    mask = MASK_IF_ZERO(val);
 800f3b2:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d10d      	bne.n	800f3d8 <arm_softmax_s8+0x2e78>
 800f3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c0:	e00b      	b.n	800f3da <arm_softmax_s8+0x2e7a>
 800f3c2:	bf00      	nop
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	02582ab7 	.word	0x02582ab7
 800f3cc:	000afe11 	.word	0x000afe11
 800f3d0:	02582ab7 	.word	0x02582ab7
 800f3d4:	00000000 	.word	0x00000000
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f3de:	601a      	str	r2, [r3, #0]
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 800f3e0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f3ea:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	43da      	mvns	r2, r3
 800f3f2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	4059      	eors	r1, r3
 800f3fc:	f507 7260 	add.w	r2, r7, #896	; 0x380
 800f400:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800f404:	6013      	str	r3, [r2, #0]
 800f406:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800f40a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 800f40c:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800f410:	2300      	movs	r3, #0
 800f412:	6013      	str	r3, [r2, #0]
    q63_t mult = 1 << 30;
 800f414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f418:	f04f 0300 	mov.w	r3, #0
 800f41c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    if ((m1 < 0) ^ (m2 < 0))
 800f420:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	0fdb      	lsrs	r3, r3, #31
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	0fdb      	lsrs	r3, r3, #31
 800f432:	b2db      	uxtb	r3, r3
 800f434:	4053      	eors	r3, r2
 800f436:	b2db      	uxtb	r3, r3
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00e      	beq.n	800f45a <arm_softmax_s8+0x2efa>
        mult = 1 - mult;
 800f43c:	f04f 0001 	mov.w	r0, #1
 800f440:	f04f 0100 	mov.w	r1, #0
 800f444:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800f448:	1a84      	subs	r4, r0, r2
 800f44a:	60bc      	str	r4, [r7, #8]
 800f44c:	eb61 0303 	sbc.w	r3, r1, r3
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f456:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    mult = mult + (q63_t)m1 * m2;
 800f45a:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4618      	mov	r0, r3
 800f462:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f466:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f472:	fb02 f501 	mul.w	r5, r2, r1
 800f476:	fb00 f403 	mul.w	r4, r0, r3
 800f47a:	442c      	add	r4, r5
 800f47c:	fba0 0102 	umull	r0, r1, r0, r2
 800f480:	1863      	adds	r3, r4, r1
 800f482:	4619      	mov	r1, r3
 800f484:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800f488:	1814      	adds	r4, r2, r0
 800f48a:	603c      	str	r4, [r7, #0]
 800f48c:	414b      	adcs	r3, r1
 800f48e:	607b      	str	r3, [r7, #4]
 800f490:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f494:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    result = (int32_t)(mult / (1ll << 31));
 800f498:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800f49c:	4610      	mov	r0, r2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f171 0300 	sbcs.w	r3, r1, #0
 800f4a6:	da06      	bge.n	800f4b6 <arm_softmax_s8+0x2f56>
 800f4a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f4ac:	f04f 0300 	mov.w	r3, #0
 800f4b0:	1880      	adds	r0, r0, r2
 800f4b2:	eb43 0101 	adc.w	r1, r3, r1
 800f4b6:	f04f 0200 	mov.w	r2, #0
 800f4ba:	f04f 0300 	mov.w	r3, #0
 800f4be:	0fc2      	lsrs	r2, r0, #31
 800f4c0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800f4c4:	17cb      	asrs	r3, r1, #31
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6013      	str	r3, [r2, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 800f4d2:	f507 7260 	add.w	r2, r7, #896	; 0x380
 800f4d6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800f4da:	6812      	ldr	r2, [r2, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d10a      	bne.n	800f4f8 <arm_softmax_s8+0x2f98>
 800f4e2:	f507 7360 	add.w	r3, r7, #896	; 0x380
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f4ec:	d104      	bne.n	800f4f8 <arm_softmax_s8+0x2f98>
        result = Q31_MAX;
 800f4ee:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800f4f2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f4f6:	6013      	str	r3, [r2, #0]
    return result;
 800f4f8:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	f507 7265 	add.w	r2, r7, #916	; 0x394
 800f508:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 800f50c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800f50e:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800f512:	2300      	movs	r3, #0
 800f514:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f516:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800f51a:	2201      	movs	r2, #1
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	fa02 f303 	lsl.w	r3, r2, r3
 800f522:	f507 7263 	add.w	r2, r7, #908	; 0x38c
 800f526:	3b01      	subs	r3, #1
 800f528:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800f52a:	f507 7162 	add.w	r1, r7, #904	; 0x388
 800f52e:	f507 7266 	add.w	r2, r7, #920	; 0x398
 800f532:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f536:	6812      	ldr	r2, [r2, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4013      	ands	r3, r2
 800f53c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800f53e:	f507 7164 	add.w	r1, r7, #912	; 0x390
 800f542:	f507 7266 	add.w	r2, r7, #920	; 0x398
 800f546:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800f54a:	6812      	ldr	r2, [r2, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	fa42 f303 	asr.w	r3, r2, r3
 800f552:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800f554:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800f558:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	105b      	asrs	r3, r3, #1
 800f560:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800f562:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	da06      	bge.n	800f57a <arm_softmax_s8+0x301a>
        threshold++;
 800f56c:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800f570:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3301      	adds	r3, #1
 800f578:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800f57a:	f507 7262 	add.w	r2, r7, #904	; 0x388
 800f57e:	f507 7361 	add.w	r3, r7, #900	; 0x384
 800f582:	6812      	ldr	r2, [r2, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	429a      	cmp	r2, r3
 800f588:	dd06      	ble.n	800f598 <arm_softmax_s8+0x3038>
        result++;
 800f58a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800f58e:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3301      	adds	r3, #1
 800f596:	6013      	str	r3, [r2, #0]
    return result;
 800f598:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800f59c:	681b      	ldr	r3, [r3, #0]
                const int32_t res =
 800f59e:	3b80      	subs	r3, #128	; 0x80
 800f5a0:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 800f5a4:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800f5a8:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 800f5ac:	db09      	blt.n	800f5c2 <arm_softmax_s8+0x3062>
 800f5ae:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800f5b2:	2b7e      	cmp	r3, #126	; 0x7e
 800f5b4:	dc03      	bgt.n	800f5be <arm_softmax_s8+0x305e>
 800f5b6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800f5ba:	b259      	sxtb	r1, r3
 800f5bc:	e003      	b.n	800f5c6 <arm_softmax_s8+0x3066>
 800f5be:	217f      	movs	r1, #127	; 0x7f
 800f5c0:	e001      	b.n	800f5c6 <arm_softmax_s8+0x3066>
 800f5c2:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 800f5c6:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800f5ca:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800f5ce:	441a      	add	r2, r3
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	7013      	strb	r3, [r2, #0]
 800f5d4:	e006      	b.n	800f5e4 <arm_softmax_s8+0x3084>
            }
            else
            {
                output[col] = -128;
 800f5d6:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800f5da:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800f5de:	441a      	add	r2, r3
 800f5e0:	2380      	movs	r3, #128	; 0x80
 800f5e2:	7013      	strb	r3, [r2, #0]
        for (col = 0; col < row_size; ++col)
 800f5e4:	f8d7 35f4 	ldr.w	r3, [r7, #1524]	; 0x5f4
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800f5ee:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800f5f2:	f8d7 25f4 	ldr.w	r2, [r7, #1524]	; 0x5f4
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	f6fe ae81 	blt.w	800e300 <arm_softmax_s8+0x1da0>
            }
        }
        input += row_size;
 800f5fe:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800f602:	6819      	ldr	r1, [r3, #0]
 800f604:	f507 720d 	add.w	r2, r7, #564	; 0x234
 800f608:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	440b      	add	r3, r1
 800f610:	6013      	str	r3, [r2, #0]
        output += row_size;
 800f612:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800f61c:	4413      	add	r3, r2
 800f61e:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800f622:	f8d7 35f0 	ldr.w	r3, [r7, #1520]	; 0x5f0
 800f626:	3301      	adds	r3, #1
 800f628:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 800f62c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800f630:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	429a      	cmp	r2, r3
 800f638:	f6fc afb2 	blt.w	800c5a0 <arm_softmax_s8+0x40>
    }

#endif
}
 800f63c:	bf00      	nop
 800f63e:	bf00      	nop
 800f640:	f507 67bf 	add.w	r7, r7, #1528	; 0x5f8
 800f644:	46bd      	mov	sp, r7
 800f646:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f64a:	4770      	bx	lr

0800f64c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800f64c:	b480      	push	{r7}
 800f64e:	b089      	sub	sp, #36	; 0x24
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f660:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	00db      	lsls	r3, r3, #3
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	4413      	add	r3, r2
 800f66a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	ed93 7a00 	vldr	s14, [r3]
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	edd3 7a00 	vldr	s15, [r3]
 800f678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	edd3 6a01 	vldr	s13, [r3, #4]
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	edd3 7a01 	vldr	s15, [r3, #4]
 800f688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f68c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f690:	edc7 7a04 	vstr	s15, [r7, #16]
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	ed93 7a00 	vldr	s14, [r3]
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	edd3 6a01 	vldr	s13, [r3, #4]
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	edd3 7a00 	vldr	s15, [r3]
 800f6b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f6b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6b8:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	00db      	lsls	r3, r3, #3
 800f6c0:	69ba      	ldr	r2, [r7, #24]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	ed93 7a00 	vldr	s14, [r3]
 800f6cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	edc3 7a00 	vstr	s15, [r3]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	ed93 7a01 	vldr	s14, [r3, #4]
 800f6e0:	edd7 7a05 	vldr	s15, [r7, #20]
 800f6e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	ed93 7a00 	vldr	s14, [r3]
 800f6f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800f6f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	edc3 7a00 	vstr	s15, [r3]
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	ed93 7a01 	vldr	s14, [r3, #4]
 800f708:	edd7 7a05 	vldr	s15, [r7, #20]
 800f70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	3308      	adds	r3, #8
 800f71a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	3308      	adds	r3, #8
 800f720:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	3b01      	subs	r3, #1
 800f726:	603b      	str	r3, [r7, #0]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	bf14      	ite	ne
 800f72e:	2301      	movne	r3, #1
 800f730:	2300      	moveq	r3, #0
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b00      	cmp	r3, #0
 800f736:	d000      	beq.n	800f73a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800f738:	e798      	b.n	800f66c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800f73a:	bf00      	nop
 800f73c:	3724      	adds	r7, #36	; 0x24
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr

0800f746 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800f746:	b480      	push	{r7}
 800f748:	b097      	sub	sp, #92	; 0x5c
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	607a      	str	r2, [r7, #4]
 800f752:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	4613      	mov	r3, r2
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	4413      	add	r3, r2
 800f766:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f76e:	657b      	str	r3, [r7, #84]	; 0x54
 800f770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f772:	653b      	str	r3, [r7, #80]	; 0x50
 800f774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f776:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	ed93 7a00 	vldr	s14, [r3]
 800f784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f786:	edd3 7a00 	vldr	s15, [r3]
 800f78a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	4413      	add	r3, r2
 800f796:	edd3 6a01 	vldr	s13, [r3, #4]
 800f79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f79c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7a8:	edc7 7a04 	vstr	s15, [r7, #16]
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	00db      	lsls	r3, r3, #3
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	ed93 7a00 	vldr	s14, [r3]
 800f7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	edd3 6a01 	vldr	s13, [r3, #4]
 800f7ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d0:	edd3 7a00 	vldr	s15, [r3]
 800f7d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7dc:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800f7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	ed93 7a00 	vldr	s14, [r3]
 800f7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ee:	edd3 7a00 	vldr	s15, [r3]
 800f7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	edd3 6a01 	vldr	s13, [r3, #4]
 800f802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f804:	edd3 7a01 	vldr	s15, [r3, #4]
 800f808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f80c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f810:	edc7 7a06 	vstr	s15, [r7, #24]
 800f814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	ed93 7a00 	vldr	s14, [r3]
 800f820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f822:	edd3 7a01 	vldr	s15, [r3, #4]
 800f826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f82a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	4413      	add	r3, r2
 800f832:	edd3 6a01 	vldr	s13, [r3, #4]
 800f836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f838:	edd3 7a00 	vldr	s15, [r3]
 800f83c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f840:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f844:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800f848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	ed93 7a00 	vldr	s14, [r3]
 800f854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f856:	edd3 7a00 	vldr	s15, [r3]
 800f85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f860:	00db      	lsls	r3, r3, #3
 800f862:	68fa      	ldr	r2, [r7, #12]
 800f864:	4413      	add	r3, r2
 800f866:	edd3 6a01 	vldr	s13, [r3, #4]
 800f86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f86c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f874:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f878:	edc7 7a08 	vstr	s15, [r7, #32]
 800f87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	4413      	add	r3, r2
 800f884:	ed93 7a00 	vldr	s14, [r3]
 800f888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f88a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f88e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f894:	00db      	lsls	r3, r3, #3
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4413      	add	r3, r2
 800f89a:	edd3 6a01 	vldr	s13, [r3, #4]
 800f89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a0:	edd3 7a00 	vldr	s15, [r3]
 800f8a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	ed93 7a00 	vldr	s14, [r3]
 800f8b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8be:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	ed93 7a01 	vldr	s14, [r3, #4]
 800f8c8:	edd7 7a07 	vldr	s15, [r7, #28]
 800f8cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	ed93 7a00 	vldr	s14, [r3]
 800f8da:	edd7 7a06 	vldr	s15, [r7, #24]
 800f8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	edc3 7a00 	vstr	s15, [r3]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	ed93 7a01 	vldr	s14, [r3, #4]
 800f8ee:	edd7 7a07 	vldr	s15, [r7, #28]
 800f8f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800f8fc:	ed97 7a04 	vldr	s14, [r7, #16]
 800f900:	edd7 7a08 	vldr	s15, [r7, #32]
 800f904:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f908:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800f90c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f910:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f914:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f918:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800f91c:	ed97 7a04 	vldr	s14, [r7, #16]
 800f920:	edd7 7a08 	vldr	s15, [r7, #32]
 800f924:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f928:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800f92c:	ed97 7a05 	vldr	s14, [r7, #20]
 800f930:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800f934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f938:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	ed93 7a00 	vldr	s14, [r3]
 800f942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	4413      	add	r3, r2
 800f94e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f952:	edc3 7a00 	vstr	s15, [r3]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	ed93 7a01 	vldr	s14, [r3, #4]
 800f95c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	4413      	add	r3, r2
 800f968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f96c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f976:	4413      	add	r3, r2
 800f978:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	011b      	lsls	r3, r3, #4
 800f97e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f980:	4413      	add	r3, r2
 800f982:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	4613      	mov	r3, r2
 800f988:	005b      	lsls	r3, r3, #1
 800f98a:	4413      	add	r3, r2
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	461a      	mov	r2, r3
 800f990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f992:	4413      	add	r3, r2
 800f994:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	ed93 7a00 	vldr	s14, [r3]
 800f99c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800f9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	edc3 7a00 	vstr	s15, [r3]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	ed93 7a01 	vldr	s14, [r3, #4]
 800f9b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f9b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d030      	beq.n	800fa28 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800f9c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f9ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	00db      	lsls	r3, r3, #3
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9da:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800f9de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800f9e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9f2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800f9f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800f9fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f9fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	4413      	add	r3, r2
 800fa06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa0a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800fa0e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fa12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fa16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa22:	edc3 7a01 	vstr	s15, [r3, #4]
 800fa26:	e02f      	b.n	800fa88 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800fa28:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800fa2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	00db      	lsls	r3, r3, #3
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa3c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800fa40:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fa44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	00db      	lsls	r3, r3, #3
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	4413      	add	r3, r2
 800fa50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa54:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800fa58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800fa5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fa60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	4413      	add	r3, r2
 800fa68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa6c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800fa70:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800fa74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fa78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa7a:	00db      	lsls	r3, r3, #3
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	4413      	add	r3, r2
 800fa80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa84:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800fa8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa90:	3b01      	subs	r3, #1
 800fa92:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	bf14      	ite	ne
 800fa9a:	2301      	movne	r3, #1
 800fa9c:	2300      	moveq	r3, #0
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d000      	beq.n	800faa6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800faa4:	e668      	b.n	800f778 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800faa6:	bf00      	nop
 800faa8:	375c      	adds	r7, #92	; 0x5c
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
	...

0800fab4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800fab4:	b5b0      	push	{r4, r5, r7, lr}
 800fab6:	b094      	sub	sp, #80	; 0x50
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	683a      	ldr	r2, [r7, #0]
 800fad0:	fb02 f303 	mul.w	r3, r2, r3
 800fad4:	6879      	ldr	r1, [r7, #4]
 800fad6:	3321      	adds	r3, #33	; 0x21
 800fad8:	f107 0210 	add.w	r2, r7, #16
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fae4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800faee:	647b      	str	r3, [r7, #68]	; 0x44
 800faf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faf2:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	4413      	add	r3, r2
 800fafc:	ed93 7a00 	vldr	s14, [r3]
 800fb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb02:	edd3 7a00 	vldr	s15, [r3]
 800fb06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	00db      	lsls	r3, r3, #3
 800fb0e:	68fa      	ldr	r2, [r7, #12]
 800fb10:	4413      	add	r3, r2
 800fb12:	edd3 6a01 	vldr	s13, [r3, #4]
 800fb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb18:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb24:	edc7 7a08 	vstr	s15, [r7, #32]
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	00db      	lsls	r3, r3, #3
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	4413      	add	r3, r2
 800fb30:	ed93 7a00 	vldr	s14, [r3]
 800fb34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb36:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	00db      	lsls	r3, r3, #3
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	4413      	add	r3, r2
 800fb46:	edd3 6a01 	vldr	s13, [r3, #4]
 800fb4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb4c:	edd3 7a00 	vldr	s15, [r3]
 800fb50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800fb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb5e:	00db      	lsls	r3, r3, #3
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	4413      	add	r3, r2
 800fb64:	ed93 7a00 	vldr	s14, [r3]
 800fb68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb6a:	edd3 7a00 	vldr	s15, [r3]
 800fb6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	4413      	add	r3, r2
 800fb7a:	edd3 6a01 	vldr	s13, [r3, #4]
 800fb7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb80:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb8c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800fb90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb92:	00db      	lsls	r3, r3, #3
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	4413      	add	r3, r2
 800fb98:	ed93 7a00 	vldr	s14, [r3]
 800fb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb9e:	edd3 7a01 	vldr	s15, [r3, #4]
 800fba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	4413      	add	r3, r2
 800fbae:	edd3 6a01 	vldr	s13, [r3, #4]
 800fbb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb4:	edd3 7a00 	vldr	s15, [r3]
 800fbb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800fbc4:	ed97 7a08 	vldr	s14, [r7, #32]
 800fbc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fbcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbd0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800fbd4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800fbd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fbdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbe0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800fbe4:	ed97 7a08 	vldr	s14, [r7, #32]
 800fbe8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800fbec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbf0:	edc7 7a06 	vstr	s15, [r7, #24]
 800fbf4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800fbf8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fbfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc00:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	00db      	lsls	r3, r3, #3
 800fc08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc0a:	4413      	add	r3, r2
 800fc0c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc14:	4413      	add	r3, r2
 800fc16:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f0 fcad 	bl	800057c <__aeabi_f2d>
 800fc22:	4604      	mov	r4, r0
 800fc24:	460d      	mov	r5, r1
 800fc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7f0 fca7 	bl	800057c <__aeabi_f2d>
 800fc2e:	f04f 0200 	mov.w	r2, #0
 800fc32:	4b57      	ldr	r3, [pc, #348]	; (800fd90 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800fc34:	f7f0 fcfa 	bl	800062c <__aeabi_dmul>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 fb3c 	bl	80002bc <__aeabi_dsub>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4610      	mov	r0, r2
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	00db      	lsls	r3, r3, #3
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	18d4      	adds	r4, r2, r3
 800fc54:	f7f0 ffe2 	bl	8000c1c <__aeabi_d2f>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7f0 fc8b 	bl	800057c <__aeabi_f2d>
 800fc66:	4604      	mov	r4, r0
 800fc68:	460d      	mov	r5, r1
 800fc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7f0 fc85 	bl	800057c <__aeabi_f2d>
 800fc72:	f04f 0200 	mov.w	r2, #0
 800fc76:	4b46      	ldr	r3, [pc, #280]	; (800fd90 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800fc78:	f7f0 fcd8 	bl	800062c <__aeabi_dmul>
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	460b      	mov	r3, r1
 800fc80:	4620      	mov	r0, r4
 800fc82:	4629      	mov	r1, r5
 800fc84:	f7f0 fb1a 	bl	80002bc <__aeabi_dsub>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	4619      	mov	r1, r3
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	00db      	lsls	r3, r3, #3
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	18d4      	adds	r4, r2, r3
 800fc98:	f7f0 ffc0 	bl	8000c1c <__aeabi_d2f>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800fca0:	ed97 7a06 	vldr	s14, [r7, #24]
 800fca4:	edd7 7a05 	vldr	s15, [r7, #20]
 800fca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcac:	edc7 7a06 	vstr	s15, [r7, #24]
 800fcb0:	ed97 7a07 	vldr	s14, [r7, #28]
 800fcb4:	edd7 7a05 	vldr	s15, [r7, #20]
 800fcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcbc:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	ed93 7a00 	vldr	s14, [r3]
 800fcc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800fcca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	edc3 7a00 	vstr	s15, [r3]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	ed93 7a01 	vldr	s14, [r3, #4]
 800fcda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800fcde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	00db      	lsls	r3, r3, #3
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	4413      	add	r3, r2
 800fcf0:	ed93 7a00 	vldr	s14, [r3]
 800fcf4:	edd7 7a07 	vldr	s15, [r7, #28]
 800fcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfa:	00db      	lsls	r3, r3, #3
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	4413      	add	r3, r2
 800fd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd04:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	4413      	add	r3, r2
 800fd10:	ed93 7a01 	vldr	s14, [r3, #4]
 800fd14:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1a:	00db      	lsls	r3, r3, #3
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	4413      	add	r3, r2
 800fd20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd24:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	00db      	lsls	r3, r3, #3
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	ed93 7a00 	vldr	s14, [r3]
 800fd34:	edd7 7a07 	vldr	s15, [r7, #28]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	00db      	lsls	r3, r3, #3
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	4413      	add	r3, r2
 800fd40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd44:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	4413      	add	r3, r2
 800fd50:	ed93 7a01 	vldr	s14, [r3, #4]
 800fd54:	edd7 7a06 	vldr	s15, [r7, #24]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	00db      	lsls	r3, r3, #3
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	4413      	add	r3, r2
 800fd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd64:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800fd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd70:	3b01      	subs	r3, #1
 800fd72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bf14      	ite	ne
 800fd7a:	2301      	movne	r3, #1
 800fd7c:	2300      	moveq	r3, #0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d000      	beq.n	800fd86 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800fd84:	e6b6      	b.n	800faf4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800fd86:	bf00      	nop
 800fd88:	3750      	adds	r7, #80	; 0x50
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bdb0      	pop	{r4, r5, r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	3fe00000 	.word	0x3fe00000

0800fd94 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800fd94:	b480      	push	{r7}
 800fd96:	b0ab      	sub	sp, #172	; 0xac
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	607a      	str	r2, [r7, #4]
 800fda0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fda8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	fb02 f303 	mul.w	r3, r2, r3
 800fdb4:	00db      	lsls	r3, r3, #3
 800fdb6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fdba:	441a      	add	r2, r3
 800fdbc:	f107 0318 	add.w	r3, r7, #24
 800fdc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdc4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	fb02 f303 	mul.w	r3, r2, r3
 800fdd0:	011b      	lsls	r3, r3, #4
 800fdd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fdd6:	441a      	add	r2, r3
 800fdd8:	f107 0310 	add.w	r3, r7, #16
 800fddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fde0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	00db      	lsls	r3, r3, #3
 800fdee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fdf2:	4413      	add	r3, r2
 800fdf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	011b      	lsls	r3, r3, #4
 800fdfc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fe00:	4413      	add	r3, r2
 800fe02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	4413      	add	r3, r2
 800fe0e:	00db      	lsls	r3, r3, #3
 800fe10:	461a      	mov	r2, r3
 800fe12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe16:	4413      	add	r3, r2
 800fe18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	015b      	lsls	r3, r3, #5
 800fe20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fe24:	4413      	add	r3, r2
 800fe26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fe30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800fe34:	2300      	movs	r3, #0
 800fe36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe3a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	f280 82a9 	bge.w	8010398 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800fe46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fe4a:	f107 0320 	add.w	r3, r7, #32
 800fe4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe52:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800fe56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe5a:	ed93 7a00 	vldr	s14, [r3]
 800fe5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	fb02 f303 	mul.w	r3, r2, r3
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe6e:	4413      	add	r3, r2
 800fe70:	edd3 7a00 	vldr	s15, [r3]
 800fe74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe7c:	edd3 6a01 	vldr	s13, [r3, #4]
 800fe80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	fb02 f303 	mul.w	r3, r2, r3
 800fe8a:	00db      	lsls	r3, r3, #3
 800fe8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe90:	4413      	add	r3, r2
 800fe92:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800fea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fea6:	ed93 7a00 	vldr	s14, [r3]
 800feaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	fb02 f303 	mul.w	r3, r2, r3
 800feb4:	00db      	lsls	r3, r3, #3
 800feb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800feba:	4413      	add	r3, r2
 800febc:	edd3 7a01 	vldr	s15, [r3, #4]
 800fec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fec8:	edd3 6a01 	vldr	s13, [r3, #4]
 800fecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	fb02 f303 	mul.w	r3, r2, r3
 800fed6:	00db      	lsls	r3, r3, #3
 800fed8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fedc:	4413      	add	r3, r2
 800fede:	edd3 7a00 	vldr	s15, [r3]
 800fee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800feea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800feee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fef2:	ed93 7a00 	vldr	s14, [r3]
 800fef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	fb02 f303 	mul.w	r3, r2, r3
 800ff00:	011b      	lsls	r3, r3, #4
 800ff02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff06:	4413      	add	r3, r2
 800ff08:	edd3 7a00 	vldr	s15, [r3]
 800ff0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff14:	edd3 6a01 	vldr	s13, [r3, #4]
 800ff18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff1c:	68ba      	ldr	r2, [r7, #8]
 800ff1e:	fb02 f303 	mul.w	r3, r2, r3
 800ff22:	011b      	lsls	r3, r3, #4
 800ff24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff28:	4413      	add	r3, r2
 800ff2a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ff2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff36:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800ff3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff3e:	ed93 7a00 	vldr	s14, [r3]
 800ff42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	fb02 f303 	mul.w	r3, r2, r3
 800ff4c:	011b      	lsls	r3, r3, #4
 800ff4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff52:	4413      	add	r3, r2
 800ff54:	edd3 7a01 	vldr	s15, [r3, #4]
 800ff58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff60:	edd3 6a01 	vldr	s13, [r3, #4]
 800ff64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff68:	68ba      	ldr	r2, [r7, #8]
 800ff6a:	fb02 f303 	mul.w	r3, r2, r3
 800ff6e:	011b      	lsls	r3, r3, #4
 800ff70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff74:	4413      	add	r3, r2
 800ff76:	edd3 7a00 	vldr	s15, [r3]
 800ff7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff82:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800ff86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff8a:	ed93 7a00 	vldr	s14, [r3]
 800ff8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff92:	68ba      	ldr	r2, [r7, #8]
 800ff94:	fb02 f203 	mul.w	r2, r2, r3
 800ff98:	4613      	mov	r3, r2
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	4413      	add	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffa6:	4413      	add	r3, r2
 800ffa8:	edd3 7a00 	vldr	s15, [r3]
 800ffac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ffb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffb4:	edd3 6a01 	vldr	s13, [r3, #4]
 800ffb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffbc:	68ba      	ldr	r2, [r7, #8]
 800ffbe:	fb02 f203 	mul.w	r2, r2, r3
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	005b      	lsls	r3, r3, #1
 800ffc6:	4413      	add	r3, r2
 800ffc8:	00db      	lsls	r3, r3, #3
 800ffca:	461a      	mov	r2, r3
 800ffcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffd0:	4413      	add	r3, r2
 800ffd2:	edd3 7a01 	vldr	s15, [r3, #4]
 800ffd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffde:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800ffe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffe6:	ed93 7a00 	vldr	s14, [r3]
 800ffea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	fb02 f203 	mul.w	r2, r2, r3
 800fff4:	4613      	mov	r3, r2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4413      	add	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	461a      	mov	r2, r3
 800fffe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010002:	4413      	add	r3, r2
 8010004:	edd3 7a01 	vldr	s15, [r3, #4]
 8010008:	ee27 7a27 	vmul.f32	s14, s14, s15
 801000c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010010:	edd3 6a01 	vldr	s13, [r3, #4]
 8010014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	fb02 f203 	mul.w	r2, r2, r3
 801001e:	4613      	mov	r3, r2
 8010020:	005b      	lsls	r3, r3, #1
 8010022:	4413      	add	r3, r2
 8010024:	00db      	lsls	r3, r3, #3
 8010026:	461a      	mov	r2, r3
 8010028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801002c:	4413      	add	r3, r2
 801002e:	edd3 7a00 	vldr	s15, [r3]
 8010032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801003a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 801003e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010042:	ed93 7a00 	vldr	s14, [r3]
 8010046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	fb02 f303 	mul.w	r3, r2, r3
 8010050:	015b      	lsls	r3, r3, #5
 8010052:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010056:	4413      	add	r3, r2
 8010058:	edd3 7a00 	vldr	s15, [r3]
 801005c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010064:	edd3 6a01 	vldr	s13, [r3, #4]
 8010068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	fb02 f303 	mul.w	r3, r2, r3
 8010072:	015b      	lsls	r3, r3, #5
 8010074:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010078:	4413      	add	r3, r2
 801007a:	edd3 7a01 	vldr	s15, [r3, #4]
 801007e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010086:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 801008a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801008e:	ed93 7a00 	vldr	s14, [r3]
 8010092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	fb02 f303 	mul.w	r3, r2, r3
 801009c:	015b      	lsls	r3, r3, #5
 801009e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100a2:	4413      	add	r3, r2
 80100a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80100a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80100ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80100b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	fb02 f303 	mul.w	r3, r2, r3
 80100be:	015b      	lsls	r3, r3, #5
 80100c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100c4:	4413      	add	r3, r2
 80100c6:	edd3 7a00 	vldr	s15, [r3]
 80100ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80100ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 80100d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80100da:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80100de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80100e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80100ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80100ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 80100f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80100fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80100fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010102:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8010106:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801010a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801010e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010112:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8010116:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801011a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801011e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010122:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8010126:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801012a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801012e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010132:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8010136:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801013a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801013e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010142:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8010146:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801014a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801014e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010152:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8010156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801015a:	ed93 7a00 	vldr	s14, [r3]
 801015e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8010162:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8010166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801016a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801016e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010172:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8010176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801017a:	ed93 7a01 	vldr	s14, [r3, #4]
 801017e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8010182:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8010186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801018a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801018e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010192:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8010196:	ed97 7a08 	vldr	s14, [r7, #32]
 801019a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801019e:	edd7 7a06 	vldr	s15, [r7, #24]
 80101a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101aa:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80101ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80101b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 80101be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80101c2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80101c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80101ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101d2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80101d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80101da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 80101e6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80101ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80101ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101f2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80101f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80101fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010202:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8010206:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801020a:	edd7 7a07 	vldr	s15, [r7, #28]
 801020e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010212:	eeb1 7a67 	vneg.f32	s14, s15
 8010216:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 801021a:	edd7 7a05 	vldr	s15, [r7, #20]
 801021e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010226:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 801022a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801022e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8010232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801023a:	edc3 7a00 	vstr	s15, [r3]
 801023e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8010242:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8010246:	ee77 7a67 	vsub.f32	s15, s14, s15
 801024a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801024e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8010252:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8010256:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 801025a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801025e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010262:	edc3 7a00 	vstr	s15, [r3]
 8010266:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801026a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801026e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010276:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 801027a:	ed97 7a08 	vldr	s14, [r7, #32]
 801027e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8010282:	edd7 7a04 	vldr	s15, [r7, #16]
 8010286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801028a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801028e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8010292:	edd7 7a06 	vldr	s15, [r7, #24]
 8010296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801029a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801029e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 80102a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80102a6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80102aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80102ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102b6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80102ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80102be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102c6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 80102ca:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80102ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80102d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102d6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80102da:	edd7 7a05 	vldr	s15, [r7, #20]
 80102de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80102e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102e6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 80102ea:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80102ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80102f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102f6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80102fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80102fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010306:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 801030a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801030e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8010312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801031a:	edc3 7a00 	vstr	s15, [r3]
 801031e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8010322:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8010326:	ee77 7a27 	vadd.f32	s15, s14, s15
 801032a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801032e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8010332:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8010336:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801033a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801033e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010342:	edc3 7a00 	vstr	s15, [r3]
 8010346:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801034a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801034e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010352:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010356:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 801035a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801035e:	3308      	adds	r3, #8
 8010360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010364:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010368:	3308      	adds	r3, #8
 801036a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801036e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010372:	3308      	adds	r3, #8
 8010374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801037c:	3308      	adds	r3, #8
 801037e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010386:	3308      	adds	r3, #8
 8010388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801038c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010390:	3301      	adds	r3, #1
 8010392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010396:	e550      	b.n	800fe3a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 8010398:	bf00      	nop
 801039a:	37ac      	adds	r7, #172	; 0xac
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08e      	sub	sp, #56	; 0x38
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]
 80103b0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80103b8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 80103c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c2:	00db      	lsls	r3, r3, #3
 80103c4:	4618      	mov	r0, r3
 80103c6:	f000 fe97 	bl	80110f8 <_Z9ei_mallocj>
 80103ca:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 80103cc:	2300      	movs	r3, #0
 80103ce:	637b      	str	r3, [r7, #52]	; 0x34
 80103d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	f280 80b6 	bge.w	8010546 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 80103da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103dc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80103de:	2300      	movs	r3, #0
 80103e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103e6:	429a      	cmp	r2, r3
 80103e8:	da14      	bge.n	8010414 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 80103ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	68fa      	ldr	r2, [r7, #12]
 80103f0:	18d1      	adds	r1, r2, r3
 80103f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f4:	00db      	lsls	r3, r3, #3
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	4413      	add	r3, r2
 80103fa:	460a      	mov	r2, r1
 80103fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010400:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8010404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	4413      	add	r3, r2
 801040a:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	3301      	adds	r3, #1
 8010410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010412:	e7e6      	b.n	80103e2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 8010414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010416:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8010418:	2300      	movs	r3, #0
 801041a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801041c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801041e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010420:	429a      	cmp	r2, r3
 8010422:	f280 808c 	bge.w	801053e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 8010426:	2300      	movs	r3, #0
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	4413      	add	r3, r2
 8010432:	69ba      	ldr	r2, [r7, #24]
 8010434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010438:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 801043c:	2301      	movs	r3, #1
 801043e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010444:	429a      	cmp	r2, r3
 8010446:	da72      	bge.n	801052e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 8010448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	fb02 f203 	mul.w	r2, r2, r3
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	4413      	add	r3, r2
 8010454:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8010456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	429a      	cmp	r2, r3
 801045c:	db03      	blt.n	8010466 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 801045e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	1ad3      	subs	r3, r2, r3
 8010464:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8010466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	4413      	add	r3, r2
 801046e:	ed93 7a00 	vldr	s14, [r3]
 8010472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	6a3a      	ldr	r2, [r7, #32]
 8010478:	4413      	add	r3, r2
 801047a:	edd3 7a00 	vldr	s15, [r3]
 801047e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010484:	00db      	lsls	r3, r3, #3
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	4413      	add	r3, r2
 801048a:	edd3 6a01 	vldr	s13, [r3, #4]
 801048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010490:	00db      	lsls	r3, r3, #3
 8010492:	6a3a      	ldr	r2, [r7, #32]
 8010494:	4413      	add	r3, r2
 8010496:	edd3 7a01 	vldr	s15, [r3, #4]
 801049a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801049e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104a2:	edc7 7a04 	vstr	s15, [r7, #16]
 80104a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	69ba      	ldr	r2, [r7, #24]
 80104ac:	4413      	add	r3, r2
 80104ae:	ed93 7a00 	vldr	s14, [r3]
 80104b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	6a3a      	ldr	r2, [r7, #32]
 80104b8:	4413      	add	r3, r2
 80104ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80104be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	4413      	add	r3, r2
 80104ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	00db      	lsls	r3, r3, #3
 80104d2:	6a3a      	ldr	r2, [r7, #32]
 80104d4:	4413      	add	r3, r2
 80104d6:	edd3 7a00 	vldr	s15, [r3]
 80104da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104e2:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	00db      	lsls	r3, r3, #3
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	4413      	add	r3, r2
 80104ee:	ed93 7a00 	vldr	s14, [r3]
 80104f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80104f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f8:	00db      	lsls	r3, r3, #3
 80104fa:	68fa      	ldr	r2, [r7, #12]
 80104fc:	4413      	add	r3, r2
 80104fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010502:	edc3 7a00 	vstr	s15, [r3]
 8010506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010508:	00db      	lsls	r3, r3, #3
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	4413      	add	r3, r2
 801050e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010512:	edd7 7a05 	vldr	s15, [r7, #20]
 8010516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	68fa      	ldr	r2, [r7, #12]
 801051c:	4413      	add	r3, r2
 801051e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010522:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8010526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010528:	3301      	adds	r3, #1
 801052a:	62bb      	str	r3, [r7, #40]	; 0x28
 801052c:	e788      	b.n	8010440 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 801052e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	4413      	add	r3, r2
 8010534:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8010536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010538:	3301      	adds	r3, #1
 801053a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801053c:	e76e      	b.n	801041c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 801053e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010540:	3301      	adds	r3, #1
 8010542:	637b      	str	r3, [r7, #52]	; 0x34
 8010544:	e744      	b.n	80103d0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8010546:	69b8      	ldr	r0, [r7, #24]
 8010548:	f000 fdf0 	bl	801112c <_Z7ei_freePv>
}
 801054c:	bf00      	nop
 801054e:	3738      	adds	r7, #56	; 0x38
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	; 0x28
 8010558:	af02      	add	r7, sp, #8
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
 8010560:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8010566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010568:	1d1a      	adds	r2, r3, #4
 801056a:	62ba      	str	r2, [r7, #40]	; 0x28
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8010570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010572:	1d1a      	adds	r2, r3, #4
 8010574:	62ba      	str	r2, [r7, #40]	; 0x28
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	fb02 f303 	mul.w	r3, r2, r3
 8010582:	00db      	lsls	r3, r3, #3
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	4413      	add	r3, r2
 8010588:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d11a      	bne.n	80105c6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	68ba      	ldr	r2, [r7, #8]
 8010594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010598:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	fb02 f303 	mul.w	r3, r2, r3
 80105a4:	00db      	lsls	r3, r3, #3
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	4413      	add	r3, r2
 80105aa:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	3308      	adds	r3, #8
 80105b0:	60fb      	str	r3, [r7, #12]
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	bf14      	ite	ne
 80105ba:	2301      	movne	r3, #1
 80105bc:	2300      	moveq	r3, #0
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d024      	beq.n	801060e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 80105c4:	e7e4      	b.n	8010590 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	fb02 f203 	mul.w	r2, r2, r3
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d0:	9301      	str	r3, [sp, #4]
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	9300      	str	r3, [sp, #0]
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	68b9      	ldr	r1, [r7, #8]
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f7ff ffba 	bl	8010554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	687a      	ldr	r2, [r7, #4]
 80105e4:	fb02 f303 	mul.w	r3, r2, r3
 80105e8:	00db      	lsls	r3, r3, #3
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	4413      	add	r3, r2
 80105ee:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	00db      	lsls	r3, r3, #3
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	4413      	add	r3, r2
 80105f8:	60fb      	str	r3, [r7, #12]
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	429a      	cmp	r2, r3
 8010600:	bf14      	ite	ne
 8010602:	2301      	movne	r3, #1
 8010604:	2300      	moveq	r3, #0
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d000      	beq.n	801060e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 801060c:	e7db      	b.n	80105c6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	3b02      	subs	r3, #2
 8010616:	2b03      	cmp	r3, #3
 8010618:	d826      	bhi.n	8010668 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 801061a:	a201      	add	r2, pc, #4	; (adr r2, 8010620 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 801061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010620:	08010631 	.word	0x08010631
 8010624:	0801063f 	.word	0x0801063f
 8010628:	0801064d 	.word	0x0801064d
 801062c:	0801065b 	.word	0x0801065b

    // recombine the p smaller DFTs
    switch (p) {
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010634:	6879      	ldr	r1, [r7, #4]
 8010636:	68f8      	ldr	r0, [r7, #12]
 8010638:	f7ff f808 	bl	800f64c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 801063c:	e01d      	b.n	801067a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010642:	6879      	ldr	r1, [r7, #4]
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7ff fa35 	bl	800fab4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 801064a:	e016      	b.n	801067a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010650:	6879      	ldr	r1, [r7, #4]
 8010652:	68f8      	ldr	r0, [r7, #12]
 8010654:	f7ff f877 	bl	800f746 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8010658:	e00f      	b.n	801067a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801065e:	6879      	ldr	r1, [r7, #4]
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f7ff fb97 	bl	800fd94 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8010666:	e008      	b.n	801067a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010670:	6879      	ldr	r1, [r7, #4]
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7ff fe96 	bl	80103a4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8010678:	bf00      	nop
    }
}
 801067a:	bf00      	nop
 801067c:	3720      	adds	r7, #32
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop

08010684 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b086      	sub	sp, #24
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
    int p=4;
 801068e:	2304      	movs	r3, #4
 8010690:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7ef ff60 	bl	8000558 <__aeabi_i2d>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	ec43 2b10 	vmov	d0, r2, r3
 80106a0:	f008 f816 	bl	80186d0 <sqrt>
 80106a4:	eeb0 7a40 	vmov.f32	s14, s0
 80106a8:	eef0 7a60 	vmov.f32	s15, s1
 80106ac:	eeb0 0a47 	vmov.f32	s0, s14
 80106b0:	eef0 0a67 	vmov.f32	s1, s15
 80106b4:	f007 fdb4 	bl	8018220 <floor>
 80106b8:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	fb93 f2f2 	sdiv	r2, r3, r2
 80106c4:	6979      	ldr	r1, [r7, #20]
 80106c6:	fb01 f202 	mul.w	r2, r1, r2
 80106ca:	1a9b      	subs	r3, r3, r2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01e      	beq.n	801070e <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d005      	beq.n	80106e2 <_ZL9kf_factoriPi+0x5e>
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	2b04      	cmp	r3, #4
 80106da:	d105      	bne.n	80106e8 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 80106dc:	2302      	movs	r3, #2
 80106de:	617b      	str	r3, [r7, #20]
 80106e0:	e006      	b.n	80106f0 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 80106e2:	2303      	movs	r3, #3
 80106e4:	617b      	str	r3, [r7, #20]
 80106e6:	e003      	b.n	80106f0 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	3302      	adds	r3, #2
 80106ec:	617b      	str	r3, [r7, #20]
 80106ee:	bf00      	nop
            }
            if (p > floor_sqrt)
 80106f0:	6978      	ldr	r0, [r7, #20]
 80106f2:	f7ef ff31 	bl	8000558 <__aeabi_i2d>
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80106fe:	f7f0 fa07 	bl	8000b10 <__aeabi_dcmplt>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	617b      	str	r3, [r7, #20]
        while (n % p) {
 801070c:	e7d6      	b.n	80106bc <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	fb92 f3f3 	sdiv	r3, r2, r3
 8010716:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	1d1a      	adds	r2, r3, #4
 801071c:	603a      	str	r2, [r7, #0]
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	1d1a      	adds	r2, r3, #4
 8010726:	603a      	str	r2, [r7, #0]
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b01      	cmp	r3, #1
 8010730:	dd00      	ble.n	8010734 <_ZL9kf_factoriPi+0xb0>
    do {
 8010732:	e7c3      	b.n	80106bc <_ZL9kf_factoriPi+0x38>
}
 8010734:	bf00      	nop
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	0000      	movs	r0, r0
	...

08010740 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8010740:	b5b0      	push	{r4, r5, r7, lr}
 8010742:	b090      	sub	sp, #64	; 0x40
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 801074e:	2300      	movs	r3, #0
 8010750:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d104      	bne.n	801076a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8010760:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010762:	f000 fcc9 	bl	80110f8 <_Z9ei_mallocj>
 8010766:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010768:	e00c      	b.n	8010784 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d006      	beq.n	801077e <kiss_fft_alloc+0x3e>
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010776:	429a      	cmp	r2, r3
 8010778:	d801      	bhi.n	801077e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010782:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8010784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 80a0 	beq.w	80108cc <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 801078c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8010792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d048      	beq.n	8010830 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 801079e:	2300      	movs	r3, #0
 80107a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80107a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	f280 808a 	bge.w	80108c0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80107ac:	a34e      	add	r3, pc, #312	; (adr r3, 80108e8 <kiss_fft_alloc+0x1a8>)
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 80107b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107b8:	f7ef fece 	bl	8000558 <__aeabi_i2d>
 80107bc:	a34c      	add	r3, pc, #304	; (adr r3, 80108f0 <kiss_fft_alloc+0x1b0>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	f7ef ff33 	bl	800062c <__aeabi_dmul>
 80107c6:	4602      	mov	r2, r0
 80107c8:	460b      	mov	r3, r1
 80107ca:	4614      	mov	r4, r2
 80107cc:	461d      	mov	r5, r3
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f7ef fec2 	bl	8000558 <__aeabi_i2d>
 80107d4:	4602      	mov	r2, r0
 80107d6:	460b      	mov	r3, r1
 80107d8:	4620      	mov	r0, r4
 80107da:	4629      	mov	r1, r5
 80107dc:	f7f0 f850 	bl	8000880 <__aeabi_ddiv>
 80107e0:	4602      	mov	r2, r0
 80107e2:	460b      	mov	r3, r1
 80107e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 80107e8:	ed97 0b04 	vldr	d0, [r7, #16]
 80107ec:	f007 fcc8 	bl	8018180 <cos>
 80107f0:	ec51 0b10 	vmov	r0, r1, d0
 80107f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107f6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80107fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	18d4      	adds	r4, r2, r3
 8010800:	f7f0 fa0c 	bl	8000c1c <__aeabi_d2f>
 8010804:	4603      	mov	r3, r0
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	ed97 0b04 	vldr	d0, [r7, #16]
 801080c:	f007 fe08 	bl	8018420 <sin>
 8010810:	ec51 0b10 	vmov	r0, r1, d0
 8010814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010816:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801081a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	18d4      	adds	r4, r2, r3
 8010820:	f7f0 f9fc 	bl	8000c1c <__aeabi_d2f>
 8010824:	4603      	mov	r3, r0
 8010826:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082a:	3301      	adds	r3, #1
 801082c:	63bb      	str	r3, [r7, #56]	; 0x38
 801082e:	e7b8      	b.n	80107a2 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8010830:	2300      	movs	r3, #0
 8010832:	63bb      	str	r3, [r7, #56]	; 0x38
 8010834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	429a      	cmp	r2, r3
 801083a:	da41      	bge.n	80108c0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801083c:	a32a      	add	r3, pc, #168	; (adr r3, 80108e8 <kiss_fft_alloc+0x1a8>)
 801083e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010842:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8010846:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010848:	f7ef fe86 	bl	8000558 <__aeabi_i2d>
 801084c:	a32a      	add	r3, pc, #168	; (adr r3, 80108f8 <kiss_fft_alloc+0x1b8>)
 801084e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010852:	f7ef feeb 	bl	800062c <__aeabi_dmul>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	4614      	mov	r4, r2
 801085c:	461d      	mov	r5, r3
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7ef fe7a 	bl	8000558 <__aeabi_i2d>
 8010864:	4602      	mov	r2, r0
 8010866:	460b      	mov	r3, r1
 8010868:	4620      	mov	r0, r4
 801086a:	4629      	mov	r1, r5
 801086c:	f7f0 f808 	bl	8000880 <__aeabi_ddiv>
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8010878:	ed97 0b08 	vldr	d0, [r7, #32]
 801087c:	f007 fc80 	bl	8018180 <cos>
 8010880:	ec51 0b10 	vmov	r0, r1, d0
 8010884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010886:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	00db      	lsls	r3, r3, #3
 801088e:	18d4      	adds	r4, r2, r3
 8010890:	f7f0 f9c4 	bl	8000c1c <__aeabi_d2f>
 8010894:	4603      	mov	r3, r0
 8010896:	6023      	str	r3, [r4, #0]
 8010898:	ed97 0b08 	vldr	d0, [r7, #32]
 801089c:	f007 fdc0 	bl	8018420 <sin>
 80108a0:	ec51 0b10 	vmov	r0, r1, d0
 80108a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108a6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	00db      	lsls	r3, r3, #3
 80108ae:	18d4      	adds	r4, r2, r3
 80108b0:	f7f0 f9b4 	bl	8000c1c <__aeabi_d2f>
 80108b4:	4603      	mov	r3, r0
 80108b6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	3301      	adds	r3, #1
 80108bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80108be:	e7b9      	b.n	8010834 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 80108c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c2:	3308      	adds	r3, #8
 80108c4:	4619      	mov	r1, r3
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f7ff fedc 	bl	8010684 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 80108cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d002      	beq.n	80108d8 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 80108d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108d6:	601a      	str	r2, [r3, #0]
    }

    return st;
 80108d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3740      	adds	r7, #64	; 0x40
 80108de:	46bd      	mov	sp, r7
 80108e0:	bdb0      	pop	{r4, r5, r7, pc}
 80108e2:	bf00      	nop
 80108e4:	f3af 8000 	nop.w
 80108e8:	54442d18 	.word	0x54442d18
 80108ec:	400921fb 	.word	0x400921fb
 80108f0:	54442d18 	.word	0x54442d18
 80108f4:	401921fb 	.word	0x401921fb
 80108f8:	54442d18 	.word	0x54442d18
 80108fc:	c01921fb 	.word	0xc01921fb

08010900 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af02      	add	r7, sp, #8
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	429a      	cmp	r2, r3
 8010914:	d11d      	bne.n	8010952 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	4618      	mov	r0, r3
 801091e:	f000 fbeb 	bl	80110f8 <_Z9ei_mallocj>
 8010922:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	3308      	adds	r3, #8
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	9201      	str	r2, [sp, #4]
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2201      	movs	r2, #1
 8010932:	68b9      	ldr	r1, [r7, #8]
 8010934:	6978      	ldr	r0, [r7, #20]
 8010936:	f7ff fe0d 	bl	8010554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	00db      	lsls	r3, r3, #3
 8010940:	461a      	mov	r2, r3
 8010942:	6979      	ldr	r1, [r7, #20]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f00a f9f7 	bl	801ad38 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801094a:	6978      	ldr	r0, [r7, #20]
 801094c:	f000 fbee 	bl	801112c <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8010950:	e00a      	b.n	8010968 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	3308      	adds	r3, #8
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	9201      	str	r2, [sp, #4]
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	2201      	movs	r2, #1
 8010960:	68b9      	ldr	r1, [r7, #8]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff fdf6 	bl	8010554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8010968:	bf00      	nop
 801096a:	3718      	adds	r7, #24
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801097c:	2301      	movs	r3, #1
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	68b9      	ldr	r1, [r7, #8]
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff ffbc 	bl	8010900 <kiss_fft_stride>
}
 8010988:	bf00      	nop
 801098a:	3710      	adds	r7, #16
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8010990:	b5b0      	push	{r4, r5, r7, lr}
 8010992:	b090      	sub	sp, #64	; 0x40
 8010994:	af02      	add	r7, sp, #8
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 80109a2:	2300      	movs	r3, #0
 80109a4:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 80109b0:	4885      	ldr	r0, [pc, #532]	; (8010bc8 <kiss_fftr_alloc+0x238>)
 80109b2:	f000 fa80 	bl	8010eb6 <_Z9ei_printfPKcz>
        return NULL;
 80109b6:	2300      	movs	r3, #0
 80109b8:	e0f9      	b.n	8010bae <kiss_fftr_alloc+0x21e>
    }
    nfft >>= 1;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	105b      	asrs	r3, r3, #1
 80109be:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 80109c0:	f107 0314 	add.w	r3, r7, #20
 80109c4:	2200      	movs	r2, #0
 80109c6:	9200      	str	r2, [sp, #0]
 80109c8:	2200      	movs	r2, #0
 80109ca:	68b9      	ldr	r1, [r7, #8]
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f7ff feb7 	bl	8010740 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 80109d2:	68fa      	ldr	r2, [r7, #12]
 80109d4:	4613      	mov	r3, r2
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	4413      	add	r3, r2
 80109da:	0fda      	lsrs	r2, r3, #31
 80109dc:	4413      	add	r3, r2
 80109de:	105b      	asrs	r3, r3, #1
 80109e0:	00da      	lsls	r2, r3, #3
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	4413      	add	r3, r2
 80109e6:	330c      	adds	r3, #12
 80109e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d104      	bne.n	80109fa <kiss_fftr_alloc+0x6a>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 80109f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109f2:	f000 fb81 	bl	80110f8 <_Z9ei_mallocj>
 80109f6:	6338      	str	r0, [r7, #48]	; 0x30
 80109f8:	e009      	b.n	8010a0e <kiss_fftr_alloc+0x7e>
    } else {
        if (*lenmem >= memneeded)
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d801      	bhi.n	8010a08 <kiss_fftr_alloc+0x78>
            st = (kiss_fftr_cfg) mem;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a0c:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d101      	bne.n	8010a18 <kiss_fftr_alloc+0x88>
        return NULL;
 8010a14:	2300      	movs	r3, #0
 8010a16:	e0ca      	b.n	8010bae <kiss_fftr_alloc+0x21e>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	f103 020c 	add.w	r2, r3, #12
 8010a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a20:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8010a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	441a      	add	r2, r3
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2c:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	685a      	ldr	r2, [r3, #4]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	441a      	add	r2, r3
 8010a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3a:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8010a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	f107 0314 	add.w	r3, r7, #20
 8010a44:	2100      	movs	r1, #0
 8010a46:	9100      	str	r1, [sp, #0]
 8010a48:	68b9      	ldr	r1, [r7, #8]
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f7ff fe78 	bl	8010740 <kiss_fft_alloc>

    if (inverse_fft) {
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d052      	beq.n	8010afc <kiss_fftr_alloc+0x16c>
        for (i = 0; i < nfft/2; ++i) {
 8010a56:	2300      	movs	r3, #0
 8010a58:	637b      	str	r3, [r7, #52]	; 0x34
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	0fda      	lsrs	r2, r3, #31
 8010a5e:	4413      	add	r3, r2
 8010a60:	105b      	asrs	r3, r3, #1
 8010a62:	461a      	mov	r2, r3
 8010a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a66:	4293      	cmp	r3, r2
 8010a68:	f280 809a 	bge.w	8010ba0 <kiss_fftr_alloc+0x210>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8010a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6e:	3301      	adds	r3, #1
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ef fd71 	bl	8000558 <__aeabi_i2d>
 8010a76:	4604      	mov	r4, r0
 8010a78:	460d      	mov	r5, r1
 8010a7a:	68f8      	ldr	r0, [r7, #12]
 8010a7c:	f7ef fd6c 	bl	8000558 <__aeabi_i2d>
 8010a80:	4602      	mov	r2, r0
 8010a82:	460b      	mov	r3, r1
 8010a84:	4620      	mov	r0, r4
 8010a86:	4629      	mov	r1, r5
 8010a88:	f7ef fefa 	bl	8000880 <__aeabi_ddiv>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4610      	mov	r0, r2
 8010a92:	4619      	mov	r1, r3
 8010a94:	f04f 0200 	mov.w	r2, #0
 8010a98:	4b4c      	ldr	r3, [pc, #304]	; (8010bcc <kiss_fftr_alloc+0x23c>)
 8010a9a:	f7ef fc11 	bl	80002c0 <__adddf3>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	4610      	mov	r0, r2
 8010aa4:	4619      	mov	r1, r3
            double phase =
 8010aa6:	a344      	add	r3, pc, #272	; (adr r3, 8010bb8 <kiss_fftr_alloc+0x228>)
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f7ef fdbe 	bl	800062c <__aeabi_dmul>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8010ab8:	ed97 0b06 	vldr	d0, [r7, #24]
 8010abc:	f007 fb60 	bl	8018180 <cos>
 8010ac0:	ec51 0b10 	vmov	r0, r1, d0
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac6:	689a      	ldr	r2, [r3, #8]
 8010ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	18d4      	adds	r4, r2, r3
 8010ace:	f7f0 f8a5 	bl	8000c1c <__aeabi_d2f>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	ed97 0b06 	vldr	d0, [r7, #24]
 8010ada:	f007 fca1 	bl	8018420 <sin>
 8010ade:	ec51 0b10 	vmov	r0, r1, d0
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae4:	689a      	ldr	r2, [r3, #8]
 8010ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae8:	00db      	lsls	r3, r3, #3
 8010aea:	18d4      	adds	r4, r2, r3
 8010aec:	f7f0 f896 	bl	8000c1c <__aeabi_d2f>
 8010af0:	4603      	mov	r3, r0
 8010af2:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8010af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af6:	3301      	adds	r3, #1
 8010af8:	637b      	str	r3, [r7, #52]	; 0x34
 8010afa:	e7ae      	b.n	8010a5a <kiss_fftr_alloc+0xca>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8010afc:	2300      	movs	r3, #0
 8010afe:	637b      	str	r3, [r7, #52]	; 0x34
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	0fda      	lsrs	r2, r3, #31
 8010b04:	4413      	add	r3, r2
 8010b06:	105b      	asrs	r3, r3, #1
 8010b08:	461a      	mov	r2, r3
 8010b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	da47      	bge.n	8010ba0 <kiss_fftr_alloc+0x210>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8010b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b12:	3301      	adds	r3, #1
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7ef fd1f 	bl	8000558 <__aeabi_i2d>
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	460d      	mov	r5, r1
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f7ef fd1a 	bl	8000558 <__aeabi_i2d>
 8010b24:	4602      	mov	r2, r0
 8010b26:	460b      	mov	r3, r1
 8010b28:	4620      	mov	r0, r4
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	f7ef fea8 	bl	8000880 <__aeabi_ddiv>
 8010b30:	4602      	mov	r2, r0
 8010b32:	460b      	mov	r3, r1
 8010b34:	4610      	mov	r0, r2
 8010b36:	4619      	mov	r1, r3
 8010b38:	f04f 0200 	mov.w	r2, #0
 8010b3c:	4b23      	ldr	r3, [pc, #140]	; (8010bcc <kiss_fftr_alloc+0x23c>)
 8010b3e:	f7ef fbbf 	bl	80002c0 <__adddf3>
 8010b42:	4602      	mov	r2, r0
 8010b44:	460b      	mov	r3, r1
 8010b46:	4610      	mov	r0, r2
 8010b48:	4619      	mov	r1, r3
            double phase =
 8010b4a:	a31d      	add	r3, pc, #116	; (adr r3, 8010bc0 <kiss_fftr_alloc+0x230>)
 8010b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b50:	f7ef fd6c 	bl	800062c <__aeabi_dmul>
 8010b54:	4602      	mov	r2, r0
 8010b56:	460b      	mov	r3, r1
 8010b58:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8010b5c:	ed97 0b08 	vldr	d0, [r7, #32]
 8010b60:	f007 fb0e 	bl	8018180 <cos>
 8010b64:	ec51 0b10 	vmov	r0, r1, d0
 8010b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6a:	689a      	ldr	r2, [r3, #8]
 8010b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b6e:	00db      	lsls	r3, r3, #3
 8010b70:	18d4      	adds	r4, r2, r3
 8010b72:	f7f0 f853 	bl	8000c1c <__aeabi_d2f>
 8010b76:	4603      	mov	r3, r0
 8010b78:	6023      	str	r3, [r4, #0]
 8010b7a:	ed97 0b08 	vldr	d0, [r7, #32]
 8010b7e:	f007 fc4f 	bl	8018420 <sin>
 8010b82:	ec51 0b10 	vmov	r0, r1, d0
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	689a      	ldr	r2, [r3, #8]
 8010b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	18d4      	adds	r4, r2, r3
 8010b90:	f7f0 f844 	bl	8000c1c <__aeabi_d2f>
 8010b94:	4603      	mov	r3, r0
 8010b96:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8010b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b9e:	e7af      	b.n	8010b00 <kiss_fftr_alloc+0x170>
        }
    }

    if (memallocated != NULL) {
 8010ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d002      	beq.n	8010bac <kiss_fftr_alloc+0x21c>
        *memallocated = memneeded;
 8010ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010baa:	601a      	str	r2, [r3, #0]
    }

    return st;
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3738      	adds	r7, #56	; 0x38
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	54442d18 	.word	0x54442d18
 8010bbc:	400921fb 	.word	0x400921fb
 8010bc0:	54442d18 	.word	0x54442d18
 8010bc4:	c00921fb 	.word	0xc00921fb
 8010bc8:	0801e534 	.word	0x0801e534
 8010bcc:	3fe00000 	.word	0x3fe00000

08010bd0 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b092      	sub	sp, #72	; 0x48
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8010be6:	4887      	ldr	r0, [pc, #540]	; (8010e04 <kiss_fftr+0x234>)
 8010be8:	f000 f965 	bl	8010eb6 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6818      	ldr	r0, [r3, #0]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	68b9      	ldr	r1, [r7, #8]
 8010c00:	f7ff feb6 	bl	8010970 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8010c14:	ed97 7a04 	vldr	s14, [r7, #16]
 8010c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8010c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8010c26:	ed97 7a04 	vldr	s14, [r7, #16]
 8010c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8010c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c30:	00db      	lsls	r3, r3, #3
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	4413      	add	r3, r2
 8010c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c3a:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f04f 0200 	mov.w	r2, #0
 8010c44:	605a      	str	r2, [r3, #4]
 8010c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c48:	00db      	lsls	r3, r3, #3
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	6852      	ldr	r2, [r2, #4]
 8010c52:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8010c54:	2301      	movs	r3, #1
 8010c56:	647b      	str	r3, [r7, #68]	; 0x44
 8010c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c5a:	0fda      	lsrs	r2, r3, #31
 8010c5c:	4413      	add	r3, r2
 8010c5e:	105b      	asrs	r3, r3, #1
 8010c60:	461a      	mov	r2, r3
 8010c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c64:	4293      	cmp	r3, r2
 8010c66:	f300 80c9 	bgt.w	8010dfc <kiss_fftr+0x22c>
        fpk    = st->tmpbuf[k];
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	685a      	ldr	r2, [r3, #4]
 8010c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	441a      	add	r2, r3
 8010c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c7c:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c88:	1acb      	subs	r3, r1, r3
 8010c8a:	00db      	lsls	r3, r3, #3
 8010c8c:	4413      	add	r3, r2
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	685a      	ldr	r2, [r3, #4]
 8010c96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c9a:	1acb      	subs	r3, r1, r3
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	4413      	add	r3, r2
 8010ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8010ca4:	eef1 7a67 	vneg.f32	s15, s15
 8010ca8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8010cac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010cb0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cb8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8010cbc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010cc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8010ccc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8010cd0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8010cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cd8:	edc7 7a08 	vstr	s15, [r7, #32]
 8010cdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8010ce0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8010ce4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ce8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8010cec:	ed97 7a08 	vldr	s14, [r7, #32]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	689a      	ldr	r2, [r3, #8]
 8010cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	00db      	lsls	r3, r3, #3
 8010cfe:	4413      	add	r3, r2
 8010d00:	edd3 7a00 	vldr	s15, [r3]
 8010d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d08:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d12:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010d16:	3b01      	subs	r3, #1
 8010d18:	00db      	lsls	r3, r3, #3
 8010d1a:	4413      	add	r3, r2
 8010d1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d28:	edc7 7a06 	vstr	s15, [r7, #24]
 8010d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	689a      	ldr	r2, [r3, #8]
 8010d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	00db      	lsls	r3, r3, #3
 8010d3e:	4413      	add	r3, r2
 8010d40:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	689a      	ldr	r2, [r3, #8]
 8010d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d52:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8010d56:	3b01      	subs	r3, #1
 8010d58:	00db      	lsls	r3, r3, #3
 8010d5a:	4413      	add	r3, r2
 8010d5c:	edd3 7a00 	vldr	s15, [r3]
 8010d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d68:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8010d6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8010d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	4413      	add	r3, r2
 8010d80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d88:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8010d8c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8010d90:	edd7 7a07 	vldr	s15, [r7, #28]
 8010d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d9a:	00db      	lsls	r3, r3, #3
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	4413      	add	r3, r2
 8010da0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010da8:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8010dac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8010db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8010db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dcc:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8010dd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8010dd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8010dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	4413      	add	r3, r2
 8010de8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010df0:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8010df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df6:	3301      	adds	r3, #1
 8010df8:	647b      	str	r3, [r7, #68]	; 0x44
 8010dfa:	e72d      	b.n	8010c58 <kiss_fftr+0x88>
    }
}
 8010dfc:	bf00      	nop
 8010dfe:	3748      	adds	r7, #72	; 0x48
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	0801e550 	.word	0x0801e550

08010e08 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8010e12:	ed97 0a01 	vldr	s0, [r7, #4]
 8010e16:	f007 fccd 	bl	80187b4 <log10f>
 8010e1a:	eef0 7a40 	vmov.f32	s15, s0
 8010e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8010e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2a:	b083      	sub	sp, #12
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	ed87 0b00 	vstr	d0, [r7]
 8010e32:	683c      	ldr	r4, [r7, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	461e      	mov	r6, r3
 8010e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e42:	4b10      	ldr	r3, [pc, #64]	; (8010e84 <_ZSt5isinfd+0x5c>)
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fe8a 	bl	8000b60 <__aeabi_dcmpun>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d10b      	bne.n	8010e6a <_ZSt5isinfd+0x42>
 8010e52:	f04f 32ff 	mov.w	r2, #4294967295
 8010e56:	4b0b      	ldr	r3, [pc, #44]	; (8010e84 <_ZSt5isinfd+0x5c>)
 8010e58:	4620      	mov	r0, r4
 8010e5a:	4629      	mov	r1, r5
 8010e5c:	f7ef fe62 	bl	8000b24 <__aeabi_dcmple>
 8010e60:	4603      	mov	r3, r0
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <_ZSt5isinfd+0x42>
 8010e66:	2300      	movs	r3, #0
 8010e68:	461e      	mov	r6, r3
 8010e6a:	b2f3      	uxtb	r3, r6
 8010e6c:	f083 0301 	eor.w	r3, r3, #1
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	bf14      	ite	ne
 8010e76:	2301      	movne	r3, #1
 8010e78:	2300      	moveq	r3, #0
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e84:	7fefffff 	.word	0x7fefffff

08010e88 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return HAL_GetTick();
}

uint64_t ei_read_timer_us() {
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8010e9c:	f7f6 fa4e 	bl	800733c <HAL_GetTick>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010ea6:	fb02 f303 	mul.w	r3, r2, r3
 8010eaa:	461a      	mov	r2, r3
 8010eac:	f04f 0300 	mov.w	r3, #0
}
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	bd80      	pop	{r7, pc}

08010eb6 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
 8010eb6:	b40f      	push	{r0, r1, r2, r3}
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8010ebe:	f107 0314 	add.w	r3, r7, #20
 8010ec2:	607b      	str	r3, [r7, #4]
    vprintf(format, myargs);
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	6938      	ldr	r0, [r7, #16]
 8010ec8:	f00b fa34 	bl	801c334 <viprintf>
    va_end(myargs);
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ed6:	b004      	add	sp, #16
 8010ed8:	4770      	bx	lr
 8010eda:	0000      	movs	r0, r0
 8010edc:	0000      	movs	r0, r0
	...

08010ee0 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	b08d      	sub	sp, #52	; 0x34
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 8010eea:	466b      	mov	r3, sp
 8010eec:	461e      	mov	r6, r3
    float n = f;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	627b      	str	r3, [r7, #36]	; 0x24
    char s[MAX_NUMBER_STRING_SIZE];
 8010ef2:	4b7d      	ldr	r3, [pc, #500]	; (80110e8 <_Z15ei_printf_floatf+0x208>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	1e5c      	subs	r4, r3, #1
 8010ef8:	623c      	str	r4, [r7, #32]
 8010efa:	4623      	mov	r3, r4
 8010efc:	3301      	adds	r3, #1
 8010efe:	4618      	mov	r0, r3
 8010f00:	f04f 0100 	mov.w	r1, #0
 8010f04:	f04f 0200 	mov.w	r2, #0
 8010f08:	f04f 0300 	mov.w	r3, #0
 8010f0c:	00cb      	lsls	r3, r1, #3
 8010f0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010f12:	00c2      	lsls	r2, r0, #3
 8010f14:	4623      	mov	r3, r4
 8010f16:	3301      	adds	r3, #1
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f04f 0100 	mov.w	r1, #0
 8010f1e:	f04f 0200 	mov.w	r2, #0
 8010f22:	f04f 0300 	mov.w	r3, #0
 8010f26:	00cb      	lsls	r3, r1, #3
 8010f28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010f2c:	00c2      	lsls	r2, r0, #3
 8010f2e:	4623      	mov	r3, r4
 8010f30:	3301      	adds	r3, #1
 8010f32:	3307      	adds	r3, #7
 8010f34:	08db      	lsrs	r3, r3, #3
 8010f36:	00db      	lsls	r3, r3, #3
 8010f38:	ebad 0d03 	sub.w	sp, sp, r3
 8010f3c:	466b      	mov	r3, sp
 8010f3e:	3300      	adds	r3, #0
 8010f40:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 8010f42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	d106      	bne.n	8010f5e <_Z15ei_printf_floatf+0x7e>
        strcpy(s, "0");
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	4966      	ldr	r1, [pc, #408]	; (80110ec <_Z15ei_printf_floatf+0x20c>)
 8010f54:	461a      	mov	r2, r3
 8010f56:	460b      	mov	r3, r1
 8010f58:	881b      	ldrh	r3, [r3, #0]
 8010f5a:	8013      	strh	r3, [r2, #0]
 8010f5c:	e0b6      	b.n	80110cc <_Z15ei_printf_floatf+0x1ec>
        char *c = s;
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        int neg = (n < 0);
 8010f62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	bf4c      	ite	mi
 8010f70:	2301      	movmi	r3, #1
 8010f72:	2300      	movpl	r3, #0
 8010f74:	b2db      	uxtb	r3, r3
 8010f76:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8010f78:	69bb      	ldr	r3, [r7, #24]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d005      	beq.n	8010f8a <_Z15ei_printf_floatf+0xaa>
            n = -n;
 8010f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8010f82:	eef1 7a67 	vneg.f32	s15, s15
 8010f86:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        m = log10(n);
 8010f8a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8010f8e:	f7ff ff3b 	bl	8010e08 <_ZSt5log10f>
 8010f92:	eef0 7a40 	vmov.f32	s15, s0
 8010f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f9a:	ee17 3a90 	vmov	r3, s15
 8010f9e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8010fa0:	69bb      	ldr	r3, [r7, #24]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d004      	beq.n	8010fb0 <_Z15ei_printf_floatf+0xd0>
            *(c++) = '-';
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	1c5a      	adds	r2, r3, #1
 8010faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010fac:	222d      	movs	r2, #45	; 0x2d
 8010fae:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8010fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	dc01      	bgt.n	8010fba <_Z15ei_printf_floatf+0xda>
            m = 0;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8010fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fbc:	f7ef fade 	bl	800057c <__aeabi_f2d>
 8010fc0:	4b4b      	ldr	r3, [pc, #300]	; (80110f0 <_Z15ei_printf_floatf+0x210>)
 8010fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc6:	2401      	movs	r4, #1
 8010fc8:	f7ef fdc0 	bl	8000b4c <__aeabi_dcmpgt>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d101      	bne.n	8010fd6 <_Z15ei_printf_floatf+0xf6>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	461c      	mov	r4, r3
 8010fd6:	b2e3      	uxtb	r3, r4
 8010fd8:	f083 0301 	eor.w	r3, r3, #1
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d002      	beq.n	8010fe8 <_Z15ei_printf_floatf+0x108>
 8010fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	db6e      	blt.n	80110c6 <_Z15ei_printf_floatf+0x1e6>
            double weight = pow(10.0, m);
 8010fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fea:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80110e0 <_Z15ei_printf_floatf+0x200>
 8010fee:	f000 f8a8 	bl	8011142 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8010ff2:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8010ff6:	f04f 0200 	mov.w	r2, #0
 8010ffa:	f04f 0300 	mov.w	r3, #0
 8010ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011002:	f7ef fda3 	bl	8000b4c <__aeabi_dcmpgt>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00b      	beq.n	8011024 <_Z15ei_printf_floatf+0x144>
 801100c:	ed97 0b04 	vldr	d0, [r7, #16]
 8011010:	f7ff ff0a 	bl	8010e28 <_ZSt5isinfd>
 8011014:	4603      	mov	r3, r0
 8011016:	f083 0301 	eor.w	r3, r3, #1
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b00      	cmp	r3, #0
 801101e:	d001      	beq.n	8011024 <_Z15ei_printf_floatf+0x144>
 8011020:	2301      	movs	r3, #1
 8011022:	e000      	b.n	8011026 <_Z15ei_printf_floatf+0x146>
 8011024:	2300      	movs	r3, #0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d03a      	beq.n	80110a0 <_Z15ei_printf_floatf+0x1c0>
                digit = floor(n / weight);
 801102a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801102c:	f7ef faa6 	bl	800057c <__aeabi_f2d>
 8011030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011034:	f7ef fc24 	bl	8000880 <__aeabi_ddiv>
 8011038:	4602      	mov	r2, r0
 801103a:	460b      	mov	r3, r1
 801103c:	ec43 2b17 	vmov	d7, r2, r3
 8011040:	eeb0 0a47 	vmov.f32	s0, s14
 8011044:	eef0 0a67 	vmov.f32	s1, s15
 8011048:	f007 f8ea 	bl	8018220 <floor>
 801104c:	ec53 2b10 	vmov	r2, r3, d0
 8011050:	4610      	mov	r0, r2
 8011052:	4619      	mov	r1, r3
 8011054:	f7ef fd9a 	bl	8000b8c <__aeabi_d2iz>
 8011058:	4603      	mov	r3, r0
 801105a:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 801105c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801105e:	f7ef fa8d 	bl	800057c <__aeabi_f2d>
 8011062:	4604      	mov	r4, r0
 8011064:	460d      	mov	r5, r1
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f7ef fa76 	bl	8000558 <__aeabi_i2d>
 801106c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011070:	f7ef fadc 	bl	800062c <__aeabi_dmul>
 8011074:	4602      	mov	r2, r0
 8011076:	460b      	mov	r3, r1
 8011078:	4620      	mov	r0, r4
 801107a:	4629      	mov	r1, r5
 801107c:	f7ef f91e 	bl	80002bc <__aeabi_dsub>
 8011080:	4602      	mov	r2, r0
 8011082:	460b      	mov	r3, r1
 8011084:	4610      	mov	r0, r2
 8011086:	4619      	mov	r1, r3
 8011088:	f7ef fdc8 	bl	8000c1c <__aeabi_d2f>
 801108c:	4603      	mov	r3, r0
 801108e:	627b      	str	r3, [r7, #36]	; 0x24
                *(c++) = '0' + digit;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	b2da      	uxtb	r2, r3
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011096:	1c59      	adds	r1, r3, #1
 8011098:	62f9      	str	r1, [r7, #44]	; 0x2c
 801109a:	3230      	adds	r2, #48	; 0x30
 801109c:	b2d2      	uxtb	r2, r2
 801109e:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 80110a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d10b      	bne.n	80110be <_Z15ei_printf_floatf+0x1de>
 80110a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80110aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	dd04      	ble.n	80110be <_Z15ei_printf_floatf+0x1de>
                *(c++) = '.';
 80110b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b6:	1c5a      	adds	r2, r3, #1
 80110b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80110ba:	222e      	movs	r2, #46	; 0x2e
 80110bc:	701a      	strb	r2, [r3, #0]
            m--;
 80110be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c0:	3b01      	subs	r3, #1
 80110c2:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 80110c4:	e779      	b.n	8010fba <_Z15ei_printf_floatf+0xda>
        *(c) = '\0';
 80110c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c8:	2200      	movs	r2, #0
 80110ca:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	4619      	mov	r1, r3
 80110d0:	4808      	ldr	r0, [pc, #32]	; (80110f4 <_Z15ei_printf_floatf+0x214>)
 80110d2:	f7ff fef0 	bl	8010eb6 <_Z9ei_printfPKcz>
 80110d6:	46b5      	mov	sp, r6
}
 80110d8:	bf00      	nop
 80110da:	3734      	adds	r7, #52	; 0x34
 80110dc:	46bd      	mov	sp, r7
 80110de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e0:	00000000 	.word	0x00000000
 80110e4:	40240000 	.word	0x40240000
 80110e8:	20000068 	.word	0x20000068
 80110ec:	0801e578 	.word	0x0801e578
 80110f0:	20000060 	.word	0x20000060
 80110f4:	0801e57c 	.word	0x0801e57c

080110f8 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f009 fe09 	bl	801ad18 <malloc>
 8011106:	4603      	mov	r3, r0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3708      	adds	r7, #8
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 801111a:	6839      	ldr	r1, [r7, #0]
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f009 fdb3 	bl	801ac88 <calloc>
 8011122:	4603      	mov	r3, r0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    free(ptr);
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f009 fdf7 	bl	801ad28 <free>
}
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	ed87 0b02 	vstr	d0, [r7, #8]
 801114c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ef fa02 	bl	8000558 <__aeabi_i2d>
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	ec43 2b11 	vmov	d1, r2, r3
 801115c:	ed97 0b02 	vldr	d0, [r7, #8]
 8011160:	f007 fa08 	bl	8018574 <pow>
 8011164:	eeb0 7a40 	vmov.f32	s14, s0
 8011168:	eef0 7a60 	vmov.f32	s15, s1
    }
 801116c:	eeb0 0a47 	vmov.f32	s0, s14
 8011170:	eef0 0a67 	vmov.f32	s1, s15
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	4603      	mov	r3, r0
 8011184:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8011186:	79fb      	ldrb	r3, [r7, #7]
 8011188:	2b10      	cmp	r3, #16
 801118a:	d847      	bhi.n	801121c <TfLiteTypeGetName+0xa0>
 801118c:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <TfLiteTypeGetName+0x18>)
 801118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011192:	bf00      	nop
 8011194:	080111d9 	.word	0x080111d9
 8011198:	080111dd 	.word	0x080111dd
 801119c:	080111e5 	.word	0x080111e5
 80111a0:	080111ed 	.word	0x080111ed
 80111a4:	080111f5 	.word	0x080111f5
 80111a8:	08011209 	.word	0x08011209
 80111ac:	080111fd 	.word	0x080111fd
 80111b0:	080111e1 	.word	0x080111e1
 80111b4:	08011201 	.word	0x08011201
 80111b8:	080111f1 	.word	0x080111f1
 80111bc:	0801120d 	.word	0x0801120d
 80111c0:	08011211 	.word	0x08011211
 80111c4:	08011205 	.word	0x08011205
 80111c8:	080111f9 	.word	0x080111f9
 80111cc:	08011215 	.word	0x08011215
 80111d0:	08011219 	.word	0x08011219
 80111d4:	080111e9 	.word	0x080111e9
    case kTfLiteNoType:
      return "NOTYPE";
 80111d8:	4b14      	ldr	r3, [pc, #80]	; (801122c <TfLiteTypeGetName+0xb0>)
 80111da:	e020      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80111dc:	4b14      	ldr	r3, [pc, #80]	; (8011230 <TfLiteTypeGetName+0xb4>)
 80111de:	e01e      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 80111e0:	4b14      	ldr	r3, [pc, #80]	; (8011234 <TfLiteTypeGetName+0xb8>)
 80111e2:	e01c      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 80111e4:	4b14      	ldr	r3, [pc, #80]	; (8011238 <TfLiteTypeGetName+0xbc>)
 80111e6:	e01a      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 80111e8:	4b14      	ldr	r3, [pc, #80]	; (801123c <TfLiteTypeGetName+0xc0>)
 80111ea:	e018      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 80111ec:	4b14      	ldr	r3, [pc, #80]	; (8011240 <TfLiteTypeGetName+0xc4>)
 80111ee:	e016      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80111f0:	4b14      	ldr	r3, [pc, #80]	; (8011244 <TfLiteTypeGetName+0xc8>)
 80111f2:	e014      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80111f4:	4b14      	ldr	r3, [pc, #80]	; (8011248 <TfLiteTypeGetName+0xcc>)
 80111f6:	e012      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80111f8:	4b14      	ldr	r3, [pc, #80]	; (801124c <TfLiteTypeGetName+0xd0>)
 80111fa:	e010      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80111fc:	4b14      	ldr	r3, [pc, #80]	; (8011250 <TfLiteTypeGetName+0xd4>)
 80111fe:	e00e      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8011200:	4b14      	ldr	r3, [pc, #80]	; (8011254 <TfLiteTypeGetName+0xd8>)
 8011202:	e00c      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8011204:	4b14      	ldr	r3, [pc, #80]	; (8011258 <TfLiteTypeGetName+0xdc>)
 8011206:	e00a      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 8011208:	4b14      	ldr	r3, [pc, #80]	; (801125c <TfLiteTypeGetName+0xe0>)
 801120a:	e008      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 801120c:	4b14      	ldr	r3, [pc, #80]	; (8011260 <TfLiteTypeGetName+0xe4>)
 801120e:	e006      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8011210:	4b14      	ldr	r3, [pc, #80]	; (8011264 <TfLiteTypeGetName+0xe8>)
 8011212:	e004      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 8011214:	4b14      	ldr	r3, [pc, #80]	; (8011268 <TfLiteTypeGetName+0xec>)
 8011216:	e002      	b.n	801121e <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 8011218:	4b14      	ldr	r3, [pc, #80]	; (801126c <TfLiteTypeGetName+0xf0>)
 801121a:	e000      	b.n	801121e <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 801121c:	4b14      	ldr	r3, [pc, #80]	; (8011270 <TfLiteTypeGetName+0xf4>)
}
 801121e:	4618      	mov	r0, r3
 8011220:	370c      	adds	r7, #12
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	0801e580 	.word	0x0801e580
 8011230:	0801e588 	.word	0x0801e588
 8011234:	0801e590 	.word	0x0801e590
 8011238:	0801e598 	.word	0x0801e598
 801123c:	0801e5a0 	.word	0x0801e5a0
 8011240:	0801e5a8 	.word	0x0801e5a8
 8011244:	0801e5b0 	.word	0x0801e5b0
 8011248:	0801e5b8 	.word	0x0801e5b8
 801124c:	0801e5c0 	.word	0x0801e5c0
 8011250:	0801e5c8 	.word	0x0801e5c8
 8011254:	0801e5d0 	.word	0x0801e5d0
 8011258:	0801e5dc 	.word	0x0801e5dc
 801125c:	0801e5e8 	.word	0x0801e5e8
 8011260:	0801e5f0 	.word	0x0801e5f0
 8011264:	0801e5f8 	.word	0x0801e5f8
 8011268:	0801e600 	.word	0x0801e600
 801126c:	0801e60c 	.word	0x0801e60c
 8011270:	0801e614 	.word	0x0801e614

08011274 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8011274:	b480      	push	{r7}
 8011276:	af00      	add	r7, sp, #0
 8011278:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801127c:	4618      	mov	r0, r3
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
	...

08011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8011288:	b5b0      	push	{r4, r5, r7, lr}
 801128a:	b088      	sub	sp, #32
 801128c:	af00      	add	r7, sp, #0
 801128e:	ed87 0b02 	vstr	d0, [r7, #8]
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8011296:	f04f 0200 	mov.w	r2, #0
 801129a:	f04f 0300 	mov.w	r3, #0
 801129e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80112a2:	f7ef fc2b 	bl	8000afc <__aeabi_dcmpeq>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d006      	beq.n	80112ba <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	2200      	movs	r2, #0
 80112b6:	601a      	str	r2, [r3, #0]
    return;
 80112b8:	e06b      	b.n	8011392 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80112ba:	6838      	ldr	r0, [r7, #0]
 80112bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80112c0:	f007 f82e 	bl	8018320 <frexp>
 80112c4:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 80112c8:	f04f 0200 	mov.w	r2, #0
 80112cc:	4b32      	ldr	r3, [pc, #200]	; (8011398 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80112ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80112d2:	f7ef f9ab 	bl	800062c <__aeabi_dmul>
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	ec43 2b17 	vmov	d7, r2, r3
 80112de:	eeb0 0a47 	vmov.f32	s0, s14
 80112e2:	eef0 0a67 	vmov.f32	s1, s15
 80112e6:	f000 f978 	bl	80115da <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80112ea:	ec53 2b10 	vmov	r2, r3, d0
 80112ee:	4610      	mov	r0, r2
 80112f0:	4619      	mov	r1, r3
 80112f2:	f7ef fd4b 	bl	8000d8c <__aeabi_d2lz>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 80112fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011302:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8011306:	f04f 0100 	mov.w	r1, #0
 801130a:	4290      	cmp	r0, r2
 801130c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011310:	da01      	bge.n	8011316 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8011312:	f009 fc8f 	bl	801ac34 <abort>
  if (q_fixed == (1ll << 31)) {
 8011316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801131a:	2b00      	cmp	r3, #0
 801131c:	bf08      	it	eq
 801131e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8011322:	d117      	bne.n	8011354 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8011324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011328:	0fd9      	lsrs	r1, r3, #31
 801132a:	4608      	mov	r0, r1
 801132c:	f04f 0100 	mov.w	r1, #0
 8011330:	1884      	adds	r4, r0, r2
 8011332:	eb41 0503 	adc.w	r5, r1, r3
 8011336:	f04f 0200 	mov.w	r2, #0
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	0862      	lsrs	r2, r4, #1
 8011340:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8011344:	106b      	asrs	r3, r5, #1
 8011346:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8011354:	f7ff ff8e 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 8011358:	4603      	mov	r3, r0
 801135a:	4618      	mov	r0, r3
 801135c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8011360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011364:	4290      	cmp	r0, r2
 8011366:	eb71 0303 	sbcs.w	r3, r1, r3
 801136a:	da01      	bge.n	8011370 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 801136c:	f009 fc62 	bl	801ac34 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f113 0f1f 	cmn.w	r3, #31
 8011378:	da08      	bge.n	801138c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2200      	movs	r2, #0
 801137e:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8011380:	f04f 0200 	mov.w	r2, #0
 8011384:	f04f 0300 	mov.w	r3, #0
 8011388:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 801138c:	69ba      	ldr	r2, [r7, #24]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	601a      	str	r2, [r3, #0]
}
 8011392:	3720      	adds	r7, #32
 8011394:	46bd      	mov	sp, r7
 8011396:	bdb0      	pop	{r4, r5, r7, pc}
 8011398:	41e00000 	.word	0x41e00000

0801139c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 80113aa:	f04f 0200 	mov.w	r2, #0
 80113ae:	4b0d      	ldr	r3, [pc, #52]	; (80113e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 80113b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80113b4:	f7ef fbca 	bl	8000b4c <__aeabi_dcmpgt>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d101      	bne.n	80113c2 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 80113be:	f009 fc39 	bl	801ac34 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	ed97 0b02 	vldr	d0, [r7, #8]
 80113ca:	f7ff ff5d 	bl	8011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	da01      	bge.n	80113da <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 80113d6:	f009 fc2d 	bl	801ac34 <abort>
}
 80113da:	bf00      	nop
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	3ff00000 	.word	0x3ff00000

080113e8 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fe:	f7ef fb87 	bl	8000b10 <__aeabi_dcmplt>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d001      	beq.n	801140c <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	e000      	b.n	801140e <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 801140c:	687b      	ldr	r3, [r7, #4]
    }
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
	...

08011418 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8011418:	b5b0      	push	{r4, r5, r7, lr}
 801141a:	b08e      	sub	sp, #56	; 0x38
 801141c:	af00      	add	r7, sp, #0
 801141e:	ed87 0b06 	vstr	d0, [r7, #24]
 8011422:	ed87 1b04 	vstr	d1, [r7, #16]
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 801142c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011430:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011434:	f7ef f8fa 	bl	800062c <__aeabi_dmul>
 8011438:	4602      	mov	r2, r0
 801143a:	460b      	mov	r3, r1
 801143c:	4614      	mov	r4, r2
 801143e:	461d      	mov	r5, r3
 8011440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	fa22 f303 	lsr.w	r3, r2, r3
 801144a:	4618      	mov	r0, r3
 801144c:	f7ef f884 	bl	8000558 <__aeabi_i2d>
 8011450:	4602      	mov	r2, r0
 8011452:	460b      	mov	r3, r1
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f7ef f8e8 	bl	800062c <__aeabi_dmul>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8011464:	a30e      	add	r3, pc, #56	; (adr r3, 80114a0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 801146e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011472:	f107 0320 	add.w	r3, r7, #32
 8011476:	4611      	mov	r1, r2
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff ffb5 	bl	80113e8 <_ZSt3minIdERKT_S2_S2_>
 801147e:	4603      	mov	r3, r0
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 8011488:	6879      	ldr	r1, [r7, #4]
 801148a:	68b8      	ldr	r0, [r7, #8]
 801148c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8011490:	f7ff ff84 	bl	801139c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 8011494:	bf00      	nop
 8011496:	3738      	adds	r7, #56	; 0x38
 8011498:	46bd      	mov	sp, r7
 801149a:	bdb0      	pop	{r4, r5, r7, pc}
 801149c:	f3af 8000 	nop.w
 80114a0:	ffc00000 	.word	0xffc00000
 80114a4:	41dfffff 	.word	0x41dfffff

080114a8 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 80114a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ac:	b087      	sub	sp, #28
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	60f8      	str	r0, [r7, #12]
 80114b2:	60b9      	str	r1, [r7, #8]
 80114b4:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 80114b6:	2201      	movs	r2, #1
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	fa02 f303 	lsl.w	r3, r2, r3
 80114be:	3b01      	subs	r3, #1
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ef f849 	bl	8000558 <__aeabi_i2d>
 80114c6:	4682      	mov	sl, r0
 80114c8:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	1ad1      	subs	r1, r2, r3
 80114d0:	f04f 0201 	mov.w	r2, #1
 80114d4:	f04f 0300 	mov.w	r3, #0
 80114d8:	f1a1 0620 	sub.w	r6, r1, #32
 80114dc:	f1c1 0020 	rsb	r0, r1, #32
 80114e0:	fa03 f901 	lsl.w	r9, r3, r1
 80114e4:	fa02 f606 	lsl.w	r6, r2, r6
 80114e8:	ea49 0906 	orr.w	r9, r9, r6
 80114ec:	fa22 f000 	lsr.w	r0, r2, r0
 80114f0:	ea49 0900 	orr.w	r9, r9, r0
 80114f4:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 80114f8:	4640      	mov	r0, r8
 80114fa:	4649      	mov	r1, r9
 80114fc:	f7ef f868 	bl	80005d0 <__aeabi_l2d>
 8011500:	4602      	mov	r2, r0
 8011502:	460b      	mov	r3, r1
 8011504:	4650      	mov	r0, sl
 8011506:	4659      	mov	r1, fp
 8011508:	f7ef f890 	bl	800062c <__aeabi_dmul>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	4690      	mov	r8, r2
 8011512:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 8011514:	f04f 0201 	mov.w	r2, #1
 8011518:	f04f 0300 	mov.w	r3, #0
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	f1a1 0620 	sub.w	r6, r1, #32
 8011522:	f1c1 0020 	rsb	r0, r1, #32
 8011526:	fa03 f501 	lsl.w	r5, r3, r1
 801152a:	fa02 f606 	lsl.w	r6, r2, r6
 801152e:	4335      	orrs	r5, r6
 8011530:	fa22 f000 	lsr.w	r0, r2, r0
 8011534:	4305      	orrs	r5, r0
 8011536:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 801153a:	4620      	mov	r0, r4
 801153c:	4629      	mov	r1, r5
 801153e:	f7ef f847 	bl	80005d0 <__aeabi_l2d>
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8011546:	4640      	mov	r0, r8
 8011548:	4649      	mov	r1, r9
 801154a:	f7ef f999 	bl	8000880 <__aeabi_ddiv>
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8011556:	ed97 0b04 	vldr	d0, [r7, #16]
 801155a:	f006 fe61 	bl	8018220 <floor>
 801155e:	ec53 2b10 	vmov	r2, r3, d0
 8011562:	4610      	mov	r0, r2
 8011564:	4619      	mov	r1, r3
 8011566:	f7ef fb11 	bl	8000b8c <__aeabi_d2iz>
 801156a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 801156c:	4618      	mov	r0, r3
 801156e:	371c      	adds	r7, #28
 8011570:	46bd      	mov	sp, r7
 8011572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011576 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011576:	b480      	push	{r7}
 8011578:	b083      	sub	sp, #12
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	ed93 7a00 	vldr	s14, [r3]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	edd3 7a00 	vldr	s15, [r3]
 801158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011594:	d501      	bpl.n	801159a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	e000      	b.n	801159c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 801159a:	687b      	ldr	r3, [r7, #4]
    }
 801159c:	4618      	mov	r0, r3
 801159e:	370c      	adds	r7, #12
 80115a0:	46bd      	mov	sp, r7
 80115a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a6:	4770      	bx	lr

080115a8 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	ed93 7a00 	vldr	s14, [r3]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	edd3 7a00 	vldr	s15, [r3]
 80115be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c6:	d501      	bpl.n	80115cc <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	e000      	b.n	80115ce <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80115cc:	687b      	ldr	r3, [r7, #4]
    }
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	ed87 0b00 	vstr	d0, [r7]
 80115e4:	ed97 0b00 	vldr	d0, [r7]
 80115e8:	f006 fed2 	bl	8018390 <round>
 80115ec:	eeb0 7a40 	vmov.f32	s14, s0
 80115f0:	eef0 7a60 	vmov.f32	s15, s1
 80115f4:	eeb0 0a47 	vmov.f32	s0, s14
 80115f8:	eef0 0a67 	vmov.f32	s1, s15
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8011602:	b580      	push	{r7, lr}
 8011604:	b082      	sub	sp, #8
 8011606:	af00      	add	r7, sp, #0
 8011608:	ed87 0a01 	vstr	s0, [r7, #4]
 801160c:	ed97 0a01 	vldr	s0, [r7, #4]
 8011610:	f7ef fd86 	bl	8001120 <_ZSt5roundf>
 8011614:	eef0 7a40 	vmov.f32	s15, s0
 8011618:	eeb0 0a67 	vmov.f32	s0, s15
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8011622:	b480      	push	{r7}
 8011624:	af00      	add	r7, sp, #0
 8011626:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 801162a:	4618      	mov	r0, r3
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
 8011638:	237f      	movs	r3, #127	; 0x7f
 801163a:	4618      	mov	r0, r3
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8011644:	b480      	push	{r7}
 8011646:	af00      	add	r7, sp, #0
 8011648:	2300      	movs	r3, #0
 801164a:	4618      	mov	r0, r3
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8011654:	b480      	push	{r7}
 8011656:	af00      	add	r7, sp, #0
 8011658:	23ff      	movs	r3, #255	; 0xff
 801165a:	4618      	mov	r0, r3
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	689b      	ldr	r3, [r3, #8]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 801167e:	b480      	push	{r7}
 8011680:	b083      	sub	sp, #12
 8011682:	af00      	add	r7, sp, #0
 8011684:	ed87 0b00 	vstr	d0, [r7]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	6879      	ldr	r1, [r7, #4]
 801168c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011690:	ec43 2b17 	vmov	d7, r2, r3
 8011694:	eeb0 0a47 	vmov.f32	s0, s14
 8011698:	eef0 0a67 	vmov.f32	s1, s15
 801169c:	370c      	adds	r7, #12
 801169e:	46bd      	mov	sp, r7
 80116a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a4:	4770      	bx	lr

080116a6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b082      	sub	sp, #8
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	689b      	ldr	r3, [r3, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d005      	beq.n	80116c4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	689a      	ldr	r2, [r3, #8]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	019b      	lsls	r3, r3, #6
 80116c0:	4413      	add	r3, r2
 80116c2:	e006      	b.n	80116d2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	4798      	blx	r3
 80116ce:	4603      	mov	r3, r0
 80116d0:	bf00      	nop
  }
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80116da:	b480      	push	{r7}
 80116dc:	b087      	sub	sp, #28
 80116de:	af00      	add	r7, sp, #0
 80116e0:	60f8      	str	r0, [r7, #12]
 80116e2:	60b9      	str	r1, [r7, #8]
 80116e4:	607a      	str	r2, [r7, #4]
 80116e6:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	db0f      	blt.n	801170e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	da0b      	bge.n	801170e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	683a      	ldr	r2, [r7, #0]
 80116fc:	4413      	add	r3, r2
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011708:	d001      	beq.n	801170e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	e001      	b.n	8011712 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 801170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011712:	4618      	mov	r0, r3
 8011714:	371c      	adds	r7, #28
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801171e:	b580      	push	{r7, lr}
 8011720:	b086      	sub	sp, #24
 8011722:	af00      	add	r7, sp, #0
 8011724:	60f8      	str	r0, [r7, #12]
 8011726:	60b9      	str	r1, [r7, #8]
 8011728:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 801172e:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	68f8      	ldr	r0, [r7, #12]
 801173a:	f7ff ffce 	bl	80116da <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801173e:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	2b00      	cmp	r3, #0
 8011744:	da01      	bge.n	801174a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8011746:	2300      	movs	r3, #0
 8011748:	e005      	b.n	8011756 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 801174a:	6979      	ldr	r1, [r7, #20]
 801174c:	68f8      	ldr	r0, [r7, #12]
 801174e:	f7ff ffaa 	bl	80116a6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8011752:	4603      	mov	r3, r0
 8011754:	bf00      	nop
}
 8011756:	4618      	mov	r0, r3
 8011758:	3718      	adds	r7, #24
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}

0801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 801175e:	b580      	push	{r7, lr}
 8011760:	b084      	sub	sp, #16
 8011762:	af00      	add	r7, sp, #0
 8011764:	60f8      	str	r0, [r7, #12]
 8011766:	60b9      	str	r1, [r7, #8]
 8011768:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	68b9      	ldr	r1, [r7, #8]
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7ff ffd5 	bl	801171e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8011774:	4603      	mov	r3, r0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 801177e:	b580      	push	{r7, lr}
 8011780:	b086      	sub	sp, #24
 8011782:	af00      	add	r7, sp, #0
 8011784:	60f8      	str	r0, [r7, #12]
 8011786:	60b9      	str	r1, [r7, #8]
 8011788:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 801178e:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8011796:	6879      	ldr	r1, [r7, #4]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f7ff ff9e 	bl	80116da <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 801179e:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	da01      	bge.n	80117aa <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e005      	b.n	80117b6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80117aa:	6979      	ldr	r1, [r7, #20]
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f7ff ff7a 	bl	80116a6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80117b2:	4603      	mov	r3, r0
 80117b4:	bf00      	nop
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	3718      	adds	r7, #24
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}

080117be <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80117be:	b580      	push	{r7, lr}
 80117c0:	b084      	sub	sp, #16
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	60f8      	str	r0, [r7, #12]
 80117c6:	60b9      	str	r1, [r7, #8]
 80117c8:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	68f8      	ldr	r0, [r7, #12]
 80117d0:	f7ff ffc5 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80117d4:	4603      	mov	r3, r0
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80117e0:	b5b0      	push	{r4, r5, r7, lr}
 80117e2:	b08e      	sub	sp, #56	; 0x38
 80117e4:	af02      	add	r7, sp, #8
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
 80117ec:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7ee fec2 	bl	800057c <__aeabi_f2d>
 80117f8:	4604      	mov	r4, r0
 80117fa:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	4618      	mov	r0, r3
 8011802:	f7ee febb 	bl	800057c <__aeabi_f2d>
 8011806:	4602      	mov	r2, r0
 8011808:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801180a:	4620      	mov	r0, r4
 801180c:	4629      	mov	r1, r5
 801180e:	f7ee ff0d 	bl	800062c <__aeabi_dmul>
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d04b      	beq.n	80118b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	68db      	ldr	r3, [r3, #12]
 8011824:	4618      	mov	r0, r3
 8011826:	f7ee fea9 	bl	800057c <__aeabi_f2d>
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8011832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801183a:	f7ee fd3f 	bl	80002bc <__aeabi_dsub>
 801183e:	4602      	mov	r2, r0
 8011840:	460b      	mov	r3, r1
 8011842:	ec43 2b17 	vmov	d7, r2, r3
 8011846:	eeb0 0a47 	vmov.f32	s0, s14
 801184a:	eef0 0a67 	vmov.f32	s1, s15
 801184e:	f7ff ff16 	bl	801167e <_ZSt3absd>
 8011852:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8011856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	4618      	mov	r0, r3
 801185c:	f7ee fe8e 	bl	800057c <__aeabi_f2d>
 8011860:	4602      	mov	r2, r0
 8011862:	460b      	mov	r3, r1
 8011864:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8011868:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801186c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011870:	f7ef f806 	bl	8000880 <__aeabi_ddiv>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	4610      	mov	r0, r2
 801187a:	4619      	mov	r1, r3
 801187c:	2301      	movs	r3, #1
 801187e:	461c      	mov	r4, r3
 8011880:	a318      	add	r3, pc, #96	; (adr r3, 80118e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8011882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011886:	f7ef f94d 	bl	8000b24 <__aeabi_dcmple>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8011890:	2300      	movs	r3, #0
 8011892:	461c      	mov	r4, r3
 8011894:	b2e3      	uxtb	r3, r4
 8011896:	f083 0301 	eor.w	r3, r3, #1
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d00b      	beq.n	80118b8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	695c      	ldr	r4, [r3, #20]
 80118a4:	4b0c      	ldr	r3, [pc, #48]	; (80118d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80118ac:	4a0b      	ldr	r2, [pc, #44]	; (80118dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80118ae:	490c      	ldr	r1, [pc, #48]	; (80118e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	47a0      	blx	r4
 80118b4:	2301      	movs	r3, #1
 80118b6:	e009      	b.n	80118cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 80118b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118be:	687a      	ldr	r2, [r7, #4]
 80118c0:	68b9      	ldr	r1, [r7, #8]
 80118c2:	68f8      	ldr	r0, [r7, #12]
 80118c4:	f000 f812 	bl	80118ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 80118c8:	4603      	mov	r3, r0
                                          multiplier);
 80118ca:	bf00      	nop
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3730      	adds	r7, #48	; 0x30
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bdb0      	pop	{r4, r5, r7, pc}
 80118d4:	f3af 8000 	nop.w
 80118d8:	0801e8a0 	.word	0x0801e8a0
 80118dc:	0801e684 	.word	0x0801e684
 80118e0:	0801e78c 	.word	0x0801e78c
 80118e4:	47ae147b 	.word	0x47ae147b
 80118e8:	3f947ae1 	.word	0x3f947ae1

080118ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	b089      	sub	sp, #36	; 0x24
 80118f0:	af02      	add	r7, sp, #8
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	edd3 7a03 	vldr	s15, [r3, #12]
 8011906:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801190a:	ee17 0a90 	vmov	r0, s15
 801190e:	f7ee fe35 	bl	800057c <__aeabi_f2d>
 8011912:	4602      	mov	r2, r0
 8011914:	460b      	mov	r3, r1
 8011916:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 801191a:	2301      	movs	r3, #1
 801191c:	461c      	mov	r4, r3
 801191e:	f04f 0200 	mov.w	r2, #0
 8011922:	f04f 0300 	mov.w	r3, #0
 8011926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801192a:	f7ef f905 	bl	8000b38 <__aeabi_dcmpge>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d101      	bne.n	8011938 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8011934:	2300      	movs	r3, #0
 8011936:	461c      	mov	r4, r3
 8011938:	b2e3      	uxtb	r3, r4
 801193a:	f083 0301 	eor.w	r3, r3, #1
 801193e:	b2db      	uxtb	r3, r3
 8011940:	2b00      	cmp	r3, #0
 8011942:	d00b      	beq.n	801195c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	695c      	ldr	r4, [r3, #20]
 8011948:	4b0f      	ldr	r3, [pc, #60]	; (8011988 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	f240 1351 	movw	r3, #337	; 0x151
 8011950:	4a0e      	ldr	r2, [pc, #56]	; (801198c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8011952:	490f      	ldr	r1, [pc, #60]	; (8011990 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	47a0      	blx	r4
 8011958:	2301      	movs	r3, #1
 801195a:	e010      	b.n	801197e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	4618      	mov	r0, r3
 8011962:	f7ee fe0b 	bl	800057c <__aeabi_f2d>
 8011966:	4602      	mov	r2, r0
 8011968:	460b      	mov	r3, r1
 801196a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801196e:	f7ee ff87 	bl	8000880 <__aeabi_ddiv>
 8011972:	4602      	mov	r2, r0
 8011974:	460b      	mov	r3, r1
 8011976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011978:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801197c:	2300      	movs	r3, #0
}
 801197e:	4618      	mov	r0, r3
 8011980:	371c      	adds	r7, #28
 8011982:	46bd      	mov	sp, r7
 8011984:	bd90      	pop	{r4, r7, pc}
 8011986:	bf00      	nop
 8011988:	0801e8c4 	.word	0x0801e8c4
 801198c:	0801e684 	.word	0x0801e684
 8011990:	0801e78c 	.word	0x0801e78c

08011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	ed87 0a00 	vstr	s0, [r7]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80119a6:	ed97 7a00 	vldr	s14, [r7]
 80119aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80119ae:	eeb0 0a66 	vmov.f32	s0, s13
 80119b2:	f7ff fe26 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 80119b6:	eef0 7a40 	vmov.f32	s15, s0
 80119ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119be:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80119c6:	4413      	add	r3, r2
  };
 80119c8:	4618      	mov	r0, r3
 80119ca:	3708      	adds	r7, #8
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08e      	sub	sp, #56	; 0x38
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60b9      	str	r1, [r7, #8]
 80119d8:	607a      	str	r2, [r7, #4]
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	4603      	mov	r3, r0
 80119de:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	633b      	str	r3, [r7, #48]	; 0x30
  };
 80119ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ee:	617b      	str	r3, [r7, #20]
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 80119f4:	7bfb      	ldrb	r3, [r7, #15]
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d118      	bne.n	8011a2c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 80119fa:	f107 0314 	add.w	r3, r7, #20
 80119fe:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8011af4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff ffc6 	bl	8011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	61fb      	str	r3, [r7, #28]
 8011a0c:	f107 021c 	add.w	r2, r7, #28
 8011a10:	f107 0308 	add.w	r3, r7, #8
 8011a14:	4611      	mov	r1, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 f8d6 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a22:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a28:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8011a2a:	e05f      	b.n	8011aec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8011a2c:	7bfb      	ldrb	r3, [r7, #15]
 8011a2e:	2b03      	cmp	r3, #3
 8011a30:	d129      	bne.n	8011a86 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8011a32:	f107 0314 	add.w	r3, r7, #20
 8011a36:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8011af4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7ff ffaa 	bl	8011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011a40:	4603      	mov	r3, r0
 8011a42:	623b      	str	r3, [r7, #32]
 8011a44:	f107 0220 	add.w	r2, r7, #32
 8011a48:	f107 0308 	add.w	r3, r7, #8
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 f8ba 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8011a54:	4603      	mov	r3, r0
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a5a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 8011a5c:	f107 0314 	add.w	r3, r7, #20
 8011a60:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff ff95 	bl	8011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8011a6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011a72:	1d3b      	adds	r3, r7, #4
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f000 f892 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	681a      	ldr	r2, [r3, #0]
 8011a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a82:	601a      	str	r2, [r3, #0]
}
 8011a84:	e032      	b.n	8011aec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
 8011a88:	2b02      	cmp	r3, #2
 8011a8a:	d129      	bne.n	8011ae0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 8011a8c:	f107 0314 	add.w	r3, r7, #20
 8011a90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff ff7d 	bl	8011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011aa2:	f107 0308 	add.w	r3, r7, #8
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f000 f88d 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ab4:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8011ab6:	f107 0314 	add.w	r3, r7, #20
 8011aba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff ff68 	bl	8011994 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ac8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011acc:	1d3b      	adds	r3, r7, #4
 8011ace:	4611      	mov	r1, r2
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f000 f865 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011adc:	601a      	str	r2, [r3, #0]
}
 8011ade:	e005      	b.n	8011aec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ae4:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aea:	601a      	str	r2, [r3, #0]
}
 8011aec:	bf00      	nop
 8011aee:	3738      	adds	r7, #56	; 0x38
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	00000000 	.word	0x00000000

08011af8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8011af8:	b590      	push	{r4, r7, lr}
 8011afa:	b089      	sub	sp, #36	; 0x24
 8011afc:	af02      	add	r7, sp, #8
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	607a      	str	r2, [r7, #4]
 8011b02:	603b      	str	r3, [r7, #0]
 8011b04:	460b      	mov	r3, r1
 8011b06:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d108      	bne.n	8011b2a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8011b18:	f7ff fd94 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8011b20:	f7ff fd98 	bl	8011654 <_ZNSt14numeric_limitsIhE3maxEv>
 8011b24:	4603      	mov	r3, r0
 8011b26:	613b      	str	r3, [r7, #16]
 8011b28:	e025      	b.n	8011b76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	2b09      	cmp	r3, #9
 8011b30:	d108      	bne.n	8011b44 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8011b32:	f7ff fd76 	bl	8011622 <_ZNSt14numeric_limitsIaE3minEv>
 8011b36:	4603      	mov	r3, r0
 8011b38:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8011b3a:	f7ff fd7b 	bl	8011634 <_ZNSt14numeric_limitsIaE3maxEv>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	613b      	str	r3, [r7, #16]
 8011b42:	e018      	b.n	8011b76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	2b07      	cmp	r3, #7
 8011b4a:	d108      	bne.n	8011b5e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8011b4c:	f7ef fbc4 	bl	80012d8 <_ZNSt14numeric_limitsIsE3minEv>
 8011b50:	4603      	mov	r3, r0
 8011b52:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8011b54:	f7ef fbca 	bl	80012ec <_ZNSt14numeric_limitsIsE3maxEv>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	613b      	str	r3, [r7, #16]
 8011b5c:	e00b      	b.n	8011b76 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	695c      	ldr	r4, [r3, #20]
 8011b62:	4b0c      	ldr	r3, [pc, #48]	; (8011b94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	f44f 73c2 	mov.w	r3, #388	; 0x184
 8011b6a:	4a0b      	ldr	r2, [pc, #44]	; (8011b98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 8011b6c:	490b      	ldr	r1, [pc, #44]	; (8011b9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	47a0      	blx	r4
 8011b72:	2301      	movs	r3, #1
 8011b74:	e00a      	b.n	8011b8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8011b76:	7af8      	ldrb	r0, [r7, #11]
 8011b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	6979      	ldr	r1, [r7, #20]
 8011b86:	f7ff ff23 	bl	80119d0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	371c      	adds	r7, #28
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd90      	pop	{r4, r7, pc}
 8011b94:	0801e8e0 	.word	0x0801e8e0
 8011b98:	0801e684 	.word	0x0801e684
 8011b9c:	0801e78c 	.word	0x0801e78c

08011ba0 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011ba0:	b480      	push	{r7}
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	da01      	bge.n	8011bba <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	e000      	b.n	8011bbc <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8011bba:	687b      	ldr	r3, [r7, #4]
    }
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	da01      	bge.n	8011be2 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	e000      	b.n	8011be4 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8011be2:	687b      	ldr	r3, [r7, #4]
    }
 8011be4:	4618      	mov	r0, r3
 8011be6:	370c      	adds	r7, #12
 8011be8:	46bd      	mov	sp, r7
 8011bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bee:	4770      	bx	lr

08011bf0 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	601a      	str	r2, [r3, #0]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4618      	mov	r0, r3
 8011c02:	370c      	adds	r7, #12
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr

08011c0c <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	68b9      	ldr	r1, [r7, #8]
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f000 f866 	bl	8011cf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3710      	adds	r7, #16
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b082      	sub	sp, #8
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2b05      	cmp	r3, #5
 8011c40:	dd08      	ble.n	8011c54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d004      	beq.n	8011c54 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f006 fa70 	bl	8018134 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	4618      	mov	r0, r3
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8011c5e:	b480      	push	{r7}
 8011c60:	b083      	sub	sp, #12
 8011c62:	af00      	add	r7, sp, #0
 8011c64:	6078      	str	r0, [r7, #4]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	370c      	adds	r7, #12
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c74:	4770      	bx	lr

08011c76 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8011c76:	b480      	push	{r7}
 8011c78:	b083      	sub	sp, #12
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2b05      	cmp	r3, #5
 8011c84:	dd02      	ble.n	8011c8c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	e001      	b.n	8011c90 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	3304      	adds	r3, #4
  }
 8011c90:	4618      	mov	r0, r3
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr

08011c9c <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2b05      	cmp	r3, #5
 8011cac:	dd08      	ble.n	8011cc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d004      	beq.n	8011cc0 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f006 fa3a 	bl	8018134 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	683a      	ldr	r2, [r7, #0]
 8011cc4:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	2b05      	cmp	r3, #5
 8011cca:	dd0f      	ble.n	8011cec <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d201      	bcs.n	8011cda <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	e001      	b.n	8011cde <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8011cda:	f04f 33ff 	mov.w	r3, #4294967295
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f006 fa3b 	bl	801815a <_Znaj>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8011cec:	bf00      	nop
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7ff ffca 	bl	8011c9c <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8011d08:	68f8      	ldr	r0, [r7, #12]
 8011d0a:	f7ff ffb4 	bl	8011c76 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8011d0e:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	461a      	mov	r2, r3
 8011d16:	6879      	ldr	r1, [r7, #4]
 8011d18:	6978      	ldr	r0, [r7, #20]
 8011d1a:	f009 f80d 	bl	801ad38 <memcpy>
  }
 8011d1e:	bf00      	nop
 8011d20:	3718      	adds	r7, #24
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b086      	sub	sp, #24
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
 8011d2e:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d103      	bne.n	8011d3e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff ff5a 	bl	8011bf0 <_ZN6tflite12RuntimeShapeC1Ev>
 8011d3c:	e00d      	b.n	8011d5a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	689b      	ldr	r3, [r3, #8]
 8011d42:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8011d50:	68fa      	ldr	r2, [r7, #12]
 8011d52:	6939      	ldr	r1, [r7, #16]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ff59 	bl	8011c0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8011d62:	b480      	push	{r7}
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 8011d74:	b480      	push	{r7}
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8011d7c:	ee07 3a90 	vmov	s15, r3
 8011d80:	eeb0 0a67 	vmov.f32	s0, s15
 8011d84:	46bd      	mov	sp, r7
 8011d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8a:	4770      	bx	lr

08011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8011d8c:	b5b0      	push	{r4, r5, r7, lr}
 8011d8e:	b08c      	sub	sp, #48	; 0x30
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d107      	bne.n	8011dae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8011d9e:	f7ff ffe0 	bl	8011d62 <_ZNSt14numeric_limitsIlE3minEv>
 8011da2:	4602      	mov	r2, r0
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d101      	bne.n	8011dae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 8011daa:	2301      	movs	r3, #1
 8011dac:	e000      	b.n	8011db0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8011dae:	2300      	movs	r3, #0
 8011db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	461a      	mov	r2, r3
 8011db8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8011dbc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8011dc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	69ba      	ldr	r2, [r7, #24]
 8011dd0:	fb02 f203 	mul.w	r2, r2, r3
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	6a39      	ldr	r1, [r7, #32]
 8011dd8:	fb01 f303 	mul.w	r3, r1, r3
 8011ddc:	18d1      	adds	r1, r2, r3
 8011dde:	6a3a      	ldr	r2, [r7, #32]
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	fba2 2303 	umull	r2, r3, r2, r3
 8011de6:	4419      	add	r1, r3
 8011de8:	460b      	mov	r3, r1
 8011dea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8011dee:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8011df2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011df6:	2a00      	cmp	r2, #0
 8011df8:	f173 0300 	sbcs.w	r3, r3, #0
 8011dfc:	db02      	blt.n	8011e04 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8011dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e02:	e000      	b.n	8011e06 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 8011e04:	4b18      	ldr	r3, [pc, #96]	; (8011e68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8011e06:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8011e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011e14:	1884      	adds	r4, r0, r2
 8011e16:	eb41 0503 	adc.w	r5, r1, r3
 8011e1a:	4622      	mov	r2, r4
 8011e1c:	462b      	mov	r3, r5
 8011e1e:	2a00      	cmp	r2, #0
 8011e20:	f173 0100 	sbcs.w	r1, r3, #0
 8011e24:	da06      	bge.n	8011e34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8011e26:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011e2a:	f04f 0100 	mov.w	r1, #0
 8011e2e:	1812      	adds	r2, r2, r0
 8011e30:	eb41 0303 	adc.w	r3, r1, r3
 8011e34:	f04f 0000 	mov.w	r0, #0
 8011e38:	f04f 0100 	mov.w	r1, #0
 8011e3c:	0fd0      	lsrs	r0, r2, #31
 8011e3e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011e42:	17d9      	asrs	r1, r3, #31
 8011e44:	4602      	mov	r2, r0
 8011e46:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 8011e48:	4613      	mov	r3, r2
 8011e4a:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8011e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d003      	beq.n	8011e5c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8011e54:	f7ff fa0e 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	e000      	b.n	8011e5e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 8011e5c:	68bb      	ldr	r3, [r7, #8]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3730      	adds	r7, #48	; 0x30
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bdb0      	pop	{r4, r5, r7, pc}
 8011e66:	bf00      	nop
 8011e68:	c0000001 	.word	0xc0000001

08011e6c <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	da01      	bge.n	8011e80 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8011e7c:	f008 feda 	bl	801ac34 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	683a      	ldr	r2, [r7, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	db01      	blt.n	8011e8e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8011e8a:	f008 fed3 	bl	801ac34 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2b05      	cmp	r3, #5
 8011e94:	dd06      	ble.n	8011ea4 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	685a      	ldr	r2, [r3, #4]
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	4413      	add	r3, r2
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	e004      	b.n	8011eae <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	009b      	lsls	r3, r3, #2
 8011eaa:	4413      	add	r3, r2
 8011eac:	685b      	ldr	r3, [r3, #4]
  }
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}

08011eb6 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8011eb6:	b480      	push	{r7}
 8011eb8:	b083      	sub	sp, #12
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b05      	cmp	r3, #5
 8011ec4:	dd02      	ble.n	8011ecc <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	e001      	b.n	8011ed0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	3304      	adds	r3, #4
  }
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7ff ffe4 	bl	8011eb6 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8011eee:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	613b      	str	r3, [r7, #16]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	693a      	ldr	r2, [r7, #16]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	da0c      	bge.n	8011f18 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	4413      	add	r3, r2
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	fb02 f303 	mul.w	r3, r2, r3
 8011f0e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	3301      	adds	r3, #1
 8011f14:	613b      	str	r3, [r7, #16]
 8011f16:	e7ed      	b.n	8011ef4 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8011f18:	697b      	ldr	r3, [r7, #20]
  }
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3718      	adds	r7, #24
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8011f22:	b590      	push	{r4, r7, lr}
 8011f24:	b085      	sub	sp, #20
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f7ff fe96 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011f32:	4604      	mov	r4, r0
 8011f34:	6838      	ldr	r0, [r7, #0]
 8011f36:	f7ff fe92 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	429c      	cmp	r4, r3
 8011f3e:	d001      	beq.n	8011f44 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8011f40:	f008 fe78 	bl	801ac34 <abort>
  const int dims_count = shape.DimensionsCount();
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff fe8a 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011f4a:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	60fb      	str	r3, [r7, #12]
 8011f50:	68fa      	ldr	r2, [r7, #12]
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	da11      	bge.n	8011f7c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8011f58:	68f9      	ldr	r1, [r7, #12]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7ff ff86 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8011f60:	4604      	mov	r4, r0
 8011f62:	68f9      	ldr	r1, [r7, #12]
 8011f64:	6838      	ldr	r0, [r7, #0]
 8011f66:	f7ff ff81 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	429c      	cmp	r4, r3
 8011f6e:	d001      	beq.n	8011f74 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8011f70:	f008 fe60 	bl	801ac34 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	3301      	adds	r3, #1
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	e7e9      	b.n	8011f50 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7ff ffad 	bl	8011edc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8011f82:	4603      	mov	r3, r0
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3714      	adds	r7, #20
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}

08011f8c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011f9e:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	dc02      	bgt.n	8011fac <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	425b      	negs	r3, r3
 8011faa:	e000      	b.n	8011fae <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8011fac:	2300      	movs	r3, #0
 8011fae:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb8:	68b9      	ldr	r1, [r7, #8]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff fee6 	bl	8011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	6939      	ldr	r1, [r7, #16]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f000 fb4b 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8011fca:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8011fe6:	f008 fe25 	bl	801ac34 <abort>
  TFLITE_DCHECK(node != nullptr);
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8011ff0:	f008 fe20 	bl	801ac34 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	6819      	ldr	r1, [r3, #0]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	440b      	add	r3, r1
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	4619      	mov	r1, r3
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	4790      	blx	r2
 801200a:	4603      	mov	r3, r0
}
 801200c:	4618      	mov	r0, r3
 801200e:	3710      	adds	r7, #16
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	68b9      	ldr	r1, [r7, #8]
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7ff ffd5 	bl	8011fd4 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801202a:	4603      	mov	r3, r0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d101      	bne.n	801204a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8012046:	f008 fdf5 	bl	801ac34 <abort>
  TFLITE_DCHECK(node != nullptr);
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8012050:	f008 fdf0 	bl	801ac34 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	6859      	ldr	r1, [r3, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	440b      	add	r3, r1
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	4619      	mov	r1, r3
 8012066:	68f8      	ldr	r0, [r7, #12]
 8012068:	4790      	blx	r2
 801206a:	4603      	mov	r3, r0
}
 801206c:	4618      	mov	r0, r3
 801206e:	3710      	adds	r7, #16
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8012074:	b580      	push	{r7, lr}
 8012076:	b08a      	sub	sp, #40	; 0x28
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
 8012080:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f7ff ff4c 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 801208a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 801208c:	2300      	movs	r3, #0
 801208e:	627b      	str	r3, [r7, #36]	; 0x24
 8012090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	429a      	cmp	r2, r3
 8012096:	da1d      	bge.n	80120d4 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8012098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	68ba      	ldr	r2, [r7, #8]
 801209e:	4413      	add	r3, r2
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 80120a4:	f04f 0300 	mov.w	r3, #0
 80120a8:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 80120aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80120ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80120b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b6:	d501      	bpl.n	80120bc <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	e000      	b.n	80120be <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 80120c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	683a      	ldr	r2, [r7, #0]
 80120c6:	4413      	add	r3, r2
 80120c8:	697a      	ldr	r2, [r7, #20]
 80120ca:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	3301      	adds	r3, #1
 80120d0:	627b      	str	r3, [r7, #36]	; 0x24
 80120d2:	e7dd      	b.n	8012090 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 80120d4:	bf00      	nop
 80120d6:	3728      	adds	r7, #40	; 0x28
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08a      	sub	sp, #40	; 0x28
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
 80120e8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 80120ea:	6879      	ldr	r1, [r7, #4]
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f7ff ff18 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 80120f2:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 80120f4:	2300      	movs	r3, #0
 80120f6:	627b      	str	r3, [r7, #36]	; 0x24
 80120f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	da2a      	bge.n	8012156 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	4413      	add	r3, r2
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 801210c:	4b14      	ldr	r3, [pc, #80]	; (8012160 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 801210e:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8012110:	f04f 0300 	mov.w	r3, #0
 8012114:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8012116:	edd7 7a07 	vldr	s15, [r7, #28]
 801211a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 801211e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012126:	dd01      	ble.n	801212c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	e009      	b.n	8012140 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801212c:	edd7 7a07 	vldr	s15, [r7, #28]
 8012130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012138:	d501      	bpl.n	801213e <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	e000      	b.n	8012140 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8012142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	683a      	ldr	r2, [r7, #0]
 8012148:	4413      	add	r3, r2
 801214a:	693a      	ldr	r2, [r7, #16]
 801214c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 801214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012150:	3301      	adds	r3, #1
 8012152:	627b      	str	r3, [r7, #36]	; 0x24
 8012154:	e7d0      	b.n	80120f8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8012156:	bf00      	nop
 8012158:	3728      	adds	r7, #40	; 0x28
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	40c00000 	.word	0x40c00000

08012164 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	60f8      	str	r0, [r7, #12]
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	d101      	bne.n	801217c <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8012178:	f008 fd5c 	bl	801ac34 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012180:	211c      	movs	r1, #28
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	4798      	blx	r3
 8012186:	4603      	mov	r3, r0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8012190:	b590      	push	{r4, r7, lr}
 8012192:	b089      	sub	sp, #36	; 0x24
 8012194:	af02      	add	r7, sp, #8
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d101      	bne.n	80121a6 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80121a2:	f008 fd47 	bl	801ac34 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	691b      	ldr	r3, [r3, #16]
 80121aa:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80121ac:	2200      	movs	r2, #0
 80121ae:	6839      	ldr	r1, [r7, #0]
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7ff fad4 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80121b6:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d10a      	bne.n	80121d4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	695c      	ldr	r4, [r3, #20]
 80121c2:	4b1a      	ldr	r3, [pc, #104]	; (801222c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	238e      	movs	r3, #142	; 0x8e
 80121c8:	4a19      	ldr	r2, [pc, #100]	; (8012230 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80121ca:	491a      	ldr	r1, [pc, #104]	; (8012234 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	47a0      	blx	r4
 80121d0:	2301      	movs	r3, #1
 80121d2:	e027      	b.n	8012224 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80121d4:	2200      	movs	r2, #0
 80121d6:	6839      	ldr	r1, [r7, #0]
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f7ff fad0 	bl	801177e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80121de:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10a      	bne.n	80121fc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	695c      	ldr	r4, [r3, #20]
 80121ea:	4b13      	ldr	r3, [pc, #76]	; (8012238 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	2390      	movs	r3, #144	; 0x90
 80121f0:	4a0f      	ldr	r2, [pc, #60]	; (8012230 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 80121f2:	4910      	ldr	r1, [pc, #64]	; (8012234 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	47a0      	blx	r4
 80121f8:	2301      	movs	r3, #1
 80121fa:	e013      	b.n	8012224 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b09      	cmp	r3, #9
 8012202:	d105      	bne.n	8012210 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 8012204:	697a      	ldr	r2, [r7, #20]
 8012206:	68f9      	ldr	r1, [r7, #12]
 8012208:	6938      	ldr	r0, [r7, #16]
 801220a:	f000 fa9d 	bl	8012748 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 801220e:	e008      	b.n	8012222 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	2b03      	cmp	r3, #3
 8012216:	d104      	bne.n	8012222 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	68f9      	ldr	r1, [r7, #12]
 801221c:	6938      	ldr	r0, [r7, #16]
 801221e:	f000 fb35 	bl	801288c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	371c      	adds	r7, #28
 8012228:	46bd      	mov	sp, r7
 801222a:	bd90      	pop	{r4, r7, pc}
 801222c:	0801ea10 	.word	0x0801ea10
 8012230:	0801e960 	.word	0x0801e960
 8012234:	0801e9f8 	.word	0x0801e9f8
 8012238:	0801ea24 	.word	0x0801ea24

0801223c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 801223c:	b590      	push	{r4, r7, lr}
 801223e:	b0ad      	sub	sp, #180	; 0xb4
 8012240:	af02      	add	r7, sp, #8
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	691b      	ldr	r3, [r3, #16]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 801224e:	f008 fcf1 	bl	801ac34 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 801225a:	2200      	movs	r2, #0
 801225c:	6839      	ldr	r1, [r7, #0]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7ff fed8 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012264:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8012268:	2200      	movs	r2, #0
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ff fee1 	bl	8012034 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012272:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8012276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801227a:	7a1b      	ldrb	r3, [r3, #8]
 801227c:	2b09      	cmp	r3, #9
 801227e:	d032      	beq.n	80122e6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8012280:	2b09      	cmp	r3, #9
 8012282:	f300 808c 	bgt.w	801239e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 8012286:	2b01      	cmp	r3, #1
 8012288:	d002      	beq.n	8012290 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 801228a:	2b03      	cmp	r3, #3
 801228c:	d059      	beq.n	8012342 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 801228e:	e086      	b.n	801239e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8012290:	f107 030c 	add.w	r3, r7, #12
 8012294:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012298:	4618      	mov	r0, r3
 801229a:	f002 f8d8 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801229e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80122a2:	f000 fb95 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80122a6:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 80122a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80122b0:	4618      	mov	r0, r3
 80122b2:	f002 f8cc 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80122b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80122ba:	f000 fb98 	bl	80129ee <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80122be:	4603      	mov	r3, r0
 80122c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80122c4:	f107 000c 	add.w	r0, r7, #12
 80122c8:	4621      	mov	r1, r4
 80122ca:	f7ff fed3 	bl	8012074 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 80122ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff fcad 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 80122d8:	f107 030c 	add.w	r3, r7, #12
 80122dc:	4618      	mov	r0, r3
 80122de:	f7ff fca8 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 80122e2:	2300      	movs	r3, #0
 80122e4:	e069      	b.n	80123ba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 80122e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80122ea:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80122ee:	4618      	mov	r0, r3
 80122f0:	f002 f8ad 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 80122f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80122f8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80122fc:	4618      	mov	r0, r3
 80122fe:	f002 f8a6 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012302:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012306:	f000 fb83 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801230a:	4604      	mov	r4, r0
 801230c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012310:	f000 fb8d 	bl	8012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012314:	4603      	mov	r3, r0
 8012316:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801231a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4623      	mov	r3, r4
 8012322:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8012326:	f000 fb93 	bl	8012a50 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 801232a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801232e:	4618      	mov	r0, r3
 8012330:	f7ff fc7f 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8012334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff fc7a 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 801233e:	2300      	movs	r3, #0
 8012340:	e03b      	b.n	80123ba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8012342:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012346:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801234a:	4618      	mov	r0, r3
 801234c:	f002 f87f 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8012350:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012354:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012358:	4618      	mov	r0, r3
 801235a:	f002 f878 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 801235e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012362:	f000 fbc1 	bl	8012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8012366:	4604      	mov	r4, r0
 8012368:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801236c:	f000 fbcb 	bl	8012b06 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012370:	4603      	mov	r3, r0
 8012372:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012376:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	4623      	mov	r3, r4
 801237e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8012382:	f000 fbd1 	bl	8012b28 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 8012386:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff fc51 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8012390:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff fc4c 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 801239a:	2300      	movs	r3, #0
 801239c:	e00d      	b.n	80123ba <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	695c      	ldr	r4, [r3, #20]
 80123a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80123a6:	7a1b      	ldrb	r3, [r3, #8]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fe fee7 	bl	801117c <TfLiteTypeGetName>
 80123ae:	4603      	mov	r3, r0
 80123b0:	461a      	mov	r2, r3
 80123b2:	4904      	ldr	r1, [pc, #16]	; (80123c4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 80123b8:	2301      	movs	r3, #1
    }
  }
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	37ac      	adds	r7, #172	; 0xac
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd90      	pop	{r4, r7, pc}
 80123c2:	bf00      	nop
 80123c4:	0801ea38 	.word	0x0801ea38

080123c8 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d101      	bne.n	80123e0 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 80123dc:	f008 fc2a 	bl	801ac34 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123e4:	2104      	movs	r1, #4
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	4798      	blx	r3
 80123ea:	4603      	mov	r3, r0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3710      	adds	r7, #16
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 80123f4:	b590      	push	{r4, r7, lr}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af02      	add	r7, sp, #8
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	691b      	ldr	r3, [r3, #16]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d101      	bne.n	801240a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012406:	f008 fc15 	bl	801ac34 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012410:	2200      	movs	r2, #0
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7ff f9a2 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801241a:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10a      	bne.n	8012438 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	695c      	ldr	r4, [r3, #20]
 8012426:	4b20      	ldr	r3, [pc, #128]	; (80124a8 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	23cd      	movs	r3, #205	; 0xcd
 801242c:	4a1f      	ldr	r2, [pc, #124]	; (80124ac <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 801242e:	4920      	ldr	r1, [pc, #128]	; (80124b0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	47a0      	blx	r4
 8012434:	2301      	movs	r3, #1
 8012436:	e033      	b.n	80124a0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b09      	cmp	r3, #9
 801243e:	d115      	bne.n	801246c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 801244a:	4618      	mov	r0, r3
 801244c:	eef0 0a67 	vmov.f32	s1, s15
 8012450:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8012454:	f000 fbb3 	bl	8012bbe <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 8012458:	4603      	mov	r3, r0
 801245a:	461a      	mov	r2, r3
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	691b      	ldr	r3, [r3, #16]
 8012464:	b25a      	sxtb	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	705a      	strb	r2, [r3, #1]
 801246a:	e018      	b.n	801249e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	2b03      	cmp	r3, #3
 8012472:	d114      	bne.n	801249e <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 801247e:	4618      	mov	r0, r3
 8012480:	eef0 0a67 	vmov.f32	s1, s15
 8012484:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8012488:	f000 fbe8 	bl	8012c5c <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 801248c:	4603      	mov	r3, r0
 801248e:	461a      	mov	r2, r3
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	691b      	ldr	r3, [r3, #16]
 8012498:	b2da      	uxtb	r2, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3714      	adds	r7, #20
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd90      	pop	{r4, r7, pc}
 80124a8:	0801ea10 	.word	0x0801ea10
 80124ac:	0801e960 	.word	0x0801e960
 80124b0:	0801e9f8 	.word	0x0801e9f8

080124b4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 80124b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124b6:	b0ad      	sub	sp, #180	; 0xb4
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	691b      	ldr	r3, [r3, #16]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d101      	bne.n	80124ca <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80124c6:	f008 fbb5 	bl	801ac34 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	691b      	ldr	r3, [r3, #16]
 80124ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 80124d2:	2200      	movs	r2, #0
 80124d4:	6839      	ldr	r1, [r7, #0]
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7ff fd9c 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80124dc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 80124e0:	2200      	movs	r2, #0
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff fda5 	bl	8012034 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80124ea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 80124ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80124f2:	7a1b      	ldrb	r3, [r3, #8]
 80124f4:	2b09      	cmp	r3, #9
 80124f6:	d032      	beq.n	801255e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80124f8:	2b09      	cmp	r3, #9
 80124fa:	f300 809c 	bgt.w	8012636 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d002      	beq.n	8012508 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 8012502:	2b03      	cmp	r3, #3
 8012504:	d062      	beq.n	80125cc <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 8012506:	e096      	b.n	8012636 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012508:	f107 030c 	add.w	r3, r7, #12
 801250c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012510:	4618      	mov	r0, r3
 8012512:	f001 ff9c 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012516:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801251a:	f000 fa59 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801251e:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 8012520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012524:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012528:	4618      	mov	r0, r3
 801252a:	f001 ff90 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 801252e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012532:	f000 fa5c 	bl	80129ee <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8012536:	4603      	mov	r3, r0
 8012538:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801253c:	f107 000c 	add.w	r0, r7, #12
 8012540:	4621      	mov	r1, r4
 8012542:	f7ff fdcb 	bl	80120dc <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 8012546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff fb71 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 8012550:	f107 030c 	add.w	r3, r7, #12
 8012554:	4618      	mov	r0, r3
 8012556:	f7ff fb6c 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 801255a:	2300      	movs	r3, #0
 801255c:	e079      	b.n	8012652 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801255e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012562:	f993 4001 	ldrsb.w	r4, [r3, #1]
 8012566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801256a:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 801256e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012572:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8012576:	4618      	mov	r0, r3
 8012578:	f001 ff69 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 801257c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8012580:	f000 fa46 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012584:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 8012586:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801258a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801258e:	4618      	mov	r0, r3
 8012590:	f001 ff5d 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 8012594:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012598:	f000 fa49 	bl	8012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801259c:	4603      	mov	r3, r0
 801259e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80125a2:	9301      	str	r3, [sp, #4]
 80125a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	4633      	mov	r3, r6
 80125ac:	4629      	mov	r1, r5
 80125ae:	4620      	mov	r0, r4
 80125b0:	f000 fba3 	bl	8012cfa <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 80125b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fb3a 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 80125be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7ff fb35 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 80125c8:	2300      	movs	r3, #0
 80125ca:	e042      	b.n	8012652 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80125cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80125d0:	78dc      	ldrb	r4, [r3, #3]
 80125d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80125d6:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 80125d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80125dc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80125e0:	4618      	mov	r0, r3
 80125e2:	f001 ff34 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80125e6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80125ea:	f000 fa7d 	bl	8012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80125ee:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 80125f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80125f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80125f8:	4618      	mov	r0, r3
 80125fa:	f001 ff28 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 80125fe:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8012602:	f000 fa80 	bl	8012b06 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012606:	4603      	mov	r3, r0
 8012608:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801260c:	9301      	str	r3, [sp, #4]
 801260e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	4633      	mov	r3, r6
 8012616:	4629      	mov	r1, r5
 8012618:	4620      	mov	r0, r4
 801261a:	f000 fbad 	bl	8012d78 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 801261e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012622:	4618      	mov	r0, r3
 8012624:	f7ff fb05 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 8012628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff fb00 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 8012632:	2300      	movs	r3, #0
 8012634:	e00d      	b.n	8012652 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	695c      	ldr	r4, [r3, #20]
 801263a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801263e:	7a1b      	ldrb	r3, [r3, #8]
 8012640:	4618      	mov	r0, r3
 8012642:	f7fe fd9b 	bl	801117c <TfLiteTypeGetName>
 8012646:	4603      	mov	r3, r0
 8012648:	461a      	mov	r2, r3
 801264a:	4904      	ldr	r1, [pc, #16]	; (801265c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012650:	2301      	movs	r3, #1
    }
  }
}
 8012652:	4618      	mov	r0, r3
 8012654:	37ac      	adds	r7, #172	; 0xac
 8012656:	46bd      	mov	sp, r7
 8012658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801265a:	bf00      	nop
 801265c:	0801ea38 	.word	0x0801ea38

08012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8012660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012662:	b089      	sub	sp, #36	; 0x24
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 801266a:	6839      	ldr	r1, [r7, #0]
 801266c:	2900      	cmp	r1, #0
 801266e:	da06      	bge.n	801267e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8012670:	4b31      	ldr	r3, [pc, #196]	; (8012738 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8012672:	4a32      	ldr	r2, [pc, #200]	; (801273c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012674:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8012678:	4831      	ldr	r0, [pc, #196]	; (8012740 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801267a:	f008 fae3 	bl	801ac44 <__assert_func>
  assert(exponent <= 31);
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	291f      	cmp	r1, #31
 8012682:	dd06      	ble.n	8012692 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8012684:	4b2f      	ldr	r3, [pc, #188]	; (8012744 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8012686:	4a2d      	ldr	r2, [pc, #180]	; (801273c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012688:	f240 1167 	movw	r1, #359	; 0x167
 801268c:	482c      	ldr	r0, [pc, #176]	; (8012740 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 801268e:	f008 fad9 	bl	801ac44 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8012692:	f04f 0001 	mov.w	r0, #1
 8012696:	f04f 0100 	mov.w	r1, #0
 801269a:	683c      	ldr	r4, [r7, #0]
 801269c:	f1a4 0620 	sub.w	r6, r4, #32
 80126a0:	f1c4 0520 	rsb	r5, r4, #32
 80126a4:	fa01 f304 	lsl.w	r3, r1, r4
 80126a8:	fa00 f606 	lsl.w	r6, r0, r6
 80126ac:	4333      	orrs	r3, r6
 80126ae:	fa20 f505 	lsr.w	r5, r0, r5
 80126b2:	432b      	orrs	r3, r5
 80126b4:	fa00 f204 	lsl.w	r2, r0, r4
 80126b8:	4613      	mov	r3, r2
 80126ba:	3b01      	subs	r3, #1
 80126bc:	4618      	mov	r0, r3
 80126be:	f000 fb93 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80126c2:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 80126c4:	2000      	movs	r0, #0
 80126c6:	f000 fb8f 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80126ca:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 80126cc:	2001      	movs	r0, #1
 80126ce:	f000 fb8b 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80126d2:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 80126d4:	69f9      	ldr	r1, [r7, #28]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 fb91 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80126dc:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 80126de:	2101      	movs	r1, #1
 80126e0:	69f8      	ldr	r0, [r7, #28]
 80126e2:	f000 fb9a 	bl	8012e1a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 80126e6:	4604      	mov	r4, r0
 80126e8:	69b9      	ldr	r1, [r7, #24]
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f000 fba4 	bl	8012e38 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80126f0:	4603      	mov	r3, r0
 80126f2:	6979      	ldr	r1, [r7, #20]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f000 fb82 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80126fa:	4603      	mov	r3, r0
 80126fc:	4619      	mov	r1, r3
 80126fe:	4620      	mov	r0, r4
 8012700:	f000 fbae 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012704:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8012706:	6839      	ldr	r1, [r7, #0]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 fb86 	bl	8012e1a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 801270e:	4604      	mov	r4, r0
 8012710:	68f9      	ldr	r1, [r7, #12]
 8012712:	6938      	ldr	r0, [r7, #16]
 8012714:	f000 fbb2 	bl	8012e7c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012718:	4603      	mov	r3, r0
 801271a:	6979      	ldr	r1, [r7, #20]
 801271c:	4618      	mov	r0, r3
 801271e:	f000 fb6e 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012722:	4603      	mov	r3, r0
 8012724:	4619      	mov	r1, r3
 8012726:	4620      	mov	r0, r4
 8012728:	f000 fb9a 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801272c:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 801272e:	4618      	mov	r0, r3
 8012730:	3724      	adds	r7, #36	; 0x24
 8012732:	46bd      	mov	sp, r7
 8012734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012736:	bf00      	nop
 8012738:	0801eaa4 	.word	0x0801eaa4
 801273c:	0801eab4 	.word	0x0801eab4
 8012740:	0801eb10 	.word	0x0801eb10
 8012744:	0801eba8 	.word	0x0801eba8

08012748 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 8012748:	b590      	push	{r4, r7, lr}
 801274a:	b099      	sub	sp, #100	; 0x64
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8012754:	f04f 0300 	mov.w	r3, #0
 8012758:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801275a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801275e:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	ed93 7a03 	vldr	s14, [r3, #12]
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	edd3 7a03 	vldr	s15, [r3, #12]
 801276c:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 8012770:	ee16 0a90 	vmov	r0, s13
 8012774:	f7ed ff02 	bl	800057c <__aeabi_f2d>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 8012780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012784:	68f9      	ldr	r1, [r7, #12]
 8012786:	4618      	mov	r0, r3
 8012788:	f7ff facd 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 801278c:	f107 0310 	add.w	r3, r7, #16
 8012790:	68b9      	ldr	r1, [r7, #8]
 8012792:	4618      	mov	r0, r3
 8012794:	f7ff fac7 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f103 0214 	add.w	r2, r3, #20
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	3318      	adds	r3, #24
 80127a2:	4619      	mov	r1, r3
 80127a4:	4610      	mov	r0, r2
 80127a6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80127aa:	f7fe fd6d 	bl	8011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80127ae:	f7fe ff38 	bl	8011622 <_ZNSt14numeric_limitsIaE3minEv>
 80127b2:	4603      	mov	r3, r0
 80127b4:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80127c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80127c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80127c8:	eeb0 0a66 	vmov.f32	s0, s13
 80127cc:	f005 feac 	bl	8018528 <roundf>
 80127d0:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 80127d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80127d8:	ee17 3a90 	vmov	r3, s15
 80127dc:	4423      	add	r3, r4
 80127de:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80127e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80127e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7ff f9ec 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 80127f0:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 80127f8:	f7ff fabc 	bl	8011d74 <_ZNSt14numeric_limitsIfE8infinityEv>
 80127fc:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 8012800:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8012804:	eef4 7a47 	vcmp.f32	s15, s14
 8012808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280c:	d103      	bne.n	8012816 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 801280e:	f7fe ff11 	bl	8011634 <_ZNSt14numeric_limitsIaE3maxEv>
 8012812:	4603      	mov	r3, r0
 8012814:	e022      	b.n	801285c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 8012816:	f7fe ff0d 	bl	8011634 <_ZNSt14numeric_limitsIaE3maxEv>
 801281a:	4603      	mov	r3, r0
 801281c:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	edd3 7a03 	vldr	s15, [r3, #12]
 8012828:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801282c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012830:	eeb0 0a66 	vmov.f32	s0, s13
 8012834:	f005 fe78 	bl	8018528 <roundf>
 8012838:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 801283c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012840:	ee17 3a90 	vmov	r3, s15
 8012844:	4423      	add	r3, r4
 8012846:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 8012848:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801284c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f7ff f9a4 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8012858:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	691a      	ldr	r2, [r3, #16]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	691a      	ldr	r2, [r3, #16]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 8012870:	f107 0310 	add.w	r3, r7, #16
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff f9dc 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 801287a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff f9d7 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8012884:	bf00      	nop
 8012886:	3764      	adds	r7, #100	; 0x64
 8012888:	46bd      	mov	sp, r7
 801288a:	bd90      	pop	{r4, r7, pc}

0801288c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 801288c:	b590      	push	{r4, r7, lr}
 801288e:	b099      	sub	sp, #100	; 0x64
 8012890:	af00      	add	r7, sp, #0
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 8012898:	f04f 0300 	mov.w	r3, #0
 801289c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 801289e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80128a2:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80128b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 80128b4:	ee16 0a90 	vmov	r0, s13
 80128b8:	f7ed fe60 	bl	800057c <__aeabi_f2d>
 80128bc:	4602      	mov	r2, r0
 80128be:	460b      	mov	r3, r1
 80128c0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 80128c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80128c8:	68f9      	ldr	r1, [r7, #12]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff fa2b 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80128d0:	f107 0310 	add.w	r3, r7, #16
 80128d4:	68b9      	ldr	r1, [r7, #8]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff fa25 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f103 0214 	add.w	r2, r3, #20
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	3318      	adds	r3, #24
 80128e6:	4619      	mov	r1, r3
 80128e8:	4610      	mov	r0, r2
 80128ea:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80128ee:	f7fe fccb 	bl	8011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 80128f2:	f7fe fea7 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 80128f6:	4603      	mov	r3, r0
 80128f8:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	edd3 7a03 	vldr	s15, [r3, #12]
 8012904:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012908:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801290c:	eeb0 0a66 	vmov.f32	s0, s13
 8012910:	f005 fe0a 	bl	8018528 <roundf>
 8012914:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 8012918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801291c:	ee17 3a90 	vmov	r3, s15
 8012920:	4423      	add	r3, r4
 8012922:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 8012924:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801292c:	4611      	mov	r1, r2
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff f94a 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8012934:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 801293c:	f7ff fa1a 	bl	8011d74 <_ZNSt14numeric_limitsIfE8infinityEv>
 8012940:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 8012944:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8012948:	eef4 7a47 	vcmp.f32	s15, s14
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	d103      	bne.n	801295a <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 8012952:	f7fe fe7f 	bl	8011654 <_ZNSt14numeric_limitsIhE3maxEv>
 8012956:	4603      	mov	r3, r0
 8012958:	e022      	b.n	80129a0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 801295a:	f7fe fe7b 	bl	8011654 <_ZNSt14numeric_limitsIhE3maxEv>
 801295e:	4603      	mov	r3, r0
 8012960:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	edd3 7a03 	vldr	s15, [r3, #12]
 801296c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012970:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012974:	eeb0 0a66 	vmov.f32	s0, s13
 8012978:	f005 fdd6 	bl	8018528 <roundf>
 801297c:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 8012980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012984:	ee17 3a90 	vmov	r3, s15
 8012988:	4423      	add	r3, r4
 801298a:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 801298c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012990:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012994:	4611      	mov	r1, r2
 8012996:	4618      	mov	r0, r3
 8012998:	f7ff f902 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 801299c:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	691a      	ldr	r2, [r3, #16]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	691a      	ldr	r2, [r3, #16]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 80129b4:	f107 0310 	add.w	r3, r7, #16
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7ff f93a 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 80129be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7ff f935 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80129c8:	bf00      	nop
 80129ca:	3764      	adds	r7, #100	; 0x64
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd90      	pop	{r4, r7, pc}

080129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d101      	bne.n	80129e2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80129de:	f008 f929 	bl	801ac34 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80129ee:	b480      	push	{r7}
 80129f0:	b083      	sub	sp, #12
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d002      	beq.n	8012a02 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	e000      	b.n	8012a04 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d101      	bne.n	8012a22 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8012a1e:	f008 f909 	bl	801ac34 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8012a2e:	b480      	push	{r7}
 8012a30:	b083      	sub	sp, #12
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d002      	beq.n	8012a42 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	e000      	b.n	8012a44 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 8012a42:	2300      	movs	r3, #0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	370c      	adds	r7, #12
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4e:	4770      	bx	lr

08012a50 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8012a50:	b590      	push	{r4, r7, lr}
 8012a52:	b089      	sub	sp, #36	; 0x24
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
 8012a5c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012a5e:	6879      	ldr	r1, [r7, #4]
 8012a60:	68b8      	ldr	r0, [r7, #8]
 8012a62:	f7ff fa5e 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012a66:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012a68:	2300      	movs	r3, #0
 8012a6a:	61fb      	str	r3, [r7, #28]
 8012a6c:	69fa      	ldr	r2, [r7, #28]
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	da35      	bge.n	8012ae0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	683a      	ldr	r2, [r7, #0]
 8012a78:	4413      	add	r3, r2
 8012a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8012a7e:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	697a      	ldr	r2, [r7, #20]
 8012a8a:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012a94:	461a      	mov	r2, r3
 8012a96:	f7ff fa79 	bl	8011f8c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012a9a:	4603      	mov	r3, r0
        data.params.output_offset +
 8012a9c:	4423      	add	r3, r4
    int32_t clamped =
 8012a9e:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	f107 0210 	add.w	r2, r7, #16
 8012aa8:	4611      	mov	r1, r2
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ff f88c 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	3308      	adds	r3, #8
 8012aba:	f107 0210 	add.w	r2, r7, #16
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff f86d 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8012acc:	6939      	ldr	r1, [r7, #16]
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ad2:	4413      	add	r3, r2
 8012ad4:	b24a      	sxtb	r2, r1
 8012ad6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	3301      	adds	r3, #1
 8012adc:	61fb      	str	r3, [r7, #28]
 8012ade:	e7c5      	b.n	8012a6c <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8012ae0:	bf00      	nop
 8012ae2:	3724      	adds	r7, #36	; 0x24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd90      	pop	{r4, r7, pc}

08012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d101      	bne.n	8012afa <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 8012af6:	f008 f89d 	bl	801ac34 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8012b06:	b480      	push	{r7}
 8012b08:	b083      	sub	sp, #12
 8012b0a:	af00      	add	r7, sp, #0
 8012b0c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d002      	beq.n	8012b1a <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	e000      	b.n	8012b1c <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 8012b1a:	2300      	movs	r3, #0
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	370c      	adds	r7, #12
 8012b20:	46bd      	mov	sp, r7
 8012b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b26:	4770      	bx	lr

08012b28 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 8012b28:	b590      	push	{r4, r7, lr}
 8012b2a:	b089      	sub	sp, #36	; 0x24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012b36:	6879      	ldr	r1, [r7, #4]
 8012b38:	68b8      	ldr	r0, [r7, #8]
 8012b3a:	f7ff f9f2 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012b3e:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012b40:	2300      	movs	r3, #0
 8012b42:	61fb      	str	r3, [r7, #28]
 8012b44:	69fa      	ldr	r2, [r7, #28]
 8012b46:	69bb      	ldr	r3, [r7, #24]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	da34      	bge.n	8012bb6 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	4413      	add	r3, r2
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	697a      	ldr	r2, [r7, #20]
 8012b60:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	f7ff fa0e 	bl	8011f8c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012b70:	4603      	mov	r3, r0
        data.params.output_offset +
 8012b72:	4423      	add	r3, r4
    int32_t clamped =
 8012b74:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	3304      	adds	r3, #4
 8012b7a:	f107 0210 	add.w	r2, r7, #16
 8012b7e:	4611      	mov	r1, r2
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff f821 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8012b86:	4603      	mov	r3, r0
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	3308      	adds	r3, #8
 8012b90:	f107 0210 	add.w	r2, r7, #16
 8012b94:	4611      	mov	r1, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7ff f802 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 8012ba2:	6939      	ldr	r1, [r7, #16]
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba8:	4413      	add	r3, r2
 8012baa:	b2ca      	uxtb	r2, r1
 8012bac:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	61fb      	str	r3, [r7, #28]
 8012bb4:	e7c6      	b.n	8012b44 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 8012bb6:	bf00      	nop
 8012bb8:	3724      	adds	r7, #36	; 0x24
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd90      	pop	{r4, r7, pc}

08012bbe <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8012bbe:	b5b0      	push	{r4, r5, r7, lr}
 8012bc0:	b088      	sub	sp, #32
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	ed87 0a03 	vstr	s0, [r7, #12]
 8012bc8:	edc7 0a02 	vstr	s1, [r7, #8]
 8012bcc:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8012bce:	ed97 7a03 	vldr	s14, [r7, #12]
 8012bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8012bd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012bda:	ee16 0a90 	vmov	r0, s13
 8012bde:	f7ed fccd 	bl	800057c <__aeabi_f2d>
 8012be2:	4602      	mov	r2, r0
 8012be4:	460b      	mov	r3, r1
 8012be6:	ec43 2b10 	vmov	d0, r2, r3
 8012bea:	f005 fbd1 	bl	8018390 <round>
 8012bee:	ec55 4b10 	vmov	r4, r5, d0
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7ed fcb0 	bl	8000558 <__aeabi_i2d>
 8012bf8:	4602      	mov	r2, r0
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	4629      	mov	r1, r5
 8012c00:	f7ed fb5e 	bl	80002c0 <__adddf3>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	4610      	mov	r0, r2
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	f7ed ffbe 	bl	8000b8c <__aeabi_d2iz>
 8012c10:	4603      	mov	r3, r0
 8012c12:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8012c14:	f7fe fd05 	bl	8011622 <_ZNSt14numeric_limitsIaE3minEv>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	61bb      	str	r3, [r7, #24]
 8012c1c:	f107 0214 	add.w	r2, r7, #20
 8012c20:	f107 0318 	add.w	r3, r7, #24
 8012c24:	4611      	mov	r1, r2
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe ffce 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8012c2c:	4603      	mov	r3, r0
  result =
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8012c32:	f7fe fcff 	bl	8011634 <_ZNSt14numeric_limitsIaE3maxEv>
 8012c36:	4603      	mov	r3, r0
 8012c38:	61fb      	str	r3, [r7, #28]
 8012c3a:	f107 0214 	add.w	r2, r7, #20
 8012c3e:	f107 031c 	add.w	r3, r7, #28
 8012c42:	4611      	mov	r1, r2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7fe ffab 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8012c4a:	4603      	mov	r3, r0
  result =
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	617b      	str	r3, [r7, #20]
  return result;
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	b25b      	sxtb	r3, r3
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3720      	adds	r7, #32
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bdb0      	pop	{r4, r5, r7, pc}

08012c5c <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 8012c5c:	b5b0      	push	{r4, r5, r7, lr}
 8012c5e:	b088      	sub	sp, #32
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	ed87 0a03 	vstr	s0, [r7, #12]
 8012c66:	edc7 0a02 	vstr	s1, [r7, #8]
 8012c6a:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 8012c6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c70:	edd7 7a02 	vldr	s15, [r7, #8]
 8012c74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012c78:	ee16 0a90 	vmov	r0, s13
 8012c7c:	f7ed fc7e 	bl	800057c <__aeabi_f2d>
 8012c80:	4602      	mov	r2, r0
 8012c82:	460b      	mov	r3, r1
 8012c84:	ec43 2b10 	vmov	d0, r2, r3
 8012c88:	f005 fb82 	bl	8018390 <round>
 8012c8c:	ec55 4b10 	vmov	r4, r5, d0
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f7ed fc61 	bl	8000558 <__aeabi_i2d>
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	4629      	mov	r1, r5
 8012c9e:	f7ed fb0f 	bl	80002c0 <__adddf3>
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	4610      	mov	r0, r2
 8012ca8:	4619      	mov	r1, r3
 8012caa:	f7ed ff6f 	bl	8000b8c <__aeabi_d2iz>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 8012cb2:	f7fe fcc7 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	61bb      	str	r3, [r7, #24]
 8012cba:	f107 0214 	add.w	r2, r7, #20
 8012cbe:	f107 0318 	add.w	r3, r7, #24
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fe ff7f 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8012cca:	4603      	mov	r3, r0
  result =
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 8012cd0:	f7fe fcc0 	bl	8011654 <_ZNSt14numeric_limitsIhE3maxEv>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	61fb      	str	r3, [r7, #28]
 8012cd8:	f107 0214 	add.w	r2, r7, #20
 8012cdc:	f107 031c 	add.w	r3, r7, #28
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fe ff5c 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8012ce8:	4603      	mov	r3, r0
  result =
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	617b      	str	r3, [r7, #20]
  return result;
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	b2db      	uxtb	r3, r3
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3720      	adds	r7, #32
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bdb0      	pop	{r4, r5, r7, pc}

08012cfa <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8012cfa:	b580      	push	{r7, lr}
 8012cfc:	b088      	sub	sp, #32
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	60ba      	str	r2, [r7, #8]
 8012d02:	607b      	str	r3, [r7, #4]
 8012d04:	4603      	mov	r3, r0
 8012d06:	73fb      	strb	r3, [r7, #15]
 8012d08:	460b      	mov	r3, r1
 8012d0a:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d0e:	68b8      	ldr	r0, [r7, #8]
 8012d10:	f7ff f907 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012d14:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012d16:	2300      	movs	r3, #0
 8012d18:	61fb      	str	r3, [r7, #28]
 8012d1a:	69fa      	ldr	r2, [r7, #28]
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	da26      	bge.n	8012d70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	4413      	add	r3, r2
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8012d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	dd04      	ble.n	8012d42 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 8012d38:	f107 030e 	add.w	r3, r7, #14
 8012d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8012d40:	e00c      	b.n	8012d5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8012d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	da04      	bge.n	8012d58 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 8012d4e:	f107 030f 	add.w	r3, r7, #15
 8012d52:	f993 3000 	ldrsb.w	r3, [r3]
 8012d56:	e001      	b.n	8012d5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 8012d58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d5c:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d62:	4413      	add	r3, r2
 8012d64:	7dba      	ldrb	r2, [r7, #22]
 8012d66:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	61fb      	str	r3, [r7, #28]
 8012d6e:	e7d4      	b.n	8012d1a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8012d70:	bf00      	nop
 8012d72:	3720      	adds	r7, #32
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b088      	sub	sp, #32
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60ba      	str	r2, [r7, #8]
 8012d80:	607b      	str	r3, [r7, #4]
 8012d82:	4603      	mov	r3, r0
 8012d84:	73fb      	strb	r3, [r7, #15]
 8012d86:	460b      	mov	r3, r1
 8012d88:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8012d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d8c:	68b8      	ldr	r0, [r7, #8]
 8012d8e:	f7ff f8c8 	bl	8011f22 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8012d92:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 8012d94:	2300      	movs	r3, #0
 8012d96:	61fb      	str	r3, [r7, #28]
 8012d98:	69fa      	ldr	r2, [r7, #28]
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	da1f      	bge.n	8012de0 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	4413      	add	r3, r2
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 8012daa:	7bbb      	ldrb	r3, [r7, #14]
 8012dac:	7dfa      	ldrb	r2, [r7, #23]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d903      	bls.n	8012dba <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 8012db2:	f107 030e 	add.w	r3, r7, #14
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	e008      	b.n	8012dcc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8012dba:	7bfb      	ldrb	r3, [r7, #15]
 8012dbc:	7dfa      	ldrb	r2, [r7, #23]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d203      	bcs.n	8012dca <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 8012dc2:	f107 030f 	add.w	r3, r7, #15
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	e000      	b.n	8012dcc <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 8012dca:	7dfb      	ldrb	r3, [r7, #23]
 8012dcc:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 8012dce:	69fb      	ldr	r3, [r7, #28]
 8012dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dd2:	4413      	add	r3, r2
 8012dd4:	7dba      	ldrb	r2, [r7, #22]
 8012dd6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	61fb      	str	r3, [r7, #28]
 8012dde:	e7db      	b.n	8012d98 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 8012de0:	bf00      	nop
 8012de2:	3720      	adds	r7, #32
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  return x;
 8012df0:	687b      	ldr	r3, [r7, #4]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8012dfe:	b480      	push	{r7}
 8012e00:	b083      	sub	sp, #12
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	6039      	str	r1, [r7, #0]
  return a & b;
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	4013      	ands	r3, r2
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	370c      	adds	r7, #12
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr

08012e1a <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8012e1a:	b480      	push	{r7}
 8012e1c:	b083      	sub	sp, #12
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8012e24:	687a      	ldr	r2, [r7, #4]
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	fa42 f303 	asr.w	r3, r2, r3
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	370c      	adds	r7, #12
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr

08012e38 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8012e42:	687a      	ldr	r2, [r7, #4]
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	bfb4      	ite	lt
 8012e4a:	2301      	movlt	r3, #1
 8012e4c:	2300      	movge	r3, #0
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	4618      	mov	r0, r3
 8012e52:	f000 f827 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e56:	4603      	mov	r3, r0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  return a + b;
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	4413      	add	r3, r2
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr

08012e7c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	bfcc      	ite	gt
 8012e8e:	2301      	movgt	r3, #1
 8012e90:	2300      	movle	r3, #0
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	4618      	mov	r0, r3
 8012e96:	f000 f805 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e9a:	4603      	mov	r3, r0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d004      	beq.n	8012ebc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	f000 f807 	bl	8012ec6 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	e000      	b.n	8012ebe <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8012ec6:	b480      	push	{r7}
 8012ec8:	b083      	sub	sp, #12
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
  return ~a;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	43db      	mvns	r3, r3
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
	...

08012ee0 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8012ee0:	b480      	push	{r7}
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	4b04      	ldr	r3, [pc, #16]	; (8012ef8 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8012ee6:	ee07 3a90 	vmov	s15, r3
 8012eea:	eeb0 0a67 	vmov.f32	s0, s15
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	7f7fffff 	.word	0x7f7fffff

08012efc <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 8012efc:	b480      	push	{r7}
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012f04:	ee07 3a90 	vmov	s15, r3
 8012f08:	eeb0 0a67 	vmov.f32	s0, s15
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr

08012f14 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8012f1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8012f22:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 8012f26:	f107 0208 	add.w	r2, r7, #8
 8012f2a:	f107 030c 	add.w	r3, r7, #12
 8012f2e:	4611      	mov	r1, r2
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7fe fb39 	bl	80115a8 <_ZSt3maxIfERKT_S2_S2_>
 8012f36:	4602      	mov	r2, r0
 8012f38:	1d3b      	adds	r3, r7, #4
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	4610      	mov	r0, r2
 8012f3e:	f7fe fb1a 	bl	8011576 <_ZSt3minIfERKT_S2_S2_>
 8012f42:	4603      	mov	r3, r0
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	ee07 3a90 	vmov	s15, r3
}
 8012f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8012f4e:	3710      	adds	r7, #16
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	607a      	str	r2, [r7, #4]
 8012f60:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012f62:	7bfb      	ldrb	r3, [r7, #15]
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d10b      	bne.n	8012f80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	f04f 0200 	mov.w	r2, #0
 8012f6e:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012f70:	f7ff ffb6 	bl	8012ee0 <_ZNSt14numeric_limitsIfE3maxEv>
 8012f74:	eef0 7a40 	vmov.f32	s15, s0
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8012f7e:	e023      	b.n	8012fc8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
 8012f82:	2b03      	cmp	r3, #3
 8012f84:	d107      	bne.n	8012f96 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	f04f 0200 	mov.w	r2, #0
 8012f8c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4a0f      	ldr	r2, [pc, #60]	; (8012fd0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8012f92:	601a      	str	r2, [r3, #0]
}
 8012f94:	e018      	b.n	8012fc8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8012f96:	7bfb      	ldrb	r3, [r7, #15]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d107      	bne.n	8012fac <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	4a0d      	ldr	r2, [pc, #52]	; (8012fd4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8012fa0:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012fa8:	601a      	str	r2, [r3, #0]
}
 8012faa:	e00d      	b.n	8012fc8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8012fac:	f7ff ffa6 	bl	8012efc <_ZNSt14numeric_limitsIfE6lowestEv>
 8012fb0:	eef0 7a40 	vmov.f32	s15, s0
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8012fba:	f7ff ff91 	bl	8012ee0 <_ZNSt14numeric_limitsIfE3maxEv>
 8012fbe:	eef0 7a40 	vmov.f32	s15, s0
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	edc3 7a00 	vstr	s15, [r3]
}
 8012fc8:	bf00      	nop
 8012fca:	3710      	adds	r7, #16
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	40c00000 	.word	0x40c00000
 8012fd4:	bf800000 	.word	0xbf800000

08012fd8 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8012fd8:	b480      	push	{r7}
 8012fda:	b083      	sub	sp, #12
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	370c      	adds	r7, #12
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr

08012ff2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8012ff2:	b480      	push	{r7}
 8012ff4:	b083      	sub	sp, #12
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4618      	mov	r0, r3
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 801301a:	f007 fe0b 	bl	801ac34 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3708      	adds	r7, #8
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801302a:	b590      	push	{r4, r7, lr}
 801302c:	b087      	sub	sp, #28
 801302e:	af00      	add	r7, sp, #0
 8013030:	60f8      	str	r0, [r7, #12]
 8013032:	60b9      	str	r1, [r7, #8]
 8013034:	607a      	str	r2, [r7, #4]
 8013036:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8013038:	68b9      	ldr	r1, [r7, #8]
 801303a:	68f8      	ldr	r0, [r7, #12]
 801303c:	f7fe ff16 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013040:	4604      	mov	r4, r0
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7fe ff11 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 801304a:	4603      	mov	r3, r0
 801304c:	429c      	cmp	r4, r3
 801304e:	d001      	beq.n	8013054 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8013050:	f007 fdf0 	bl	801ac34 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8013054:	68b9      	ldr	r1, [r7, #8]
 8013056:	68f8      	ldr	r0, [r7, #12]
 8013058:	f7fe ff08 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 801305c:	4603      	mov	r3, r0
 801305e:	613b      	str	r3, [r7, #16]
 8013060:	6839      	ldr	r1, [r7, #0]
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f7fe ff02 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013068:	4603      	mov	r3, r0
 801306a:	617b      	str	r3, [r7, #20]
 801306c:	f107 0214 	add.w	r2, r7, #20
 8013070:	f107 0310 	add.w	r3, r7, #16
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f7fe fd92 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 801307c:	4603      	mov	r3, r0
 801307e:	681b      	ldr	r3, [r3, #0]
}
 8013080:	4618      	mov	r0, r3
 8013082:	371c      	adds	r7, #28
 8013084:	46bd      	mov	sp, r7
 8013086:	bd90      	pop	{r4, r7, pc}

08013088 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor+0x12>
 8013096:	f007 fdcd 	bl	801ac34 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3708      	adds	r7, #8
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 80130a6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80130aa:	b08b      	sub	sp, #44	; 0x2c
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 80130b2:	6879      	ldr	r1, [r7, #4]
 80130b4:	4608      	mov	r0, r1
 80130b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80130ba:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 80130be:	6839      	ldr	r1, [r7, #0]
 80130c0:	4608      	mov	r0, r1
 80130c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80130c6:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 80130ca:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80130ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80130d2:	eb18 0a00 	adds.w	sl, r8, r0
 80130d6:	eb49 0b01 	adc.w	fp, r9, r1
 80130da:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 80130de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80130e2:	2800      	cmp	r0, #0
 80130e4:	f171 0100 	sbcs.w	r1, r1, #0
 80130e8:	db04      	blt.n	80130f4 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 80130ea:	f04f 0001 	mov.w	r0, #1
 80130ee:	f04f 0100 	mov.w	r1, #0
 80130f2:	e003      	b.n	80130fc <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 80130f4:	f04f 30ff 	mov.w	r0, #4294967295
 80130f8:	f04f 31ff 	mov.w	r1, #4294967295
 80130fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8013100:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8013104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013108:	eb18 0400 	adds.w	r4, r8, r0
 801310c:	eb49 0501 	adc.w	r5, r9, r1
 8013110:	0fe9      	lsrs	r1, r5, #31
 8013112:	4608      	mov	r0, r1
 8013114:	f04f 0100 	mov.w	r1, #0
 8013118:	1902      	adds	r2, r0, r4
 801311a:	eb41 0305 	adc.w	r3, r1, r5
 801311e:	f04f 0000 	mov.w	r0, #0
 8013122:	f04f 0100 	mov.w	r1, #0
 8013126:	0850      	lsrs	r0, r2, #1
 8013128:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801312c:	1059      	asrs	r1, r3, #1
 801312e:	4602      	mov	r2, r0
 8013130:	460b      	mov	r3, r1
 8013132:	4613      	mov	r3, r2
}
 8013134:	4618      	mov	r0, r3
 8013136:	372c      	adds	r7, #44	; 0x2c
 8013138:	46bd      	mov	sp, r7
 801313a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801313e:	4770      	bx	lr

08013140 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	60b9      	str	r1, [r7, #8]
 801314a:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	fa02 f303 	lsl.w	r3, r2, r3
 8013154:	68b9      	ldr	r1, [r7, #8]
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe fe18 	bl	8011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801315c:	4603      	mov	r3, r0
}
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
 8013166:	b580      	push	{r7, lr}
 8013168:	b088      	sub	sp, #32
 801316a:	af00      	add	r7, sp, #0
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	60b9      	str	r1, [r7, #8]
 8013170:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	4618      	mov	r0, r3
 8013176:	f000 f821 	bl	80131bc <_ZN6tflite17CountLeadingZerosImEEiT_>
 801317a:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	69fb      	ldr	r3, [r7, #28]
 8013180:	1ad2      	subs	r2, r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	601a      	str	r2, [r3, #0]
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	fa02 f303 	lsl.w	r3, r2, r3
 801318e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32_t shifted_sum_minus_one =
 8013192:	61bb      	str	r3, [r7, #24]
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32_t, 0>::FromRaw(shifted_sum_minus_one));
 8013194:	69b8      	ldr	r0, [r7, #24]
 8013196:	f000 f823 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801319a:	4603      	mov	r3, r0
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f831 	bl	8013204 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 80131a2:	4603      	mov	r3, r0
 80131a4:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 80131a6:	f107 0314 	add.w	r3, r7, #20
 80131aa:	4618      	mov	r0, r3
 80131ac:	f000 f88a 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131b0:	4603      	mov	r3, r0
 80131b2:	681b      	ldr	r3, [r3, #0]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3720      	adds	r7, #32
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d003      	beq.n	80131d2 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 80131d0:	e000      	b.n	80131d4 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 80131d2:	2320      	movs	r3, #32
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:

  static const ScalarRawType RawMax() {
    return VectorFromScalar(ScalarRawMax());
  }

  static FixedPoint FromRaw(RawType x) {
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
    FixedPoint retval;
    retval.raw() = x;
 80131e8:	f107 030c 	add.w	r3, r7, #12
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 f869 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80131f2:	4602      	mov	r2, r0
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6013      	str	r3, [r2, #0]
    return retval;
 80131f8:	68fb      	ldr	r3, [r7, #12]
  }
 80131fa:	4618      	mov	r0, r3
 80131fc:	3710      	adds	r7, #16
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
	...

08013204 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8013204:	b580      	push	{r7, lr}
 8013206:	b08a      	sub	sp, #40	; 0x28
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 801320c:	f000 f879 	bl	8013302 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8013210:	4603      	mov	r3, r0
 8013212:	4619      	mov	r1, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 f87f 	bl	8013318 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801321a:	4603      	mov	r3, r0
 801321c:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 801321e:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8013222:	f000 f8ab 	bl	801337c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013226:	4603      	mov	r3, r0
 8013228:	4618      	mov	r0, r3
 801322a:	f000 f893 	bl	8013354 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 801322e:	4603      	mov	r3, r0
 8013230:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8013232:	4823      	ldr	r0, [pc, #140]	; (80132c0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8013234:	f000 f8a2 	bl	801337c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 8013238:	4603      	mov	r3, r0
 801323a:	4618      	mov	r0, r3
 801323c:	f000 f88a 	bl	8013354 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013240:	4603      	mov	r3, r0
 8013242:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8013244:	69b9      	ldr	r1, [r7, #24]
 8013246:	6a38      	ldr	r0, [r7, #32]
 8013248:	f000 f8a5 	bl	8013396 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801324c:	4603      	mov	r3, r0
 801324e:	4619      	mov	r1, r3
 8013250:	69f8      	ldr	r0, [r7, #28]
 8013252:	f000 f8c2 	bl	80133da <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013256:	4603      	mov	r3, r0
 8013258:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801325a:	2300      	movs	r3, #0
 801325c:	627b      	str	r3, [r7, #36]	; 0x24
 801325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013260:	2b02      	cmp	r3, #2
 8013262:	dc21      	bgt.n	80132a8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8013264:	6979      	ldr	r1, [r7, #20]
 8013266:	6a38      	ldr	r0, [r7, #32]
 8013268:	f000 f895 	bl	8013396 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801326c:	4603      	mov	r3, r0
 801326e:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8013270:	f000 f8d1 	bl	8013416 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8013274:	4603      	mov	r3, r0
 8013276:	6939      	ldr	r1, [r7, #16]
 8013278:	4618      	mov	r0, r3
 801327a:	f000 f8d5 	bl	8013428 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801327e:	4603      	mov	r3, r0
 8013280:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8013282:	68f9      	ldr	r1, [r7, #12]
 8013284:	6978      	ldr	r0, [r7, #20]
 8013286:	f000 f8ed 	bl	8013464 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801328a:	4603      	mov	r3, r0
 801328c:	4618      	mov	r0, r3
 801328e:	f000 f90b 	bl	80134a8 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013292:	4603      	mov	r3, r0
 8013294:	4619      	mov	r1, r3
 8013296:	6978      	ldr	r0, [r7, #20]
 8013298:	f000 f89f 	bl	80133da <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801329c:	4603      	mov	r3, r0
 801329e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 80132a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a2:	3301      	adds	r3, #1
 80132a4:	627b      	str	r3, [r7, #36]	; 0x24
 80132a6:	e7da      	b.n	801325e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 80132a8:	6978      	ldr	r0, [r7, #20]
 80132aa:	f000 f917 	bl	80134dc <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80132ae:	4603      	mov	r3, r0
 80132b0:	4618      	mov	r0, r3
 80132b2:	f000 f929 	bl	8013508 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80132b6:	4603      	mov	r3, r0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3728      	adds	r7, #40	; 0x28
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	c3c3c3c4 	.word	0xc3c3c3c4

080132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
  RawType& raw() { return i_; }
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr

080132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80132da:	b590      	push	{r4, r7, lr}
 80132dc:	b085      	sub	sp, #20
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80132e2:	f107 030c 	add.w	r3, r7, #12
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ff ffec 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80132ec:	4604      	mov	r4, r0
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f7ff fd7a 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80132f4:	4603      	mov	r3, r0
 80132f6:	6023      	str	r3, [r4, #0]
    return retval;
 80132f8:	68fb      	ldr	r3, [r7, #12]
  }
 80132fa:	4618      	mov	r0, r3
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd90      	pop	{r4, r7, pc}

08013302 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8013302:	b580      	push	{r7, lr}
 8013304:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013306:	f000 f927 	bl	8013558 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 801330a:	4603      	mov	r3, r0
 801330c:	4618      	mov	r0, r3
 801330e:	f7ff ffe4 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013312:	4603      	mov	r3, r0
  }
 8013314:	4618      	mov	r0, r3
 8013316:	bd80      	pop	{r7, pc}

08013318 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8013318:	b590      	push	{r4, r7, lr}
 801331a:	b083      	sub	sp, #12
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
 8013322:	1d3b      	adds	r3, r7, #4
 8013324:	4618      	mov	r0, r3
 8013326:	f7ff ffcd 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801332a:	4603      	mov	r3, r0
 801332c:	681c      	ldr	r4, [r3, #0]
 801332e:	463b      	mov	r3, r7
 8013330:	4618      	mov	r0, r3
 8013332:	f7ff ffc7 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013336:	4603      	mov	r3, r0
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4619      	mov	r1, r3
 801333c:	4620      	mov	r0, r4
 801333e:	f7ff feb2 	bl	80130a6 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 8013342:	4603      	mov	r3, r0
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff ff4b 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801334a:	4603      	mov	r3, r0
 801334c:	4618      	mov	r0, r3
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	bd90      	pop	{r4, r7, pc}

08013354 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013354:	b590      	push	{r4, r7, lr}
 8013356:	b085      	sub	sp, #20
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801335c:	f107 030c 	add.w	r3, r7, #12
 8013360:	4618      	mov	r0, r3
 8013362:	f000 f900 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013366:	4604      	mov	r4, r0
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff fd3d 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801336e:	4603      	mov	r3, r0
 8013370:	6023      	str	r3, [r4, #0]
    return retval;
 8013372:	68fb      	ldr	r3, [r7, #12]
  }
 8013374:	4618      	mov	r0, r3
 8013376:	3714      	adds	r7, #20
 8013378:	46bd      	mov	sp, r7
 801337a:	bd90      	pop	{r4, r7, pc}

0801337c <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8013384:	2100      	movs	r1, #0
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff f96a 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801338c:	4603      	mov	r3, r0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3708      	adds	r7, #8
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}

08013396 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013398:	b085      	sub	sp, #20
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
 801339e:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80133a0:	1d3b      	adds	r3, r7, #4
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7ff ff8e 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80133a8:	4603      	mov	r3, r0
 80133aa:	681d      	ldr	r5, [r3, #0]
 80133ac:	463b      	mov	r3, r7
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 f8d9 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80133b4:	4603      	mov	r3, r0
 80133b6:	681e      	ldr	r6, [r3, #0]
 80133b8:	f107 030c 	add.w	r3, r7, #12
 80133bc:	4618      	mov	r0, r3
 80133be:	f000 f8d2 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80133c2:	4604      	mov	r4, r0
 80133c4:	4631      	mov	r1, r6
 80133c6:	4628      	mov	r0, r5
 80133c8:	f7fe fce0 	bl	8011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80133cc:	4603      	mov	r3, r0
 80133ce:	6023      	str	r3, [r4, #0]
  return c;
 80133d0:	68fb      	ldr	r3, [r7, #12]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3714      	adds	r7, #20
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133da <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80133da:	b590      	push	{r4, r7, lr}
 80133dc:	b083      	sub	sp, #12
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	6039      	str	r1, [r7, #0]
 80133e4:	1d3b      	adds	r3, r7, #4
 80133e6:	4618      	mov	r0, r3
 80133e8:	f000 f8bd 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80133ec:	4603      	mov	r3, r0
 80133ee:	681c      	ldr	r4, [r3, #0]
 80133f0:	463b      	mov	r3, r7
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 f8b7 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80133f8:	4603      	mov	r3, r0
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	4619      	mov	r1, r3
 80133fe:	4620      	mov	r0, r4
 8013400:	f7ff fd2e 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013404:	4603      	mov	r3, r0
 8013406:	4618      	mov	r0, r3
 8013408:	f000 f8b8 	bl	801357c <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801340c:	4603      	mov	r3, r0
 801340e:	4618      	mov	r0, r3
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	bd90      	pop	{r4, r7, pc}

08013416 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8013416:	b580      	push	{r7, lr}
 8013418:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801341a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801341e:	f7ff ff99 	bl	8013354 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013422:	4603      	mov	r3, r0
  }
 8013424:	4618      	mov	r0, r3
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8013428:	b590      	push	{r4, r7, lr}
 801342a:	b083      	sub	sp, #12
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
 8013432:	1d3b      	adds	r3, r7, #4
 8013434:	4618      	mov	r0, r3
 8013436:	f000 f896 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801343a:	4603      	mov	r3, r0
 801343c:	681c      	ldr	r4, [r3, #0]
 801343e:	463b      	mov	r3, r7
 8013440:	4618      	mov	r0, r3
 8013442:	f000 f890 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013446:	4603      	mov	r3, r0
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4619      	mov	r1, r3
 801344c:	4620      	mov	r0, r4
 801344e:	f000 f875 	bl	801353c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8013452:	4603      	mov	r3, r0
 8013454:	4618      	mov	r0, r3
 8013456:	f000 f891 	bl	801357c <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801345a:	4603      	mov	r3, r0
 801345c:	4618      	mov	r0, r3
 801345e:	370c      	adds	r7, #12
 8013460:	46bd      	mov	sp, r7
 8013462:	bd90      	pop	{r4, r7, pc}

08013464 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013466:	b085      	sub	sp, #20
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801346e:	1d3b      	adds	r3, r7, #4
 8013470:	4618      	mov	r0, r3
 8013472:	f000 f878 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013476:	4603      	mov	r3, r0
 8013478:	681d      	ldr	r5, [r3, #0]
 801347a:	463b      	mov	r3, r7
 801347c:	4618      	mov	r0, r3
 801347e:	f000 f872 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013482:	4603      	mov	r3, r0
 8013484:	681e      	ldr	r6, [r3, #0]
 8013486:	f107 030c 	add.w	r3, r7, #12
 801348a:	4618      	mov	r0, r3
 801348c:	f000 f887 	bl	801359e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013490:	4604      	mov	r4, r0
 8013492:	4631      	mov	r1, r6
 8013494:	4628      	mov	r0, r5
 8013496:	f7fe fc79 	bl	8011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801349a:	4603      	mov	r3, r0
 801349c:	6023      	str	r3, [r4, #0]
  return c;
 801349e:	68fb      	ldr	r3, [r7, #12]
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3714      	adds	r7, #20
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134a8 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80134a8:	b5b0      	push	{r4, r5, r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80134b0:	1d3b      	adds	r3, r7, #4
 80134b2:	4618      	mov	r0, r3
 80134b4:	f000 f873 	bl	801359e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80134b8:	4603      	mov	r3, r0
 80134ba:	681d      	ldr	r5, [r3, #0]
 80134bc:	f107 030c 	add.w	r3, r7, #12
 80134c0:	4618      	mov	r0, r3
 80134c2:	f000 f850 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80134c6:	4604      	mov	r4, r0
 80134c8:	4628      	mov	r0, r5
 80134ca:	f000 f873 	bl	80135b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 80134ce:	4603      	mov	r3, r0
 80134d0:	6023      	str	r3, [r4, #0]
  return result;
 80134d2:	68fb      	ldr	r3, [r7, #12]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3710      	adds	r7, #16
 80134d8:	46bd      	mov	sp, r7
 80134da:	bdb0      	pop	{r4, r5, r7, pc}

080134dc <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 80134dc:	b590      	push	{r4, r7, lr}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 80134e4:	1d3b      	adds	r3, r7, #4
 80134e6:	4618      	mov	r0, r3
 80134e8:	f000 f83d 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80134ec:	4604      	mov	r4, r0
 80134ee:	f107 030c 	add.w	r3, r7, #12
 80134f2:	4618      	mov	r0, r3
 80134f4:	f000 f86a 	bl	80135cc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80134f8:	4602      	mov	r2, r0
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	6013      	str	r3, [r2, #0]
  return c;
 80134fe:	68fb      	ldr	r3, [r7, #12]
}
 8013500:	4618      	mov	r0, r3
 8013502:	3714      	adds	r7, #20
 8013504:	46bd      	mov	sp, r7
 8013506:	bd90      	pop	{r4, r7, pc}

08013508 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013508:	b5b0      	push	{r4, r5, r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013510:	1d3b      	adds	r3, r7, #4
 8013512:	4618      	mov	r0, r3
 8013514:	f000 f85a 	bl	80135cc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013518:	4603      	mov	r3, r0
 801351a:	681d      	ldr	r5, [r3, #0]
 801351c:	f107 030c 	add.w	r3, r7, #12
 8013520:	4618      	mov	r0, r3
 8013522:	f7ff fecf 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013526:	4604      	mov	r4, r0
 8013528:	4628      	mov	r0, r5
 801352a:	f000 f85a 	bl	80135e2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 801352e:	4603      	mov	r3, r0
 8013530:	6023      	str	r3, [r4, #0]
  return result;
 8013532:	68fb      	ldr	r3, [r7, #12]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3710      	adds	r7, #16
 8013538:	46bd      	mov	sp, r7
 801353a:	bdb0      	pop	{r4, r5, r7, pc}

0801353c <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
  return a - b;
 8013546:	687a      	ldr	r2, [r7, #4]
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	1ad3      	subs	r3, r2, r3
}
 801354c:	4618      	mov	r0, r3
 801354e:	370c      	adds	r7, #12
 8013550:	46bd      	mov	sp, r7
 8013552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013556:	4770      	bx	lr

08013558 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8013558:	b580      	push	{r7, lr}
 801355a:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801355c:	f7fd fe8a 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 8013560:	4603      	mov	r3, r0
  }
 8013562:	4618      	mov	r0, r3
 8013564:	bd80      	pop	{r7, pc}

08013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8013566:	b480      	push	{r7}
 8013568:	b083      	sub	sp, #12
 801356a:	af00      	add	r7, sp, #0
 801356c:	6078      	str	r0, [r7, #4]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013584:	f107 030c 	add.w	r3, r7, #12
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff ffec 	bl	8013566 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801358e:	4602      	mov	r2, r0
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6013      	str	r3, [r2, #0]
    return retval;
 8013594:	68fb      	ldr	r3, [r7, #12]
  }
 8013596:	4618      	mov	r0, r3
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 801359e:	b480      	push	{r7}
 80135a0:	b083      	sub	sp, #12
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4618      	mov	r0, r3
 80135aa:	370c      	adds	r7, #12
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr

080135b4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 f81d 	bl	80135fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 80135c2:	4603      	mov	r3, r0
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80135cc:	b480      	push	{r7}
 80135ce:	b083      	sub	sp, #12
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4618      	mov	r0, r3
 80135d8:	370c      	adds	r7, #12
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr

080135e2 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b082      	sub	sp, #8
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f000 f848 	bl	8013680 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 80135f0:	4603      	mov	r3, r0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3708      	adds	r7, #8
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
	...

080135fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b08a      	sub	sp, #40	; 0x28
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013604:	f7fe fbad 	bl	8011d62 <_ZNSt14numeric_limitsIlE3minEv>
 8013608:	4603      	mov	r3, r0
 801360a:	4618      	mov	r0, r3
 801360c:	f7ff fbec 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013610:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013612:	f7fd fe2f 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 8013616:	4603      	mov	r3, r0
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff fbe5 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801361e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013620:	2320      	movs	r3, #32
 8013622:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013624:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013628:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801362a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801362e:	f7ff fbdb 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013632:	4603      	mov	r3, r0
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff fc20 	bl	8012e7c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801363c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801363e:	480f      	ldr	r0, [pc, #60]	; (801367c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8013640:	f7ff fbd2 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013644:	4603      	mov	r3, r0
 8013646:	4619      	mov	r1, r3
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7ff fbf5 	bl	8012e38 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801364e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013650:	2102      	movs	r1, #2
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 f856 	bl	8013704 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013658:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801365a:	68fa      	ldr	r2, [r7, #12]
 801365c:	6a39      	ldr	r1, [r7, #32]
 801365e:	6978      	ldr	r0, [r7, #20]
 8013660:	f000 f896 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013664:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013666:	68fa      	ldr	r2, [r7, #12]
 8013668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801366a:	6938      	ldr	r0, [r7, #16]
 801366c:	f000 f890 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013670:	60f8      	str	r0, [r7, #12]
    return result;
 8013672:	68fb      	ldr	r3, [r7, #12]
  }
 8013674:	4618      	mov	r0, r3
 8013676:	3728      	adds	r7, #40	; 0x28
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	e0000001 	.word	0xe0000001

08013680 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013680:	b580      	push	{r7, lr}
 8013682:	b08a      	sub	sp, #40	; 0x28
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013688:	f7fe fb6b 	bl	8011d62 <_ZNSt14numeric_limitsIlE3minEv>
 801368c:	4603      	mov	r3, r0
 801368e:	4618      	mov	r0, r3
 8013690:	f7ff fbaa 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013694:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013696:	f7fd fded 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 801369a:	4603      	mov	r3, r0
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff fba3 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136a2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80136a4:	2320      	movs	r3, #32
 80136a6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80136a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80136ac:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80136ae:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80136b2:	f7ff fb99 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136b6:	4603      	mov	r3, r0
 80136b8:	4619      	mov	r1, r3
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f7ff fbde 	bl	8012e7c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80136c0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80136c2:	480f      	ldr	r0, [pc, #60]	; (8013700 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80136c4:	f7ff fb90 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80136c8:	4603      	mov	r3, r0
 80136ca:	4619      	mov	r1, r3
 80136cc:	6878      	ldr	r0, [r7, #4]
 80136ce:	f7ff fbb3 	bl	8012e38 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80136d2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80136d4:	2101      	movs	r1, #1
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 f814 	bl	8013704 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80136dc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	6a39      	ldr	r1, [r7, #32]
 80136e2:	6978      	ldr	r0, [r7, #20]
 80136e4:	f000 f854 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80136e8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80136ea:	68fa      	ldr	r2, [r7, #12]
 80136ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136ee:	6938      	ldr	r0, [r7, #16]
 80136f0:	f000 f84e 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80136f4:	60f8      	str	r0, [r7, #12]
    return result;
 80136f6:	68fb      	ldr	r3, [r7, #12]
  }
 80136f8:	4618      	mov	r0, r3
 80136fa:	3728      	adds	r7, #40	; 0x28
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	c0000001 	.word	0xc0000001

08013704 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8013704:	b480      	push	{r7}
 8013706:	b089      	sub	sp, #36	; 0x24
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	461a      	mov	r2, r3
 8013712:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013716:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 801371a:	2201      	movs	r2, #1
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	fa02 f303 	lsl.w	r3, r2, r3
 8013722:	461a      	mov	r2, r3
 8013724:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013728:	69f9      	ldr	r1, [r7, #28]
 801372a:	fb02 f001 	mul.w	r0, r2, r1
 801372e:	69b9      	ldr	r1, [r7, #24]
 8013730:	fb03 f101 	mul.w	r1, r3, r1
 8013734:	4401      	add	r1, r0
 8013736:	69b8      	ldr	r0, [r7, #24]
 8013738:	fba0 2302 	umull	r2, r3, r0, r2
 801373c:	4419      	add	r1, r3
 801373e:	460b      	mov	r3, r1
 8013740:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8013744:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8013748:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801374c:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801374e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013752:	60bb      	str	r3, [r7, #8]
             ? min
 8013754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801375c:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8013760:	db0e      	blt.n	8013780 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8013762:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013766:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801376a:	f04f 0100 	mov.w	r1, #0
 801376e:	4290      	cmp	r0, r2
 8013770:	eb71 0303 	sbcs.w	r3, r1, r3
 8013774:	db01      	blt.n	801377a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8013776:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8013778:	e004      	b.n	8013784 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 801377a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801377e:	e001      	b.n	8013784 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 8013780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013784:	4618      	mov	r0, r3
 8013786:	3724      	adds	r7, #36	; 0x24
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr

08013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	b085      	sub	sp, #20
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 801379c:	68b9      	ldr	r1, [r7, #8]
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	f7ff fb2d 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80137a4:	4604      	mov	r4, r0
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff fb8d 	bl	8012ec6 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80137ac:	4603      	mov	r3, r0
 80137ae:	6879      	ldr	r1, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff fb24 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80137b6:	4603      	mov	r3, r0
 80137b8:	4619      	mov	r1, r3
 80137ba:	4620      	mov	r0, r4
 80137bc:	f000 f805 	bl	80137ca <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80137c0:	4603      	mov	r3, r0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3714      	adds	r7, #20
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd90      	pop	{r4, r7, pc}

080137ca <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80137ca:	b480      	push	{r7}
 80137cc:	b083      	sub	sp, #12
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
 80137d2:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	4053      	eors	r3, r2
}
 80137da:	4618      	mov	r0, r3
 80137dc:	370c      	adds	r7, #12
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b086      	sub	sp, #24
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
 80137ee:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7fe fa34 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80137f6:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	db03      	blt.n	8013806 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80137fe:	683a      	ldr	r2, [r7, #0]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	429a      	cmp	r2, r3
 8013804:	db01      	blt.n	801380a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8013806:	f007 fa15 	bl	801ac34 <abort>
  const auto* dims_data = shape.DimsData();
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f7fe fb53 	bl	8011eb6 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8013810:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8013812:	2301      	movs	r3, #1
 8013814:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8013816:	2300      	movs	r3, #0
 8013818:	613b      	str	r3, [r7, #16]
 801381a:	693a      	ldr	r2, [r7, #16]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	429a      	cmp	r2, r3
 8013820:	da12      	bge.n	8013848 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8013822:	693a      	ldr	r2, [r7, #16]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	429a      	cmp	r2, r3
 8013828:	d005      	beq.n	8013836 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	4413      	add	r3, r2
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	e000      	b.n	8013838 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 8013836:	2301      	movs	r3, #1
 8013838:	697a      	ldr	r2, [r7, #20]
 801383a:	fb03 f302 	mul.w	r3, r3, r2
 801383e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	3301      	adds	r3, #1
 8013844:	613b      	str	r3, [r7, #16]
 8013846:	e7e8      	b.n	801381a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 8013848:	697b      	ldr	r3, [r7, #20]
}
 801384a:	4618      	mov	r0, r3
 801384c:	3718      	adds	r7, #24
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8013852:	b590      	push	{r4, r7, lr}
 8013854:	b091      	sub	sp, #68	; 0x44
 8013856:	af00      	add	r7, sp, #0
 8013858:	60f8      	str	r0, [r7, #12]
 801385a:	60b9      	str	r1, [r7, #8]
 801385c:	607a      	str	r2, [r7, #4]
 801385e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	69db      	ldr	r3, [r3, #28]
 8013864:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6a1b      	ldr	r3, [r3, #32]
 801386a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 801386c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801386e:	f7fe f9f6 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013872:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8013874:	6838      	ldr	r0, [r7, #0]
 8013876:	f7fe f9f2 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801387a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 801387c:	6a3b      	ldr	r3, [r7, #32]
 801387e:	3b01      	subs	r3, #1
 8013880:	4619      	mov	r1, r3
 8013882:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013884:	f7ff ffaf 	bl	80137e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013888:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	1e99      	subs	r1, r3, #2
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	3b01      	subs	r3, #1
 8013892:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013894:	6838      	ldr	r0, [r7, #0]
 8013896:	f7ff fbc8 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801389a:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	3b01      	subs	r3, #1
 80138a0:	4619      	mov	r1, r3
 80138a2:	6838      	ldr	r0, [r7, #0]
 80138a4:	f7fe fae2 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 80138a8:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 80138aa:	2300      	movs	r3, #0
 80138ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	da5f      	bge.n	8013976 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80138b6:	2300      	movs	r3, #0
 80138b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80138ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	429a      	cmp	r2, r3
 80138c0:	da55      	bge.n	801396e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 80138c2:	f04f 0300 	mov.w	r3, #0
 80138c6:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80138c8:	2300      	movs	r3, #0
 80138ca:	633b      	str	r3, [r7, #48]	; 0x30
 80138cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	da21      	bge.n	8013918 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 80138d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d6:	693a      	ldr	r2, [r7, #16]
 80138d8:	fb02 f203 	mul.w	r2, r2, r3
 80138dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138de:	4413      	add	r3, r2
 80138e0:	009b      	lsls	r3, r3, #2
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	4413      	add	r3, r2
 80138e6:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 80138ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ec:	693a      	ldr	r2, [r7, #16]
 80138ee:	fb02 f203 	mul.w	r2, r2, r3
 80138f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f4:	4413      	add	r3, r2
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138fa:	4413      	add	r3, r2
 80138fc:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8013900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013904:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8013908:	ee77 7a27 	vadd.f32	s15, s14, s15
 801390c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8013910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013912:	3301      	adds	r3, #1
 8013914:	633b      	str	r3, [r7, #48]	; 0x30
 8013916:	e7d9      	b.n	80138cc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 8013918:	f04f 0300 	mov.w	r3, #0
 801391c:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 801391e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013920:	2b00      	cmp	r3, #0
 8013922:	d005      	beq.n	8013930 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 8013924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801392a:	4413      	add	r3, r2
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8013930:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8013934:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013938:	ee77 7a27 	vadd.f32	s15, s14, s15
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013940:	fb02 f203 	mul.w	r2, r2, r3
 8013944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013946:	4413      	add	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801394c:	18d4      	adds	r4, r2, r3
 801394e:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8013952:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8013956:	eeb0 0a67 	vmov.f32	s0, s15
 801395a:	f7ff fadb 	bl	8012f14 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 801395e:	eef0 7a40 	vmov.f32	s15, s0
 8013962:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013968:	3301      	adds	r3, #1
 801396a:	63bb      	str	r3, [r7, #56]	; 0x38
 801396c:	e7a5      	b.n	80138ba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 801396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013970:	3301      	adds	r3, #1
 8013972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013974:	e79b      	b.n	80138ae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8013976:	bf00      	nop
 8013978:	3744      	adds	r7, #68	; 0x44
 801397a:	46bd      	mov	sp, r7
 801397c:	bd90      	pop	{r4, r7, pc}

0801397e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 801397e:	b580      	push	{r7, lr}
 8013980:	b096      	sub	sp, #88	; 0x58
 8013982:	af00      	add	r7, sp, #0
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
 801398a:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	691b      	ldr	r3, [r3, #16]
 80139a8:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	695b      	ldr	r3, [r3, #20]
 80139ae:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	699b      	ldr	r3, [r3, #24]
 80139b4:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80139b6:	6838      	ldr	r0, [r7, #0]
 80139b8:	f7fe f951 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80139bc:	4603      	mov	r3, r0
 80139be:	2b01      	cmp	r3, #1
 80139c0:	dc01      	bgt.n	80139c6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 80139c2:	f007 f937 	bl	801ac34 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 80139c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80139c8:	f7fe f949 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	dc01      	bgt.n	80139d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 80139d2:	f007 f92f 	bl	801ac34 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80139d6:	69ba      	ldr	r2, [r7, #24]
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	429a      	cmp	r2, r3
 80139dc:	dd01      	ble.n	80139e2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 80139de:	f007 f929 	bl	801ac34 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 80139e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80139e4:	f7fe f93b 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80139e8:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 80139ea:	6838      	ldr	r0, [r7, #0]
 80139ec:	f7fe f937 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80139f0:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80139f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139f4:	3b01      	subs	r3, #1
 80139f6:	4619      	mov	r1, r3
 80139f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80139fa:	f7ff fef4 	bl	80137e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80139fe:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8013a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a02:	1e99      	subs	r1, r3, #2
 8013a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a06:	3b01      	subs	r3, #1
 8013a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013a0a:	6838      	ldr	r0, [r7, #0]
 8013a0c:	f7ff fb0d 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013a10:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a14:	3b01      	subs	r3, #1
 8013a16:	4619      	mov	r1, r3
 8013a18:	6838      	ldr	r0, [r7, #0]
 8013a1a:	f7fe fa27 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013a1e:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8013a20:	2300      	movs	r3, #0
 8013a22:	657b      	str	r3, [r7, #84]	; 0x54
 8013a24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	da73      	bge.n	8013b14 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8013a30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a34:	429a      	cmp	r2, r3
 8013a36:	da69      	bge.n	8013b0c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	429a      	cmp	r2, r3
 8013a46:	da24      	bge.n	8013a92 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 8013a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a4c:	fb02 f203 	mul.w	r2, r2, r3
 8013a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a52:	4413      	add	r3, r2
 8013a54:	461a      	mov	r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	4413      	add	r3, r2
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 8013a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a62:	fb02 f203 	mul.w	r2, r2, r3
 8013a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a68:	4413      	add	r3, r2
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a6e:	4413      	add	r3, r2
 8013a70:	781b      	ldrb	r3, [r3, #0]
 8013a72:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8013a74:	69fa      	ldr	r2, [r7, #28]
 8013a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a78:	4413      	add	r3, r2
 8013a7a:	6a39      	ldr	r1, [r7, #32]
 8013a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a7e:	440a      	add	r2, r1
 8013a80:	fb02 f203 	mul.w	r2, r2, r3
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	4413      	add	r3, r2
 8013a88:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a90:	e7d6      	b.n	8013a40 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8013a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d007      	beq.n	8013aa8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8013a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013a9e:	4413      	add	r3, r2
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fe fa6c 	bl	8011f8c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013abc:	4413      	add	r3, r2
 8013abe:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8013ac0:	f107 0218 	add.w	r2, r7, #24
 8013ac4:	f107 0310 	add.w	r3, r7, #16
 8013ac8:	4611      	mov	r1, r2
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7fe f87c 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8013ad6:	f107 0214 	add.w	r2, r7, #20
 8013ada:	f107 0310 	add.w	r3, r7, #16
 8013ade:	4611      	mov	r1, r2
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe f85d 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 8013aec:	6939      	ldr	r1, [r7, #16]
 8013aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013af2:	fb02 f203 	mul.w	r2, r2, r3
 8013af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013af8:	4413      	add	r3, r2
 8013afa:	461a      	mov	r2, r3
 8013afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013afe:	4413      	add	r3, r2
 8013b00:	b2ca      	uxtb	r2, r1
 8013b02:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b06:	3301      	adds	r3, #1
 8013b08:	653b      	str	r3, [r7, #80]	; 0x50
 8013b0a:	e791      	b.n	8013a30 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8013b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b0e:	3301      	adds	r3, #1
 8013b10:	657b      	str	r3, [r7, #84]	; 0x54
 8013b12:	e787      	b.n	8013a24 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8013b14:	bf00      	nop
 8013b16:	3758      	adds	r7, #88	; 0x58
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
// TODO(b/169801227): This global struct is needed for the linker to drop unused
// code (for example, by using Register_FULLY_CONNECTED_INT8 instead of
// Register_FULLY_CONNECTED).
TfLiteRegistration fully_connected_registration;

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d101      	bne.n	8013b34 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8013b30:	f007 f880 	bl	801ac34 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b38:	2124      	movs	r1, #36	; 0x24
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	4798      	blx	r3
 8013b3e:	4603      	mov	r3, r0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8013b48:	b5b0      	push	{r4, r5, r7, lr}
 8013b4a:	b0a0      	sub	sp, #128	; 0x80
 8013b4c:	af04      	add	r7, sp, #16
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
 8013b52:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d101      	bne.n	8013b60 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8013b5c:	f007 f86a 	bl	801ac34 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	695b      	ldr	r3, [r3, #20]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d101      	bne.n	8013b6c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8013b68:	f007 f864 	bl	801ac34 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	66fb      	str	r3, [r7, #108]	; 0x6c
  const auto params =
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	695b      	ldr	r3, [r3, #20]
 8013b76:	66bb      	str	r3, [r7, #104]	; 0x68
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
 8013b78:	4b81      	ldr	r3, [pc, #516]	; (8013d80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	6839      	ldr	r1, [r7, #0]
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7fd fdec 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013b86:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, input != nullptr);
 8013b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d10a      	bne.n	8013ba4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	695c      	ldr	r4, [r3, #20]
 8013b92:	4b7c      	ldr	r3, [pc, #496]	; (8013d84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8013b94:	9300      	str	r3, [sp, #0]
 8013b96:	2340      	movs	r3, #64	; 0x40
 8013b98:	4a7b      	ldr	r2, [pc, #492]	; (8013d88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013b9a:	497c      	ldr	r1, [pc, #496]	; (8013d8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	47a0      	blx	r4
 8013ba0:	2401      	movs	r4, #1
 8013ba2:	e0e7      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
 8013ba4:	4b7a      	ldr	r3, [pc, #488]	; (8013d90 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	461a      	mov	r2, r3
 8013baa:	6839      	ldr	r1, [r7, #0]
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7fd fdd6 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013bb2:	6638      	str	r0, [r7, #96]	; 0x60
  TF_LITE_ENSURE(context, filter != nullptr);
 8013bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10a      	bne.n	8013bd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x88>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	695c      	ldr	r4, [r3, #20]
 8013bbe:	4b75      	ldr	r3, [pc, #468]	; (8013d94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 8013bc0:	9300      	str	r3, [sp, #0]
 8013bc2:	2343      	movs	r3, #67	; 0x43
 8013bc4:	4a70      	ldr	r2, [pc, #448]	; (8013d88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013bc6:	4971      	ldr	r1, [pc, #452]	; (8013d8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	47a0      	blx	r4
 8013bcc:	2401      	movs	r4, #1
 8013bce:	e0d1      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
 8013bd0:	4b71      	ldr	r3, [pc, #452]	; (8013d98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	6839      	ldr	r1, [r7, #0]
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7fd fdf0 	bl	80117be <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 8013bde:	65f8      	str	r0, [r7, #92]	; 0x5c
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
 8013be0:	4b6e      	ldr	r3, [pc, #440]	; (8013d9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	461a      	mov	r2, r3
 8013be6:	6839      	ldr	r1, [r7, #0]
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7fd fdc8 	bl	801177e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013bee:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, output != nullptr);
 8013bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d10a      	bne.n	8013c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	695c      	ldr	r4, [r3, #20]
 8013bfa:	4b69      	ldr	r3, [pc, #420]	; (8013da0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 8013bfc:	9300      	str	r3, [sp, #0]
 8013bfe:	2347      	movs	r3, #71	; 0x47
 8013c00:	4a61      	ldr	r2, [pc, #388]	; (8013d88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013c02:	4962      	ldr	r1, [pc, #392]	; (8013d8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	47a0      	blx	r4
 8013c08:	2401      	movs	r4, #1
 8013c0a:	e0b3      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c0e:	781a      	ldrb	r2, [r3, #0]
 8013c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d01a      	beq.n	8013c4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	695c      	ldr	r4, [r3, #20]
 8013c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fd faab 	bl	801117c <TfLiteTypeGetName>
 8013c26:	4605      	mov	r5, r0
 8013c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fd faa5 	bl	801117c <TfLiteTypeGetName>
 8013c32:	4603      	mov	r3, r0
 8013c34:	9303      	str	r3, [sp, #12]
 8013c36:	9502      	str	r5, [sp, #8]
 8013c38:	4b5a      	ldr	r3, [pc, #360]	; (8013da4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	4b5a      	ldr	r3, [pc, #360]	; (8013da8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	2349      	movs	r3, #73	; 0x49
 8013c42:	4a51      	ldr	r2, [pc, #324]	; (8013d88 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 8013c44:	4959      	ldr	r1, [pc, #356]	; (8013dac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	47a0      	blx	r4
 8013c4a:	2401      	movs	r4, #1
 8013c4c:	e092      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8013c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c50:	781a      	ldrb	r2, [r3, #0]
 8013c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d006      	beq.n	8013c68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x120>
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	695b      	ldr	r3, [r3, #20]
 8013c5e:	4954      	ldr	r1, [pc, #336]	; (8013db0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	4798      	blx	r3
 8013c64:	2401      	movs	r4, #1
 8013c66:	e085      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
                     "Hybrid models are not supported on TFLite Micro.");

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8013c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c6e:	621a      	str	r2, [r3, #32]
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8013c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c72:	7819      	ldrb	r1, [r3, #0]
 8013c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c76:	781a      	ldrb	r2, [r3, #0]
 8013c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c7a:	9303      	str	r3, [sp, #12]
 8013c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c7e:	9302      	str	r3, [sp, #8]
 8013c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c82:	9301      	str	r3, [sp, #4]
 8013c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013c86:	9300      	str	r3, [sp, #0]
 8013c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 fb79 	bl	8014382 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8013c90:	4603      	mov	r3, r0
 8013c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d002      	beq.n	8013ca4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 8013c9e:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 8013ca2:	e067      	b.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  if (input->type == kTfLiteInt8) {
 8013ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	2b09      	cmp	r3, #9
 8013caa:	d162      	bne.n	8013d72 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8013cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe f837 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 8013cb8:	f107 0318 	add.w	r3, r7, #24
 8013cbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe f831 	bl	8011d26 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8013cc4:	f107 0318 	add.w	r3, r7, #24
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fd ffc8 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b02      	cmp	r3, #2
 8013cd2:	d001      	beq.n	8013cd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 8013cd4:	f006 ffae 	bl	801ac34 <abort>
    const int filter_dim_count = filter_shape.DimensionsCount();
 8013cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fd ffbe 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013ce2:	6538      	str	r0, [r7, #80]	; 0x50
    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8013ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ce6:	1e5a      	subs	r2, r3, #1
 8013ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe f8bc 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	60bb      	str	r3, [r7, #8]
    filter_dims.h = 1;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	60fb      	str	r3, [r7, #12]
    filter_dims.w = 1;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	613b      	str	r3, [r7, #16]
    filter_dims.c = output_shape.Dims(1);
 8013d00:	f107 0318 	add.w	r3, r7, #24
 8013d04:	2101      	movs	r1, #1
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7fe f8b0 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	617b      	str	r3, [r7, #20]

    const int32_t buf_size =
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 8013d10:	f107 0308 	add.w	r3, r7, #8
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7f6 fc75 	bl	800a604 <arm_fully_connected_s8_get_buffer_size>
 8013d1a:	64f8      	str	r0, [r7, #76]	; 0x4c

    if (buf_size > 0) {
 8013d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	dd11      	ble.n	8013d46 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013d28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013d2a:	3220      	adds	r2, #32
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	4798      	blx	r3
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8013d36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d007      	beq.n	8013d4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
 8013d3e:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8013d42:	2500      	movs	r5, #0
 8013d44:	e004      	b.n	8013d50 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8013d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d48:	f04f 32ff 	mov.w	r2, #4294967295
 8013d4c:	621a      	str	r2, [r3, #32]
    RuntimeShape output_shape = GetTensorShape(output);
 8013d4e:	2501      	movs	r5, #1
 8013d50:	f107 0318 	add.w	r3, r7, #24
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fd ff6c 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
 8013d5a:	2d01      	cmp	r5, #1
 8013d5c:	d001      	beq.n	8013d62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
 8013d5e:	2500      	movs	r5, #0
 8013d60:	e000      	b.n	8013d64 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8013d62:	2501      	movs	r5, #1
 8013d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fd ff62 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
 8013d6e:	2d01      	cmp	r5, #1
 8013d70:	d100      	bne.n	8013d74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>
    }
  }
  return kTfLiteOk;
 8013d72:	2400      	movs	r4, #0
 8013d74:	4623      	mov	r3, r4
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3770      	adds	r7, #112	; 0x70
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	0801fce0 	.word	0x0801fce0
 8013d84:	0801ec6c 	.word	0x0801ec6c
 8013d88:	0801ebb8 	.word	0x0801ebb8
 8013d8c:	0801ec54 	.word	0x0801ec54
 8013d90:	0801fce4 	.word	0x0801fce4
 8013d94:	0801ec80 	.word	0x0801ec80
 8013d98:	0801fce8 	.word	0x0801fce8
 8013d9c:	0801fcec 	.word	0x0801fcec
 8013da0:	0801ec94 	.word	0x0801ec94
 8013da4:	0801ecc4 	.word	0x0801ecc4
 8013da8:	0801ecd4 	.word	0x0801ecd4
 8013dac:	0801eca8 	.word	0x0801eca8
 8013db0:	0801ece0 	.word	0x0801ece0

08013db4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 8013db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013db6:	b0bf      	sub	sp, #252	; 0xfc
 8013db8:	af08      	add	r7, sp, #32
 8013dba:	6178      	str	r0, [r7, #20]
 8013dbc:	6139      	str	r1, [r7, #16]
 8013dbe:	60fa      	str	r2, [r7, #12]
 8013dc0:	60bb      	str	r3, [r7, #8]
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8013dc2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013dc6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f000 fb3f 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8013dd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7fd ff42 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b02      	cmp	r3, #2
 8013dde:	d001      	beq.n	8013de4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x30>
 8013de0:	f006 ff28 	bl	801ac34 <abort>
  const int batches = output_shape.Dims(0);
 8013de4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013de8:	2100      	movs	r1, #0
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fe f83e 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013df0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  const int output_depth = output_shape.Dims(1);
 8013df4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013df8:	2101      	movs	r1, #1
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fe f836 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e00:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8013e04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013e08:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f000 fb1e 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8013e12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fd ff21 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013e1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013e24:	1e5a      	subs	r2, r3, #1
 8013e26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013e2a:	4611      	mov	r1, r2
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fe f81d 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 8013e32:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8013e36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013e3a:	68b9      	ldr	r1, [r7, #8]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f000 fb06 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  cmsis_nn_fc_params fc_params;
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	695b      	ldr	r3, [r3, #20]
 8013e46:	425b      	negs	r3, r3
 8013e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	69db      	ldr	r3, [r3, #28]
 8013e4e:	677b      	str	r3, [r7, #116]	; 0x74
  fc_params.filter_offset = -data.reference_op_data.filter_zero_point;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	425b      	negs	r3, r3
 8013e56:	673b      	str	r3, [r7, #112]	; 0x70
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	67bb      	str	r3, [r7, #120]	; 0x78
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	68db      	ldr	r3, [r3, #12]
 8013e62:	67fb      	str	r3, [r7, #124]	; 0x7c

  cmsis_nn_per_tensor_quant_params quant_params;
  quant_params.multiplier = data.reference_op_data.output_multiplier;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	667b      	str	r3, [r7, #100]	; 0x64
  quant_params.shift = data.reference_op_data.output_shift;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	66bb      	str	r3, [r7, #104]	; 0x68

  cmsis_nn_dims input_dims;
  input_dims.n = batches;
 8013e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e74:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = 1;
 8013e76:	2301      	movs	r3, #1
 8013e78:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = 1;
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = accum_depth;
 8013e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e82:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims filter_dims;
  filter_dims.n = accum_depth;
 8013e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e88:	647b      	str	r3, [r7, #68]	; 0x44
  filter_dims.h = 1;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.w = 1;
 8013e8e:	2301      	movs	r3, #1
 8013e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.c = output_depth;
 8013e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013e96:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	637b      	str	r3, [r7, #52]	; 0x34
  bias_dims.h = 1;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  bias_dims.w = 1;
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  bias_dims.c = output_depth;
 8013ea4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013ea8:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims output_dims;
  output_dims.n = batches;
 8013eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013eae:	627b      	str	r3, [r7, #36]	; 0x24
  output_dims.h = 1;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  output_dims.w = 1;
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  output_dims.c = output_depth;
 8013eb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013ebc:	633b      	str	r3, [r7, #48]	; 0x30

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	61fb      	str	r3, [r7, #28]
  ctx.size = 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	623b      	str	r3, [r7, #32]

  if (data.buffer_idx > -1) {
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	6a1b      	ldr	r3, [r3, #32]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	db08      	blt.n	8013ee0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	6a12      	ldr	r2, [r2, #32]
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	6978      	ldr	r0, [r7, #20]
 8013eda:	4798      	blx	r3
 8013edc:	4603      	mov	r3, r0
 8013ede:	61fb      	str	r3, [r7, #28]
  }

  TF_LITE_ENSURE_EQ(
 8013ee0:	68b8      	ldr	r0, [r7, #8]
 8013ee2:	f7fe fd95 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8013eec:	f7fe fd90 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8013ef6:	f7ff f889 	bl	801300c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013f00:	f7fe fd95 	bl	8012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8013f04:	4603      	mov	r3, r0
 8013f06:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8013f0a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013f0e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8013f12:	f107 001c 	add.w	r0, r7, #28
 8013f16:	9306      	str	r3, [sp, #24]
 8013f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f1c:	9305      	str	r3, [sp, #20]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	9304      	str	r3, [sp, #16]
 8013f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013f26:	9303      	str	r3, [sp, #12]
 8013f28:	9602      	str	r6, [sp, #8]
 8013f2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013f2e:	9301      	str	r3, [sp, #4]
 8013f30:	9500      	str	r5, [sp, #0]
 8013f32:	4623      	mov	r3, r4
 8013f34:	f7f6 fb1f 	bl	800a576 <arm_fully_connected_s8>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	bf14      	ite	ne
 8013f3e:	2301      	movne	r3, #1
 8013f40:	2300      	moveq	r3, #0
 8013f42:	b2db      	uxtb	r3, r3
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d03e      	beq.n	8013fc6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x212>
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	695c      	ldr	r4, [r3, #20]
 8013f4c:	68b8      	ldr	r0, [r7, #8]
 8013f4e:	f7fe fd5f 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013f52:	4606      	mov	r6, r0
 8013f54:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8013f58:	f7fe fd5a 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8013f5c:	6078      	str	r0, [r7, #4]
 8013f5e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8013f62:	f7ff f853 	bl	801300c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8013f66:	6038      	str	r0, [r7, #0]
 8013f68:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013f6c:	f7fe fd5f 	bl	8012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8013f70:	4603      	mov	r3, r0
 8013f72:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8013f76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013f7a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8013f7e:	f107 001c 	add.w	r0, r7, #28
 8013f82:	9306      	str	r3, [sp, #24]
 8013f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f88:	9305      	str	r3, [sp, #20]
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	9304      	str	r3, [sp, #16]
 8013f8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013f92:	9303      	str	r3, [sp, #12]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	9302      	str	r3, [sp, #8]
 8013f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013f9c:	9301      	str	r3, [sp, #4]
 8013f9e:	9600      	str	r6, [sp, #0]
 8013fa0:	462b      	mov	r3, r5
 8013fa2:	f7f6 fae8 	bl	800a576 <arm_fully_connected_s8>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	461a      	mov	r2, r3
 8013faa:	2300      	movs	r3, #0
 8013fac:	9303      	str	r3, [sp, #12]
 8013fae:	9202      	str	r2, [sp, #8]
 8013fb0:	4b0f      	ldr	r3, [pc, #60]	; (8013ff0 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x23c>)
 8013fb2:	9301      	str	r3, [sp, #4]
 8013fb4:	4b0f      	ldr	r3, [pc, #60]	; (8013ff4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x240>)
 8013fb6:	9300      	str	r3, [sp, #0]
 8013fb8:	23a6      	movs	r3, #166	; 0xa6
 8013fba:	4a0f      	ldr	r2, [pc, #60]	; (8013ff8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x244>)
 8013fbc:	490f      	ldr	r1, [pc, #60]	; (8013ffc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x248>)
 8013fbe:	6978      	ldr	r0, [r7, #20]
 8013fc0:	47a0      	blx	r4
 8013fc2:	2401      	movs	r4, #1
 8013fc4:	e000      	b.n	8013fc8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x214>
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 8013fc6:	2400      	movs	r4, #0
  const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8013fc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7fd fe30 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8013fd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fd fe2b 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8013fdc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fd fe26 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
 8013fe6:	4623      	mov	r3, r4
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	37dc      	adds	r7, #220	; 0xdc
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ff0:	0801edc8 	.word	0x0801edc8
 8013ff4:	0801eddc 	.word	0x0801eddc
 8013ff8:	0801ebb8 	.word	0x0801ebb8
 8013ffc:	0801edac 	.word	0x0801edac

08014000 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014002:	b0d3      	sub	sp, #332	; 0x14c
 8014004:	af06      	add	r7, sp, #24
 8014006:	1d3b      	adds	r3, r7, #4
 8014008:	6018      	str	r0, [r3, #0]
 801400a:	463b      	mov	r3, r7
 801400c:	6019      	str	r1, [r3, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801400e:	463b      	mov	r3, r7
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	695b      	ldr	r3, [r3, #20]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d101      	bne.n	801401c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 8014018:	f006 fe0c 	bl	801ac34 <abort>
  const auto* params =
 801401c:	463b      	mov	r3, r7
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	695b      	ldr	r3, [r3, #20]
 8014022:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8014026:	4b98      	ldr	r3, [pc, #608]	; (8014288 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x288>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	4639      	mov	r1, r7
 801402c:	1d3b      	adds	r3, r7, #4
 801402e:	6809      	ldr	r1, [r1, #0]
 8014030:	6818      	ldr	r0, [r3, #0]
 8014032:	f7fd ffef 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014036:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 801403a:	4b94      	ldr	r3, [pc, #592]	; (801428c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	4639      	mov	r1, r7
 8014040:	1d3b      	adds	r3, r7, #4
 8014042:	6809      	ldr	r1, [r1, #0]
 8014044:	6818      	ldr	r0, [r3, #0]
 8014046:	f7fd ffe5 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801404a:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 801404e:	4b90      	ldr	r3, [pc, #576]	; (8014290 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x290>)
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	4639      	mov	r1, r7
 8014054:	1d3b      	adds	r3, r7, #4
 8014056:	6809      	ldr	r1, [r1, #0]
 8014058:	6818      	ldr	r0, [r3, #0]
 801405a:	f7fd ffdb 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 801405e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8014062:	4b8c      	ldr	r3, [pc, #560]	; (8014294 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x294>)
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	4639      	mov	r1, r7
 8014068:	1d3b      	adds	r3, r7, #4
 801406a:	6809      	ldr	r1, [r1, #0]
 801406c:	6818      	ldr	r0, [r3, #0]
 801406e:	f7fd ffe1 	bl	8012034 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014072:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

  TFLITE_DCHECK(node->user_data != nullptr);
 8014076:	463b      	mov	r3, r7
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	691b      	ldr	r3, [r3, #16]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d101      	bne.n	8014084 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 8014080:	f006 fdd8 	bl	801ac34 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8014084:	463b      	mov	r3, r7
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	691b      	ldr	r3, [r3, #16]
 801408a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801408e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014092:	7a1b      	ldrb	r3, [r3, #8]
 8014094:	2b09      	cmp	r3, #9
 8014096:	d068      	beq.n	801416a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16a>
 8014098:	2b09      	cmp	r3, #9
 801409a:	f300 80db 	bgt.w	8014254 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d002      	beq.n	80140a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
 80140a2:	2b03      	cmp	r3, #3
 80140a4:	d076      	beq.n	8014194 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x194>
 80140a6:	e0d5      	b.n	8014254 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>
    case kTfLiteFloat32: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 80140a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140ac:	781a      	ldrb	r2, [r3, #0]
 80140ae:	f107 0308 	add.w	r3, r7, #8
 80140b2:	4611      	mov	r1, r2
 80140b4:	4618      	mov	r0, r3
 80140b6:	f000 f94f 	bl	8014358 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 80140ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80140be:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80140c2:	4618      	mov	r0, r3
 80140c4:	f000 f9c3 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140c8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80140cc:	f7fe fc80 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80140d0:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 80140d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80140d6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80140da:	4618      	mov	r0, r3
 80140dc:	f000 f9b7 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140e0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80140e4:	f7fe fc74 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80140e8:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
 80140ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80140ee:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80140f2:	4618      	mov	r0, r3
 80140f4:	f000 f9ab 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80140f8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80140fc:	f7fe fc68 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8014100:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
 8014102:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014106:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801410a:	4618      	mov	r0, r3
 801410c:	f000 f99f 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8014110:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8014114:	f7fe fc6b 	bl	80129ee <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8014118:	4603      	mov	r3, r0
 801411a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801411e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014122:	f107 0008 	add.w	r0, r7, #8
 8014126:	9304      	str	r3, [sp, #16]
 8014128:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801412c:	9303      	str	r3, [sp, #12]
 801412e:	9502      	str	r5, [sp, #8]
 8014130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	9400      	str	r4, [sp, #0]
 8014138:	4613      	mov	r3, r2
 801413a:	4632      	mov	r2, r6
 801413c:	f7ff fb89 	bl	8013852 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8014140:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014144:	4618      	mov	r0, r3
 8014146:	f7fd fd74 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 801414a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801414e:	4618      	mov	r0, r3
 8014150:	f7fd fd6f 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8014154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014158:	4618      	mov	r0, r3
 801415a:	f7fd fd6a 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 801415e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014162:	4618      	mov	r0, r3
 8014164:	f7fd fd65 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8014168:	e087      	b.n	801427a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
    }
    case kTfLiteInt8: {
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801416a:	4639      	mov	r1, r7
 801416c:	1d38      	adds	r0, r7, #4
 801416e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014172:	9302      	str	r3, [sp, #8]
 8014174:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8014178:	9301      	str	r3, [sp, #4]
 801417a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014184:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014188:	6809      	ldr	r1, [r1, #0]
 801418a:	6800      	ldr	r0, [r0, #0]
 801418c:	f7ff fe12 	bl	8013db4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 8014190:	4603      	mov	r3, r0
                               output);
 8014192:	e073      	b.n	801427c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    }
    case kTfLiteUInt8: {
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsQuantized(data.reference_op_data),
 8014194:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8014198:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801419c:	4611      	mov	r1, r2
 801419e:	4618      	mov	r0, r3
 80141a0:	f000 f8b0 	bl	8014304 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
          tflite::micro::GetTensorShape(input),
 80141a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80141a8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80141ac:	4618      	mov	r0, r3
 80141ae:	f000 f94e 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80141b2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80141b6:	f7fe fc97 	bl	8012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80141ba:	4606      	mov	r6, r0
          tflite::micro::GetTensorData<uint8_t>(input),
          tflite::micro::GetTensorShape(filter),
 80141bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80141c0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80141c4:	4618      	mov	r0, r3
 80141c6:	f000 f942 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80141ca:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80141ce:	f7fe fc8b 	bl	8012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 80141d2:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<uint8_t>(filter),
          tflite::micro::GetTensorShape(bias),
 80141d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80141d8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80141dc:	4618      	mov	r0, r3
 80141de:	f000 f936 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80141e2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80141e6:	f7fe ff11 	bl	801300c <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 80141ea:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<int32_t>(bias),
          tflite::micro::GetTensorShape(output),
 80141ec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80141f0:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80141f4:	4618      	mov	r0, r3
 80141f6:	f000 f92a 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80141fa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80141fe:	f7fe fc82 	bl	8012b06 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014202:	4603      	mov	r3, r0
 8014204:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8014208:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801420c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8014210:	9304      	str	r3, [sp, #16]
 8014212:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8014216:	9303      	str	r3, [sp, #12]
 8014218:	9502      	str	r5, [sp, #8]
 801421a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801421e:	9301      	str	r3, [sp, #4]
 8014220:	9400      	str	r4, [sp, #0]
 8014222:	4613      	mov	r3, r2
 8014224:	4632      	mov	r2, r6
 8014226:	f7ff fbaa 	bl	801397e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
          tflite::micro::GetTensorShape(output),
 801422a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801422e:	4618      	mov	r0, r3
 8014230:	f7fd fcff 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
 8014234:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014238:	4618      	mov	r0, r3
 801423a:	f7fd fcfa 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 801423e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8014242:	4618      	mov	r0, r3
 8014244:	f7fd fcf5 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8014248:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801424c:	4618      	mov	r0, r3
 801424e:	f7fd fcf0 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<uint8_t>(output));
      break;
 8014252:	e012      	b.n	801427a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014254:	1d3b      	adds	r3, r7, #4
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	695c      	ldr	r4, [r3, #20]
 801425a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801425e:	7a1b      	ldrb	r3, [r3, #8]
 8014260:	4618      	mov	r0, r3
 8014262:	f7fc ff8b 	bl	801117c <TfLiteTypeGetName>
 8014266:	4602      	mov	r2, r0
 8014268:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801426c:	7a1b      	ldrb	r3, [r3, #8]
 801426e:	1d38      	adds	r0, r7, #4
 8014270:	4909      	ldr	r1, [pc, #36]	; (8014298 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x298>)
 8014272:	6800      	ldr	r0, [r0, #0]
 8014274:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014276:	2301      	movs	r3, #1
 8014278:	e000      	b.n	801427c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27c>
    }
  }
  return kTfLiteOk;
 801427a:	2300      	movs	r3, #0
}
 801427c:	4618      	mov	r0, r3
 801427e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8014282:	46bd      	mov	sp, r7
 8014284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014286:	bf00      	nop
 8014288:	0801fce0 	.word	0x0801fce0
 801428c:	0801fce4 	.word	0x0801fce4
 8014290:	0801fce8 	.word	0x0801fce8
 8014294:	0801fcec 	.word	0x0801fcec
 8014298:	0801ef00 	.word	0x0801ef00

0801429c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801429c:	b4b0      	push	{r4, r5, r7}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  fully_connected_registration.init = Init;
 80142a4:	4b13      	ldr	r3, [pc, #76]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142a6:	4a14      	ldr	r2, [pc, #80]	; (80142f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x5c>)
 80142a8:	601a      	str	r2, [r3, #0]
  fully_connected_registration.free = nullptr;
 80142aa:	4b12      	ldr	r3, [pc, #72]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142ac:	2200      	movs	r2, #0
 80142ae:	605a      	str	r2, [r3, #4]
  fully_connected_registration.prepare = Prepare;
 80142b0:	4b10      	ldr	r3, [pc, #64]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142b2:	4a12      	ldr	r2, [pc, #72]	; (80142fc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x60>)
 80142b4:	609a      	str	r2, [r3, #8]
  fully_connected_registration.invoke = Eval;
 80142b6:	4b0f      	ldr	r3, [pc, #60]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142b8:	4a11      	ldr	r2, [pc, #68]	; (8014300 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x64>)
 80142ba:	60da      	str	r2, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
 80142bc:	4b0d      	ldr	r3, [pc, #52]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142be:	2200      	movs	r2, #0
 80142c0:	611a      	str	r2, [r3, #16]
  fully_connected_registration.builtin_code = 0;
 80142c2:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	615a      	str	r2, [r3, #20]
  fully_connected_registration.custom_name = nullptr;
 80142c8:	4b0a      	ldr	r3, [pc, #40]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	619a      	str	r2, [r3, #24]
  fully_connected_registration.version = 0;
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142d0:	2200      	movs	r2, #0
 80142d2:	61da      	str	r2, [r3, #28]
  return fully_connected_registration;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	4a07      	ldr	r2, [pc, #28]	; (80142f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x58>)
 80142d8:	461c      	mov	r4, r3
 80142da:	4615      	mov	r5, r2
 80142dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80142e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bcb0      	pop	{r4, r5, r7}
 80142f0:	4770      	bx	lr
 80142f2:	bf00      	nop
 80142f4:	20000374 	.word	0x20000374
 80142f8:	08013b1d 	.word	0x08013b1d
 80142fc:	08013b49 	.word	0x08013b49
 8014300:	08014001 	.word	0x08014001

08014304 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedWeightsTensor = 1;
const int kFullyConnectedBiasTensor = 2;
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	695b      	ldr	r3, [r3, #20]
 8014312:	425a      	negs	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	601a      	str	r2, [r3, #0]
  op_params.weights_offset = -op_data.filter_zero_point;
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	699b      	ldr	r3, [r3, #24]
 801431c:	425a      	negs	r2, r3
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	605a      	str	r2, [r3, #4]
  op_params.output_offset = op_data.output_zero_point;
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	69da      	ldr	r2, [r3, #28]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	609a      	str	r2, [r3, #8]
  op_params.output_multiplier = op_data.output_multiplier;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	60da      	str	r2, [r3, #12]
  op_params.output_shift = op_data.output_shift;
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	611a      	str	r2, [r3, #16]
  op_params.quantized_activation_min = op_data.output_activation_min;
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	689a      	ldr	r2, [r3, #8]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	615a      	str	r2, [r3, #20]
  op_params.quantized_activation_max = op_data.output_activation_max;
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	68da      	ldr	r2, [r3, #12]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	619a      	str	r2, [r3, #24]
  return op_params;
 801434a:	bf00      	nop
}
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f103 0220 	add.w	r2, r3, #32
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f103 011c 	add.w	r1, r3, #28
 8014370:	78fb      	ldrb	r3, [r7, #3]
 8014372:	4618      	mov	r0, r3
 8014374:	f7fe fdee 	bl	8012f54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8014378:	bf00      	nop
}
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	3708      	adds	r7, #8
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}

08014382 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8014382:	b580      	push	{r7, lr}
 8014384:	b08a      	sub	sp, #40	; 0x28
 8014386:	af02      	add	r7, sp, #8
 8014388:	60f8      	str	r0, [r7, #12]
 801438a:	607b      	str	r3, [r7, #4]
 801438c:	460b      	mov	r3, r1
 801438e:	72fb      	strb	r3, [r7, #11]
 8014390:	4613      	mov	r3, r2
 8014392:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8014394:	7abb      	ldrb	r3, [r7, #10]
 8014396:	2b01      	cmp	r3, #1
 8014398:	d03e      	beq.n	8014418 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x96>
    double real_multiplier = 0.0;
 801439a:	f04f 0200 	mov.w	r2, #0
 801439e:	f04f 0300 	mov.w	r3, #0
 80143a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80143a6:	f107 0310 	add.w	r3, r7, #16
 80143aa:	9301      	str	r3, [sp, #4]
 80143ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143b4:	6879      	ldr	r1, [r7, #4]
 80143b6:	68f8      	ldr	r0, [r7, #12]
 80143b8:	f7fd fa12 	bl	80117e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80143bc:	4603      	mov	r3, r0
 80143be:	77fb      	strb	r3, [r7, #31]
 80143c0:	7ffb      	ldrb	r3, [r7, #31]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d001      	beq.n	80143ca <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 80143c6:	7ffb      	ldrb	r3, [r7, #31]
 80143c8:	e027      	b.n	801441a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80143ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80143ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143d2:	3304      	adds	r3, #4
 80143d4:	4619      	mov	r1, r3
 80143d6:	4610      	mov	r0, r2
 80143d8:	eeb0 0a47 	vmov.f32	s0, s14
 80143dc:	eef0 0a67 	vmov.f32	s1, s15
 80143e0:	f7fc ff52 	bl	8011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	691a      	ldr	r2, [r3, #16]
 80143e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ea:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 80143ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ee:	691a      	ldr	r2, [r3, #16]
 80143f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f2:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	691a      	ldr	r2, [r3, #16]
 80143f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fa:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80143fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fe:	f103 0208 	add.w	r2, r3, #8
 8014402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014404:	330c      	adds	r3, #12
 8014406:	7af9      	ldrb	r1, [r7, #11]
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	4613      	mov	r3, r2
 801440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801440e:	68f8      	ldr	r0, [r7, #12]
 8014410:	f7fd fb72 	bl	8011af8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8014414:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8014416:	e000      	b.n	801441a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x98>
  }
  return kTfLiteOk;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3720      	adds	r7, #32
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}

08014422 <_ZSt3maxIsERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014422:	b480      	push	{r7}
 8014424:	b083      	sub	sp, #12
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
 801442a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014438:	429a      	cmp	r2, r3
 801443a:	da01      	bge.n	8014440 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	e000      	b.n	8014442 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8014440:	687b      	ldr	r3, [r7, #4]
    }
 8014442:	4618      	mov	r0, r3
 8014444:	370c      	adds	r7, #12
 8014446:	46bd      	mov	sp, r7
 8014448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444c:	4770      	bx	lr

0801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801444e:	b580      	push	{r7, lr}
 8014450:	b086      	sub	sp, #24
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
 8014456:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d003      	beq.n	8014466 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	685b      	ldr	r3, [r3, #4]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d103      	bne.n	801446e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f7fd fbc2 	bl	8011bf0 <_ZN6tflite12RuntimeShapeC1Ev>
 801446c:	e00d      	b.n	801448a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	3304      	adds	r3, #4
 801447e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8014480:	68fa      	ldr	r2, [r7, #12]
 8014482:	6939      	ldr	r1, [r7, #16]
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7fd fbc1 	bl	8011c0c <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	3718      	adds	r7, #24
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}

08014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8014492:	b590      	push	{r4, r7, lr}
 8014494:	b087      	sub	sp, #28
 8014496:	af00      	add	r7, sp, #0
 8014498:	60f8      	str	r0, [r7, #12]
 801449a:	60b9      	str	r1, [r7, #8]
 801449c:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801449e:	68f8      	ldr	r0, [r7, #12]
 80144a0:	f7fd fbdd 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80144a4:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80144a6:	2300      	movs	r3, #0
 80144a8:	617b      	str	r3, [r7, #20]
 80144aa:	697a      	ldr	r2, [r7, #20]
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	429a      	cmp	r2, r3
 80144b0:	da15      	bge.n	80144de <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 80144b2:	697a      	ldr	r2, [r7, #20]
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d00d      	beq.n	80144d6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 80144ba:	6979      	ldr	r1, [r7, #20]
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	f7fd fcd5 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 80144c2:	4604      	mov	r4, r0
 80144c4:	6979      	ldr	r1, [r7, #20]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f7fd fcd0 	bl	8011e6c <_ZNK6tflite12RuntimeShape4DimsEi>
 80144cc:	4603      	mov	r3, r0
 80144ce:	429c      	cmp	r4, r3
 80144d0:	d001      	beq.n	80144d6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 80144d2:	f006 fbaf 	bl	801ac34 <abort>
  for (int i = 0; i < dims_count; ++i) {
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	3301      	adds	r3, #1
 80144da:	617b      	str	r3, [r7, #20]
 80144dc:	e7e5      	b.n	80144aa <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 80144de:	68b9      	ldr	r1, [r7, #8]
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	f7ff f980 	bl	80137e6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80144e6:	4603      	mov	r3, r0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	371c      	adds	r7, #28
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd90      	pop	{r4, r7, pc}

080144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80144f8:	2100      	movs	r1, #0
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7fe f8b0 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014500:	4603      	mov	r3, r0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3708      	adds	r7, #8
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801450a:	b580      	push	{r7, lr}
 801450c:	b082      	sub	sp, #8
 801450e:	af00      	add	r7, sp, #0
 8014510:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f805 	bl	8014522 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8014518:	4603      	mov	r3, r0
}
 801451a:	4618      	mov	r0, r3
 801451c:	3708      	adds	r7, #8
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}

08014522 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014522:	b580      	push	{r7, lr}
 8014524:	b082      	sub	sp, #8
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801452a:	2101      	movs	r1, #1
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f7fe f897 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014532:	4603      	mov	r3, r0
  }
 8014534:	4618      	mov	r0, r3
 8014536:	3708      	adds	r7, #8
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 801453c:	b590      	push	{r4, r7, lr}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014548:	f107 0308 	add.w	r3, r7, #8
 801454c:	4618      	mov	r0, r3
 801454e:	f7fe feb9 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014552:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014554:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014556:	1d3b      	adds	r3, r7, #4
 8014558:	4618      	mov	r0, r3
 801455a:	f7fe feb3 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801455e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	461a      	mov	r2, r3
 8014564:	4621      	mov	r1, r4
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f7ff f912 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801456c:	4603      	mov	r3, r0
 801456e:	4618      	mov	r0, r3
 8014570:	f7fe fe36 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014574:	4603      	mov	r3, r0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3714      	adds	r7, #20
 801457a:	46bd      	mov	sp, r7
 801457c:	bd90      	pop	{r4, r7, pc}

0801457e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 801457e:	b580      	push	{r7, lr}
 8014580:	b082      	sub	sp, #8
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	bf0c      	ite	eq
 801458c:	2301      	moveq	r3, #1
 801458e:	2300      	movne	r3, #0
 8014590:	b2db      	uxtb	r3, r3
 8014592:	4618      	mov	r0, r3
 8014594:	f7fe fc86 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8014598:	4603      	mov	r3, r0
}
 801459a:	4618      	mov	r0, r3
 801459c:	3708      	adds	r7, #8
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
	...

080145a4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08a      	sub	sp, #40	; 0x28
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 80145ac:	482c      	ldr	r0, [pc, #176]	; (8014660 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80145ae:	f7ff ff9f 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80145b2:	4603      	mov	r3, r0
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fe fe90 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80145ba:	4603      	mov	r3, r0
 80145bc:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 80145be:	4829      	ldr	r0, [pc, #164]	; (8014664 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 80145c0:	f7ff ff96 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80145c4:	4603      	mov	r3, r0
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7fe fe87 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80145cc:	4603      	mov	r3, r0
 80145ce:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 80145d0:	f000 f86c 	bl	80146ac <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 80145d4:	4603      	mov	r3, r0
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 f870 	bl	80146be <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80145de:	4603      	mov	r3, r0
 80145e0:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 80145e2:	69f9      	ldr	r1, [r7, #28]
 80145e4:	69f8      	ldr	r0, [r7, #28]
 80145e6:	f000 f83f 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80145ea:	4603      	mov	r3, r0
 80145ec:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 80145ee:	69f9      	ldr	r1, [r7, #28]
 80145f0:	69b8      	ldr	r0, [r7, #24]
 80145f2:	f000 f839 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80145f6:	4603      	mov	r3, r0
 80145f8:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 80145fa:	69b9      	ldr	r1, [r7, #24]
 80145fc:	69b8      	ldr	r0, [r7, #24]
 80145fe:	f000 f833 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014602:	4603      	mov	r3, r0
 8014604:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8014606:	6938      	ldr	r0, [r7, #16]
 8014608:	f000 f877 	bl	80146fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801460c:	4603      	mov	r3, r0
 801460e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8014610:	6979      	ldr	r1, [r7, #20]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f000 f853 	bl	80146be <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014618:	4603      	mov	r3, r0
 801461a:	6a39      	ldr	r1, [r7, #32]
 801461c:	4618      	mov	r0, r3
 801461e:	f000 f823 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014622:	4603      	mov	r3, r0
 8014624:	69b9      	ldr	r1, [r7, #24]
 8014626:	4618      	mov	r0, r3
 8014628:	f000 f849 	bl	80146be <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801462c:	4603      	mov	r3, r0
 801462e:	4618      	mov	r0, r3
 8014630:	f000 f879 	bl	8014726 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014634:	4603      	mov	r3, r0
 8014636:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014638:	68b9      	ldr	r1, [r7, #8]
 801463a:	69f8      	ldr	r0, [r7, #28]
 801463c:	f000 f83f 	bl	80146be <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014640:	4603      	mov	r3, r0
 8014642:	4619      	mov	r1, r3
 8014644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014646:	f000 f80f 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801464a:	4603      	mov	r3, r0
 801464c:	4619      	mov	r1, r3
 801464e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014650:	f000 f87f 	bl	8014752 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014654:	4603      	mov	r3, r0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3728      	adds	r7, #40	; 0x28
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	70f5a894 	.word	0x70f5a894
 8014664:	2aaaaaab 	.word	0x2aaaaaab

08014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8014668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801466a:	b085      	sub	sp, #20
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014672:	1d3b      	adds	r3, r7, #4
 8014674:	4618      	mov	r0, r3
 8014676:	f7fe fe25 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801467a:	4603      	mov	r3, r0
 801467c:	681d      	ldr	r5, [r3, #0]
 801467e:	463b      	mov	r3, r7
 8014680:	4618      	mov	r0, r3
 8014682:	f7fe fe1f 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014686:	4603      	mov	r3, r0
 8014688:	681e      	ldr	r6, [r3, #0]
 801468a:	f107 030c 	add.w	r3, r7, #12
 801468e:	4618      	mov	r0, r3
 8014690:	f7fe fe18 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014694:	4604      	mov	r4, r0
 8014696:	4631      	mov	r1, r6
 8014698:	4628      	mov	r0, r5
 801469a:	f7fd fb77 	bl	8011d8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801469e:	4603      	mov	r3, r0
 80146a0:	6023      	str	r3, [r4, #0]
  return c;
 80146a2:	68fb      	ldr	r3, [r7, #12]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3714      	adds	r7, #20
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146ac <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 80146ac:	b580      	push	{r7, lr}
 80146ae:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80146b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80146b4:	f7fe fe11 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80146b8:	4603      	mov	r3, r0
  }
 80146ba:	4618      	mov	r0, r3
 80146bc:	bd80      	pop	{r7, pc}

080146be <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80146be:	b590      	push	{r4, r7, lr}
 80146c0:	b083      	sub	sp, #12
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
 80146c6:	6039      	str	r1, [r7, #0]
 80146c8:	1d3b      	adds	r3, r7, #4
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fe fdfa 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80146d0:	4603      	mov	r3, r0
 80146d2:	681c      	ldr	r4, [r3, #0]
 80146d4:	463b      	mov	r3, r7
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fe fdf4 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80146dc:	4603      	mov	r3, r0
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	4619      	mov	r1, r3
 80146e2:	4620      	mov	r0, r4
 80146e4:	f7fe fbbc 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80146e8:	4603      	mov	r3, r0
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fe fd78 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80146f0:	4603      	mov	r3, r0
 80146f2:	4618      	mov	r0, r3
 80146f4:	370c      	adds	r7, #12
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd90      	pop	{r4, r7, pc}

080146fa <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 80146fa:	b580      	push	{r7, lr}
 80146fc:	b082      	sub	sp, #8
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014702:	1d3b      	adds	r3, r7, #4
 8014704:	4618      	mov	r0, r3
 8014706:	f7fe fddd 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801470a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4618      	mov	r0, r3
 8014710:	f000 f83d 	bl	801478e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8014714:	4603      	mov	r3, r0
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe fd62 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801471c:	4603      	mov	r3, r0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}

08014726 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014726:	b580      	push	{r7, lr}
 8014728:	b082      	sub	sp, #8
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801472e:	1d3b      	adds	r3, r7, #4
 8014730:	4618      	mov	r0, r3
 8014732:	f7fe fdc7 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014736:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff fee5 	bl	801450a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8014740:	4603      	mov	r3, r0
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe fd4c 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014748:	4603      	mov	r3, r0
}
 801474a:	4618      	mov	r0, r3
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8014752:	b590      	push	{r4, r7, lr}
 8014754:	b083      	sub	sp, #12
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
 801475a:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 801475c:	1d3b      	adds	r3, r7, #4
 801475e:	4618      	mov	r0, r3
 8014760:	f7fe fdb0 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014764:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014766:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8014768:	463b      	mov	r3, r7
 801476a:	4618      	mov	r0, r3
 801476c:	f7fe fdaa 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014770:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	4619      	mov	r1, r3
 8014776:	4620      	mov	r0, r4
 8014778:	f000 f815 	bl	80147a6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 801477c:	4603      	mov	r3, r0
 801477e:	4618      	mov	r0, r3
 8014780:	f7fe fd2e 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014784:	4603      	mov	r3, r0
}
 8014786:	4618      	mov	r0, r3
 8014788:	370c      	adds	r7, #12
 801478a:	46bd      	mov	sp, r7
 801478c:	bd90      	pop	{r4, r7, pc}

0801478e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801478e:	b580      	push	{r7, lr}
 8014790:	b082      	sub	sp, #8
 8014792:	af00      	add	r7, sp, #0
 8014794:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 f813 	bl	80147c2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 801479c:	4603      	mov	r3, r0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b082      	sub	sp, #8
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
 80147ae:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 80147b0:	6839      	ldr	r1, [r7, #0]
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f000 f812 	bl	80147dc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 80147b8:	4603      	mov	r3, r0
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3708      	adds	r7, #8
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b082      	sub	sp, #8
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80147ca:	2102      	movs	r1, #2
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7fd ff47 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80147d2:	4603      	mov	r3, r0
  }
 80147d4:	4618      	mov	r0, r3
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
 80147e6:	6839      	ldr	r1, [r7, #0]
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7fe fb39 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80147ee:	4603      	mov	r3, r0
 80147f0:	4618      	mov	r0, r3
 80147f2:	3708      	adds	r7, #8
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80147f8:	b480      	push	{r7}
 80147fa:	b083      	sub	sp, #12
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
 8014800:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	781a      	ldrb	r2, [r3, #0]
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	429a      	cmp	r2, r3
 801480c:	d201      	bcs.n	8014812 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	e000      	b.n	8014814 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8014812:	687b      	ldr	r3, [r7, #4]
    }
 8014814:	4618      	mov	r0, r3
 8014816:	370c      	adds	r7, #12
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr

08014820 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	e000      	b.n	8014836 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	370c      	adds	r7, #12
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr
	...

08014844 <_ZN6tflite26generic_int16_table_lookupEsPKs>:
inline int16_t generic_int16_table_lookup(int16_t value, const int16_t* lut) {
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	4603      	mov	r3, r0
 801484c:	6039      	str	r1, [r7, #0]
 801484e:	80fb      	strh	r3, [r7, #6]
  uint16_t index = static_cast<uint16_t>(256 + (value >> 7));
 8014850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014854:	11db      	asrs	r3, r3, #7
 8014856:	b29b      	uxth	r3, r3
 8014858:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801485c:	82fb      	strh	r3, [r7, #22]
  assert(index < 512 && "LUT index out of range.");
 801485e:	8afb      	ldrh	r3, [r7, #22]
 8014860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014864:	d306      	bcc.n	8014874 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x30>
 8014866:	4b1b      	ldr	r3, [pc, #108]	; (80148d4 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x90>)
 8014868:	4a1b      	ldr	r2, [pc, #108]	; (80148d8 <_ZN6tflite26generic_int16_table_lookupEsPKs+0x94>)
 801486a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801486e:	481b      	ldr	r0, [pc, #108]	; (80148dc <_ZN6tflite26generic_int16_table_lookupEsPKs+0x98>)
 8014870:	f006 f9e8 	bl	801ac44 <__assert_func>
  int16_t offset = value & 0x7f;
 8014874:	88fb      	ldrh	r3, [r7, #6]
 8014876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801487a:	82bb      	strh	r3, [r7, #20]
  int16_t base = lut[index];
 801487c:	8afb      	ldrh	r3, [r7, #22]
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	4413      	add	r3, r2
 8014884:	881b      	ldrh	r3, [r3, #0]
 8014886:	827b      	strh	r3, [r7, #18]
  int16_t slope = lut[index + 1] - lut[index];
 8014888:	8afb      	ldrh	r3, [r7, #22]
 801488a:	3301      	adds	r3, #1
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	683a      	ldr	r2, [r7, #0]
 8014890:	4413      	add	r3, r2
 8014892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014896:	b29a      	uxth	r2, r3
 8014898:	8afb      	ldrh	r3, [r7, #22]
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	6839      	ldr	r1, [r7, #0]
 801489e:	440b      	add	r3, r1
 80148a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	1ad3      	subs	r3, r2, r3
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	823b      	strh	r3, [r7, #16]
  int32_t delta = (static_cast<int32_t>(slope) * offset + 64) >> 7;
 80148ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80148b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80148b4:	fb02 f303 	mul.w	r3, r2, r3
 80148b8:	3340      	adds	r3, #64	; 0x40
 80148ba:	11db      	asrs	r3, r3, #7
 80148bc:	60fb      	str	r3, [r7, #12]
  return base + delta;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	8a7b      	ldrh	r3, [r7, #18]
 80148c4:	4413      	add	r3, r2
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	b21b      	sxth	r3, r3
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	0801f030 	.word	0x0801f030
 80148d8:	0801f05c 	.word	0x0801f05c
 80148dc:	0801f0a0 	.word	0x0801f0a0

080148e0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 80148e0:	b580      	push	{r7, lr}
 80148e2:	ed2d 8b02 	vpush	{d8}
 80148e6:	b08e      	sub	sp, #56	; 0x38
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	607a      	str	r2, [r7, #4]
 80148f0:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80148f2:	68b8      	ldr	r0, [r7, #8]
 80148f4:	f7fd f9b3 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80148f8:	4603      	mov	r3, r0
 80148fa:	3b01      	subs	r3, #1
 80148fc:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80148fe:	683a      	ldr	r2, [r7, #0]
 8014900:	6a39      	ldr	r1, [r7, #32]
 8014902:	68b8      	ldr	r0, [r7, #8]
 8014904:	f7ff fdc5 	bl	8014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014908:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801490a:	6a3b      	ldr	r3, [r7, #32]
 801490c:	683a      	ldr	r2, [r7, #0]
 801490e:	6a39      	ldr	r1, [r7, #32]
 8014910:	68b8      	ldr	r0, [r7, #8]
 8014912:	f7fe fb8a 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014916:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8014918:	2300      	movs	r3, #0
 801491a:	637b      	str	r3, [r7, #52]	; 0x34
 801491c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	429a      	cmp	r2, r3
 8014922:	f280 8087 	bge.w	8014a34 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x154>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8014926:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801492a:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801492c:	2300      	movs	r3, #0
 801492e:	633b      	str	r3, [r7, #48]	; 0x30
 8014930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	429a      	cmp	r2, r3
 8014936:	da15      	bge.n	8014964 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8014938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801493a:	69ba      	ldr	r2, [r7, #24]
 801493c:	fb02 f203 	mul.w	r2, r2, r3
 8014940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014942:	4413      	add	r3, r2
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	441a      	add	r2, r3
 801494a:	f107 0310 	add.w	r3, r7, #16
 801494e:	4611      	mov	r1, r2
 8014950:	4618      	mov	r0, r3
 8014952:	f7fc fe29 	bl	80115a8 <_ZSt3maxIfERKT_S2_S2_>
 8014956:	4603      	mov	r3, r0
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495e:	3301      	adds	r3, #1
 8014960:	633b      	str	r3, [r7, #48]	; 0x30
 8014962:	e7e5      	b.n	8014930 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8014964:	f04f 0300 	mov.w	r3, #0
 8014968:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801496a:	2300      	movs	r3, #0
 801496c:	62bb      	str	r3, [r7, #40]	; 0x28
 801496e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	429a      	cmp	r2, r3
 8014974:	da36      	bge.n	80149e4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x104>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8014976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014978:	69ba      	ldr	r2, [r7, #24]
 801497a:	fb02 f203 	mul.w	r2, r2, r3
 801497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014980:	4413      	add	r3, r2
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	687a      	ldr	r2, [r7, #4]
 8014986:	4413      	add	r3, r2
 8014988:	ed93 7a00 	vldr	s14, [r3]
 801498c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014990:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499a:	4610      	mov	r0, r2
 801499c:	4619      	mov	r1, r3
 801499e:	f7ec f93d 	bl	8000c1c <__aeabi_d2f>
 80149a2:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80149a6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80149aa:	eeb0 0a67 	vmov.f32	s0, s15
 80149ae:	f7ec fb97 	bl	80010e0 <_ZSt3expf>
 80149b2:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 80149b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b8:	69ba      	ldr	r2, [r7, #24]
 80149ba:	fb02 f203 	mul.w	r2, r2, r3
 80149be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c0:	4413      	add	r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80149c6:	4413      	add	r3, r2
 80149c8:	697a      	ldr	r2, [r7, #20]
 80149ca:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 80149cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80149d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80149d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80149dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149de:	3301      	adds	r3, #1
 80149e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80149e2:	e7c4      	b.n	801496e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 80149e4:	2300      	movs	r3, #0
 80149e6:	627b      	str	r3, [r7, #36]	; 0x24
 80149e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	da1d      	bge.n	8014a2c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80149f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149f2:	69ba      	ldr	r2, [r7, #24]
 80149f4:	fb02 f203 	mul.w	r2, r2, r3
 80149f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fa:	4413      	add	r3, r2
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a00:	4413      	add	r3, r2
 8014a02:	edd3 6a00 	vldr	s13, [r3]
 8014a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	fb02 f203 	mul.w	r2, r2, r3
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	4413      	add	r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a16:	4413      	add	r3, r2
 8014a18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014a20:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8014a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a26:	3301      	adds	r3, #1
 8014a28:	627b      	str	r3, [r7, #36]	; 0x24
 8014a2a:	e7dd      	b.n	80149e8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
  for (int i = 0; i < outer_size; ++i) {
 8014a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a2e:	3301      	adds	r3, #1
 8014a30:	637b      	str	r3, [r7, #52]	; 0x34
 8014a32:	e773      	b.n	801491c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 8014a34:	bf00      	nop
 8014a36:	3738      	adds	r7, #56	; 0x38
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	ecbd 8b02 	vpop	{d8}
 8014a3e:	bd80      	pop	{r7, pc}

08014a40 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>:
}

// Computes exp(input - max_input)
inline int16_t SoftMaxCalculateExp(const SoftmaxParams& params,
                                   const int16_t* input_data, const int depth,
                                   int16_t max_in_row, int i, int c) {
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b08a      	sub	sp, #40	; 0x28
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
 8014a4c:	807b      	strh	r3, [r7, #2]
  int32_t input_diff = input_data[i * depth + c] - max_in_row;
 8014a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	fb02 f203 	mul.w	r2, r2, r3
 8014a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a58:	4413      	add	r3, r2
 8014a5a:	005b      	lsls	r3, r3, #1
 8014a5c:	68ba      	ldr	r2, [r7, #8]
 8014a5e:	4413      	add	r3, r2
 8014a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a64:	461a      	mov	r2, r3
 8014a66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	627b      	str	r3, [r7, #36]	; 0x24
  // scale the input_diff such that [-65535, 0] correspond to [-10.0, 0.0]
  // exp lut generated with range [-10, 0], as exp(-10) is negligible.
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
      input_diff, params.input_multiplier, params.input_left_shift);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6899      	ldr	r1, [r3, #8]
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	68db      	ldr	r3, [r3, #12]
  int32_t scaled_diff = MultiplyByQuantizedMultiplier(
 8014a76:	461a      	mov	r2, r3
 8014a78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a7a:	f7fd fa87 	bl	8011f8c <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8014a7e:	6238      	str	r0, [r7, #32]
  // recenter to [-32768, 32767]
  int32_t sym_scaled_diff = scaled_diff + 32767;
 8014a80:	6a3b      	ldr	r3, [r7, #32]
 8014a82:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8014a86:	337f      	adds	r3, #127	; 0x7f
 8014a88:	613b      	str	r3, [r7, #16]
  int16_t sat_sym_scaled_diff =
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8014a8a:	4b12      	ldr	r3, [pc, #72]	; (8014ad4 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii+0x94>)
 8014a8c:	617b      	str	r3, [r7, #20]
               static_cast<int32_t>(32767));
 8014a8e:	f107 0214 	add.w	r2, r7, #20
 8014a92:	f107 0310 	add.w	r3, r7, #16
 8014a96:	4611      	mov	r1, r2
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7fd f895 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014aa4:	61bb      	str	r3, [r7, #24]
 8014aa6:	f107 0318 	add.w	r3, r7, #24
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4610      	mov	r0, r2
 8014aae:	f7fd f877 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8014ab2:	4603      	mov	r3, r0
      std::min(std::max(sym_scaled_diff, static_cast<int32_t>(-32768)),
 8014ab4:	681b      	ldr	r3, [r3, #0]
               static_cast<int32_t>(32767));
 8014ab6:	83fb      	strh	r3, [r7, #30]
  // apply the exp() LUT activation function
  return generic_int16_table_lookup(sat_sym_scaled_diff, params.exp_lut);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014abc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7ff febe 	bl	8014844 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8014ac8:	4603      	mov	r3, r0
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3728      	adds	r7, #40	; 0x28
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	ffff8000 	.word	0xffff8000

08014ad8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
// Quantized softmax with int16_t input and int16_t output.
inline void SoftmaxInt16(const SoftmaxParams& params,
                         const RuntimeShape& input_shape,
                         const int16_t* input_data,
                         const RuntimeShape& output_shape,
                         int16_t* output_data) {
 8014ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014adc:	b0a1      	sub	sp, #132	; 0x84
 8014ade:	af02      	add	r7, sp, #8
 8014ae0:	6178      	str	r0, [r7, #20]
 8014ae2:	6139      	str	r1, [r7, #16]
 8014ae4:	60fa      	str	r2, [r7, #12]
 8014ae6:	60bb      	str	r3, [r7, #8]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014ae8:	6938      	ldr	r0, [r7, #16]
 8014aea:	f7fd f8b8 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014aee:	4603      	mov	r3, r0
 8014af0:	3b01      	subs	r3, #1
 8014af2:	663b      	str	r3, [r7, #96]	; 0x60
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014af4:	68ba      	ldr	r2, [r7, #8]
 8014af6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014af8:	6938      	ldr	r0, [r7, #16]
 8014afa:	f7ff fcca 	bl	8014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014afe:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014b02:	68ba      	ldr	r2, [r7, #8]
 8014b04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014b06:	6938      	ldr	r0, [r7, #16]
 8014b08:	f7fe fa8f 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014b0c:	65b8      	str	r0, [r7, #88]	; 0x58

  for (int i = 0; i < outer_size; ++i) {
 8014b0e:	2300      	movs	r3, #0
 8014b10:	677b      	str	r3, [r7, #116]	; 0x74
 8014b12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b16:	429a      	cmp	r2, r3
 8014b18:	f280 8119 	bge.w	8014d4e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x276>
    // Find the largest element
    int16_t max_in_row = std::numeric_limits<int16_t>::min();
 8014b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b20:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8014b22:	2300      	movs	r3, #0
 8014b24:	673b      	str	r3, [r7, #112]	; 0x70
 8014b26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	da16      	bge.n	8014b5c <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x84>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8014b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014b32:	fb02 f203 	mul.w	r2, r2, r3
 8014b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b38:	4413      	add	r3, r2
 8014b3a:	005b      	lsls	r3, r3, #1
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	441a      	add	r2, r3
 8014b40:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8014b44:	4611      	mov	r1, r2
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fc6b 	bl	8014422 <_ZSt3maxIsERKT_S2_S2_>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b52:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int c = 0; c < depth; ++c) {
 8014b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b56:	3301      	adds	r3, #1
 8014b58:	673b      	str	r3, [r7, #112]	; 0x70
 8014b5a:	e7e4      	b.n	8014b26 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x4e>

    // This loops computes the exp values and their sum. We will need the exp
    // values later on in the function so we cache them in the output_data
    // buffer. This is an optimization done to avoid calculating the exp values
    // twice making use of the output_data buffer as scratch memory.
    int32_t sum_of_exps = 0;  // Q16.15 fixed point format.
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    int16_t* exp_results_Q015 = output_data + i * depth;
 8014b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014b64:	fb02 f303 	mul.w	r3, r2, r3
 8014b68:	005b      	lsls	r3, r3, #1
 8014b6a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014b6e:	4413      	add	r3, r2
 8014b70:	657b      	str	r3, [r7, #84]	; 0x54
    for (int c = 0; c < depth; ++c) {
 8014b72:	2300      	movs	r3, #0
 8014b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8014b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	da1f      	bge.n	8014bbe <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xe6>
      exp_results_Q015[c] =
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8014b7e:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
      exp_results_Q015[c] =
 8014b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b84:	005b      	lsls	r3, r3, #1
 8014b86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b88:	18d6      	adds	r6, r2, r3
          SoftMaxCalculateExp(params, input_data, depth, max_in_row, i, c);
 8014b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014b8c:	9301      	str	r3, [sp, #4]
 8014b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b90:	9300      	str	r3, [sp, #0]
 8014b92:	460b      	mov	r3, r1
 8014b94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014b96:	68f9      	ldr	r1, [r7, #12]
 8014b98:	6978      	ldr	r0, [r7, #20]
 8014b9a:	f7ff ff51 	bl	8014a40 <_ZN6tflite13reference_ops19SoftMaxCalculateExpERKNS_13SoftmaxParamsEPKsisii>
 8014b9e:	4603      	mov	r3, r0
      exp_results_Q015[c] =
 8014ba0:	8033      	strh	r3, [r6, #0]
      sum_of_exps += exp_results_Q015[c];
 8014ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ba8:	4413      	add	r3, r2
 8014baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bb2:	4413      	add	r3, r2
 8014bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (int c = 0; c < depth; ++c) {
 8014bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bb8:	3301      	adds	r3, #1
 8014bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8014bbc:	e7db      	b.n	8014b76 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x9e>
    }

    // Compute the reciprocal 1/sum_of_exps
    uint8_t headroom_plus_one =
        CountLeadingZeros(static_cast<uint32_t>(sum_of_exps));
 8014bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7fe fafb 	bl	80131bc <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    int32_t shifted_sum =
        ((static_cast<int64_t>(sum_of_exps) << (headroom_plus_one - 1)) +
 8014bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bce:	461a      	mov	r2, r3
 8014bd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014bd4:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8014bd8:	3901      	subs	r1, #1
 8014bda:	f1a1 0620 	sub.w	r6, r1, #32
 8014bde:	f1c1 0020 	rsb	r0, r1, #32
 8014be2:	fa03 f501 	lsl.w	r5, r3, r1
 8014be6:	fa02 f606 	lsl.w	r6, r2, r6
 8014bea:	4335      	orrs	r5, r6
 8014bec:	fa22 f000 	lsr.w	r0, r2, r0
 8014bf0:	4305      	orrs	r5, r0
 8014bf2:	fa02 f401 	lsl.w	r4, r2, r1
 8014bf6:	f514 5300 	adds.w	r3, r4, #8192	; 0x2000
 8014bfa:	603b      	str	r3, [r7, #0]
 8014bfc:	f145 0300 	adc.w	r3, r5, #0
 8014c00:	607b      	str	r3, [r7, #4]
         (1 << 13)) >>
 8014c02:	f04f 0200 	mov.w	r2, #0
 8014c06:	f04f 0300 	mov.w	r3, #0
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	0b8a      	lsrs	r2, r1, #14
 8014c0e:	6879      	ldr	r1, [r7, #4]
 8014c10:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8014c14:	6879      	ldr	r1, [r7, #4]
 8014c16:	138b      	asrs	r3, r1, #14
    int32_t shifted_sum =
 8014c18:	4613      	mov	r3, r2
 8014c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
        14;
    // since the LUT computes 1/(1 + x) we need to first compute x = (sum - 1).
    // also, the LUT expects a symmetrical input, so we must also recenter x
    // from [0, 65535] to [-32768, 32767].
    int32_t sym_shifted_sum = shifted_sum + (-((1 << 15) + (1 << 16)));
 8014c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1e:	f5a3 33c0 	sub.w	r3, r3, #98304	; 0x18000
 8014c22:	623b      	str	r3, [r7, #32]
    int16_t sat_sym_shifted_sum = static_cast<int16_t>(
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8014c24:	4b4c      	ldr	r3, [pc, #304]	; (8014d58 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x280>)
 8014c26:	62bb      	str	r3, [r7, #40]	; 0x28
                 static_cast<int32_t>(32767)));
 8014c28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014c2c:	f107 0320 	add.w	r3, r7, #32
 8014c30:	4611      	mov	r1, r2
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fc ffc8 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8014c38:	4602      	mov	r2, r0
 8014c3a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c44:	4619      	mov	r1, r3
 8014c46:	4610      	mov	r0, r2
 8014c48:	f7fc ffaa 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8014c4c:	4603      	mov	r3, r0
        std::min(std::max(sym_shifted_sum, static_cast<int32_t>(-32768)),
 8014c4e:	681b      	ldr	r3, [r3, #0]
                 static_cast<int32_t>(32767)));
 8014c50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    // apply 1/(1 + x) LUT activation function
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
        sat_sym_shifted_sum, params.one_over_one_plus_x_lut);
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    int16_t reciprocal_scale_Q015 = generic_int16_table_lookup(
 8014c58:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014c5c:	4611      	mov	r1, r2
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7ff fdf0 	bl	8014844 <_ZN6tflite26generic_int16_table_lookupEsPKs>
 8014c64:	4603      	mov	r3, r0
 8014c66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    // Rescale the exp_result with reciprocal
    // range of output is [0, 32767] correspond to [0.0, 1.0]
    for (int c = 0; c < depth; ++c) {
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8014c6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014c72:	429a      	cmp	r2, r3
 8014c74:	da67      	bge.n	8014d46 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x26e>
      uint8_t right_shift = 31 - headroom_plus_one;
 8014c76:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8014c7a:	f1c3 031f 	rsb	r3, r3, #31
 8014c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      int64_t round = 1 << (right_shift - 1);
 8014c82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014c86:	3b01      	subs	r3, #1
 8014c88:	2201      	movs	r2, #1
 8014c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8014c8e:	461a      	mov	r2, r3
 8014c90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014c94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c9a:	005b      	lsls	r3, r3, #1
 8014c9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ca4:	b218      	sxth	r0, r3
 8014ca6:	ea4f 71e0 	mov.w	r1, r0, asr #31
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8014caa:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8014cae:	ea4f 73e2 	mov.w	r3, r2, asr #31
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014cb2:	fb02 fc01 	mul.w	ip, r2, r1
 8014cb6:	fb00 f603 	mul.w	r6, r0, r3
 8014cba:	4466      	add	r6, ip
 8014cbc:	fba0 2302 	umull	r2, r3, r0, r2
 8014cc0:	18f1      	adds	r1, r6, r3
 8014cc2:	460b      	mov	r3, r1
                            static_cast<int64_t>(reciprocal_scale_Q015) +
 8014cc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014cc8:	eb12 0a00 	adds.w	sl, r2, r0
 8014ccc:	eb43 0b01 	adc.w	fp, r3, r1
                        round) >>
                       right_shift;
 8014cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
                        round) >>
 8014cd4:	f1c3 0120 	rsb	r1, r3, #32
 8014cd8:	f1b3 0220 	subs.w	r2, r3, #32
 8014cdc:	fa2a f803 	lsr.w	r8, sl, r3
 8014ce0:	fa0b f101 	lsl.w	r1, fp, r1
 8014ce4:	ea48 0801 	orr.w	r8, r8, r1
 8014ce8:	d403      	bmi.n	8014cf2 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x21a>
 8014cea:	fa4b f202 	asr.w	r2, fp, r2
 8014cee:	ea48 0802 	orr.w	r8, r8, r2
 8014cf2:	fa4b f903 	asr.w	r9, fp, r3
      int32_t result = (static_cast<int64_t>(exp_results_Q015[c]) *
 8014cf6:	4643      	mov	r3, r8
 8014cf8:	61fb      	str	r3, [r7, #28]
      output_data[i * depth + c] = static_cast<int16_t>(
          std::min(std::max(result, static_cast<int32_t>(0)),
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	633b      	str	r3, [r7, #48]	; 0x30
                   static_cast<int32_t>(32767)));
 8014cfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014d02:	f107 031c 	add.w	r3, r7, #28
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fc ff5d 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8014d0e:	4602      	mov	r2, r0
 8014d10:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014d14:	637b      	str	r3, [r7, #52]	; 0x34
 8014d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	4610      	mov	r0, r2
 8014d1e:	f7fc ff3f 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8014d22:	4603      	mov	r3, r0
          std::min(std::max(result, static_cast<int32_t>(0)),
 8014d24:	6819      	ldr	r1, [r3, #0]
      output_data[i * depth + c] = static_cast<int16_t>(
 8014d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d2a:	fb02 f203 	mul.w	r2, r2, r3
 8014d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d30:	4413      	add	r3, r2
 8014d32:	005b      	lsls	r3, r3, #1
 8014d34:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014d38:	4413      	add	r3, r2
 8014d3a:	b20a      	sxth	r2, r1
 8014d3c:	801a      	strh	r2, [r3, #0]
    for (int c = 0; c < depth; ++c) {
 8014d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014d40:	3301      	adds	r3, #1
 8014d42:	667b      	str	r3, [r7, #100]	; 0x64
 8014d44:	e793      	b.n	8014c6e <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x196>
  for (int i = 0; i < outer_size; ++i) {
 8014d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d48:	3301      	adds	r3, #1
 8014d4a:	677b      	str	r3, [r7, #116]	; 0x74
 8014d4c:	e6e1      	b.n	8014b12 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x3a>
    }
  }
}
 8014d4e:	bf00      	nop
 8014d50:	377c      	adds	r7, #124	; 0x7c
 8014d52:	46bd      	mov	sp, r7
 8014d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d58:	ffff8000 	.word	0xffff8000

08014d5c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>:

namespace tflite {
namespace {

void SoftmaxQuantized(const TfLiteEvalTensor* input, TfLiteEvalTensor* output,
                      const SoftmaxParams& op_data) {
 8014d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d60:	b0bc      	sub	sp, #240	; 0xf0
 8014d62:	af04      	add	r7, sp, #16
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	60b9      	str	r1, [r7, #8]
 8014d68:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	7a1b      	ldrb	r3, [r3, #8]
 8014d6e:	2b03      	cmp	r3, #3
 8014d70:	d127      	bne.n	8014dc2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x66>
    tflite::reference_ops::Softmax(
        op_data, tflite::micro::GetTensorShape(input),
 8014d72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014d76:	68f9      	ldr	r1, [r7, #12]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7ff fb68 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f7fd feb2 	bl	8012ae8 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8014d84:	4604      	mov	r4, r0
        tflite::micro::GetTensorData<uint8_t>(input),
        tflite::micro::GetTensorShape(output),
 8014d86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d8a:	68b9      	ldr	r1, [r7, #8]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7ff fb5e 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::Softmax(
 8014d92:	68b8      	ldr	r0, [r7, #8]
 8014d94:	f7fd feb7 	bl	8012b06 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d9e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014da2:	9200      	str	r2, [sp, #0]
 8014da4:	4622      	mov	r2, r4
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f000 f956 	bl	8015058 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        tflite::micro::GetTensorShape(output),
 8014dac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7fc ff3e 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8014db6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fc ff39 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
        tflite::micro::GetTensorData<int16_t>(input),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int16_t>(output));
  }
}
 8014dc0:	e0a6      	b.n	8014f10 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
  } else if (input->type == kTfLiteInt8) {
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	7a1b      	ldrb	r3, [r3, #8]
 8014dc6:	2b09      	cmp	r3, #9
 8014dc8:	d17b      	bne.n	8014ec2 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x166>
    if (output->type == kTfLiteInt16) {
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	7a1b      	ldrb	r3, [r3, #8]
 8014dce:	2b07      	cmp	r3, #7
 8014dd0:	d127      	bne.n	8014e22 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0xc6>
          op_data, tflite::micro::GetTensorShape(input),
 8014dd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014dd6:	68f9      	ldr	r1, [r7, #12]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff fb38 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f7fd fe16 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014de4:	4604      	mov	r4, r0
          tflite::micro::GetTensorShape(output),
 8014de6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014dea:	68b9      	ldr	r1, [r7, #8]
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7ff fb2e 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014df2:	68b8      	ldr	r0, [r7, #8]
 8014df4:	f7ff fd14 	bl	8014820 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8014df8:	4602      	mov	r2, r0
 8014dfa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014dfe:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8014e02:	9200      	str	r2, [sp, #0]
 8014e04:	4622      	mov	r2, r4
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f000 fa41 	bl	801528e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          tflite::micro::GetTensorShape(output),
 8014e0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7fc ff0e 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, tflite::micro::GetTensorShape(input),
 8014e16:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7fc ff09 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014e20:	e076      	b.n	8014f10 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8014e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e26:	68f9      	ldr	r1, [r7, #12]
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7ff fb10 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8014e2e:	f107 0314 	add.w	r3, r7, #20
 8014e32:	68b9      	ldr	r1, [r7, #8]
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7ff fb0a 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7fc ff0d 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014e44:	4603      	mov	r3, r0
 8014e46:	3b01      	subs	r3, #1
 8014e48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014e4c:	f107 0214 	add.w	r2, r7, #20
 8014e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e54:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7ff fb1a 	bl	8014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014e5e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
          MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014e62:	f107 0214 	add.w	r2, r7, #20
 8014e66:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8014e72:	f7fe f8da 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014e76:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8014e7a:	68f8      	ldr	r0, [r7, #12]
 8014e7c:	f7fd fdc8 	bl	8012a10 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8014e80:	4680      	mov	r8, r0
                     depth, op_data.input_multiplier, op_data.input_left_shift,
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	689e      	ldr	r6, [r3, #8]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	68dc      	ldr	r4, [r3, #12]
                     op_data.diff_min,
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	699d      	ldr	r5, [r3, #24]
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 8014e8e:	68b8      	ldr	r0, [r7, #8]
 8014e90:	f7fd fdcd 	bl	8012a2e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8014e94:	4603      	mov	r3, r0
 8014e96:	9302      	str	r3, [sp, #8]
 8014e98:	9501      	str	r5, [sp, #4]
 8014e9a:	9400      	str	r4, [sp, #0]
 8014e9c:	4633      	mov	r3, r6
 8014e9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014ea2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	f7f7 fb5a 	bl	800c560 <arm_softmax_s8>
      const auto output_shape = tflite::micro::GetTensorShape(output);
 8014eac:	f107 0314 	add.w	r3, r7, #20
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fc febe 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
      const auto input_shape = tflite::micro::GetTensorShape(input);
 8014eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fc feb9 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014ec0:	e026      	b.n	8014f10 <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE+0x1b4>
        op_data, tflite::micro::GetTensorShape(input),
 8014ec2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014ec6:	68f9      	ldr	r1, [r7, #12]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7ff fac0 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8014ece:	68f8      	ldr	r0, [r7, #12]
 8014ed0:	f7fe f8da 	bl	8013088 <_ZN6tflite5micro13GetTensorDataIsEEPKT_PK16TfLiteEvalTensor>
 8014ed4:	4604      	mov	r4, r0
        tflite::micro::GetTensorShape(output),
 8014ed6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014eda:	68b9      	ldr	r1, [r7, #8]
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7ff fab6 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    tflite::reference_ops::SoftmaxInt16(
 8014ee2:	68b8      	ldr	r0, [r7, #8]
 8014ee4:	f7ff fc9c 	bl	8014820 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014eee:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8014ef2:	9200      	str	r2, [sp, #0]
 8014ef4:	4622      	mov	r2, r4
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f7ff fdee 	bl	8014ad8 <_ZN6tflite13reference_ops12SoftmaxInt16ERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKsS6_Ps>
        tflite::micro::GetTensorShape(output),
 8014efc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7fc fe96 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, tflite::micro::GetTensorShape(input),
 8014f06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fc fe91 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014f10:	bf00      	nop
 8014f12:	37e0      	adds	r7, #224	; 0xe0
 8014f14:	46bd      	mov	sp, r7
 8014f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014f1c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8014f1c:	b5b0      	push	{r4, r5, r7, lr}
 8014f1e:	b0a0      	sub	sp, #128	; 0x80
 8014f20:	af02      	add	r7, sp, #8
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8014f26:	2200      	movs	r2, #0
 8014f28:	6839      	ldr	r1, [r7, #0]
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f7fd f872 	bl	8012014 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8014f30:	6778      	str	r0, [r7, #116]	; 0x74
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8014f32:	2200      	movs	r2, #0
 8014f34:	6839      	ldr	r1, [r7, #0]
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f7fd f87c 	bl	8012034 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8014f3c:	6738      	str	r0, [r7, #112]	; 0x70

  TFLITE_DCHECK(node->user_data != nullptr);
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	691b      	ldr	r3, [r3, #16]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d101      	bne.n	8014f4a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2e>
 8014f46:	f005 fe75 	bl	801ac34 <abort>
  const SoftmaxParams data =
      *static_cast<const SoftmaxParams*>(node->user_data);
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	691b      	ldr	r3, [r3, #16]
  const SoftmaxParams data =
 8014f4e:	f107 0408 	add.w	r4, r7, #8
 8014f52:	461d      	mov	r5, r3
 8014f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f64:	e884 0003 	stmia.w	r4, {r0, r1}

  switch (input->type) {
 8014f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014f6a:	7a1b      	ldrb	r3, [r3, #8]
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	2b08      	cmp	r3, #8
 8014f70:	d847      	bhi.n	8015002 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe6>
 8014f72:	a201      	add	r2, pc, #4	; (adr r2, 8014f78 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>)
 8014f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f78:	08014f9d 	.word	0x08014f9d
 8014f7c:	08015003 	.word	0x08015003
 8014f80:	08014ff1 	.word	0x08014ff1
 8014f84:	08015003 	.word	0x08015003
 8014f88:	08015003 	.word	0x08015003
 8014f8c:	08015003 	.word	0x08015003
 8014f90:	08014ff1 	.word	0x08014ff1
 8014f94:	08015003 	.word	0x08015003
 8014f98:	08014ff1 	.word	0x08014ff1
    case kTfLiteFloat32: {
      tflite::reference_ops::Softmax(
          data, tflite::micro::GetTensorShape(input),
 8014f9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014fa0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7ff fa53 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014fa8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8014faa:	f7fd fd11 	bl	80129d0 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8014fae:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8014fb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014fb4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7ff fa49 	bl	801444e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8014fbc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8014fbe:	f7fd fd16 	bl	80129ee <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8014fc2:	4602      	mov	r2, r0
 8014fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014fc8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014fcc:	f107 0008 	add.w	r0, r7, #8
 8014fd0:	9200      	str	r2, [sp, #0]
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	f7ff fc84 	bl	80148e0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8014fd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7fc fe28 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          data, tflite::micro::GetTensorShape(input),
 8014fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7fc fe23 	bl	8011c32 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8014fec:	2300      	movs	r3, #0
 8014fee:	e016      	b.n	801501e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8:
    case kTfLiteInt16: {
      SoftmaxQuantized(input, output, data);
 8014ff0:	f107 0308 	add.w	r3, r7, #8
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014ff8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8014ffa:	f7ff feaf 	bl	8014d5c <_ZN6tflite12_GLOBAL__N_116SoftmaxQuantizedEPK16TfLiteEvalTensorPS1_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014ffe:	2300      	movs	r3, #0
 8015000:	e00d      	b.n	801501e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x102>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	695c      	ldr	r4, [r3, #20]
 8015006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015008:	7a1b      	ldrb	r3, [r3, #8]
 801500a:	4618      	mov	r0, r3
 801500c:	f7fc f8b6 	bl	801117c <TfLiteTypeGetName>
 8015010:	4602      	mov	r2, r0
 8015012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015014:	7a1b      	ldrb	r3, [r3, #8]
 8015016:	4904      	ldr	r1, [pc, #16]	; (8015028 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10c>)
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801501c:	2301      	movs	r3, #1
  }
}
 801501e:	4618      	mov	r0, r3
 8015020:	3778      	adds	r7, #120	; 0x78
 8015022:	46bd      	mov	sp, r7
 8015024:	bdb0      	pop	{r4, r5, r7, pc}
 8015026:	bf00      	nop
 8015028:	0801f134 	.word	0x0801f134

0801502c <_ZN6tflite16Register_SOFTMAXEv>:

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801502c:	b4b0      	push	{r4, r5, r7}
 801502e:	b083      	sub	sp, #12
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	4a07      	ldr	r2, [pc, #28]	; (8015054 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8015038:	461c      	mov	r4, r3
 801503a:	4615      	mov	r5, r2
 801503c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801503e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015040:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	bcb0      	pop	{r4, r5, r7}
 8015050:	4770      	bx	lr
 8015052:	bf00      	nop
 8015054:	0801f150 	.word	0x0801f150

08015058 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8015058:	b590      	push	{r4, r7, lr}
 801505a:	b09f      	sub	sp, #124	; 0x7c
 801505c:	af00      	add	r7, sp, #0
 801505e:	60f8      	str	r0, [r7, #12]
 8015060:	60b9      	str	r1, [r7, #8]
 8015062:	607a      	str	r2, [r7, #4]
 8015064:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	689b      	ldr	r3, [r3, #8]
 801506a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015078:	68b8      	ldr	r0, [r7, #8]
 801507a:	f7fc fdf0 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801507e:	4603      	mov	r3, r0
 8015080:	3b01      	subs	r3, #1
 8015082:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015084:	683a      	ldr	r2, [r7, #0]
 8015086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015088:	68b8      	ldr	r0, [r7, #8]
 801508a:	f7ff fa02 	bl	8014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801508e:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015092:	683a      	ldr	r2, [r7, #0]
 8015094:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015096:	68b8      	ldr	r0, [r7, #8]
 8015098:	f7fd ffc7 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801509c:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 801509e:	2300      	movs	r3, #0
 80150a0:	677b      	str	r3, [r7, #116]	; 0x74
 80150a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80150a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150a6:	429a      	cmp	r2, r3
 80150a8:	f280 80ed 	bge.w	8015286 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80150ac:	2300      	movs	r3, #0
 80150ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80150b2:	2300      	movs	r3, #0
 80150b4:	673b      	str	r3, [r7, #112]	; 0x70
 80150b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80150b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150ba:	429a      	cmp	r2, r3
 80150bc:	da16      	bge.n	80150ec <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80150be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150c2:	fb02 f203 	mul.w	r2, r2, r3
 80150c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150c8:	4413      	add	r3, r2
 80150ca:	461a      	mov	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	441a      	add	r2, r3
 80150d0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80150d4:	4611      	mov	r1, r2
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7ff fb8e 	bl	80147f8 <_ZSt3maxIhERKT_S2_S2_>
 80150dc:	4603      	mov	r3, r0
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80150e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150e6:	3301      	adds	r3, #1
 80150e8:	673b      	str	r3, [r7, #112]	; 0x70
 80150ea:	e7e4      	b.n	80150b6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80150ec:	f000 f9ed 	bl	80154ca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80150f0:	4603      	mov	r3, r0
 80150f2:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80150f4:	2300      	movs	r3, #0
 80150f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80150f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80150fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150fc:	429a      	cmp	r2, r3
 80150fe:	da2f      	bge.n	8015160 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015104:	fb02 f203 	mul.w	r2, r2, r3
 8015108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801510a:	4413      	add	r3, r2
 801510c:	461a      	mov	r2, r3
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4413      	add	r3, r2
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	461a      	mov	r2, r3
 8015116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801511e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015122:	429a      	cmp	r2, r3
 8015124:	db18      	blt.n	8015158 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015128:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801512a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801512c:	f7fe f808 	bl	8013140 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015130:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015132:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015134:	f000 f9d1 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015138:	4603      	mov	r3, r0
 801513a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801513c:	69f8      	ldr	r0, [r7, #28]
 801513e:	f000 f9fb 	bl	8015538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015142:	4603      	mov	r3, r0
 8015144:	4618      	mov	r0, r3
 8015146:	f000 fb3f 	bl	80157c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801514a:	4603      	mov	r3, r0
 801514c:	4619      	mov	r1, r3
 801514e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015150:	f000 f9d4 	bl	80154fc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015154:	4603      	mov	r3, r0
 8015156:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801515a:	3301      	adds	r3, #1
 801515c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801515e:	e7cb      	b.n	80150f8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015164:	4618      	mov	r0, r3
 8015166:	f000 fb49 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801516a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015172:	210c      	movs	r1, #12
 8015174:	4618      	mov	r0, r3
 8015176:	f7fd fff6 	bl	8013166 <_ZN6tflite13GetReciprocalEliPi>
 801517a:	4603      	mov	r3, r0
 801517c:	4618      	mov	r0, r3
 801517e:	f7fe f82f 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015182:	4603      	mov	r3, r0
 8015184:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015186:	2300      	movs	r3, #0
 8015188:	66bb      	str	r3, [r7, #104]	; 0x68
 801518a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801518c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801518e:	429a      	cmp	r2, r3
 8015190:	da75      	bge.n	801527e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015196:	fb02 f203 	mul.w	r2, r2, r3
 801519a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801519c:	4413      	add	r3, r2
 801519e:	461a      	mov	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	4413      	add	r3, r2
 80151a4:	781b      	ldrb	r3, [r3, #0]
 80151a6:	461a      	mov	r2, r3
 80151a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80151ac:	1ad3      	subs	r3, r2, r3
 80151ae:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80151b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80151b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151b4:	429a      	cmp	r2, r3
 80151b6:	db50      	blt.n	801525a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80151b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80151ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80151bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80151be:	f7fd ffbf 	bl	8013140 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80151c2:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80151c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80151c6:	f000 f988 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80151ca:	4603      	mov	r3, r0
 80151cc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80151ce:	69b8      	ldr	r0, [r7, #24]
 80151d0:	f000 f9b2 	bl	8015538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80151d4:	4603      	mov	r3, r0
 80151d6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 80151d8:	6979      	ldr	r1, [r7, #20]
 80151da:	6a38      	ldr	r0, [r7, #32]
 80151dc:	f7ff fa44 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80151e0:	4603      	mov	r3, r0
 80151e2:	633b      	str	r3, [r7, #48]	; 0x30
 80151e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7fe f86b 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80151ee:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80151f0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80151f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151f4:	3217      	adds	r2, #23
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 80151f6:	4611      	mov	r1, r2
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7fd fa31 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80151fe:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 8015200:	f7fc fa20 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 8015204:	4603      	mov	r3, r0
 8015206:	461a      	mov	r2, r3
            unsat_output +
 8015208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801520a:	4413      	add	r3, r2
        const int32_t shifted_output =
 801520c:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801520e:	f7fc fa21 	bl	8011654 <_ZNSt14numeric_limitsIhE3maxEv>
 8015212:	4603      	mov	r3, r0
 8015214:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8015216:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801521a:	f107 0310 	add.w	r3, r7, #16
 801521e:	4611      	mov	r1, r2
 8015220:	4618      	mov	r0, r3
 8015222:	f7fc fcbd 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8015226:	4604      	mov	r4, r0
 8015228:	f7fc fa0c 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 801522c:	4603      	mov	r3, r0
 801522e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015234:	4619      	mov	r1, r3
 8015236:	4620      	mov	r0, r4
 8015238:	f7fc fcc6 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 801523c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801523e:	6819      	ldr	r1, [r3, #0]
 8015240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015242:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015244:	fb02 f203 	mul.w	r2, r2, r3
 8015248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801524a:	4413      	add	r3, r2
 801524c:	461a      	mov	r2, r3
 801524e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015252:	4413      	add	r3, r2
 8015254:	b2ca      	uxtb	r2, r1
 8015256:	701a      	strb	r2, [r3, #0]
 8015258:	e00d      	b.n	8015276 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801525c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801525e:	fb02 f203 	mul.w	r2, r2, r3
 8015262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015264:	4413      	add	r3, r2
 8015266:	461a      	mov	r2, r3
 8015268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801526c:	189c      	adds	r4, r3, r2
 801526e:	f7fc f9e9 	bl	8011644 <_ZNSt14numeric_limitsIhE3minEv>
 8015272:	4603      	mov	r3, r0
 8015274:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015278:	3301      	adds	r3, #1
 801527a:	66bb      	str	r3, [r7, #104]	; 0x68
 801527c:	e785      	b.n	801518a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015280:	3301      	adds	r3, #1
 8015282:	677b      	str	r3, [r7, #116]	; 0x74
 8015284:	e70d      	b.n	80150a2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015286:	bf00      	nop
 8015288:	377c      	adds	r7, #124	; 0x7c
 801528a:	46bd      	mov	sp, r7
 801528c:	bd90      	pop	{r4, r7, pc}

0801528e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801528e:	b590      	push	{r4, r7, lr}
 8015290:	b09f      	sub	sp, #124	; 0x7c
 8015292:	af00      	add	r7, sp, #0
 8015294:	60f8      	str	r0, [r7, #12]
 8015296:	60b9      	str	r1, [r7, #8]
 8015298:	607a      	str	r2, [r7, #4]
 801529a:	603b      	str	r3, [r7, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t input_beta_left_shift = params.input_left_shift;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	68db      	ldr	r3, [r3, #12]
 80152a6:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	699b      	ldr	r3, [r3, #24]
 80152ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80152ae:	68b8      	ldr	r0, [r7, #8]
 80152b0:	f7fc fcd5 	bl	8011c5e <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80152b4:	4603      	mov	r3, r0
 80152b6:	3b01      	subs	r3, #1
 80152b8:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80152ba:	683a      	ldr	r2, [r7, #0]
 80152bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80152be:	68b8      	ldr	r0, [r7, #8]
 80152c0:	f7ff f8e7 	bl	8014492 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80152c4:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80152c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152c8:	683a      	ldr	r2, [r7, #0]
 80152ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80152cc:	68b8      	ldr	r0, [r7, #8]
 80152ce:	f7fd feac 	bl	801302a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80152d2:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80152d4:	2300      	movs	r3, #0
 80152d6:	677b      	str	r3, [r7, #116]	; 0x74
 80152d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80152da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152dc:	429a      	cmp	r2, r3
 80152de:	f280 80f0 	bge.w	80154c2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80152e2:	2380      	movs	r3, #128	; 0x80
 80152e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80152e8:	2300      	movs	r3, #0
 80152ea:	673b      	str	r3, [r7, #112]	; 0x70
 80152ec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80152ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f0:	429a      	cmp	r2, r3
 80152f2:	da17      	bge.n	8015324 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80152f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80152f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80152f8:	fb02 f203 	mul.w	r2, r2, r3
 80152fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80152fe:	4413      	add	r3, r2
 8015300:	461a      	mov	r2, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	441a      	add	r2, r3
 8015306:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801530a:	4611      	mov	r1, r2
 801530c:	4618      	mov	r0, r3
 801530e:	f000 fa80 	bl	8015812 <_ZSt3maxIaERKT_S2_S2_>
 8015312:	4603      	mov	r3, r0
 8015314:	f993 3000 	ldrsb.w	r3, [r3]
 8015318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801531c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801531e:	3301      	adds	r3, #1
 8015320:	673b      	str	r3, [r7, #112]	; 0x70
 8015322:	e7e3      	b.n	80152ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015324:	f000 f8d1 	bl	80154ca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015328:	4603      	mov	r3, r0
 801532a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801532c:	2300      	movs	r3, #0
 801532e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015334:	429a      	cmp	r2, r3
 8015336:	da30      	bge.n	801539a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 8015338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801533a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801533c:	fb02 f203 	mul.w	r2, r2, r3
 8015340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015342:	4413      	add	r3, r2
 8015344:	461a      	mov	r2, r3
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4413      	add	r3, r2
 801534a:	f993 3000 	ldrsb.w	r3, [r3]
 801534e:	461a      	mov	r2, r3
 8015350:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801535a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801535c:	429a      	cmp	r2, r3
 801535e:	db18      	blt.n	8015392 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015362:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015364:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015366:	f7fd feeb 	bl	8013140 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801536a:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801536c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801536e:	f000 f8b4 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015372:	4603      	mov	r3, r0
 8015374:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015376:	69f8      	ldr	r0, [r7, #28]
 8015378:	f000 f8de 	bl	8015538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801537c:	4603      	mov	r3, r0
 801537e:	4618      	mov	r0, r3
 8015380:	f000 fa22 	bl	80157c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015384:	4603      	mov	r3, r0
 8015386:	4619      	mov	r1, r3
 8015388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801538a:	f000 f8b7 	bl	80154fc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801538e:	4603      	mov	r3, r0
 8015390:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015394:	3301      	adds	r3, #1
 8015396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015398:	e7ca      	b.n	8015330 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801539a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801539e:	4618      	mov	r0, r3
 80153a0:	f000 fa2c 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80153a4:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80153ac:	210c      	movs	r1, #12
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7fd fed9 	bl	8013166 <_ZN6tflite13GetReciprocalEliPi>
 80153b4:	4603      	mov	r3, r0
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7fd ff12 	bl	80131e0 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80153bc:	4603      	mov	r3, r0
 80153be:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80153c0:	2300      	movs	r3, #0
 80153c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80153c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80153c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153c8:	429a      	cmp	r2, r3
 80153ca:	da76      	bge.n	80154ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 80153cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80153d0:	fb02 f203 	mul.w	r2, r2, r3
 80153d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153d6:	4413      	add	r3, r2
 80153d8:	461a      	mov	r2, r3
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	4413      	add	r3, r2
 80153de:	f993 3000 	ldrsb.w	r3, [r3]
 80153e2:	461a      	mov	r2, r3
 80153e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32_t input_diff =
 80153e8:	1ad3      	subs	r3, r2, r3
 80153ea:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80153ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80153ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80153f0:	429a      	cmp	r2, r3
 80153f2:	db50      	blt.n	8015496 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80153f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80153f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80153f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80153fa:	f7fd fea1 	bl	8013140 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80153fe:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015400:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015402:	f000 f86a 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015406:	4603      	mov	r3, r0
 8015408:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801540a:	69b8      	ldr	r0, [r7, #24]
 801540c:	f000 f894 	bl	8015538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015410:	4603      	mov	r3, r0
 8015412:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015414:	6979      	ldr	r1, [r7, #20]
 8015416:	6a38      	ldr	r0, [r7, #32]
 8015418:	f7ff f926 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801541c:	4603      	mov	r3, r0
 801541e:	633b      	str	r3, [r7, #48]	; 0x30
 8015420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015424:	4618      	mov	r0, r3
 8015426:	f7fd ff4d 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801542a:	4603      	mov	r3, r0
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 801542c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015430:	320f      	adds	r2, #15
        int32_t unsat_output = gemmlowp::RoundingDivideByPOT(
 8015432:	4611      	mov	r1, r2
 8015434:	4618      	mov	r0, r3
 8015436:	f7fd f913 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801543a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());
 801543c:	f7eb ff4c 	bl	80012d8 <_ZNSt14numeric_limitsIsE3minEv>
 8015440:	4603      	mov	r3, r0
 8015442:	461a      	mov	r2, r3
            unsat_output +
 8015444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015446:	4413      	add	r3, r2
        const int32_t shifted_output =
 8015448:	613b      	str	r3, [r7, #16]
                     static_cast<int32_t>(std::numeric_limits<OutputT>::max())),
 801544a:	f7eb ff4f 	bl	80012ec <_ZNSt14numeric_limitsIsE3maxEv>
 801544e:	4603      	mov	r3, r0
 8015450:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32_t>(std::numeric_limits<OutputT>::min())));
 8015452:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015456:	f107 0310 	add.w	r3, r7, #16
 801545a:	4611      	mov	r1, r2
 801545c:	4618      	mov	r0, r3
 801545e:	f7fc fb9f 	bl	8011ba0 <_ZSt3minIlERKT_S2_S2_>
 8015462:	4604      	mov	r4, r0
 8015464:	f7eb ff38 	bl	80012d8 <_ZNSt14numeric_limitsIsE3minEv>
 8015468:	4603      	mov	r3, r0
 801546a:	63bb      	str	r3, [r7, #56]	; 0x38
 801546c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015470:	4619      	mov	r1, r3
 8015472:	4620      	mov	r0, r4
 8015474:	f7fc fba8 	bl	8011bc8 <_ZSt3maxIlERKT_S2_S2_>
 8015478:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801547a:	6819      	ldr	r1, [r3, #0]
 801547c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801547e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015480:	fb02 f203 	mul.w	r2, r2, r3
 8015484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015486:	4413      	add	r3, r2
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801548e:	4413      	add	r3, r2
 8015490:	b20a      	sxth	r2, r1
 8015492:	801a      	strh	r2, [r3, #0]
 8015494:	e00d      	b.n	80154b2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801549a:	fb02 f203 	mul.w	r2, r2, r3
 801549e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80154a0:	4413      	add	r3, r2
 80154a2:	005b      	lsls	r3, r3, #1
 80154a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80154a8:	18d4      	adds	r4, r2, r3
 80154aa:	f7eb ff15 	bl	80012d8 <_ZNSt14numeric_limitsIsE3minEv>
 80154ae:	4603      	mov	r3, r0
 80154b0:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80154b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80154b4:	3301      	adds	r3, #1
 80154b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80154b8:	e784      	b.n	80153c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80154ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80154bc:	3301      	adds	r3, #1
 80154be:	677b      	str	r3, [r7, #116]	; 0x74
 80154c0:	e70a      	b.n	80152d8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80154c2:	bf00      	nop
 80154c4:	377c      	adds	r7, #124	; 0x7c
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd90      	pop	{r4, r7, pc}

080154ca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 80154ca:	b580      	push	{r7, lr}
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	2000      	movs	r0, #0
 80154d0:	f000 f9b5 	bl	801583e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 80154d4:	4603      	mov	r3, r0
 80154d6:	4618      	mov	r0, r3
 80154d8:	bd80      	pop	{r7, pc}

080154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80154da:	b580      	push	{r7, lr}
 80154dc:	b084      	sub	sp, #16
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80154e2:	f107 030c 	add.w	r3, r7, #12
 80154e6:	4618      	mov	r0, r3
 80154e8:	f000 f9bd 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80154ec:	4602      	mov	r2, r0
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6013      	str	r3, [r2, #0]
    return retval;
 80154f2:	68fb      	ldr	r3, [r7, #12]
  }
 80154f4:	4618      	mov	r0, r3
 80154f6:	3710      	adds	r7, #16
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 80154fc:	b590      	push	{r4, r7, lr}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
 8015506:	1d3b      	adds	r3, r7, #4
 8015508:	4618      	mov	r0, r3
 801550a:	f000 f977 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801550e:	4603      	mov	r3, r0
 8015510:	681c      	ldr	r4, [r3, #0]
 8015512:	463b      	mov	r3, r7
 8015514:	4618      	mov	r0, r3
 8015516:	f000 f971 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801551a:	4603      	mov	r3, r0
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	4619      	mov	r1, r3
 8015520:	4620      	mov	r0, r4
 8015522:	f7fd fc9d 	bl	8012e60 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015526:	4603      	mov	r3, r0
 8015528:	4618      	mov	r0, r3
 801552a:	f000 f9a7 	bl	801587c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801552e:	4603      	mov	r3, r0
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	bd90      	pop	{r4, r7, pc}

08015538 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8015538:	b590      	push	{r4, r7, lr}
 801553a:	b091      	sub	sp, #68	; 0x44
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8015540:	f000 f9ad 	bl	801589e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8015544:	4603      	mov	r3, r0
 8015546:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8015548:	2001      	movs	r0, #1
 801554a:	f000 f9b1 	bl	80158b0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801554e:	4603      	mov	r3, r0
 8015550:	4619      	mov	r1, r3
 8015552:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015554:	f000 f9c0 	bl	80158d8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015558:	4603      	mov	r3, r0
 801555a:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801555c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f000 f9d8 	bl	8015914 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015564:	4603      	mov	r3, r0
 8015566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015568:	4618      	mov	r0, r3
 801556a:	f000 f9b5 	bl	80158d8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801556e:	4603      	mov	r3, r0
 8015570:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015574:	f000 f9ec 	bl	8015950 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015578:	4603      	mov	r3, r0
 801557a:	4618      	mov	r0, r3
 801557c:	f7ff f812 	bl	80145a4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015580:	4603      	mov	r3, r0
 8015582:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015584:	6879      	ldr	r1, [r7, #4]
 8015586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015588:	f000 f9a6 	bl	80158d8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801558c:	4603      	mov	r3, r0
 801558e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015594:	4618      	mov	r0, r3
 8015596:	f000 f966 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801559a:	4603      	mov	r3, r0
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 80155a0:	4883      	ldr	r0, [pc, #524]	; (80157b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 80155a2:	f7fe ffa5 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80155a6:	4603      	mov	r3, r0
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7fd fe96 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80155ae:	4603      	mov	r3, r0
 80155b0:	627b      	str	r3, [r7, #36]	; 0x24
 80155b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80155b6:	f7fd fc17 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80155ba:	4603      	mov	r3, r0
 80155bc:	4619      	mov	r1, r3
 80155be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80155c0:	f7fd fc1d 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80155c4:	4603      	mov	r3, r0
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fd fc6c 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80155cc:	4604      	mov	r4, r0
 80155ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155d2:	f7ff f849 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80155d6:	4603      	mov	r3, r0
 80155d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155da:	4619      	mov	r1, r3
 80155dc:	4620      	mov	r0, r4
 80155de:	f7fe ffad 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80155e2:	4603      	mov	r3, r0
 80155e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 80155e6:	4873      	ldr	r0, [pc, #460]	; (80157b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 80155e8:	f7fe ff82 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80155ec:	4603      	mov	r3, r0
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fd fe73 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80155f4:	4603      	mov	r3, r0
 80155f6:	623b      	str	r3, [r7, #32]
 80155f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80155fc:	f7fd fbf4 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015600:	4603      	mov	r3, r0
 8015602:	4619      	mov	r1, r3
 8015604:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015606:	f7fd fbfa 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801560a:	4603      	mov	r3, r0
 801560c:	4618      	mov	r0, r3
 801560e:	f7fd fc49 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015612:	4604      	mov	r4, r0
 8015614:	6a39      	ldr	r1, [r7, #32]
 8015616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015618:	f7ff f826 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801561c:	4603      	mov	r3, r0
 801561e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015620:	4619      	mov	r1, r3
 8015622:	4620      	mov	r0, r4
 8015624:	f7fe ff8a 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015628:	4603      	mov	r3, r0
 801562a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801562c:	4862      	ldr	r0, [pc, #392]	; (80157b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801562e:	f7fe ff5f 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015632:	4603      	mov	r3, r0
 8015634:	4618      	mov	r0, r3
 8015636:	f7fd fe50 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801563a:	4603      	mov	r3, r0
 801563c:	61fb      	str	r3, [r7, #28]
 801563e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015642:	f7fd fbd1 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015646:	4603      	mov	r3, r0
 8015648:	4619      	mov	r1, r3
 801564a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801564c:	f7fd fbd7 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015650:	4603      	mov	r3, r0
 8015652:	4618      	mov	r0, r3
 8015654:	f7fd fc26 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015658:	4604      	mov	r4, r0
 801565a:	69f9      	ldr	r1, [r7, #28]
 801565c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801565e:	f7ff f803 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015662:	4603      	mov	r3, r0
 8015664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015666:	4619      	mov	r1, r3
 8015668:	4620      	mov	r0, r4
 801566a:	f7fe ff67 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801566e:	4603      	mov	r3, r0
 8015670:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8015672:	4852      	ldr	r0, [pc, #328]	; (80157bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8015674:	f7fe ff3c 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015678:	4603      	mov	r3, r0
 801567a:	4618      	mov	r0, r3
 801567c:	f7fd fe2d 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015680:	4603      	mov	r3, r0
 8015682:	61bb      	str	r3, [r7, #24]
 8015684:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015688:	f7fd fbae 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801568c:	4603      	mov	r3, r0
 801568e:	4619      	mov	r1, r3
 8015690:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015692:	f7fd fbb4 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015696:	4603      	mov	r3, r0
 8015698:	4618      	mov	r0, r3
 801569a:	f7fd fc03 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801569e:	4604      	mov	r4, r0
 80156a0:	69b9      	ldr	r1, [r7, #24]
 80156a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156a4:	f7fe ffe0 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80156a8:	4603      	mov	r3, r0
 80156aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ac:	4619      	mov	r1, r3
 80156ae:	4620      	mov	r0, r4
 80156b0:	f7fe ff44 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80156b4:	4603      	mov	r3, r0
 80156b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 80156b8:	4841      	ldr	r0, [pc, #260]	; (80157c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 80156ba:	f7fe ff19 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80156be:	4603      	mov	r3, r0
 80156c0:	4618      	mov	r0, r3
 80156c2:	f7fd fe0a 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80156c6:	4603      	mov	r3, r0
 80156c8:	617b      	str	r3, [r7, #20]
 80156ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80156ce:	f7fd fb8b 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80156d2:	4603      	mov	r3, r0
 80156d4:	4619      	mov	r1, r3
 80156d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80156d8:	f7fd fb91 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80156dc:	4603      	mov	r3, r0
 80156de:	4618      	mov	r0, r3
 80156e0:	f7fd fbe0 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80156e4:	4604      	mov	r4, r0
 80156e6:	6979      	ldr	r1, [r7, #20]
 80156e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156ea:	f7fe ffbd 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80156ee:	4603      	mov	r3, r0
 80156f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156f2:	4619      	mov	r1, r3
 80156f4:	4620      	mov	r0, r4
 80156f6:	f7fe ff21 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80156fa:	4603      	mov	r3, r0
 80156fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 80156fe:	4831      	ldr	r0, [pc, #196]	; (80157c4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015700:	f7fe fef6 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015704:	4603      	mov	r3, r0
 8015706:	4618      	mov	r0, r3
 8015708:	f7fd fde7 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801570c:	4603      	mov	r3, r0
 801570e:	613b      	str	r3, [r7, #16]
 8015710:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015714:	f7fd fb68 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015718:	4603      	mov	r3, r0
 801571a:	4619      	mov	r1, r3
 801571c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801571e:	f7fd fb6e 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015722:	4603      	mov	r3, r0
 8015724:	4618      	mov	r0, r3
 8015726:	f7fd fbbd 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801572a:	4604      	mov	r4, r0
 801572c:	6939      	ldr	r1, [r7, #16]
 801572e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015730:	f7fe ff9a 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015734:	4603      	mov	r3, r0
 8015736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015738:	4619      	mov	r1, r3
 801573a:	4620      	mov	r0, r4
 801573c:	f7fe fefe 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015740:	4603      	mov	r3, r0
 8015742:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8015744:	20f2      	movs	r0, #242	; 0xf2
 8015746:	f7fe fed3 	bl	80144f0 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801574a:	4603      	mov	r3, r0
 801574c:	4618      	mov	r0, r3
 801574e:	f7fd fdc4 	bl	80132da <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015752:	4603      	mov	r3, r0
 8015754:	60fb      	str	r3, [r7, #12]
 8015756:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801575a:	f7fd fb45 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801575e:	4603      	mov	r3, r0
 8015760:	4619      	mov	r1, r3
 8015762:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015764:	f7fd fb4b 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015768:	4603      	mov	r3, r0
 801576a:	4618      	mov	r0, r3
 801576c:	f7fd fb9a 	bl	8012ea4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015770:	4604      	mov	r4, r0
 8015772:	68f9      	ldr	r1, [r7, #12]
 8015774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015776:	f7fe ff77 	bl	8014668 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801577a:	4603      	mov	r3, r0
 801577c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801577e:	4619      	mov	r1, r3
 8015780:	4620      	mov	r0, r4
 8015782:	f7fe fedb 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015786:	4603      	mov	r3, r0
 8015788:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 f8fa 	bl	8015984 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015790:	4604      	mov	r4, r0
 8015792:	f7fd fdb6 	bl	8013302 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015796:	4603      	mov	r3, r0
 8015798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801579a:	4619      	mov	r1, r3
 801579c:	4620      	mov	r0, r4
 801579e:	f7fe fecd 	bl	801453c <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80157a2:	4603      	mov	r3, r0
 80157a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80157a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3744      	adds	r7, #68	; 0x44
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd90      	pop	{r4, r7, pc}
 80157b0:	63afbe7b 	.word	0x63afbe7b
 80157b4:	4da2cbf2 	.word	0x4da2cbf2
 80157b8:	2f16ac6c 	.word	0x2f16ac6c
 80157bc:	1152aaa4 	.word	0x1152aaa4
 80157c0:	02582ab7 	.word	0x02582ab7
 80157c4:	000afe11 	.word	0x000afe11

080157c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80157c8:	b5b0      	push	{r4, r5, r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80157d0:	1d3b      	adds	r3, r7, #4
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fd fd76 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80157d8:	4603      	mov	r3, r0
 80157da:	681d      	ldr	r5, [r3, #0]
 80157dc:	f107 030c 	add.w	r3, r7, #12
 80157e0:	4618      	mov	r0, r3
 80157e2:	f000 f80b 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80157e6:	4604      	mov	r4, r0
 80157e8:	4628      	mov	r0, r5
 80157ea:	f000 f8dd 	bl	80159a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 80157ee:	4603      	mov	r3, r0
 80157f0:	6023      	str	r3, [r4, #0]
  return result;
 80157f2:	68fb      	ldr	r3, [r7, #12]
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3710      	adds	r7, #16
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bdb0      	pop	{r4, r5, r7, pc}

080157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	4618      	mov	r0, r3
 8015808:	370c      	adds	r7, #12
 801580a:	46bd      	mov	sp, r7
 801580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015810:	4770      	bx	lr

08015812 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8015812:	b480      	push	{r7}
 8015814:	b083      	sub	sp, #12
 8015816:	af00      	add	r7, sp, #0
 8015818:	6078      	str	r0, [r7, #4]
 801581a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f993 2000 	ldrsb.w	r2, [r3]
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	f993 3000 	ldrsb.w	r3, [r3]
 8015828:	429a      	cmp	r2, r3
 801582a:	da01      	bge.n	8015830 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	e000      	b.n	8015832 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8015830:	687b      	ldr	r3, [r7, #4]
    }
 8015832:	4618      	mov	r0, r3
 8015834:	370c      	adds	r7, #12
 8015836:	46bd      	mov	sp, r7
 8015838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583c:	4770      	bx	lr

0801583e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801583e:	b590      	push	{r4, r7, lr}
 8015840:	b085      	sub	sp, #20
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015846:	f107 030c 	add.w	r3, r7, #12
 801584a:	4618      	mov	r0, r3
 801584c:	f7ff ffd6 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015850:	4604      	mov	r4, r0
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7fd fac8 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015858:	4603      	mov	r3, r0
 801585a:	6023      	str	r3, [r4, #0]
    return retval;
 801585c:	68fb      	ldr	r3, [r7, #12]
  }
 801585e:	4618      	mov	r0, r3
 8015860:	3714      	adds	r7, #20
 8015862:	46bd      	mov	sp, r7
 8015864:	bd90      	pop	{r4, r7, pc}

08015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8015866:	b480      	push	{r7}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	4618      	mov	r0, r3
 8015872:	370c      	adds	r7, #12
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801587c:	b580      	push	{r7, lr}
 801587e:	b084      	sub	sp, #16
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015884:	f107 030c 	add.w	r3, r7, #12
 8015888:	4618      	mov	r0, r3
 801588a:	f7ff ffb7 	bl	80157fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801588e:	4602      	mov	r2, r0
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6013      	str	r3, [r2, #0]
    return retval;
 8015894:	68fb      	ldr	r3, [r7, #12]
  }
 8015896:	4618      	mov	r0, r3
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 801589e:	b580      	push	{r7, lr}
 80158a0:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80158a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80158a6:	f000 f803 	bl	80158b0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80158aa:	4603      	mov	r3, r0
  }
 80158ac:	4618      	mov	r0, r3
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b085      	sub	sp, #20
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80158b8:	f107 030c 	add.w	r3, r7, #12
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff ffd2 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158c2:	4604      	mov	r4, r0
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f7fd fa8f 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80158ca:	4603      	mov	r3, r0
 80158cc:	6023      	str	r3, [r4, #0]
    return retval;
 80158ce:	68fb      	ldr	r3, [r7, #12]
  }
 80158d0:	4618      	mov	r0, r3
 80158d2:	3714      	adds	r7, #20
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd90      	pop	{r4, r7, pc}

080158d8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80158d8:	b590      	push	{r4, r7, lr}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
 80158e0:	6039      	str	r1, [r7, #0]
 80158e2:	1d3b      	adds	r3, r7, #4
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7ff ffbe 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158ea:	4603      	mov	r3, r0
 80158ec:	681c      	ldr	r4, [r3, #0]
 80158ee:	463b      	mov	r3, r7
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff ffb8 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80158f6:	4603      	mov	r3, r0
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	4619      	mov	r1, r3
 80158fc:	4620      	mov	r0, r4
 80158fe:	f7fd fe1d 	bl	801353c <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8015902:	4603      	mov	r3, r0
 8015904:	4618      	mov	r0, r3
 8015906:	f7ff fde8 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801590a:	4603      	mov	r3, r0
 801590c:	4618      	mov	r0, r3
 801590e:	370c      	adds	r7, #12
 8015910:	46bd      	mov	sp, r7
 8015912:	bd90      	pop	{r4, r7, pc}

08015914 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8015914:	b590      	push	{r4, r7, lr}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
 801591e:	1d3b      	adds	r3, r7, #4
 8015920:	4618      	mov	r0, r3
 8015922:	f7ff ffa0 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015926:	4603      	mov	r3, r0
 8015928:	681c      	ldr	r4, [r3, #0]
 801592a:	463b      	mov	r3, r7
 801592c:	4618      	mov	r0, r3
 801592e:	f7ff ff9a 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015932:	4603      	mov	r3, r0
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	4619      	mov	r1, r3
 8015938:	4620      	mov	r0, r4
 801593a:	f7fd fa60 	bl	8012dfe <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801593e:	4603      	mov	r3, r0
 8015940:	4618      	mov	r0, r3
 8015942:	f7ff fdca 	bl	80154da <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015946:	4603      	mov	r3, r0
 8015948:	4618      	mov	r0, r3
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	bd90      	pop	{r4, r7, pc}

08015950 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015958:	1d3b      	adds	r3, r7, #4
 801595a:	4618      	mov	r0, r3
 801595c:	f7ff ff83 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015960:	4603      	mov	r3, r0
 8015962:	681d      	ldr	r5, [r3, #0]
 8015964:	f107 030c 	add.w	r3, r7, #12
 8015968:	4618      	mov	r0, r3
 801596a:	f7fd fcab 	bl	80132c4 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801596e:	4604      	mov	r4, r0
 8015970:	4628      	mov	r0, r5
 8015972:	f000 f825 	bl	80159c0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8015976:	4603      	mov	r3, r0
 8015978:	6023      	str	r3, [r4, #0]
  return result;
 801597a:	68fb      	ldr	r3, [r7, #12]
}
 801597c:	4618      	mov	r0, r3
 801597e:	3710      	adds	r7, #16
 8015980:	46bd      	mov	sp, r7
 8015982:	bdb0      	pop	{r4, r5, r7, pc}

08015984 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	1d3b      	adds	r3, r7, #4
 801598e:	4618      	mov	r0, r3
 8015990:	f7ff ff69 	bl	8015866 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015994:	4603      	mov	r3, r0
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4618      	mov	r0, r3
 801599a:	f7fe fdf0 	bl	801457e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 801599e:	4603      	mov	r3, r0
 80159a0:	4618      	mov	r0, r3
 80159a2:	3708      	adds	r7, #8
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}

080159a8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	f000 f811 	bl	80159d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80159b6:	4603      	mov	r3, r0
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 f813 	bl	80159f4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80159ce:	4603      	mov	r3, r0
}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3708      	adds	r7, #8
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80159e0:	210c      	movs	r1, #12
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7fc fe3c 	bl	8012660 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80159e8:	4603      	mov	r3, r0
  }
 80159ea:	4618      	mov	r0, r3
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
	...

080159f4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b08a      	sub	sp, #40	; 0x28
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80159fc:	f7fc f9b1 	bl	8011d62 <_ZNSt14numeric_limitsIlE3minEv>
 8015a00:	4603      	mov	r3, r0
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fd f9f0 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015a08:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015a0a:	f7fb fc33 	bl	8011274 <_ZNSt14numeric_limitsIlE3maxEv>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7fd f9e9 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015a16:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8015a18:	2320      	movs	r3, #32
 8015a1a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015a1c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8015a20:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8015a22:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8015a26:	f7fd f9df 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f7fd fa24 	bl	8012e7c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015a34:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8015a36:	480f      	ldr	r0, [pc, #60]	; (8015a74 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8015a38:	f7fd f9d6 	bl	8012de8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	4619      	mov	r1, r3
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7fd f9f9 	bl	8012e38 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8015a46:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8015a48:	2105      	movs	r1, #5
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f7fd fe5a 	bl	8013704 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8015a50:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8015a52:	68fa      	ldr	r2, [r7, #12]
 8015a54:	6a39      	ldr	r1, [r7, #32]
 8015a56:	6978      	ldr	r0, [r7, #20]
 8015a58:	f7fd fe9a 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015a5c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8015a5e:	68fa      	ldr	r2, [r7, #12]
 8015a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a62:	6938      	ldr	r0, [r7, #16]
 8015a64:	f7fd fe94 	bl	8013790 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015a68:	60f8      	str	r0, [r7, #12]
    return result;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
  }
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3728      	adds	r7, #40	; 0x28
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	fc000001 	.word	0xfc000001

08015a78 <_ZN6tflite7gen_lutEPFffEffPsi>:
                    const int num) {
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	ed2d 8b02 	vpush	{d8}
 8015a7e:	b094      	sub	sp, #80	; 0x50
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6178      	str	r0, [r7, #20]
 8015a84:	ed87 0a04 	vstr	s0, [r7, #16]
 8015a88:	edc7 0a03 	vstr	s1, [r7, #12]
 8015a8c:	60b9      	str	r1, [r7, #8]
 8015a8e:	607a      	str	r2, [r7, #4]
  float step = (max - min) / (num - 1);
 8015a90:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	3b01      	subs	r3, #1
 8015aa0:	ee07 3a90 	vmov	s15, r3
 8015aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015aac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float half_step = step / 2.0f;
 8015ab0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015ab4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015abc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  for (int i = 0; i < num - 1; i++) {
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	3b01      	subs	r3, #1
 8015ac8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015aca:	429a      	cmp	r2, r3
 8015acc:	f280 80c0 	bge.w	8015c50 <_ZN6tflite7gen_lutEPFffEffPsi+0x1d8>
    float sample_val = TfLiteRound(func(min + i * step) * 32768.0f);
 8015ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ad2:	ee07 3a90 	vmov	s15, r3
 8015ad6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015ada:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8015ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	eeb0 0a67 	vmov.f32	s0, s15
 8015af0:	4798      	blx	r3
 8015af2:	eef0 7a40 	vmov.f32	s15, s0
 8015af6:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8015cc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015afe:	eeb0 0a67 	vmov.f32	s0, s15
 8015b02:	f7fb fd7e 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b06:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8015b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	ee07 3a90 	vmov	s15, r3
 8015b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	eeb0 0a67 	vmov.f32	s0, s15
 8015b2c:	4798      	blx	r3
 8015b2e:	eef0 7a40 	vmov.f32	s15, s0
 8015b32:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8015cc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015b36:	ee27 8a87 	vmul.f32	s16, s15, s14
                     TfLiteRound(func(min + i * step) * 32768.0f)) /
 8015b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b3c:	ee07 3a90 	vmov	s15, r3
 8015b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b44:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	eeb0 0a67 	vmov.f32	s0, s15
 8015b5a:	4798      	blx	r3
 8015b5c:	eef0 7a40 	vmov.f32	s15, s0
 8015b60:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015cc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b68:	eeb0 0a67 	vmov.f32	s0, s15
 8015b6c:	f7fb fd49 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b70:	eef0 7a40 	vmov.f32	s15, s0
        TfLiteRound((func(min + (i + 1) * step) * 32768.0f +
 8015b74:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015b78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015b7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015b80:	eeb0 0a47 	vmov.f32	s0, s14
 8015b84:	f7fb fd3d 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015b88:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        TfLiteRound(func(min + i * step + half_step) * 32768.0f);
 8015b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b8e:	ee07 3a90 	vmov	s15, r3
 8015b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015b96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ba6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8015bb4:	4798      	blx	r3
 8015bb6:	eef0 7a40 	vmov.f32	s15, s0
 8015bba:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8015cc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8015bc6:	f7fb fd1c 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015bca:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    float midpoint_err = midpoint_interp_val - midpoint_val;
 8015bce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015bd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bda:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float bias = TfLiteRound(midpoint_err / 2.0f);
 8015bde:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015be2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015be6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015bea:	eeb0 0a47 	vmov.f32	s0, s14
 8015bee:	f7fb fd08 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015bf2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8015bf6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8015bfa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c02:	edc7 7a06 	vstr	s15, [r7, #24]
 8015c06:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8015c0a:	61fb      	str	r3, [r7, #28]
                               32767.0f);
 8015c0c:	f107 021c 	add.w	r2, r7, #28
 8015c10:	f107 0318 	add.w	r3, r7, #24
 8015c14:	4611      	mov	r1, r2
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7fb fcc6 	bl	80115a8 <_ZSt3maxIfERKT_S2_S2_>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	4b2b      	ldr	r3, [pc, #172]	; (8015ccc <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8015c20:	623b      	str	r3, [r7, #32]
 8015c22:	f107 0320 	add.w	r3, r7, #32
 8015c26:	4619      	mov	r1, r3
 8015c28:	4610      	mov	r0, r2
 8015c2a:	f7fb fca4 	bl	8011576 <_ZSt3minIfERKT_S2_S2_>
 8015c2e:	4603      	mov	r3, r0
    table[i] = std::min<float>(std::max<float>(sample_val - bias, -32768.0f),
 8015c30:	edd3 7a00 	vldr	s15, [r3]
 8015c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c36:	005b      	lsls	r3, r3, #1
 8015c38:	68ba      	ldr	r2, [r7, #8]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015c40:	ee17 2a90 	vmov	r2, s15
 8015c44:	b212      	sxth	r2, r2
 8015c46:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < num - 1; i++) {
 8015c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c4e:	e739      	b.n	8015ac4 <_ZN6tflite7gen_lutEPFffEffPsi+0x4c>
      std::max<float>(TfLiteRound(func(max) * 32768.0f), -32768.0f), 32767.0f);
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	ed97 0a03 	vldr	s0, [r7, #12]
 8015c56:	4798      	blx	r3
 8015c58:	eef0 7a40 	vmov.f32	s15, s0
 8015c5c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8015cc8 <_ZN6tflite7gen_lutEPFffEffPsi+0x250>
 8015c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c64:	eeb0 0a67 	vmov.f32	s0, s15
 8015c68:	f7fb fccb 	bl	8011602 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8015c6c:	eef0 7a40 	vmov.f32	s15, s0
 8015c70:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015c74:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8015c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c82:	4611      	mov	r1, r2
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7fb fc8f 	bl	80115a8 <_ZSt3maxIfERKT_S2_S2_>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	4b0f      	ldr	r3, [pc, #60]	; (8015ccc <_ZN6tflite7gen_lutEPFffEffPsi+0x254>)
 8015c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c94:	4619      	mov	r1, r3
 8015c96:	4610      	mov	r0, r2
 8015c98:	f7fb fc6d 	bl	8011576 <_ZSt3minIfERKT_S2_S2_>
 8015c9c:	4603      	mov	r3, r0
  table[num - 1] = std::min<float>(
 8015c9e:	edd3 7a00 	vldr	s15, [r3]
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015ca8:	3b01      	subs	r3, #1
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	4413      	add	r3, r2
 8015cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015cb4:	ee17 2a90 	vmov	r2, s15
 8015cb8:	b212      	sxth	r2, r2
 8015cba:	801a      	strh	r2, [r3, #0]
}
 8015cbc:	bf00      	nop
 8015cbe:	3750      	adds	r7, #80	; 0x50
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	ecbd 8b02 	vpop	{d8}
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	47000000 	.word	0x47000000
 8015ccc:	46fffe00 	.word	0x46fffe00

08015cd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8015cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015cd4:	b090      	sub	sp, #64	; 0x40
 8015cd6:	af06      	add	r7, sp, #24
 8015cd8:	60f8      	str	r0, [r7, #12]
 8015cda:	60b9      	str	r1, [r7, #8]
 8015cdc:	607a      	str	r2, [r7, #4]
 8015cde:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	2b09      	cmp	r3, #9
 8015ce6:	d004      	beq.n	8015cf2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b07      	cmp	r3, #7
 8015cee:	f040 81b6 	bne.w	801605e <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x38e>
    if (input->type == kTfLiteInt16) {
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	781b      	ldrb	r3, [r3, #0]
 8015cf6:	2b07      	cmp	r3, #7
 8015cf8:	d156      	bne.n	8015da8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	691b      	ldr	r3, [r3, #16]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d011      	beq.n	8015d26 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x56>
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	695c      	ldr	r4, [r3, #20]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	691b      	ldr	r3, [r3, #16]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	9203      	str	r2, [sp, #12]
 8015d0e:	9302      	str	r3, [sp, #8]
 8015d10:	4ba1      	ldr	r3, [pc, #644]	; (8015f98 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8015d12:	9301      	str	r3, [sp, #4]
 8015d14:	4ba1      	ldr	r3, [pc, #644]	; (8015f9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	2325      	movs	r3, #37	; 0x25
 8015d1a:	4aa1      	ldr	r2, [pc, #644]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015d1c:	49a1      	ldr	r1, [pc, #644]	; (8015fa4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	47a0      	blx	r4
 8015d22:	2301      	movs	r3, #1
 8015d24:	e1e0      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d2c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8015fa8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d38:	dd07      	ble.n	8015d4a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x7a>
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d40:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8015fa8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d48:	e006      	b.n	8015d58 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x88>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015d50:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8015fa8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>
 8015d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d58:	edc7 7a08 	vstr	s15, [r7, #32]
 8015d5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8015d60:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8015fac <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>
 8015d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	f340 80dd 	ble.w	8015f2a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	695c      	ldr	r4, [r3, #20]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	68db      	ldr	r3, [r3, #12]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ea fbff 	bl	800057c <__aeabi_f2d>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	460b      	mov	r3, r1
 8015d82:	f04f 0000 	mov.w	r0, #0
 8015d86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015d8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015d8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015d92:	4b87      	ldr	r3, [pc, #540]	; (8015fb0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 8015d94:	9301      	str	r3, [sp, #4]
 8015d96:	4b87      	ldr	r3, [pc, #540]	; (8015fb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015d98:	9300      	str	r3, [sp, #0]
 8015d9a:	2326      	movs	r3, #38	; 0x26
 8015d9c:	4a80      	ldr	r2, [pc, #512]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015d9e:	4986      	ldr	r1, [pc, #536]	; (8015fb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	47a0      	blx	r4
 8015da4:	2301      	movs	r3, #1
 8015da6:	e19f      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	781b      	ldrb	r3, [r3, #0]
 8015dac:	2b09      	cmp	r3, #9
 8015dae:	d018      	beq.n	8015de2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x112>
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	695c      	ldr	r4, [r3, #20]
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fb f9df 	bl	801117c <TfLiteTypeGetName>
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	2009      	movs	r0, #9
 8015dc2:	f7fb f9db 	bl	801117c <TfLiteTypeGetName>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	9502      	str	r5, [sp, #8]
 8015dcc:	4b7b      	ldr	r3, [pc, #492]	; (8015fbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015dce:	9301      	str	r3, [sp, #4]
 8015dd0:	4b7b      	ldr	r3, [pc, #492]	; (8015fc0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	2329      	movs	r3, #41	; 0x29
 8015dd6:	4a72      	ldr	r2, [pc, #456]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015dd8:	497a      	ldr	r1, [pc, #488]	; (8015fc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	47a0      	blx	r4
 8015dde:	2301      	movs	r3, #1
 8015de0:	e182      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
      if (output->type == kTfLiteInt16) {
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b07      	cmp	r3, #7
 8015de8:	d155      	bne.n	8015e96 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1c6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	691b      	ldr	r3, [r3, #16]
 8015dee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015df2:	d011      	beq.n	8015e18 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x148>
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	695c      	ldr	r4, [r3, #20]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	691b      	ldr	r3, [r3, #16]
 8015dfc:	4a72      	ldr	r2, [pc, #456]	; (8015fc8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 8015dfe:	9203      	str	r2, [sp, #12]
 8015e00:	9302      	str	r3, [sp, #8]
 8015e02:	4b72      	ldr	r3, [pc, #456]	; (8015fcc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 8015e04:	9301      	str	r3, [sp, #4]
 8015e06:	4b65      	ldr	r3, [pc, #404]	; (8015f9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	232b      	movs	r3, #43	; 0x2b
 8015e0c:	4a64      	ldr	r2, [pc, #400]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015e0e:	4965      	ldr	r1, [pc, #404]	; (8015fa4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	47a0      	blx	r4
 8015e14:	2301      	movs	r3, #1
 8015e16:	e167      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e1e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8015fd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2a:	dd07      	ble.n	8015e3c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e32:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015fd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015e36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e3a:	e006      	b.n	8015e4a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x17a>
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8015e42:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8015fd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 8015e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8015e4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015e52:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015fd4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 8015e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5e:	dd64      	ble.n	8015f2a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	695c      	ldr	r4, [r3, #20]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7ea fb87 	bl	800057c <__aeabi_f2d>
 8015e6e:	4602      	mov	r2, r0
 8015e70:	460b      	mov	r3, r1
 8015e72:	f04f 0000 	mov.w	r0, #0
 8015e76:	4958      	ldr	r1, [pc, #352]	; (8015fd8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 8015e78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015e80:	4b56      	ldr	r3, [pc, #344]	; (8015fdc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>)
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	4b4b      	ldr	r3, [pc, #300]	; (8015fb4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 8015e86:	9300      	str	r3, [sp, #0]
 8015e88:	232c      	movs	r3, #44	; 0x2c
 8015e8a:	4a45      	ldr	r2, [pc, #276]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015e8c:	494a      	ldr	r1, [pc, #296]	; (8015fb8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	47a0      	blx	r4
 8015e92:	2301      	movs	r3, #1
 8015e94:	e128      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
                            (0.001f * 1.f / 65536));
      } else {  // output->type == kTfLiteint8
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	2b09      	cmp	r3, #9
 8015e9c:	d018      	beq.n	8015ed0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	695c      	ldr	r4, [r3, #20]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7fb f968 	bl	801117c <TfLiteTypeGetName>
 8015eac:	4605      	mov	r5, r0
 8015eae:	2009      	movs	r0, #9
 8015eb0:	f7fb f964 	bl	801117c <TfLiteTypeGetName>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	9303      	str	r3, [sp, #12]
 8015eb8:	9502      	str	r5, [sp, #8]
 8015eba:	4b40      	ldr	r3, [pc, #256]	; (8015fbc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 8015ebc:	9301      	str	r3, [sp, #4]
 8015ebe:	4b48      	ldr	r3, [pc, #288]	; (8015fe0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	232f      	movs	r3, #47	; 0x2f
 8015ec4:	4a36      	ldr	r2, [pc, #216]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015ec6:	493f      	ldr	r1, [pc, #252]	; (8015fc4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 8015ec8:	68f8      	ldr	r0, [r7, #12]
 8015eca:	47a0      	blx	r4
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e10b      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	691b      	ldr	r3, [r3, #16]
 8015ed4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8015ed8:	d012      	beq.n	8015f00 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x230>
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	695c      	ldr	r4, [r3, #20]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	691b      	ldr	r3, [r3, #16]
 8015ee2:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8015ee6:	9203      	str	r2, [sp, #12]
 8015ee8:	9302      	str	r3, [sp, #8]
 8015eea:	4b3e      	ldr	r3, [pc, #248]	; (8015fe4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 8015eec:	9301      	str	r3, [sp, #4]
 8015eee:	4b2b      	ldr	r3, [pc, #172]	; (8015f9c <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	2330      	movs	r3, #48	; 0x30
 8015ef4:	4a2a      	ldr	r2, [pc, #168]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015ef6:	492b      	ldr	r1, [pc, #172]	; (8015fa4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	47a0      	blx	r4
 8015efc:	2301      	movs	r3, #1
 8015efe:	e0f3      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	edd3 7a03 	vldr	s15, [r3, #12]
 8015f06:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015fe8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>
 8015f0a:	eef4 7a47 	vcmp.f32	s15, s14
 8015f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f12:	d00a      	beq.n	8015f2a <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x25a>
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	695c      	ldr	r4, [r3, #20]
 8015f18:	4b34      	ldr	r3, [pc, #208]	; (8015fec <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>)
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	2331      	movs	r3, #49	; 0x31
 8015f1e:	4a20      	ldr	r2, [pc, #128]	; (8015fa0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015f20:	4933      	ldr	r1, [pc, #204]	; (8015ff0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>)
 8015f22:	68f8      	ldr	r0, [r7, #12]
 8015f24:	47a0      	blx	r4
 8015f26:	2301      	movs	r3, #1
 8015f28:	e0de      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    }

    static const int kScaledDiffIntegerBits = 5;

    // Calculate input_multiplier and input_left_shift
    if (input->type == kTfLiteInt16) {
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	2b07      	cmp	r3, #7
 8015f30:	d160      	bne.n	8015ff4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>
      int input_left_shift;
      double input_scale_beta_rescale =
          static_cast<double>(input->params.scale) *
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	68db      	ldr	r3, [r3, #12]
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7ea fb20 	bl	800057c <__aeabi_f2d>
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7ea fb19 	bl	800057c <__aeabi_f2d>
 8015f4a:	4602      	mov	r2, r0
 8015f4c:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 8015f4e:	4620      	mov	r0, r4
 8015f50:	4629      	mov	r1, r5
 8015f52:	f7ea fb6b 	bl	800062c <__aeabi_dmul>
 8015f56:	4602      	mov	r2, r0
 8015f58:	460b      	mov	r3, r1
 8015f5a:	4610      	mov	r0, r2
 8015f5c:	4619      	mov	r1, r3
      double input_scale_beta_rescale =
 8015f5e:	a30c      	add	r3, pc, #48	; (adr r3, 8015f90 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8015f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f64:	f7ea fc8c 	bl	8000880 <__aeabi_ddiv>
 8015f68:	4602      	mov	r2, r0
 8015f6a:	460b      	mov	r3, r1
 8015f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
          (10.0 / 65535.0);  // scale the input_diff such that [-65535, 0]
                             // correspond to [-10.0, 0.0]
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 8015f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f72:	3308      	adds	r3, #8
 8015f74:	f107 0214 	add.w	r2, r7, #20
 8015f78:	4611      	mov	r1, r2
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	ed97 0b06 	vldr	d0, [r7, #24]
 8015f80:	f7fb f982 	bl	8011288 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                         &input_left_shift);
      op_data->input_left_shift = input_left_shift;
 8015f84:	697a      	ldr	r2, [r7, #20]
 8015f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f88:	60da      	str	r2, [r3, #12]
          &op_data->input_multiplier, &input_left_shift);
      op_data->input_left_shift = input_left_shift;
      op_data->diff_min =
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                              op_data->input_left_shift);
    }
 8015f8a:	e0ac      	b.n	80160e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
 8015f8c:	f3af 8000 	nop.w
 8015f90:	00140014 	.word	0x00140014
 8015f94:	3f240014 	.word	0x3f240014
 8015f98:	0801f33c 	.word	0x0801f33c
 8015f9c:	0801f340 	.word	0x0801f340
 8015fa0:	0801f284 	.word	0x0801f284
 8015fa4:	0801f320 	.word	0x0801f320
 8015fa8:	38000000 	.word	0x38000000
 8015fac:	3303126f 	.word	0x3303126f
 8015fb0:	0801f37c 	.word	0x0801f37c
 8015fb4:	0801f388 	.word	0x0801f388
 8015fb8:	0801f35c 	.word	0x0801f35c
 8015fbc:	0801f3bc 	.word	0x0801f3bc
 8015fc0:	0801f3c8 	.word	0x0801f3c8
 8015fc4:	0801f3a0 	.word	0x0801f3a0
 8015fc8:	ffff8000 	.word	0xffff8000
 8015fcc:	0801f3d4 	.word	0x0801f3d4
 8015fd0:	37800000 	.word	0x37800000
 8015fd4:	3283126f 	.word	0x3283126f
 8015fd8:	3ef00000 	.word	0x3ef00000
 8015fdc:	0801f3dc 	.word	0x0801f3dc
 8015fe0:	0801f3e8 	.word	0x0801f3e8
 8015fe4:	0801f3f8 	.word	0x0801f3f8
 8015fe8:	3b800000 	.word	0x3b800000
 8015fec:	0801f418 	.word	0x0801f418
 8015ff0:	0801f400 	.word	0x0801f400
          static_cast<double>(params->beta),
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	681b      	ldr	r3, [r3, #0]
      tflite::PreprocessSoftmaxScaling(
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7ea fabf 	bl	800057c <__aeabi_f2d>
 8015ffe:	4680      	mov	r8, r0
 8016000:	4689      	mov	r9, r1
          static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	68db      	ldr	r3, [r3, #12]
      tflite::PreprocessSoftmaxScaling(
 8016006:	4618      	mov	r0, r3
 8016008:	f7ea fab8 	bl	800057c <__aeabi_f2d>
 801600c:	4682      	mov	sl, r0
 801600e:	468b      	mov	fp, r1
 8016010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016012:	3308      	adds	r3, #8
 8016014:	f107 0210 	add.w	r2, r7, #16
 8016018:	4619      	mov	r1, r3
 801601a:	2005      	movs	r0, #5
 801601c:	ec4b ab11 	vmov	d1, sl, fp
 8016020:	ec49 8b10 	vmov	d0, r8, r9
 8016024:	f7fb f9f8 	bl	8011418 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 8016028:	693a      	ldr	r2, [r7, #16]
 801602a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801602c:	60da      	str	r2, [r3, #12]
                                              op_data->input_left_shift);
 801602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016030:	68db      	ldr	r3, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8016032:	221f      	movs	r2, #31
 8016034:	4619      	mov	r1, r3
 8016036:	2005      	movs	r0, #5
 8016038:	f7fb fa36 	bl	80114a8 <_ZN6tflite20CalculateInputRadiusEiii>
 801603c:	4603      	mov	r3, r0
 801603e:	4618      	mov	r0, r3
 8016040:	f7ea fa8a 	bl	8000558 <__aeabi_i2d>
 8016044:	4602      	mov	r2, r0
 8016046:	460b      	mov	r3, r1
 8016048:	4614      	mov	r4, r2
 801604a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
      op_data->diff_min =
 801604e:	4620      	mov	r0, r4
 8016050:	4629      	mov	r1, r5
 8016052:	f7ea fd9b 	bl	8000b8c <__aeabi_d2iz>
 8016056:	4602      	mov	r2, r0
 8016058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801605a:	619a      	str	r2, [r3, #24]
    }
 801605c:	e043      	b.n	80160e6 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x416>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d018      	beq.n	8016098 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	695c      	ldr	r4, [r3, #20]
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	4618      	mov	r0, r3
 8016070:	f7fb f884 	bl	801117c <TfLiteTypeGetName>
 8016074:	4605      	mov	r5, r0
 8016076:	2001      	movs	r0, #1
 8016078:	f7fb f880 	bl	801117c <TfLiteTypeGetName>
 801607c:	4603      	mov	r3, r0
 801607e:	9303      	str	r3, [sp, #12]
 8016080:	9502      	str	r5, [sp, #8]
 8016082:	4b1c      	ldr	r3, [pc, #112]	; (80160f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 8016084:	9301      	str	r3, [sp, #4]
 8016086:	4b1c      	ldr	r3, [pc, #112]	; (80160f8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x428>)
 8016088:	9300      	str	r3, [sp, #0]
 801608a:	234e      	movs	r3, #78	; 0x4e
 801608c:	4a1b      	ldr	r2, [pc, #108]	; (80160fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 801608e:	491c      	ldr	r1, [pc, #112]	; (8016100 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	47a0      	blx	r4
 8016094:	2301      	movs	r3, #1
 8016096:	e027      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b01      	cmp	r3, #1
 801609e:	d018      	beq.n	80160d2 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x402>
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	695c      	ldr	r4, [r3, #20]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7fb f867 	bl	801117c <TfLiteTypeGetName>
 80160ae:	4605      	mov	r5, r0
 80160b0:	2001      	movs	r0, #1
 80160b2:	f7fb f863 	bl	801117c <TfLiteTypeGetName>
 80160b6:	4603      	mov	r3, r0
 80160b8:	9303      	str	r3, [sp, #12]
 80160ba:	9502      	str	r5, [sp, #8]
 80160bc:	4b0d      	ldr	r3, [pc, #52]	; (80160f4 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x424>)
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	4b10      	ldr	r3, [pc, #64]	; (8016104 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x434>)
 80160c2:	9300      	str	r3, [sp, #0]
 80160c4:	234f      	movs	r3, #79	; 0x4f
 80160c6:	4a0d      	ldr	r2, [pc, #52]	; (80160fc <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42c>)
 80160c8:	490d      	ldr	r1, [pc, #52]	; (8016100 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x430>)
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	47a0      	blx	r4
 80160ce:	2301      	movs	r3, #1
 80160d0:	e00a      	b.n	80160e8 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x418>
    op_data->beta = static_cast<double>(params->beta);
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ea fa50 	bl	800057c <__aeabi_f2d>
 80160dc:	4602      	mov	r2, r0
 80160de:	460b      	mov	r3, r1
 80160e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80160e2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 80160e6:	2300      	movs	r3, #0
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3728      	adds	r7, #40	; 0x28
 80160ec:	46bd      	mov	sp, r7
 80160ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80160f2:	bf00      	nop
 80160f4:	0801f43c 	.word	0x0801f43c
 80160f8:	0801f3c8 	.word	0x0801f3c8
 80160fc:	0801f284 	.word	0x0801f284
 8016100:	0801f3a0 	.word	0x0801f3a0
 8016104:	0801f3e8 	.word	0x0801f3e8

08016108 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj>:

}  // namespace

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	60f8      	str	r0, [r7, #12]
 8016110:	60b9      	str	r1, [r7, #8]
 8016112:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016118:	2b00      	cmp	r3, #0
 801611a:	d101      	bne.n	8016120 <_ZN6tflite11SoftmaxInitEP13TfLiteContextPKcj+0x18>
 801611c:	f004 fd8a 	bl	801ac34 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016124:	2138      	movs	r1, #56	; 0x38
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	4798      	blx	r3
 801612a:	4603      	mov	r3, r0
}
 801612c:	4618      	mov	r0, r3
 801612e:	3710      	adds	r7, #16
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}

08016134 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>:
  // Populate LUT if required
  if (input->type == kTfLiteInt16) {
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    // exp LUT only used on negative values
    // we consider exp(-10.0) is insignificant to accumulation
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8016134:	b580      	push	{r7, lr}
 8016136:	b082      	sub	sp, #8
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
 801613c:	ed87 0a00 	vstr	s0, [r7]
 8016140:	ed97 0a00 	vldr	s0, [r7]
 8016144:	f7ea ffcc 	bl	80010e0 <_ZSt3expf>
 8016148:	eef0 7a40 	vmov.f32	s15, s0
 801614c:	eeb0 0a67 	vmov.f32	s0, s15
 8016150:	3708      	adds	r7, #8
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
 8016156:	b580      	push	{r7, lr}
 8016158:	b082      	sub	sp, #8
 801615a:	af00      	add	r7, sp, #0
 801615c:	ed87 0a01 	vstr	s0, [r7, #4]
 8016160:	ed97 0a01 	vldr	s0, [r7, #4]
 8016164:	2000      	movs	r0, #0
 8016166:	f7ff ffe5 	bl	8016134 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_clEf>
 801616a:	eef0 7a40 	vmov.f32	s15, s0
 801616e:	eeb0 0a67 	vmov.f32	s0, s15
 8016172:	3708      	adds	r7, #8
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}

08016178 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>:
 8016178:	b480      	push	{r7}
 801617a:	b083      	sub	sp, #12
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	4b03      	ldr	r3, [pc, #12]	; (8016190 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv+0x18>)
 8016182:	4618      	mov	r0, r3
 8016184:	370c      	adds	r7, #12
 8016186:	46bd      	mov	sp, r7
 8016188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618c:	4770      	bx	lr
 801618e:	bf00      	nop
 8016190:	08016157 	.word	0x08016157

08016194 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>:
            op_data->exp_lut, kInt16LUTArraySize);
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016194:	b480      	push	{r7}
 8016196:	b083      	sub	sp, #12
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	ed87 0a00 	vstr	s0, [r7]
 80161a0:	edd7 7a00 	vldr	s15, [r7]
 80161a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80161ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80161b4:	eef0 7a66 	vmov.f32	s15, s13
 80161b8:	eeb0 0a67 	vmov.f32	s0, s15
 80161bc:	370c      	adds	r7, #12
 80161be:	46bd      	mov	sp, r7
 80161c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c4:	4770      	bx	lr

080161c6 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENUlfE0_4_FUNEf>:
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b082      	sub	sp, #8
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80161d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80161d4:	2000      	movs	r0, #0
 80161d6:	f7ff ffdd 	bl	8016194 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_clEf>
 80161da:	eef0 7a40 	vmov.f32	s15, s0
 80161de:	eeb0 0a67 	vmov.f32	s0, s15
 80161e2:	3708      	adds	r7, #8
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>:
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	4b03      	ldr	r3, [pc, #12]	; (8016200 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv+0x18>)
 80161f2:	4618      	mov	r0, r3
 80161f4:	370c      	adds	r7, #12
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr
 80161fe:	bf00      	nop
 8016200:	080161c7 	.word	0x080161c7

08016204 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8016204:	b590      	push	{r4, r7, lr}
 8016206:	b08f      	sub	sp, #60	; 0x3c
 8016208:	af04      	add	r7, sp, #16
 801620a:	6078      	str	r0, [r7, #4]
 801620c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801620e:	6838      	ldr	r0, [r7, #0]
 8016210:	f7fc fee2 	bl	8012fd8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8016214:	4603      	mov	r3, r0
 8016216:	2b01      	cmp	r3, #1
 8016218:	bf14      	ite	ne
 801621a:	2301      	movne	r3, #1
 801621c:	2300      	moveq	r3, #0
 801621e:	b2db      	uxtb	r3, r3
 8016220:	2b00      	cmp	r3, #0
 8016222:	d013      	beq.n	801624c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	695c      	ldr	r4, [r3, #20]
 8016228:	6838      	ldr	r0, [r7, #0]
 801622a:	f7fc fed5 	bl	8012fd8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801622e:	4603      	mov	r3, r0
 8016230:	2201      	movs	r2, #1
 8016232:	9203      	str	r2, [sp, #12]
 8016234:	9302      	str	r3, [sp, #8]
 8016236:	4b7c      	ldr	r3, [pc, #496]	; (8016428 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8016238:	9301      	str	r3, [sp, #4]
 801623a:	4b7c      	ldr	r3, [pc, #496]	; (801642c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801623c:	9300      	str	r3, [sp, #0]
 801623e:	235d      	movs	r3, #93	; 0x5d
 8016240:	4a7b      	ldr	r2, [pc, #492]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016242:	497c      	ldr	r1, [pc, #496]	; (8016434 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	47a0      	blx	r4
 8016248:	2301      	movs	r3, #1
 801624a:	e146      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801624c:	6838      	ldr	r0, [r7, #0]
 801624e:	f7fc fed0 	bl	8012ff2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8016252:	4603      	mov	r3, r0
 8016254:	2b01      	cmp	r3, #1
 8016256:	bf14      	ite	ne
 8016258:	2301      	movne	r3, #1
 801625a:	2300      	moveq	r3, #0
 801625c:	b2db      	uxtb	r3, r3
 801625e:	2b00      	cmp	r3, #0
 8016260:	d013      	beq.n	801628a <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	695c      	ldr	r4, [r3, #20]
 8016266:	6838      	ldr	r0, [r7, #0]
 8016268:	f7fc fec3 	bl	8012ff2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801626c:	4603      	mov	r3, r0
 801626e:	2201      	movs	r2, #1
 8016270:	9203      	str	r2, [sp, #12]
 8016272:	9302      	str	r3, [sp, #8]
 8016274:	4b6c      	ldr	r3, [pc, #432]	; (8016428 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8016276:	9301      	str	r3, [sp, #4]
 8016278:	4b6f      	ldr	r3, [pc, #444]	; (8016438 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	235e      	movs	r3, #94	; 0x5e
 801627e:	4a6c      	ldr	r2, [pc, #432]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016280:	496c      	ldr	r1, [pc, #432]	; (8016434 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	47a0      	blx	r4
 8016286:	2301      	movs	r3, #1
 8016288:	e127      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 801628a:	2200      	movs	r2, #0
 801628c:	6839      	ldr	r1, [r7, #0]
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f7fb fa65 	bl	801175e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8016294:	6278      	str	r0, [r7, #36]	; 0x24
  TF_LITE_ENSURE(context, input != nullptr);
 8016296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016298:	2b00      	cmp	r3, #0
 801629a:	d10a      	bne.n	80162b2 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xae>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	695c      	ldr	r4, [r3, #20]
 80162a0:	4b66      	ldr	r3, [pc, #408]	; (801643c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	2360      	movs	r3, #96	; 0x60
 80162a6:	4a62      	ldr	r2, [pc, #392]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80162a8:	4965      	ldr	r1, [pc, #404]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	47a0      	blx	r4
 80162ae:	2301      	movs	r3, #1
 80162b0:	e113      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80162b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162b4:	f7fb f9d6 	bl	8011664 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80162b8:	4603      	mov	r3, r0
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	bfd4      	ite	le
 80162be:	2301      	movle	r3, #1
 80162c0:	2300      	movgt	r3, #0
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d00a      	beq.n	80162de <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xda>
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	695c      	ldr	r4, [r3, #20]
 80162cc:	4b5d      	ldr	r3, [pc, #372]	; (8016444 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	2361      	movs	r3, #97	; 0x61
 80162d2:	4a57      	ldr	r2, [pc, #348]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80162d4:	495a      	ldr	r1, [pc, #360]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	47a0      	blx	r4
 80162da:	2301      	movs	r3, #1
 80162dc:	e0fd      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 80162de:	2200      	movs	r2, #0
 80162e0:	6839      	ldr	r1, [r7, #0]
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7fb fa4b 	bl	801177e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80162e8:	6238      	str	r0, [r7, #32]
  TF_LITE_ENSURE(context, output != nullptr);
 80162ea:	6a3b      	ldr	r3, [r7, #32]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d10a      	bne.n	8016306 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x102>
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	695c      	ldr	r4, [r3, #20]
 80162f4:	4b54      	ldr	r3, [pc, #336]	; (8016448 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 80162f6:	9300      	str	r3, [sp, #0]
 80162f8:	2363      	movs	r3, #99	; 0x63
 80162fa:	4a4d      	ldr	r2, [pc, #308]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80162fc:	4950      	ldr	r1, [pc, #320]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	47a0      	blx	r4
 8016302:	2301      	movs	r3, #1
 8016304:	e0e9      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	691b      	ldr	r3, [r3, #16]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d10a      	bne.n	8016324 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x120>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	695c      	ldr	r4, [r3, #20]
 8016312:	4b4e      	ldr	r3, [pc, #312]	; (801644c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 8016314:	9300      	str	r3, [sp, #0]
 8016316:	2365      	movs	r3, #101	; 0x65
 8016318:	4a45      	ldr	r2, [pc, #276]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801631a:	4949      	ldr	r1, [pc, #292]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	47a0      	blx	r4
 8016320:	2301      	movs	r3, #1
 8016322:	e0da      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  SoftmaxParams* op_data = static_cast<SoftmaxParams*>(node->user_data);
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	691b      	ldr	r3, [r3, #16]
 8016328:	61fb      	str	r3, [r7, #28]
  if (input->type == kTfLiteInt16) {
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	2b07      	cmp	r3, #7
 8016330:	d12f      	bne.n	8016392 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016336:	f240 4102 	movw	r1, #1026	; 0x402
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	4798      	blx	r3
 801633e:	61b8      	str	r0, [r7, #24]
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d10a      	bne.n	801635c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x158>
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	695c      	ldr	r4, [r3, #20]
 801634a:	4b41      	ldr	r3, [pc, #260]	; (8016450 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 801634c:	9300      	str	r3, [sp, #0]
 801634e:	236b      	movs	r3, #107	; 0x6b
 8016350:	4a37      	ldr	r2, [pc, #220]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016352:	493b      	ldr	r1, [pc, #236]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	47a0      	blx	r4
 8016358:	2301      	movs	r3, #1
 801635a:	e0be      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	69ba      	ldr	r2, [r7, #24]
 8016360:	629a      	str	r2, [r3, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016366:	f240 4102 	movw	r1, #1026	; 0x402
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	4798      	blx	r3
 801636e:	6178      	str	r0, [r7, #20]
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d10a      	bne.n	801638c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x188>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	695c      	ldr	r4, [r3, #20]
 801637a:	4b36      	ldr	r3, [pc, #216]	; (8016454 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 801637c:	9300      	str	r3, [sp, #0]
 801637e:	236f      	movs	r3, #111	; 0x6f
 8016380:	4a2b      	ldr	r2, [pc, #172]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 8016382:	492f      	ldr	r1, [pc, #188]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	47a0      	blx	r4
 8016388:	2301      	movs	r3, #1
 801638a:	e0a6      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    op_data->one_over_one_plus_x_lut =
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	697a      	ldr	r2, [r7, #20]
 8016390:	62da      	str	r2, [r3, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 8016392:	6a3b      	ldr	r3, [r7, #32]
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b07      	cmp	r3, #7
 8016398:	d112      	bne.n	80163c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
    TF_LITE_ENSURE(context,
 801639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b09      	cmp	r3, #9
 80163a0:	d028      	beq.n	80163f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80163a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	2b07      	cmp	r3, #7
 80163a8:	d024      	beq.n	80163f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	695c      	ldr	r4, [r3, #20]
 80163ae:	4b2a      	ldr	r3, [pc, #168]	; (8016458 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 80163b0:	9300      	str	r3, [sp, #0]
 80163b2:	2375      	movs	r3, #117	; 0x75
 80163b4:	4a1e      	ldr	r2, [pc, #120]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80163b6:	4922      	ldr	r1, [pc, #136]	; (8016440 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	47a0      	blx	r4
 80163bc:	2301      	movs	r3, #1
 80163be:	e08c      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 80163c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c2:	781a      	ldrb	r2, [r3, #0]
 80163c4:	6a3b      	ldr	r3, [r7, #32]
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d013      	beq.n	80163f4 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1f0>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	695c      	ldr	r4, [r3, #20]
 80163d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	461a      	mov	r2, r3
 80163d6:	6a3b      	ldr	r3, [r7, #32]
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	9303      	str	r3, [sp, #12]
 80163dc:	9202      	str	r2, [sp, #8]
 80163de:	4b1f      	ldr	r3, [pc, #124]	; (801645c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 80163e0:	9301      	str	r3, [sp, #4]
 80163e2:	4b1f      	ldr	r3, [pc, #124]	; (8016460 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 80163e4:	9300      	str	r3, [sp, #0]
 80163e6:	2378      	movs	r3, #120	; 0x78
 80163e8:	4a11      	ldr	r2, [pc, #68]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80163ea:	4912      	ldr	r1, [pc, #72]	; (8016434 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	47a0      	blx	r4
 80163f0:	2301      	movs	r3, #1
 80163f2:	e072      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
  if (input->type == kTfLiteInt16) {
 80163f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	2b07      	cmp	r3, #7
 80163fa:	d161      	bne.n	80164c0 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2bc>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80163fc:	6a3b      	ldr	r3, [r7, #32]
 80163fe:	691b      	ldr	r3, [r3, #16]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d035      	beq.n	8016470 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	695c      	ldr	r4, [r3, #20]
 8016408:	6a3b      	ldr	r3, [r7, #32]
 801640a:	691b      	ldr	r3, [r3, #16]
 801640c:	2200      	movs	r2, #0
 801640e:	9203      	str	r2, [sp, #12]
 8016410:	9302      	str	r3, [sp, #8]
 8016412:	4b14      	ldr	r3, [pc, #80]	; (8016464 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 8016414:	9301      	str	r3, [sp, #4]
 8016416:	4b14      	ldr	r3, [pc, #80]	; (8016468 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 8016418:	9300      	str	r3, [sp, #0]
 801641a:	237d      	movs	r3, #125	; 0x7d
 801641c:	4a04      	ldr	r2, [pc, #16]	; (8016430 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 801641e:	4905      	ldr	r1, [pc, #20]	; (8016434 <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	47a0      	blx	r4
 8016424:	2301      	movs	r3, #1
 8016426:	e058      	b.n	80164da <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2d6>
 8016428:	0801f44c 	.word	0x0801f44c
 801642c:	0801f450 	.word	0x0801f450
 8016430:	0801f284 	.word	0x0801f284
 8016434:	0801f320 	.word	0x0801f320
 8016438:	0801f460 	.word	0x0801f460
 801643c:	0801f474 	.word	0x0801f474
 8016440:	0801f400 	.word	0x0801f400
 8016444:	0801f488 	.word	0x0801f488
 8016448:	0801f4a4 	.word	0x0801f4a4
 801644c:	0801f4b8 	.word	0x0801f4b8
 8016450:	0801f4d4 	.word	0x0801f4d4
 8016454:	0801f4ec 	.word	0x0801f4ec
 8016458:	0801f510 	.word	0x0801f510
 801645c:	0801f3e8 	.word	0x0801f3e8
 8016460:	0801f3c8 	.word	0x0801f3c8
 8016464:	0801f33c 	.word	0x0801f33c
 8016468:	0801f340 	.word	0x0801f340
 801646c:	00000000 	.word	0x00000000
    gen_lut([](float value) { return std::exp(value); }, -10.0f, 0.0f,
 8016470:	f107 0308 	add.w	r3, r7, #8
 8016474:	4618      	mov	r0, r3
 8016476:	f7ff fe7f 	bl	8016178 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE_cvPFffEEv>
 801647a:	69fb      	ldr	r3, [r7, #28]
 801647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801647e:	f240 2201 	movw	r2, #513	; 0x201
 8016482:	4619      	mov	r1, r3
 8016484:	ed5f 0a07 	vldr	s1, [pc, #-28]	; 801646c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 8016488:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 801648c:	f7ff faf4 	bl	8015a78 <_ZN6tflite7gen_lutEPFffEffPsi>
    gen_lut([](float value) { return 1.0f / (1.0f + value); }, 0.0f, 1.0f,
 8016490:	f107 030c 	add.w	r3, r7, #12
 8016494:	4618      	mov	r0, r3
 8016496:	f7ff fea7 	bl	80161e8 <_ZZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNodeENKUlfE0_cvPFffEEv>
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801649e:	f240 2201 	movw	r2, #513	; 0x201
 80164a2:	4619      	mov	r1, r3
 80164a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80164a8:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 801646c <_ZN6tflite14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>
 80164ac:	f7ff fae4 	bl	8015a78 <_ZN6tflite7gen_lutEPFffEffPsi>
            op_data->one_over_one_plus_x_lut, kInt16LUTArraySize);
    op_data->zero_point = output->params.zero_point;
 80164b0:	6a3b      	ldr	r3, [r7, #32]
 80164b2:	691a      	ldr	r2, [r3, #16]
 80164b4:	69fb      	ldr	r3, [r7, #28]
 80164b6:	61da      	str	r2, [r3, #28]
    op_data->scale = output->params.scale;
 80164b8:	6a3b      	ldr	r3, [r7, #32]
 80164ba:	68da      	ldr	r2, [r3, #12]
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	621a      	str	r2, [r3, #32]
  }

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	695b      	ldr	r3, [r3, #20]
 80164c4:	613b      	str	r3, [r7, #16]
  return CalculateSoftmaxParams(context, input, output, params, op_data);
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	6a3a      	ldr	r2, [r7, #32]
 80164ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7ff fbfd 	bl	8015cd0 <_ZN6tflite12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS3_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80164d6:	4603      	mov	r3, r0
 80164d8:	bf00      	nop
}
 80164da:	4618      	mov	r0, r3
 80164dc:	372c      	adds	r7, #44	; 0x2c
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd90      	pop	{r4, r7, pc}
 80164e2:	bf00      	nop

080164e4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f000 fbdb 	bl	8016ca8 <_ZNSaIPvED1Ev>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	4618      	mov	r0, r3
 8016508:	f000 fbbe 	bl	8016c88 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	4618      	mov	r0, r3
 8016510:	3708      	adds	r7, #8
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}

08016516 <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 8016516:	b580      	push	{r7, lr}
 8016518:	b082      	sub	sp, #8
 801651a:	af00      	add	r7, sp, #0
 801651c:	6078      	str	r0, [r7, #4]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff ffeb 	bl	80164fc <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	4618      	mov	r0, r3
 801652a:	3708      	adds	r7, #8
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}

08016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>:
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	6039      	str	r1, [r7, #0]
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
 801653a:	4b1b      	ldr	r3, [pc, #108]	; (80165a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	425b      	negs	r3, r3
 8016542:	441a      	add	r2, r3
 8016544:	4b19      	ldr	r3, [pc, #100]	; (80165ac <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x7c>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	429a      	cmp	r2, r3
 801654a:	d217      	bcs.n	801657c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x4c>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 801654c:	2101      	movs	r1, #1
 801654e:	6838      	ldr	r0, [r7, #0]
 8016550:	f7fa fdde 	bl	8011110 <_Z9ei_callocjj>
 8016554:	4603      	mov	r3, r0
 8016556:	60fb      	str	r3, [r7, #12]
    if (ptr == NULL) {
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d106      	bne.n	801656c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x3c>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	4619      	mov	r1, r3
 8016562:	4813      	ldr	r0, [pc, #76]	; (80165b0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x80>)
 8016564:	f004 ffc0 	bl	801b4e8 <iprintf>
      return NULL;
 8016568:	2300      	movs	r3, #0
 801656a:	e018      	b.n	801659e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
    }
    overflow_buffers.push_back(ptr);
 801656c:	f107 030c 	add.w	r3, r7, #12
 8016570:	4619      	mov	r1, r3
 8016572:	4810      	ldr	r0, [pc, #64]	; (80165b4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x84>)
 8016574:	f000 fbbd 	bl	8016cf2 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return ptr;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	e010      	b.n	801659e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x6e>
  }

  current_location -= bytes;
 801657c:	4b0a      	ldr	r3, [pc, #40]	; (80165a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801657e:	681a      	ldr	r2, [r3, #0]
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	425b      	negs	r3, r3
 8016584:	4413      	add	r3, r2
 8016586:	4a08      	ldr	r2, [pc, #32]	; (80165a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 8016588:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 801658a:	4b07      	ldr	r3, [pc, #28]	; (80165a8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj+0x78>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	60fb      	str	r3, [r7, #12]
  memset(ptr, 0, bytes);
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	2100      	movs	r1, #0
 8016596:	4618      	mov	r0, r3
 8016598:	f004 fbf6 	bl	801ad88 <memset>

  return ptr;
 801659c:	68fb      	ldr	r3, [r7, #12]
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3710      	adds	r7, #16
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	2000039c 	.word	0x2000039c
 80165ac:	20000398 	.word	0x20000398
 80165b0:	0801f560 	.word	0x0801f560
 80165b4:	2000080c 	.word	0x2000080c

080165b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f000 fbcb 	bl	8016d5c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	4618      	mov	r0, r3
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	4618      	mov	r0, r3
 80165dc:	f000 fbae 	bl	8016d3c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	3708      	adds	r7, #8
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 80165ea:	b580      	push	{r7, lr}
 80165ec:	b082      	sub	sp, #8
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7ff ffeb 	bl	80165d0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	4618      	mov	r0, r3
 80165fe:	3708      	adds	r7, #8
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}

08016604 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8016604:	b580      	push	{r7, lr}
 8016606:	b086      	sub	sp, #24
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	60b9      	str	r1, [r7, #8]
 801660e:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	4619      	mov	r1, r3
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f7ff ff89 	bl	8016530 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextj>
 801661e:	4603      	mov	r3, r0
 8016620:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d101      	bne.n	801662c <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x28>
    return kTfLiteError;
 8016628:	2301      	movs	r3, #1
 801662a:	e00e      	b.n	801664a <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x46>
  }

  scratch_buffers.push_back(b);
 801662c:	f107 0310 	add.w	r3, r7, #16
 8016630:	4619      	mov	r1, r3
 8016632:	4808      	ldr	r0, [pc, #32]	; (8016654 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 8016634:	f000 fbb7 	bl	8016da6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8016638:	4806      	ldr	r0, [pc, #24]	; (8016654 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x50>)
 801663a:	f000 fbda 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801663e:	4603      	mov	r3, r0
 8016640:	3b01      	subs	r3, #1
 8016642:	461a      	mov	r2, r3
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8016648:	2300      	movs	r3, #0
}
 801664a:	4618      	mov	r0, r3
 801664c:	3718      	adds	r7, #24
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	20000818 	.word	0x20000818

08016658 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 8016662:	480d      	ldr	r0, [pc, #52]	; (8016698 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016664:	f000 fbc5 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016668:	4603      	mov	r3, r0
 801666a:	461a      	mov	r2, r3
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	4293      	cmp	r3, r2
 8016670:	bfac      	ite	ge
 8016672:	2301      	movge	r3, #1
 8016674:	2300      	movlt	r3, #0
 8016676:	b2db      	uxtb	r3, r3
 8016678:	2b00      	cmp	r3, #0
 801667a:	d001      	beq.n	8016680 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 801667c:	2300      	movs	r3, #0
 801667e:	e006      	b.n	801668e <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	4619      	mov	r1, r3
 8016684:	4804      	ldr	r0, [pc, #16]	; (8016698 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016686:	f000 fbc4 	bl	8016e12 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 801668a:	4603      	mov	r3, r0
 801668c:	685b      	ldr	r3, [r3, #4]
}
 801668e:	4618      	mov	r0, r3
 8016690:	3708      	adds	r7, #8
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	20000818 	.word	0x20000818

0801669c <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti>:

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
 801669c:	b480      	push	{r7}
 801669e:	b083      	sub	sp, #12
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  return &tflTensors[tensor_idx];
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	019b      	lsls	r3, r3, #6
 80166aa:	4a04      	ldr	r2, [pc, #16]	; (80166bc <_ZN12_GLOBAL__N_1L9GetTensorEPK13TfLiteContexti+0x20>)
 80166ac:	4413      	add	r3, r2
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	200003f8 	.word	0x200003f8

080166c0 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 80166c0:	b480      	push	{r7}
 80166c2:	b083      	sub	sp, #12
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  return &tflEvalTensors[tensor_idx];
 80166ca:	683a      	ldr	r2, [r7, #0]
 80166cc:	4613      	mov	r3, r2
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	4413      	add	r3, r2
 80166d2:	009b      	lsls	r3, r3, #2
 80166d4:	4a03      	ldr	r2, [pc, #12]	; (80166e4 <_ZN12_GLOBAL__N_1L13GetEvalTensorEPK13TfLiteContexti+0x24>)
 80166d6:	4413      	add	r3, r2
}
 80166d8:	4618      	mov	r0, r3
 80166da:	370c      	adds	r7, #12
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr
 80166e4:	200006b8 	.word	0x200006b8

080166e8 <_Z18trained_model_initPFPvjjE>:

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 80166e8:	b5b0      	push	{r4, r5, r7, lr}
 80166ea:	b092      	sub	sp, #72	; 0x48
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 80166f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80166f6:	2010      	movs	r0, #16
 80166f8:	4798      	blx	r3
 80166fa:	4603      	mov	r3, r0
 80166fc:	4aa3      	ldr	r2, [pc, #652]	; (801698c <_Z18trained_model_initPFPvjjE+0x2a4>)
 80166fe:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8016700:	4ba2      	ldr	r3, [pc, #648]	; (801698c <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d104      	bne.n	8016712 <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8016708:	48a1      	ldr	r0, [pc, #644]	; (8016990 <_Z18trained_model_initPFPvjjE+0x2a8>)
 801670a:	f004 ff73 	bl	801b5f4 <puts>
    return kTfLiteError;
 801670e:	2301      	movs	r3, #1
 8016710:	e21d      	b.n	8016b4e <_Z18trained_model_initPFPvjjE+0x466>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8016712:	4b9e      	ldr	r3, [pc, #632]	; (801698c <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4a9f      	ldr	r2, [pc, #636]	; (8016994 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016718:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801671a:	4b9c      	ldr	r3, [pc, #624]	; (801698c <_Z18trained_model_initPFPvjjE+0x2a4>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016722:	4a9d      	ldr	r2, [pc, #628]	; (8016998 <_Z18trained_model_initPFPvjjE+0x2b0>)
 8016724:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8016726:	4b9d      	ldr	r3, [pc, #628]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016728:	4a9d      	ldr	r2, [pc, #628]	; (80169a0 <_Z18trained_model_initPFPvjjE+0x2b8>)
 801672a:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 801672c:	4b9b      	ldr	r3, [pc, #620]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 801672e:	4a9d      	ldr	r2, [pc, #628]	; (80169a4 <_Z18trained_model_initPFPvjjE+0x2bc>)
 8016730:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8016732:	4b9a      	ldr	r3, [pc, #616]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016734:	4a9c      	ldr	r2, [pc, #624]	; (80169a8 <_Z18trained_model_initPFPvjjE+0x2c0>)
 8016736:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.GetTensor = &GetTensor;
 8016738:	4b98      	ldr	r3, [pc, #608]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 801673a:	4a9c      	ldr	r2, [pc, #624]	; (80169ac <_Z18trained_model_initPFPvjjE+0x2c4>)
 801673c:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.GetEvalTensor = &GetEvalTensor;
 801673e:	4b97      	ldr	r3, [pc, #604]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016740:	4a9b      	ldr	r2, [pc, #620]	; (80169b0 <_Z18trained_model_initPFPvjjE+0x2c8>)
 8016742:	655a      	str	r2, [r3, #84]	; 0x54
  ctx.tensors = tflTensors;
 8016744:	4b95      	ldr	r3, [pc, #596]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 8016746:	4a9b      	ldr	r2, [pc, #620]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016748:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 801674a:	4b94      	ldr	r3, [pc, #592]	; (801699c <_Z18trained_model_initPFPvjjE+0x2b4>)
 801674c:	220b      	movs	r2, #11
 801674e:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 8016750:	2300      	movs	r3, #0
 8016752:	647b      	str	r3, [r7, #68]	; 0x44
 8016754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016756:	2b0a      	cmp	r3, #10
 8016758:	f200 810c 	bhi.w	8016974 <_Z18trained_model_initPFPvjjE+0x28c>
    tflTensors[i].type = tensorData[i].type;
 801675c:	4996      	ldr	r1, [pc, #600]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801675e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016760:	4613      	mov	r3, r2
 8016762:	005b      	lsls	r3, r3, #1
 8016764:	4413      	add	r3, r2
 8016766:	00db      	lsls	r3, r3, #3
 8016768:	440b      	add	r3, r1
 801676a:	3301      	adds	r3, #1
 801676c:	7819      	ldrb	r1, [r3, #0]
 801676e:	4a91      	ldr	r2, [pc, #580]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016772:	019b      	lsls	r3, r3, #6
 8016774:	4413      	add	r3, r2
 8016776:	460a      	mov	r2, r1
 8016778:	701a      	strb	r2, [r3, #0]
    tflEvalTensors[i].type = tensorData[i].type;
 801677a:	498f      	ldr	r1, [pc, #572]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801677c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801677e:	4613      	mov	r3, r2
 8016780:	005b      	lsls	r3, r3, #1
 8016782:	4413      	add	r3, r2
 8016784:	00db      	lsls	r3, r3, #3
 8016786:	440b      	add	r3, r1
 8016788:	3301      	adds	r3, #1
 801678a:	7818      	ldrb	r0, [r3, #0]
 801678c:	498b      	ldr	r1, [pc, #556]	; (80169bc <_Z18trained_model_initPFPvjjE+0x2d4>)
 801678e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016790:	4613      	mov	r3, r2
 8016792:	005b      	lsls	r3, r3, #1
 8016794:	4413      	add	r3, r2
 8016796:	009b      	lsls	r3, r3, #2
 8016798:	440b      	add	r3, r1
 801679a:	3308      	adds	r3, #8
 801679c:	4602      	mov	r2, r0
 801679e:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80167a0:	4a84      	ldr	r2, [pc, #528]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167a4:	019b      	lsls	r3, r3, #6
 80167a6:	4413      	add	r3, r2
 80167a8:	332d      	adds	r3, #45	; 0x2d
 80167aa:	2200      	movs	r2, #0
 80167ac:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80167ae:	4982      	ldr	r1, [pc, #520]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80167b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167b2:	4613      	mov	r3, r2
 80167b4:	005b      	lsls	r3, r3, #1
 80167b6:	4413      	add	r3, r2
 80167b8:	00db      	lsls	r3, r3, #3
 80167ba:	440b      	add	r3, r1
 80167bc:	7819      	ldrb	r1, [r3, #0]
 80167be:	4a7d      	ldr	r2, [pc, #500]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167c2:	019b      	lsls	r3, r3, #6
 80167c4:	4413      	add	r3, r2
 80167c6:	3314      	adds	r3, #20
 80167c8:	460a      	mov	r2, r1
 80167ca:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 80167cc:	497a      	ldr	r1, [pc, #488]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80167ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167d0:	4613      	mov	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4413      	add	r3, r2
 80167d6:	00db      	lsls	r3, r3, #3
 80167d8:	440b      	add	r3, r1
 80167da:	330c      	adds	r3, #12
 80167dc:	681a      	ldr	r2, [r3, #0]
 80167de:	4975      	ldr	r1, [pc, #468]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167e2:	019b      	lsls	r3, r3, #6
 80167e4:	440b      	add	r3, r1
 80167e6:	3318      	adds	r3, #24
 80167e8:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 80167ea:	4973      	ldr	r1, [pc, #460]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80167ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167ee:	4613      	mov	r3, r2
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	4413      	add	r3, r2
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	440b      	add	r3, r1
 80167f8:	3308      	adds	r3, #8
 80167fa:	681a      	ldr	r2, [r3, #0]
 80167fc:	496d      	ldr	r1, [pc, #436]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80167fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016800:	019b      	lsls	r3, r3, #6
 8016802:	440b      	add	r3, r1
 8016804:	3308      	adds	r3, #8
 8016806:	601a      	str	r2, [r3, #0]
    tflEvalTensors[i].dims = tensorData[i].dims;
 8016808:	496b      	ldr	r1, [pc, #428]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801680a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801680c:	4613      	mov	r3, r2
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	4413      	add	r3, r2
 8016812:	00db      	lsls	r3, r3, #3
 8016814:	440b      	add	r3, r1
 8016816:	3308      	adds	r3, #8
 8016818:	6819      	ldr	r1, [r3, #0]
 801681a:	4868      	ldr	r0, [pc, #416]	; (80169bc <_Z18trained_model_initPFPvjjE+0x2d4>)
 801681c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801681e:	4613      	mov	r3, r2
 8016820:	005b      	lsls	r3, r3, #1
 8016822:	4413      	add	r3, r2
 8016824:	009b      	lsls	r3, r3, #2
 8016826:	4403      	add	r3, r0
 8016828:	3304      	adds	r3, #4
 801682a:	6019      	str	r1, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801682c:	4a61      	ldr	r2, [pc, #388]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016830:	019b      	lsls	r3, r3, #6
 8016832:	4413      	add	r3, r2
 8016834:	3314      	adds	r3, #20
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	2b02      	cmp	r3, #2
 801683a:	d11e      	bne.n	801687a <_Z18trained_model_initPFPvjjE+0x192>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801683c:	495e      	ldr	r1, [pc, #376]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801683e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016840:	4613      	mov	r3, r2
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	4413      	add	r3, r2
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	440b      	add	r3, r1
 801684a:	3304      	adds	r3, #4
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	461a      	mov	r2, r3
 8016850:	4b4e      	ldr	r3, [pc, #312]	; (801698c <_Z18trained_model_initPFPvjjE+0x2a4>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4413      	add	r3, r2
 8016856:	63bb      	str	r3, [r7, #56]	; 0x38

     tflTensors[i].data.data =  start;
 8016858:	4a56      	ldr	r2, [pc, #344]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801685a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801685c:	019b      	lsls	r3, r3, #6
 801685e:	4413      	add	r3, r2
 8016860:	3304      	adds	r3, #4
 8016862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016864:	601a      	str	r2, [r3, #0]
     tflEvalTensors[i].data.data =  start;
 8016866:	4955      	ldr	r1, [pc, #340]	; (80169bc <_Z18trained_model_initPFPvjjE+0x2d4>)
 8016868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	440b      	add	r3, r1
 8016874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016876:	601a      	str	r2, [r3, #0]
 8016878:	e01f      	b.n	80168ba <_Z18trained_model_initPFPvjjE+0x1d2>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 801687a:	494f      	ldr	r1, [pc, #316]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801687c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	440b      	add	r3, r1
 8016888:	3304      	adds	r3, #4
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	4949      	ldr	r1, [pc, #292]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801688e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016890:	019b      	lsls	r3, r3, #6
 8016892:	440b      	add	r3, r1
 8016894:	3304      	adds	r3, #4
 8016896:	601a      	str	r2, [r3, #0]
       tflEvalTensors[i].data.data = tensorData[i].data;
 8016898:	4947      	ldr	r1, [pc, #284]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 801689a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801689c:	4613      	mov	r3, r2
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	4413      	add	r3, r2
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	440b      	add	r3, r1
 80168a6:	3304      	adds	r3, #4
 80168a8:	6819      	ldr	r1, [r3, #0]
 80168aa:	4844      	ldr	r0, [pc, #272]	; (80169bc <_Z18trained_model_initPFPvjjE+0x2d4>)
 80168ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168ae:	4613      	mov	r3, r2
 80168b0:	005b      	lsls	r3, r3, #1
 80168b2:	4413      	add	r3, r2
 80168b4:	009b      	lsls	r3, r3, #2
 80168b6:	4403      	add	r3, r0
 80168b8:	6019      	str	r1, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 80168ba:	4a3e      	ldr	r2, [pc, #248]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80168bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168be:	019b      	lsls	r3, r3, #6
 80168c0:	4413      	add	r3, r2
 80168c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80168c6:	493c      	ldr	r1, [pc, #240]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80168c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168ca:	4613      	mov	r3, r2
 80168cc:	005b      	lsls	r3, r3, #1
 80168ce:	4413      	add	r3, r2
 80168d0:	00db      	lsls	r3, r3, #3
 80168d2:	440b      	add	r3, r1
 80168d4:	f103 0210 	add.w	r2, r3, #16
 80168d8:	4603      	mov	r3, r0
 80168da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80168de:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80168e2:	4a34      	ldr	r2, [pc, #208]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 80168e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168e6:	019b      	lsls	r3, r3, #6
 80168e8:	4413      	add	r3, r2
 80168ea:	3330      	adds	r3, #48	; 0x30
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	2b01      	cmp	r3, #1
 80168f0:	d11b      	bne.n	801692a <_Z18trained_model_initPFPvjjE+0x242>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80168f2:	4931      	ldr	r1, [pc, #196]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 80168f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3314      	adds	r3, #20
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	637b      	str	r3, [r7, #52]	; 0x34
      tflTensors[i].params.scale = quant->scale->data[0];
 8016906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	685a      	ldr	r2, [r3, #4]
 801690c:	4929      	ldr	r1, [pc, #164]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801690e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016910:	019b      	lsls	r3, r3, #6
 8016912:	440b      	add	r3, r1
 8016914:	330c      	adds	r3, #12
 8016916:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 8016918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	685a      	ldr	r2, [r3, #4]
 801691e:	4925      	ldr	r1, [pc, #148]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 8016920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016922:	019b      	lsls	r3, r3, #6
 8016924:	440b      	add	r3, r1
 8016926:	3310      	adds	r3, #16
 8016928:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801692a:	4a22      	ldr	r2, [pc, #136]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801692c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801692e:	019b      	lsls	r3, r3, #6
 8016930:	4413      	add	r3, r2
 8016932:	3314      	adds	r3, #20
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	2b02      	cmp	r3, #2
 8016938:	d118      	bne.n	801696c <_Z18trained_model_initPFPvjjE+0x284>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801693a:	4a1e      	ldr	r2, [pc, #120]	; (80169b4 <_Z18trained_model_initPFPvjjE+0x2cc>)
 801693c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801693e:	019b      	lsls	r3, r3, #6
 8016940:	4413      	add	r3, r2
 8016942:	3304      	adds	r3, #4
 8016944:	6819      	ldr	r1, [r3, #0]
 8016946:	481c      	ldr	r0, [pc, #112]	; (80169b8 <_Z18trained_model_initPFPvjjE+0x2d0>)
 8016948:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801694a:	4613      	mov	r3, r2
 801694c:	005b      	lsls	r3, r3, #1
 801694e:	4413      	add	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	4403      	add	r3, r0
 8016954:	330c      	adds	r3, #12
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	440b      	add	r3, r1
 801695a:	633b      	str	r3, [r7, #48]	; 0x30
      if (data_end_ptr > tensor_boundary) {
 801695c:	4b0d      	ldr	r3, [pc, #52]	; (8016994 <_Z18trained_model_initPFPvjjE+0x2ac>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016962:	429a      	cmp	r2, r3
 8016964:	d902      	bls.n	801696c <_Z18trained_model_initPFPvjjE+0x284>
        tensor_boundary = data_end_ptr;
 8016966:	4a0b      	ldr	r2, [pc, #44]	; (8016994 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696a:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 11; ++i) {
 801696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801696e:	3301      	adds	r3, #1
 8016970:	647b      	str	r3, [r7, #68]	; 0x44
 8016972:	e6ef      	b.n	8016754 <_Z18trained_model_initPFPvjjE+0x6c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8016974:	4b07      	ldr	r3, [pc, #28]	; (8016994 <_Z18trained_model_initPFPvjjE+0x2ac>)
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	4b07      	ldr	r3, [pc, #28]	; (8016998 <_Z18trained_model_initPFPvjjE+0x2b0>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	429a      	cmp	r2, r3
 801697e:	d921      	bls.n	80169c4 <_Z18trained_model_initPFPvjjE+0x2dc>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8016980:	480f      	ldr	r0, [pc, #60]	; (80169c0 <_Z18trained_model_initPFPvjjE+0x2d8>)
 8016982:	f004 fe37 	bl	801b5f4 <puts>
    return kTfLiteError;
 8016986:	2301      	movs	r3, #1
 8016988:	e0e1      	b.n	8016b4e <_Z18trained_model_initPFPvjjE+0x466>
 801698a:	bf00      	nop
 801698c:	20000394 	.word	0x20000394
 8016990:	0801f598 	.word	0x0801f598
 8016994:	20000398 	.word	0x20000398
 8016998:	2000039c 	.word	0x2000039c
 801699c:	200003a0 	.word	0x200003a0
 80169a0:	08016531 	.word	0x08016531
 80169a4:	08016605 	.word	0x08016605
 80169a8:	08016659 	.word	0x08016659
 80169ac:	0801669d 	.word	0x0801669d
 80169b0:	080166c1 	.word	0x080166c1
 80169b4:	200003f8 	.word	0x200003f8
 80169b8:	2000006c 	.word	0x2000006c
 80169bc:	200006b8 	.word	0x200006b8
 80169c0:	0801f5c0 	.word	0x0801f5c0
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 80169c4:	4c64      	ldr	r4, [pc, #400]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 80169c6:	463b      	mov	r3, r7
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7fd fc67 	bl	801429c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80169ce:	4625      	mov	r5, r4
 80169d0:	463c      	mov	r4, r7
 80169d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80169d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80169da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 80169de:	4c5e      	ldr	r4, [pc, #376]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 80169e0:	463b      	mov	r3, r7
 80169e2:	4618      	mov	r0, r3
 80169e4:	f7fe fb22 	bl	801502c <_ZN6tflite16Register_SOFTMAXEv>
 80169e8:	3420      	adds	r4, #32
 80169ea:	463d      	mov	r5, r7
 80169ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80169f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 4; ++i) {
 80169f8:	2300      	movs	r3, #0
 80169fa:	643b      	str	r3, [r7, #64]	; 0x40
 80169fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169fe:	2b03      	cmp	r3, #3
 8016a00:	d86f      	bhi.n	8016ae2 <_Z18trained_model_initPFPvjjE+0x3fa>
    tflNodes[i].inputs = nodeData[i].inputs;
 8016a02:	4a56      	ldr	r2, [pc, #344]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a06:	011b      	lsls	r3, r3, #4
 8016a08:	4413      	add	r3, r2
 8016a0a:	6819      	ldr	r1, [r3, #0]
 8016a0c:	4854      	ldr	r0, [pc, #336]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a10:	4613      	mov	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	4413      	add	r3, r2
 8016a16:	009b      	lsls	r3, r3, #2
 8016a18:	4403      	add	r3, r0
 8016a1a:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8016a1c:	4a4f      	ldr	r2, [pc, #316]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a20:	011b      	lsls	r3, r3, #4
 8016a22:	4413      	add	r3, r2
 8016a24:	3304      	adds	r3, #4
 8016a26:	6819      	ldr	r1, [r3, #0]
 8016a28:	484d      	ldr	r0, [pc, #308]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	00db      	lsls	r3, r3, #3
 8016a30:	4413      	add	r3, r2
 8016a32:	009b      	lsls	r3, r3, #2
 8016a34:	4403      	add	r3, r0
 8016a36:	3304      	adds	r3, #4
 8016a38:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8016a3a:	4a48      	ldr	r2, [pc, #288]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a3e:	011b      	lsls	r3, r3, #4
 8016a40:	4413      	add	r3, r2
 8016a42:	3308      	adds	r3, #8
 8016a44:	6819      	ldr	r1, [r3, #0]
 8016a46:	4846      	ldr	r0, [pc, #280]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a4a:	4613      	mov	r3, r2
 8016a4c:	00db      	lsls	r3, r3, #3
 8016a4e:	4413      	add	r3, r2
 8016a50:	009b      	lsls	r3, r3, #2
 8016a52:	4403      	add	r3, r0
 8016a54:	3314      	adds	r3, #20
 8016a56:	6019      	str	r1, [r3, #0]
tflNodes[i].custom_initial_data = nullptr;
 8016a58:	4941      	ldr	r1, [pc, #260]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	00db      	lsls	r3, r3, #3
 8016a60:	4413      	add	r3, r2
 8016a62:	009b      	lsls	r3, r3, #2
 8016a64:	440b      	add	r3, r1
 8016a66:	3318      	adds	r3, #24
 8016a68:	2200      	movs	r2, #0
 8016a6a:	601a      	str	r2, [r3, #0]
      tflNodes[i].custom_initial_data_size = 0;
 8016a6c:	493c      	ldr	r1, [pc, #240]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016a70:	4613      	mov	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	4413      	add	r3, r2
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	440b      	add	r3, r1
 8016a7a:	331c      	adds	r3, #28
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	601a      	str	r2, [r3, #0]
if (registrations[nodeData[i].used_op_index].init) {
 8016a80:	4a36      	ldr	r2, [pc, #216]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a84:	011b      	lsls	r3, r3, #4
 8016a86:	4413      	add	r3, r2
 8016a88:	330c      	adds	r3, #12
 8016a8a:	781b      	ldrb	r3, [r3, #0]
 8016a8c:	4a32      	ldr	r2, [pc, #200]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 8016a8e:	015b      	lsls	r3, r3, #5
 8016a90:	4413      	add	r3, r2
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d020      	beq.n	8016ada <_Z18trained_model_initPFPvjjE+0x3f2>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8016a98:	4a30      	ldr	r2, [pc, #192]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a9c:	011b      	lsls	r3, r3, #4
 8016a9e:	4413      	add	r3, r2
 8016aa0:	330c      	adds	r3, #12
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	4a2c      	ldr	r2, [pc, #176]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 8016aa6:	015b      	lsls	r3, r3, #5
 8016aa8:	4413      	add	r3, r2
 8016aaa:	681c      	ldr	r4, [r3, #0]
 8016aac:	492c      	ldr	r1, [pc, #176]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	4413      	add	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	440b      	add	r3, r1
 8016aba:	3314      	adds	r3, #20
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2200      	movs	r2, #0
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	4828      	ldr	r0, [pc, #160]	; (8016b64 <_Z18trained_model_initPFPvjjE+0x47c>)
 8016ac4:	47a0      	blx	r4
 8016ac6:	4601      	mov	r1, r0
 8016ac8:	4825      	ldr	r0, [pc, #148]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016acc:	4613      	mov	r3, r2
 8016ace:	00db      	lsls	r3, r3, #3
 8016ad0:	4413      	add	r3, r2
 8016ad2:	009b      	lsls	r3, r3, #2
 8016ad4:	4403      	add	r3, r0
 8016ad6:	3310      	adds	r3, #16
 8016ad8:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 4; ++i) {
 8016ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016adc:	3301      	adds	r3, #1
 8016ade:	643b      	str	r3, [r7, #64]	; 0x40
 8016ae0:	e78c      	b.n	80169fc <_Z18trained_model_initPFPvjjE+0x314>
    }
  }
  for(size_t i = 0; i < 4; ++i) {
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d82f      	bhi.n	8016b4c <_Z18trained_model_initPFPvjjE+0x464>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8016aec:	4a1b      	ldr	r2, [pc, #108]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016af0:	011b      	lsls	r3, r3, #4
 8016af2:	4413      	add	r3, r2
 8016af4:	330c      	adds	r3, #12
 8016af6:	781b      	ldrb	r3, [r3, #0]
 8016af8:	4a17      	ldr	r2, [pc, #92]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 8016afa:	015b      	lsls	r3, r3, #5
 8016afc:	4413      	add	r3, r2
 8016afe:	3308      	adds	r3, #8
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d01e      	beq.n	8016b44 <_Z18trained_model_initPFPvjjE+0x45c>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8016b06:	4a15      	ldr	r2, [pc, #84]	; (8016b5c <_Z18trained_model_initPFPvjjE+0x474>)
 8016b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b0a:	011b      	lsls	r3, r3, #4
 8016b0c:	4413      	add	r3, r2
 8016b0e:	330c      	adds	r3, #12
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	4a11      	ldr	r2, [pc, #68]	; (8016b58 <_Z18trained_model_initPFPvjjE+0x470>)
 8016b14:	015b      	lsls	r3, r3, #5
 8016b16:	4413      	add	r3, r2
 8016b18:	3308      	adds	r3, #8
 8016b1a:	681c      	ldr	r4, [r3, #0]
 8016b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016b1e:	4613      	mov	r3, r2
 8016b20:	00db      	lsls	r3, r3, #3
 8016b22:	4413      	add	r3, r2
 8016b24:	009b      	lsls	r3, r3, #2
 8016b26:	4a0e      	ldr	r2, [pc, #56]	; (8016b60 <_Z18trained_model_initPFPvjjE+0x478>)
 8016b28:	4413      	add	r3, r2
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	480d      	ldr	r0, [pc, #52]	; (8016b64 <_Z18trained_model_initPFPvjjE+0x47c>)
 8016b2e:	47a0      	blx	r4
 8016b30:	4603      	mov	r3, r0
 8016b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (status != kTfLiteOk) {
 8016b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d002      	beq.n	8016b44 <_Z18trained_model_initPFPvjjE+0x45c>
        return status;
 8016b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b42:	e004      	b.n	8016b4e <_Z18trained_model_initPFPvjjE+0x466>
  for(size_t i = 0; i < 4; ++i) {
 8016b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b46:	3301      	adds	r3, #1
 8016b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016b4a:	e7cc      	b.n	8016ae6 <_Z18trained_model_initPFPvjjE+0x3fe>
      }
    }
  }
  return kTfLiteOk;
 8016b4c:	2300      	movs	r3, #0
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3748      	adds	r7, #72	; 0x48
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bdb0      	pop	{r4, r5, r7, pc}
 8016b56:	bf00      	nop
 8016b58:	2000073c 	.word	0x2000073c
 8016b5c:	0802032c 	.word	0x0802032c
 8016b60:	2000077c 	.word	0x2000077c
 8016b64:	200003a0 	.word	0x200003a0

08016b68 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8016b70:	4b05      	ldr	r3, [pc, #20]	; (8016b88 <_Z19trained_model_inputi+0x20>)
 8016b72:	689a      	ldr	r2, [r3, #8]
 8016b74:	2300      	movs	r3, #0
 8016b76:	019b      	lsls	r3, r3, #6
 8016b78:	4413      	add	r3, r2
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	370c      	adds	r7, #12
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b84:	4770      	bx	lr
 8016b86:	bf00      	nop
 8016b88:	200003a0 	.word	0x200003a0

08016b8c <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 8016b8c:	b480      	push	{r7}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8016b94:	4b05      	ldr	r3, [pc, #20]	; (8016bac <_Z20trained_model_outputi+0x20>)
 8016b96:	689a      	ldr	r2, [r3, #8]
 8016b98:	230a      	movs	r3, #10
 8016b9a:	019b      	lsls	r3, r3, #6
 8016b9c:	4413      	add	r3, r2
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr
 8016baa:	bf00      	nop
 8016bac:	200003a0 	.word	0x200003a0

08016bb0 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8016bb0:	b590      	push	{r4, r7, lr}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 4; ++i) {
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	607b      	str	r3, [r7, #4]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b03      	cmp	r3, #3
 8016bbe:	d81f      	bhi.n	8016c00 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8016bc0:	4a12      	ldr	r2, [pc, #72]	; (8016c0c <_Z20trained_model_invokev+0x5c>)
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	011b      	lsls	r3, r3, #4
 8016bc6:	4413      	add	r3, r2
 8016bc8:	330c      	adds	r3, #12
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	4a10      	ldr	r2, [pc, #64]	; (8016c10 <_Z20trained_model_invokev+0x60>)
 8016bce:	015b      	lsls	r3, r3, #5
 8016bd0:	4413      	add	r3, r2
 8016bd2:	330c      	adds	r3, #12
 8016bd4:	681c      	ldr	r4, [r3, #0]
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	4613      	mov	r3, r2
 8016bda:	00db      	lsls	r3, r3, #3
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	4a0c      	ldr	r2, [pc, #48]	; (8016c14 <_Z20trained_model_invokev+0x64>)
 8016be2:	4413      	add	r3, r2
 8016be4:	4619      	mov	r1, r3
 8016be6:	480c      	ldr	r0, [pc, #48]	; (8016c18 <_Z20trained_model_invokev+0x68>)
 8016be8:	47a0      	blx	r4
 8016bea:	4603      	mov	r3, r0
 8016bec:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8016bee:	78fb      	ldrb	r3, [r7, #3]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d001      	beq.n	8016bf8 <_Z20trained_model_invokev+0x48>
      return status;
 8016bf4:	78fb      	ldrb	r3, [r7, #3]
 8016bf6:	e004      	b.n	8016c02 <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 4; ++i) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	607b      	str	r3, [r7, #4]
 8016bfe:	e7dc      	b.n	8016bba <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8016c00:	2300      	movs	r3, #0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	370c      	adds	r7, #12
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd90      	pop	{r4, r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	0802032c 	.word	0x0802032c
 8016c10:	2000073c 	.word	0x2000073c
 8016c14:	2000077c 	.word	0x2000077c
 8016c18:	200003a0 	.word	0x200003a0

08016c1c <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b084      	sub	sp, #16
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8016c24:	4b15      	ldr	r3, [pc, #84]	; (8016c7c <_Z19trained_model_resetPFvPvE+0x60>)
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4610      	mov	r0, r2
 8016c2c:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8016c2e:	4814      	ldr	r0, [pc, #80]	; (8016c80 <_Z19trained_model_resetPFvPvE+0x64>)
 8016c30:	f000 f8ff 	bl	8016e32 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016c34:	2300      	movs	r3, #0
 8016c36:	60fb      	str	r3, [r7, #12]
 8016c38:	4812      	ldr	r0, [pc, #72]	; (8016c84 <_Z19trained_model_resetPFvPvE+0x68>)
 8016c3a:	f000 f908 	bl	8016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8016c3e:	4602      	mov	r2, r0
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	4293      	cmp	r3, r2
 8016c44:	bf34      	ite	cc
 8016c46:	2301      	movcc	r3, #1
 8016c48:	2300      	movcs	r3, #0
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d00c      	beq.n	8016c6a <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8016c50:	68f9      	ldr	r1, [r7, #12]
 8016c52:	480c      	ldr	r0, [pc, #48]	; (8016c84 <_Z19trained_model_resetPFvPvE+0x68>)
 8016c54:	f000 f90b 	bl	8016e6e <_ZNSt6vectorIPvSaIS0_EEixEj>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f004 f863 	bl	801ad28 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	3301      	adds	r3, #1
 8016c66:	60fb      	str	r3, [r7, #12]
 8016c68:	e7e6      	b.n	8016c38 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8016c6a:	4806      	ldr	r0, [pc, #24]	; (8016c84 <_Z19trained_model_resetPFvPvE+0x68>)
 8016c6c:	f000 f90f 	bl	8016e8e <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 8016c70:	2300      	movs	r3, #0
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	3710      	adds	r7, #16
 8016c76:	46bd      	mov	sp, r7
 8016c78:	bd80      	pop	{r7, pc}
 8016c7a:	bf00      	nop
 8016c7c:	20000394 	.word	0x20000394
 8016c80:	20000818 	.word	0x20000818
 8016c84:	2000080c 	.word	0x2000080c

08016c88 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 f90a 	bl	8016eaa <_ZNSaIPvEC1Ev>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f000 f912 	bl	8016ec2 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3708      	adds	r7, #8
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b082      	sub	sp, #8
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f000 f91a 	bl	8016eea <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3708      	adds	r7, #8
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	689a      	ldr	r2, [r3, #8]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	1ad3      	subs	r3, r2, r3
 8016cd6:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8016cd8:	461a      	mov	r2, r3
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 f910 	bl	8016f00 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7ff fbfe 	bl	80164e4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	4618      	mov	r0, r3
 8016cec:	3708      	adds	r7, #8
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}

08016cf2 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b082      	sub	sp, #8
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
 8016cfa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	685a      	ldr	r2, [r3, #4]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	689b      	ldr	r3, [r3, #8]
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d00c      	beq.n	8016d22 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	685b      	ldr	r3, [r3, #4]
 8016d0e:	683a      	ldr	r2, [r7, #0]
 8016d10:	4619      	mov	r1, r3
 8016d12:	f000 f908 	bl	8016f26 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	1d1a      	adds	r2, r3, #4
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	605a      	str	r2, [r3, #4]
      }
 8016d20:	e008      	b.n	8016d34 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f000 f912 	bl	8016f4c <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	683a      	ldr	r2, [r7, #0]
 8016d2c:	4619      	mov	r1, r3
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f000 f934 	bl	8016f9c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8016d34:	bf00      	nop
 8016d36:	3708      	adds	r7, #8
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}

08016d3c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b082      	sub	sp, #8
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016d44:	6878      	ldr	r0, [r7, #4]
 8016d46:	f000 f9e5 	bl	8017114 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f000 f9ed 	bl	801712c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4618      	mov	r0, r3
 8016d56:	3708      	adds	r7, #8
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}

08016d5c <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f000 f9f5 	bl	8017154 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3708      	adds	r7, #8
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	689a      	ldr	r2, [r3, #8]
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	1ad3      	subs	r3, r2, r3
 8016d8a:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f000 f9eb 	bl	801716a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7ff fc0e 	bl	80165b8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3708      	adds	r7, #8
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b082      	sub	sp, #8
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	6078      	str	r0, [r7, #4]
 8016dae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	685a      	ldr	r2, [r3, #4]
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d00d      	beq.n	8016dd8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	683a      	ldr	r2, [r7, #0]
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	f000 f9e3 	bl	8017190 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	f103 0208 	add.w	r2, r3, #8
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	605a      	str	r2, [r3, #4]
      }
 8016dd6:	e008      	b.n	8016dea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f000 f9ec 	bl	80171b6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8016dde:	4603      	mov	r3, r0
 8016de0:	683a      	ldr	r2, [r7, #0]
 8016de2:	4619      	mov	r1, r3
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f000 fa0d 	bl	8017204 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8016dea:	bf00      	nop
 8016dec:	3708      	adds	r7, #8
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016df2:	b480      	push	{r7}
 8016df4:	b083      	sub	sp, #12
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	685a      	ldr	r2, [r3, #4]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	1ad3      	subs	r3, r2, r3
 8016e04:	10db      	asrs	r3, r3, #3
 8016e06:	4618      	mov	r0, r3
 8016e08:	370c      	adds	r7, #12
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e10:	4770      	bx	lr

08016e12 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016e12:	b480      	push	{r7}
 8016e14:	b083      	sub	sp, #12
 8016e16:	af00      	add	r7, sp, #0
 8016e18:	6078      	str	r0, [r7, #4]
 8016e1a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	4413      	add	r3, r2
      }
 8016e26:	4618      	mov	r0, r3
 8016e28:	370c      	adds	r7, #12
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr

08016e32 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b082      	sub	sp, #8
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	4619      	mov	r1, r3
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f000 fa9b 	bl	801737c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8016e46:	bf00      	nop
 8016e48:	3708      	adds	r7, #8
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016e4e:	b480      	push	{r7}
 8016e50:	b083      	sub	sp, #12
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	685a      	ldr	r2, [r3, #4]
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	1ad3      	subs	r3, r2, r3
 8016e60:	109b      	asrs	r3, r3, #2
 8016e62:	4618      	mov	r0, r3
 8016e64:	370c      	adds	r7, #12
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr

08016e6e <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016e6e:	b480      	push	{r7}
 8016e70:	b083      	sub	sp, #12
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681a      	ldr	r2, [r3, #0]
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	009b      	lsls	r3, r3, #2
 8016e80:	4413      	add	r3, r2
      }
 8016e82:	4618      	mov	r0, r3
 8016e84:	370c      	adds	r7, #12
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr

08016e8e <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016e8e:	b580      	push	{r7, lr}
 8016e90:	b082      	sub	sp, #8
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f000 fa8e 	bl	80173be <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8016ea2:	bf00      	nop
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}

08016eaa <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8016eaa:	b580      	push	{r7, lr}
 8016eac:	b082      	sub	sp, #8
 8016eae:	af00      	add	r7, sp, #0
 8016eb0:	6078      	str	r0, [r7, #4]
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f000 faa4 	bl	8017400 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3708      	adds	r7, #8
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}

08016ec2 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016ec2:	b480      	push	{r7}
 8016ec4:	b083      	sub	sp, #12
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	601a      	str	r2, [r3, #0]
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	605a      	str	r2, [r3, #4]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	609a      	str	r2, [r3, #8]
	{ }
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	4618      	mov	r0, r3
 8016ee0:	370c      	adds	r7, #12
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee8:	4770      	bx	lr

08016eea <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016eea:	b480      	push	{r7}
 8016eec:	b083      	sub	sp, #12
 8016eee:	af00      	add	r7, sp, #0
 8016ef0:	6078      	str	r0, [r7, #4]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	370c      	adds	r7, #12
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr

08016f00 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	607a      	str	r2, [r7, #4]
	if (__p)
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d005      	beq.n	8016f1e <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	68b9      	ldr	r1, [r7, #8]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f000 fa7c 	bl	8017416 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8016f1e:	bf00      	nop
 8016f20:	3710      	adds	r7, #16
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}

08016f26 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b084      	sub	sp, #16
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	60f8      	str	r0, [r7, #12]
 8016f2e:	60b9      	str	r1, [r7, #8]
 8016f30:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f000 fa7e 	bl	8017434 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	68b9      	ldr	r1, [r7, #8]
 8016f3e:	68f8      	ldr	r0, [r7, #12]
 8016f40:	f000 fa83 	bl	801744a <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8016f44:	bf00      	nop
 8016f46:	3710      	adds	r7, #16
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}

08016f4c <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b084      	sub	sp, #16
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	1d1a      	adds	r2, r3, #4
 8016f58:	f107 030c 	add.w	r3, r7, #12
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f000 fa89 	bl	8017476 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	4618      	mov	r0, r3
 8016f68:	3710      	adds	r7, #16
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}

08016f6e <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016f6e:	b580      	push	{r7, lr}
 8016f70:	b082      	sub	sp, #8
 8016f72:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016f74:	4618      	mov	r0, r3
 8016f76:	f000 f805 	bl	8016f84 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016f7a:	4603      	mov	r3, r0
      }
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	3708      	adds	r7, #8
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd80      	pop	{r7, pc}

08016f84 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016f8c:	2301      	movs	r3, #1
      }
 8016f8e:	4618      	mov	r0, r3
 8016f90:	370c      	adds	r7, #12
 8016f92:	46bd      	mov	sp, r7
 8016f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f98:	4770      	bx	lr
	...

08016f9c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016f9c:	b5b0      	push	{r4, r5, r7, lr}
 8016f9e:	b08c      	sub	sp, #48	; 0x30
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8016fa8:	4a59      	ldr	r2, [pc, #356]	; (8017110 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8016faa:	2101      	movs	r1, #1
 8016fac:	68f8      	ldr	r0, [r7, #12]
 8016fae:	f000 fa72 	bl	8017496 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8016fb2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016fc0:	68f8      	ldr	r0, [r7, #12]
 8016fc2:	f000 faaf 	bl	8017524 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	617b      	str	r3, [r7, #20]
 8016fca:	f107 0214 	add.w	r2, r7, #20
 8016fce:	f107 0308 	add.w	r3, r7, #8
 8016fd2:	4611      	mov	r1, r2
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f000 fab5 	bl	8017544 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f000 fac3 	bl	801756e <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8016fe8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016fee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8016ff4:	69ba      	ldr	r2, [r7, #24]
 8016ff6:	18d5      	adds	r5, r2, r3
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f000 fa1b 	bl	8017434 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016ffe:	4603      	mov	r3, r0
 8017000:	461a      	mov	r2, r3
 8017002:	4629      	mov	r1, r5
 8017004:	4620      	mov	r0, r4
 8017006:	f7ff ff8e 	bl	8016f26 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 801700a:	2300      	movs	r3, #0
 801700c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 801700e:	f7ff ffae 	bl	8016f6e <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	d027      	beq.n	8017068 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017018:	f107 0308 	add.w	r3, r7, #8
 801701c:	4618      	mov	r0, r3
 801701e:	f000 face 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017022:	4603      	mov	r3, r0
 8017024:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	4618      	mov	r0, r3
 801702a:	f000 fad3 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801702e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017030:	69ba      	ldr	r2, [r7, #24]
 8017032:	4621      	mov	r1, r4
 8017034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017036:	f000 faae 	bl	8017596 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 801703a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703e:	3304      	adds	r3, #4
 8017040:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8017042:	f107 0308 	add.w	r3, r7, #8
 8017046:	4618      	mov	r0, r3
 8017048:	f000 fab9 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801704c:	4603      	mov	r3, r0
 801704e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	4618      	mov	r0, r3
 8017054:	f000 fabe 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017058:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801705a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801705c:	6a39      	ldr	r1, [r7, #32]
 801705e:	4620      	mov	r0, r4
 8017060:	f000 fa99 	bl	8017596 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8017064:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017066:	e026      	b.n	80170b6 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8017068:	f107 0308 	add.w	r3, r7, #8
 801706c:	4618      	mov	r0, r3
 801706e:	f000 faa6 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017072:	4603      	mov	r3, r0
 8017074:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	4618      	mov	r0, r3
 801707a:	f000 faab 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801707e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8017080:	69ba      	ldr	r2, [r7, #24]
 8017082:	4621      	mov	r1, r4
 8017084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017086:	f000 fab0 	bl	80175ea <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801708a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 801708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801708e:	3304      	adds	r3, #4
 8017090:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8017092:	f107 0308 	add.w	r3, r7, #8
 8017096:	4618      	mov	r0, r3
 8017098:	f000 fa91 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801709c:	4603      	mov	r3, r0
 801709e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	4618      	mov	r0, r3
 80170a4:	f000 fa96 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80170a8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80170aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170ac:	6a39      	ldr	r1, [r7, #32]
 80170ae:	4620      	mov	r0, r4
 80170b0:	f000 fa9b 	bl	80175ea <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80170b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80170b6:	f7ff ff5a 	bl	8016f6e <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 80170ba:	4603      	mov	r3, r0
 80170bc:	f083 0301 	eor.w	r3, r3, #1
 80170c0:	b2db      	uxtb	r3, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d009      	beq.n	80170da <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f000 fa83 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80170ce:	4603      	mov	r3, r0
 80170d0:	461a      	mov	r2, r3
 80170d2:	6a39      	ldr	r1, [r7, #32]
 80170d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170d6:	f000 faa1 	bl	801761c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 80170da:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	689a      	ldr	r2, [r3, #8]
 80170e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e2:	1ad3      	subs	r3, r2, r3
 80170e4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80170e6:	461a      	mov	r2, r3
 80170e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170ea:	f7ff ff09 	bl	8016f00 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	69ba      	ldr	r2, [r7, #24]
 80170f2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80170f8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80170fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fc:	009b      	lsls	r3, r3, #2
 80170fe:	69ba      	ldr	r2, [r7, #24]
 8017100:	441a      	add	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	609a      	str	r2, [r3, #8]
    }
 8017106:	bf00      	nop
 8017108:	3730      	adds	r7, #48	; 0x30
 801710a:	46bd      	mov	sp, r7
 801710c:	bdb0      	pop	{r4, r5, r7, pc}
 801710e:	bf00      	nop
 8017110:	0801f614 	.word	0x0801f614

08017114 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f000 fa8b 	bl	8017638 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	4618      	mov	r0, r3
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2200      	movs	r2, #0
 8017138:	601a      	str	r2, [r3, #0]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	2200      	movs	r2, #0
 801713e:	605a      	str	r2, [r3, #4]
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2200      	movs	r2, #0
 8017144:	609a      	str	r2, [r3, #8]
	{ }
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	4618      	mov	r0, r3
 801714a:	370c      	adds	r7, #12
 801714c:	46bd      	mov	sp, r7
 801714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017152:	4770      	bx	lr

08017154 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	4618      	mov	r0, r3
 8017160:	370c      	adds	r7, #12
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr

0801716a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 801716a:	b580      	push	{r7, lr}
 801716c:	b084      	sub	sp, #16
 801716e:	af00      	add	r7, sp, #0
 8017170:	60f8      	str	r0, [r7, #12]
 8017172:	60b9      	str	r1, [r7, #8]
 8017174:	607a      	str	r2, [r7, #4]
	if (__p)
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d005      	beq.n	8017188 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	687a      	ldr	r2, [r7, #4]
 8017180:	68b9      	ldr	r1, [r7, #8]
 8017182:	4618      	mov	r0, r3
 8017184:	f000 fa63 	bl	801764e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8017188:	bf00      	nop
 801718a:	3710      	adds	r7, #16
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8017190:	b580      	push	{r7, lr}
 8017192:	b084      	sub	sp, #16
 8017194:	af00      	add	r7, sp, #0
 8017196:	60f8      	str	r0, [r7, #12]
 8017198:	60b9      	str	r1, [r7, #8]
 801719a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f000 fa65 	bl	801766c <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80171a2:	4603      	mov	r3, r0
 80171a4:	461a      	mov	r2, r3
 80171a6:	68b9      	ldr	r1, [r7, #8]
 80171a8:	68f8      	ldr	r0, [r7, #12]
 80171aa:	f000 fa6a 	bl	8017682 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80171ae:	bf00      	nop
 80171b0:	3710      	adds	r7, #16
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}

080171b6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80171b6:	b580      	push	{r7, lr}
 80171b8:	b084      	sub	sp, #16
 80171ba:	af00      	add	r7, sp, #0
 80171bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	1d1a      	adds	r2, r3, #4
 80171c2:	f107 030c 	add.w	r3, r7, #12
 80171c6:	4611      	mov	r1, r2
 80171c8:	4618      	mov	r0, r3
 80171ca:	f000 fa73 	bl	80176b4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	4618      	mov	r0, r3
 80171d2:	3710      	adds	r7, #16
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80171de:	4618      	mov	r0, r3
 80171e0:	f000 f805 	bl	80171ee <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80171e4:	4603      	mov	r3, r0
      }
 80171e6:	4618      	mov	r0, r3
 80171e8:	3708      	adds	r7, #8
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80171ee:	b480      	push	{r7}
 80171f0:	b083      	sub	sp, #12
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80171f6:	2301      	movs	r3, #1
      }
 80171f8:	4618      	mov	r0, r3
 80171fa:	370c      	adds	r7, #12
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8017204:	b5b0      	push	{r4, r5, r7, lr}
 8017206:	b08c      	sub	sp, #48	; 0x30
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8017210:	4a59      	ldr	r2, [pc, #356]	; (8017378 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8017212:	2101      	movs	r1, #1
 8017214:	68f8      	ldr	r0, [r7, #12]
 8017216:	f000 fa5d 	bl	80176d4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 801721a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8017228:	68f8      	ldr	r0, [r7, #12]
 801722a:	f000 fa9a 	bl	8017762 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 801722e:	4603      	mov	r3, r0
 8017230:	617b      	str	r3, [r7, #20]
 8017232:	f107 0214 	add.w	r2, r7, #20
 8017236:	f107 0308 	add.w	r3, r7, #8
 801723a:	4611      	mov	r1, r2
 801723c:	4618      	mov	r0, r3
 801723e:	f000 faa0 	bl	8017782 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8017242:	4603      	mov	r3, r0
 8017244:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801724a:	4618      	mov	r0, r3
 801724c:	f000 faae 	bl	80177ac <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8017250:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8017252:	69bb      	ldr	r3, [r7, #24]
 8017254:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8017256:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8017258:	69fb      	ldr	r3, [r7, #28]
 801725a:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801725c:	69ba      	ldr	r2, [r7, #24]
 801725e:	18d5      	adds	r5, r2, r3
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 fa03 	bl	801766c <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017266:	4603      	mov	r3, r0
 8017268:	461a      	mov	r2, r3
 801726a:	4629      	mov	r1, r5
 801726c:	4620      	mov	r0, r4
 801726e:	f7ff ff8f 	bl	8017190 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8017272:	2300      	movs	r3, #0
 8017274:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8017276:	f7ff ffaf 	bl	80171d8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d027      	beq.n	80172d0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017280:	f107 0308 	add.w	r3, r7, #8
 8017284:	4618      	mov	r0, r3
 8017286:	f000 fab9 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801728a:	4603      	mov	r3, r0
 801728c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	4618      	mov	r0, r3
 8017292:	f000 fabe 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017296:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8017298:	69ba      	ldr	r2, [r7, #24]
 801729a:	4621      	mov	r1, r4
 801729c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801729e:	f000 fa99 	bl	80177d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80172a2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80172a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a6:	3308      	adds	r3, #8
 80172a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80172aa:	f107 0308 	add.w	r3, r7, #8
 80172ae:	4618      	mov	r0, r3
 80172b0:	f000 faa4 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80172b4:	4603      	mov	r3, r0
 80172b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f000 faa9 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80172c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80172c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172c4:	6a39      	ldr	r1, [r7, #32]
 80172c6:	4620      	mov	r0, r4
 80172c8:	f000 fa84 	bl	80177d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80172cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80172ce:	e026      	b.n	801731e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80172d0:	f107 0308 	add.w	r3, r7, #8
 80172d4:	4618      	mov	r0, r3
 80172d6:	f000 fa91 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80172da:	4603      	mov	r3, r0
 80172dc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f000 fa96 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80172e6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80172e8:	69ba      	ldr	r2, [r7, #24]
 80172ea:	4621      	mov	r1, r4
 80172ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ee:	f000 fa9b 	bl	8017828 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80172f2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80172f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f6:	3308      	adds	r3, #8
 80172f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80172fa:	f107 0308 	add.w	r3, r7, #8
 80172fe:	4618      	mov	r0, r3
 8017300:	f000 fa7c 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017304:	4603      	mov	r3, r0
 8017306:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	4618      	mov	r0, r3
 801730c:	f000 fa81 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017310:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8017312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017314:	6a39      	ldr	r1, [r7, #32]
 8017316:	4620      	mov	r0, r4
 8017318:	f000 fa86 	bl	8017828 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 801731c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 801731e:	f7ff ff5b 	bl	80171d8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8017322:	4603      	mov	r3, r0
 8017324:	f083 0301 	eor.w	r3, r3, #1
 8017328:	b2db      	uxtb	r3, r3
 801732a:	2b00      	cmp	r3, #0
 801732c:	d009      	beq.n	8017342 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	4618      	mov	r0, r3
 8017332:	f000 fa6e 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017336:	4603      	mov	r3, r0
 8017338:	461a      	mov	r2, r3
 801733a:	6a39      	ldr	r1, [r7, #32]
 801733c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801733e:	f000 fa8c 	bl	801785a <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8017342:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	689a      	ldr	r2, [r3, #8]
 8017348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734a:	1ad3      	subs	r3, r2, r3
 801734c:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801734e:	461a      	mov	r2, r3
 8017350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017352:	f7ff ff0a 	bl	801716a <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	69ba      	ldr	r2, [r7, #24]
 801735a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017360:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8017362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017364:	00db      	lsls	r3, r3, #3
 8017366:	69ba      	ldr	r2, [r7, #24]
 8017368:	441a      	add	r2, r3
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	609a      	str	r2, [r3, #8]
    }
 801736e:	bf00      	nop
 8017370:	3730      	adds	r7, #48	; 0x30
 8017372:	46bd      	mov	sp, r7
 8017374:	bdb0      	pop	{r4, r5, r7, pc}
 8017376:	bf00      	nop
 8017378:	0801f614 	.word	0x0801f614

0801737c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801737c:	b590      	push	{r4, r7, lr}
 801737e:	b085      	sub	sp, #20
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	685a      	ldr	r2, [r3, #4]
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	10db      	asrs	r3, r3, #3
 8017390:	60fb      	str	r3, [r7, #12]
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00e      	beq.n	80173b6 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	4618      	mov	r0, r3
 80173a0:	f000 fa37 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80173a4:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80173a6:	461a      	mov	r2, r3
 80173a8:	4621      	mov	r1, r4
 80173aa:	6838      	ldr	r0, [r7, #0]
 80173ac:	f000 fa55 	bl	801785a <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	683a      	ldr	r2, [r7, #0]
 80173b4:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80173b6:	bf00      	nop
 80173b8:	3714      	adds	r7, #20
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd90      	pop	{r4, r7, pc}

080173be <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80173be:	b590      	push	{r4, r7, lr}
 80173c0:	b085      	sub	sp, #20
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
 80173c6:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	685a      	ldr	r2, [r3, #4]
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	1ad3      	subs	r3, r2, r3
 80173d0:	109b      	asrs	r3, r3, #2
 80173d2:	60fb      	str	r3, [r7, #12]
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d00e      	beq.n	80173f8 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	4618      	mov	r0, r3
 80173e2:	f000 f8f7 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80173e6:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80173e8:	461a      	mov	r2, r3
 80173ea:	4621      	mov	r1, r4
 80173ec:	6838      	ldr	r0, [r7, #0]
 80173ee:	f000 f915 	bl	801761c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	683a      	ldr	r2, [r7, #0]
 80173f6:	605a      	str	r2, [r3, #4]
      }
 80173f8:	bf00      	nop
 80173fa:	3714      	adds	r7, #20
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd90      	pop	{r4, r7, pc}

08017400 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017400:	b480      	push	{r7}
 8017402:	b083      	sub	sp, #12
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	4618      	mov	r0, r3
 801740c:	370c      	adds	r7, #12
 801740e:	46bd      	mov	sp, r7
 8017410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017414:	4770      	bx	lr

08017416 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017416:	b580      	push	{r7, lr}
 8017418:	b084      	sub	sp, #16
 801741a:	af00      	add	r7, sp, #0
 801741c:	60f8      	str	r0, [r7, #12]
 801741e:	60b9      	str	r1, [r7, #8]
 8017420:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017422:	687a      	ldr	r2, [r7, #4]
 8017424:	68b9      	ldr	r1, [r7, #8]
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f000 fa25 	bl	8017876 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 801742c:	bf00      	nop
 801742e:	3710      	adds	r7, #16
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017434:	b480      	push	{r7}
 8017436:	b083      	sub	sp, #12
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4618      	mov	r0, r3
 8017440:	370c      	adds	r7, #12
 8017442:	46bd      	mov	sp, r7
 8017444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017448:	4770      	bx	lr

0801744a <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801744a:	b590      	push	{r4, r7, lr}
 801744c:	b085      	sub	sp, #20
 801744e:	af00      	add	r7, sp, #0
 8017450:	60f8      	str	r0, [r7, #12]
 8017452:	60b9      	str	r1, [r7, #8]
 8017454:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7ff ffec 	bl	8017434 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801745c:	4603      	mov	r3, r0
 801745e:	681c      	ldr	r4, [r3, #0]
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	4619      	mov	r1, r3
 8017464:	2004      	movs	r0, #4
 8017466:	f7e9 ff2a 	bl	80012be <_ZnwjPv>
 801746a:	4603      	mov	r3, r0
 801746c:	601c      	str	r4, [r3, #0]
 801746e:	bf00      	nop
 8017470:	3714      	adds	r7, #20
 8017472:	46bd      	mov	sp, r7
 8017474:	bd90      	pop	{r4, r7, pc}

08017476 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017476:	b480      	push	{r7}
 8017478:	b083      	sub	sp, #12
 801747a:	af00      	add	r7, sp, #0
 801747c:	6078      	str	r0, [r7, #4]
 801747e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	681a      	ldr	r2, [r3, #0]
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	601a      	str	r2, [r3, #0]
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	4618      	mov	r0, r3
 801748c:	370c      	adds	r7, #12
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr

08017496 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8017496:	b590      	push	{r4, r7, lr}
 8017498:	b087      	sub	sp, #28
 801749a:	af00      	add	r7, sp, #0
 801749c:	60f8      	str	r0, [r7, #12]
 801749e:	60b9      	str	r1, [r7, #8]
 80174a0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80174a2:	68f8      	ldr	r0, [r7, #12]
 80174a4:	f000 f9f4 	bl	8017890 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80174a8:	4604      	mov	r4, r0
 80174aa:	68f8      	ldr	r0, [r7, #12]
 80174ac:	f7ff fccf 	bl	8016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80174b0:	4603      	mov	r3, r0
 80174b2:	1ae2      	subs	r2, r4, r3
 80174b4:	68bb      	ldr	r3, [r7, #8]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	bf34      	ite	cc
 80174ba:	2301      	movcc	r3, #1
 80174bc:	2300      	movcs	r3, #0
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d002      	beq.n	80174ca <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f000 fe4d 	bl	8018164 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	f7ff fcbf 	bl	8016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80174d0:	4604      	mov	r4, r0
 80174d2:	68f8      	ldr	r0, [r7, #12]
 80174d4:	f7ff fcbb 	bl	8016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80174d8:	4603      	mov	r3, r0
 80174da:	613b      	str	r3, [r7, #16]
 80174dc:	f107 0208 	add.w	r2, r7, #8
 80174e0:	f107 0310 	add.w	r3, r7, #16
 80174e4:	4611      	mov	r1, r2
 80174e6:	4618      	mov	r0, r3
 80174e8:	f7ee fb8e 	bl	8005c08 <_ZSt3maxIjERKT_S2_S2_>
 80174ec:	4603      	mov	r3, r0
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4423      	add	r3, r4
 80174f2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80174f4:	68f8      	ldr	r0, [r7, #12]
 80174f6:	f7ff fcaa 	bl	8016e4e <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80174fa:	4602      	mov	r2, r0
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	4293      	cmp	r3, r2
 8017500:	d306      	bcc.n	8017510 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8017502:	68f8      	ldr	r0, [r7, #12]
 8017504:	f000 f9c4 	bl	8017890 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017508:	4602      	mov	r2, r0
 801750a:	697b      	ldr	r3, [r7, #20]
 801750c:	4293      	cmp	r3, r2
 801750e:	d904      	bls.n	801751a <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f000 f9bd 	bl	8017890 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017516:	4603      	mov	r3, r0
 8017518:	e000      	b.n	801751c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 801751a:	697b      	ldr	r3, [r7, #20]
      }
 801751c:	4618      	mov	r0, r3
 801751e:	371c      	adds	r7, #28
 8017520:	46bd      	mov	sp, r7
 8017522:	bd90      	pop	{r4, r7, pc}

08017524 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017524:	b580      	push	{r7, lr}
 8017526:	b084      	sub	sp, #16
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	f107 030c 	add.w	r3, r7, #12
 8017532:	4611      	mov	r1, r2
 8017534:	4618      	mov	r0, r3
 8017536:	f7ff ff9e 	bl	8017476 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	4618      	mov	r0, r3
 801753e:	3710      	adds	r7, #16
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017544:	b590      	push	{r4, r7, lr}
 8017546:	b083      	sub	sp, #12
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f000 f835 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017554:	4603      	mov	r3, r0
 8017556:	681c      	ldr	r4, [r3, #0]
 8017558:	6838      	ldr	r0, [r7, #0]
 801755a:	f000 f830 	bl	80175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801755e:	4603      	mov	r3, r0
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	1ae3      	subs	r3, r4, r3
 8017564:	109b      	asrs	r3, r3, #2
 8017566:	4618      	mov	r0, r3
 8017568:	370c      	adds	r7, #12
 801756a:	46bd      	mov	sp, r7
 801756c:	bd90      	pop	{r4, r7, pc}

0801756e <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801756e:	b580      	push	{r7, lr}
 8017570:	b082      	sub	sp, #8
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d006      	beq.n	801758c <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	6839      	ldr	r1, [r7, #0]
 8017582:	4618      	mov	r0, r3
 8017584:	f000 f995 	bl	80178b2 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 8017588:	4603      	mov	r3, r0
 801758a:	e000      	b.n	801758e <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 801758c:	2300      	movs	r3, #0
      }
 801758e:	4618      	mov	r0, r3
 8017590:	3708      	adds	r7, #8
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}

08017596 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8017596:	b590      	push	{r4, r7, lr}
 8017598:	b089      	sub	sp, #36	; 0x24
 801759a:	af02      	add	r7, sp, #8
 801759c:	60f8      	str	r0, [r7, #12]
 801759e:	60b9      	str	r1, [r7, #8]
 80175a0:	607a      	str	r2, [r7, #4]
 80175a2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80175a4:	f88d 4000 	strb.w	r4, [sp]
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	68b9      	ldr	r1, [r7, #8]
 80175ae:	68f8      	ldr	r0, [r7, #12]
 80175b0:	f000 f98e 	bl	80178d0 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80175b4:	4603      	mov	r3, r0
      }
 80175b6:	4618      	mov	r0, r3
 80175b8:	371c      	adds	r7, #28
 80175ba:	46bd      	mov	sp, r7
 80175bc:	bd90      	pop	{r4, r7, pc}

080175be <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80175be:	b480      	push	{r7}
 80175c0:	b083      	sub	sp, #12
 80175c2:	af00      	add	r7, sp, #0
 80175c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	4618      	mov	r0, r3
 80175ca:	370c      	adds	r7, #12
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	4618      	mov	r0, r3
 80175e0:	370c      	adds	r7, #12
 80175e2:	46bd      	mov	sp, r7
 80175e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e8:	4770      	bx	lr

080175ea <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80175ea:	b590      	push	{r4, r7, lr}
 80175ec:	b085      	sub	sp, #20
 80175ee:	af00      	add	r7, sp, #0
 80175f0:	60f8      	str	r0, [r7, #12]
 80175f2:	60b9      	str	r1, [r7, #8]
 80175f4:	607a      	str	r2, [r7, #4]
 80175f6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f000 f97b 	bl	80178f4 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 80175fe:	4604      	mov	r4, r0
 8017600:	68b8      	ldr	r0, [r7, #8]
 8017602:	f000 f977 	bl	80178f4 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017606:	4601      	mov	r1, r0
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	4620      	mov	r0, r4
 801760e:	f000 f980 	bl	8017912 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8017612:	4603      	mov	r3, r0
    }
 8017614:	4618      	mov	r0, r3
 8017616:	3714      	adds	r7, #20
 8017618:	46bd      	mov	sp, r7
 801761a:	bd90      	pop	{r4, r7, pc}

0801761c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8017628:	68b9      	ldr	r1, [r7, #8]
 801762a:	68f8      	ldr	r0, [r7, #12]
 801762c:	f000 f982 	bl	8017934 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 8017630:	bf00      	nop
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017638:	b480      	push	{r7}
 801763a:	b083      	sub	sp, #12
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	4618      	mov	r0, r3
 8017644:	370c      	adds	r7, #12
 8017646:	46bd      	mov	sp, r7
 8017648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764c:	4770      	bx	lr

0801764e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801764e:	b580      	push	{r7, lr}
 8017650:	b084      	sub	sp, #16
 8017652:	af00      	add	r7, sp, #0
 8017654:	60f8      	str	r0, [r7, #12]
 8017656:	60b9      	str	r1, [r7, #8]
 8017658:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	68b9      	ldr	r1, [r7, #8]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f000 f975 	bl	801794e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8017664:	bf00      	nop
 8017666:	3710      	adds	r7, #16
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801766c:	b480      	push	{r7}
 801766e:	b083      	sub	sp, #12
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	4618      	mov	r0, r3
 8017678:	370c      	adds	r7, #12
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr

08017682 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8017682:	b590      	push	{r4, r7, lr}
 8017684:	b085      	sub	sp, #20
 8017686:	af00      	add	r7, sp, #0
 8017688:	60f8      	str	r0, [r7, #12]
 801768a:	60b9      	str	r1, [r7, #8]
 801768c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	f7ff ffec 	bl	801766c <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017694:	4604      	mov	r4, r0
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	4619      	mov	r1, r3
 801769a:	2008      	movs	r0, #8
 801769c:	f7e9 fe0f 	bl	80012be <_ZnwjPv>
 80176a0:	4603      	mov	r3, r0
 80176a2:	4622      	mov	r2, r4
 80176a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80176ac:	bf00      	nop
 80176ae:	3714      	adds	r7, #20
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd90      	pop	{r4, r7, pc}

080176b4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	601a      	str	r2, [r3, #0]
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	4618      	mov	r0, r3
 80176ca:	370c      	adds	r7, #12
 80176cc:	46bd      	mov	sp, r7
 80176ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d2:	4770      	bx	lr

080176d4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80176d4:	b590      	push	{r4, r7, lr}
 80176d6:	b087      	sub	sp, #28
 80176d8:	af00      	add	r7, sp, #0
 80176da:	60f8      	str	r0, [r7, #12]
 80176dc:	60b9      	str	r1, [r7, #8]
 80176de:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f000 f941 	bl	8017968 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80176e6:	4604      	mov	r4, r0
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f7ff fb82 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80176ee:	4603      	mov	r3, r0
 80176f0:	1ae2      	subs	r2, r4, r3
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	bf34      	ite	cc
 80176f8:	2301      	movcc	r3, #1
 80176fa:	2300      	movcs	r3, #0
 80176fc:	b2db      	uxtb	r3, r3
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d002      	beq.n	8017708 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f000 fd2e 	bl	8018164 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8017708:	68f8      	ldr	r0, [r7, #12]
 801770a:	f7ff fb72 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801770e:	4604      	mov	r4, r0
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	f7ff fb6e 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017716:	4603      	mov	r3, r0
 8017718:	613b      	str	r3, [r7, #16]
 801771a:	f107 0208 	add.w	r2, r7, #8
 801771e:	f107 0310 	add.w	r3, r7, #16
 8017722:	4611      	mov	r1, r2
 8017724:	4618      	mov	r0, r3
 8017726:	f7ee fa6f 	bl	8005c08 <_ZSt3maxIjERKT_S2_S2_>
 801772a:	4603      	mov	r3, r0
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	4423      	add	r3, r4
 8017730:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017732:	68f8      	ldr	r0, [r7, #12]
 8017734:	f7ff fb5d 	bl	8016df2 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017738:	4602      	mov	r2, r0
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	4293      	cmp	r3, r2
 801773e:	d306      	bcc.n	801774e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f000 f911 	bl	8017968 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017746:	4602      	mov	r2, r0
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	4293      	cmp	r3, r2
 801774c:	d904      	bls.n	8017758 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 801774e:	68f8      	ldr	r0, [r7, #12]
 8017750:	f000 f90a 	bl	8017968 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017754:	4603      	mov	r3, r0
 8017756:	e000      	b.n	801775a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 8017758:	697b      	ldr	r3, [r7, #20]
      }
 801775a:	4618      	mov	r0, r3
 801775c:	371c      	adds	r7, #28
 801775e:	46bd      	mov	sp, r7
 8017760:	bd90      	pop	{r4, r7, pc}

08017762 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017762:	b580      	push	{r7, lr}
 8017764:	b084      	sub	sp, #16
 8017766:	af00      	add	r7, sp, #0
 8017768:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801776a:	687a      	ldr	r2, [r7, #4]
 801776c:	f107 030c 	add.w	r3, r7, #12
 8017770:	4611      	mov	r1, r2
 8017772:	4618      	mov	r0, r3
 8017774:	f7ff ff9e 	bl	80176b4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	4618      	mov	r0, r3
 801777c:	3710      	adds	r7, #16
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}

08017782 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017782:	b590      	push	{r4, r7, lr}
 8017784:	b083      	sub	sp, #12
 8017786:	af00      	add	r7, sp, #0
 8017788:	6078      	str	r0, [r7, #4]
 801778a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	f000 f835 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8017792:	4603      	mov	r3, r0
 8017794:	681c      	ldr	r4, [r3, #0]
 8017796:	6838      	ldr	r0, [r7, #0]
 8017798:	f000 f830 	bl	80177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 801779c:	4603      	mov	r3, r0
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	1ae3      	subs	r3, r4, r3
 80177a2:	10db      	asrs	r3, r3, #3
 80177a4:	4618      	mov	r0, r3
 80177a6:	370c      	adds	r7, #12
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd90      	pop	{r4, r7, pc}

080177ac <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
 80177b4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d006      	beq.n	80177ca <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6839      	ldr	r1, [r7, #0]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f000 f8e2 	bl	801798a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80177c6:	4603      	mov	r3, r0
 80177c8:	e000      	b.n	80177cc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80177ca:	2300      	movs	r3, #0
      }
 80177cc:	4618      	mov	r0, r3
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80177d4:	b590      	push	{r4, r7, lr}
 80177d6:	b089      	sub	sp, #36	; 0x24
 80177d8:	af02      	add	r7, sp, #8
 80177da:	60f8      	str	r0, [r7, #12]
 80177dc:	60b9      	str	r1, [r7, #8]
 80177de:	607a      	str	r2, [r7, #4]
 80177e0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80177e2:	f88d 4000 	strb.w	r4, [sp]
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	687a      	ldr	r2, [r7, #4]
 80177ea:	68b9      	ldr	r1, [r7, #8]
 80177ec:	68f8      	ldr	r0, [r7, #12]
 80177ee:	f000 f8db 	bl	80179a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80177f2:	4603      	mov	r3, r0
      }
 80177f4:	4618      	mov	r0, r3
 80177f6:	371c      	adds	r7, #28
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd90      	pop	{r4, r7, pc}

080177fc <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80177fc:	b480      	push	{r7}
 80177fe:	b083      	sub	sp, #12
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	4618      	mov	r0, r3
 8017808:	370c      	adds	r7, #12
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr

08017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8017812:	b480      	push	{r7}
 8017814:	b083      	sub	sp, #12
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	4618      	mov	r0, r3
 801781e:	370c      	adds	r7, #12
 8017820:	46bd      	mov	sp, r7
 8017822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017826:	4770      	bx	lr

08017828 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8017828:	b590      	push	{r4, r7, lr}
 801782a:	b085      	sub	sp, #20
 801782c:	af00      	add	r7, sp, #0
 801782e:	60f8      	str	r0, [r7, #12]
 8017830:	60b9      	str	r1, [r7, #8]
 8017832:	607a      	str	r2, [r7, #4]
 8017834:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8017836:	68f8      	ldr	r0, [r7, #12]
 8017838:	f000 f8c8 	bl	80179cc <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 801783c:	4604      	mov	r4, r0
 801783e:	68b8      	ldr	r0, [r7, #8]
 8017840:	f000 f8c4 	bl	80179cc <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8017844:	4601      	mov	r1, r0
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	687a      	ldr	r2, [r7, #4]
 801784a:	4620      	mov	r0, r4
 801784c:	f000 f8cd 	bl	80179ea <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8017850:	4603      	mov	r3, r0
    }
 8017852:	4618      	mov	r0, r3
 8017854:	3714      	adds	r7, #20
 8017856:	46bd      	mov	sp, r7
 8017858:	bd90      	pop	{r4, r7, pc}

0801785a <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801785a:	b580      	push	{r7, lr}
 801785c:	b084      	sub	sp, #16
 801785e:	af00      	add	r7, sp, #0
 8017860:	60f8      	str	r0, [r7, #12]
 8017862:	60b9      	str	r1, [r7, #8]
 8017864:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8017866:	68b9      	ldr	r1, [r7, #8]
 8017868:	68f8      	ldr	r0, [r7, #12]
 801786a:	f000 f8cf 	bl	8017a0c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801786e:	bf00      	nop
 8017870:	3710      	adds	r7, #16
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}

08017876 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8017876:	b580      	push	{r7, lr}
 8017878:	b084      	sub	sp, #16
 801787a:	af00      	add	r7, sp, #0
 801787c:	60f8      	str	r0, [r7, #12]
 801787e:	60b9      	str	r1, [r7, #8]
 8017880:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8017882:	68b8      	ldr	r0, [r7, #8]
 8017884:	f000 fc54 	bl	8018130 <_ZdlPv>
      }
 8017888:	bf00      	nop
 801788a:	3710      	adds	r7, #16
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}

08017890 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8017890:	b580      	push	{r7, lr}
 8017892:	b082      	sub	sp, #8
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	4618      	mov	r0, r3
 801789c:	f000 f8dd 	bl	8017a5a <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80178a0:	4603      	mov	r3, r0
 80178a2:	4618      	mov	r0, r3
 80178a4:	f000 f8bf 	bl	8017a26 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80178a8:	4603      	mov	r3, r0
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
 80178ba:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80178bc:	2200      	movs	r2, #0
 80178be:	6839      	ldr	r1, [r7, #0]
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 f8d5 	bl	8017a70 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80178c6:	4603      	mov	r3, r0
 80178c8:	4618      	mov	r0, r3
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b084      	sub	sp, #16
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	60f8      	str	r0, [r7, #12]
 80178d8:	60b9      	str	r1, [r7, #8]
 80178da:	607a      	str	r2, [r7, #4]
 80178dc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	68b9      	ldr	r1, [r7, #8]
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f000 f8e1 	bl	8017aac <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80178ea:	4603      	mov	r3, r0
      }
 80178ec:	4618      	mov	r0, r3
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80178fc:	f107 030c 	add.w	r3, r7, #12
 8017900:	6879      	ldr	r1, [r7, #4]
 8017902:	4618      	mov	r0, r3
 8017904:	f000 f8ef 	bl	8017ae6 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	4618      	mov	r0, r3
 801790c:	3710      	adds	r7, #16
 801790e:	46bd      	mov	sp, r7
 8017910:	bd80      	pop	{r7, pc}

08017912 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8017912:	b580      	push	{r7, lr}
 8017914:	b084      	sub	sp, #16
 8017916:	af00      	add	r7, sp, #0
 8017918:	60f8      	str	r0, [r7, #12]
 801791a:	60b9      	str	r1, [r7, #8]
 801791c:	607a      	str	r2, [r7, #4]
 801791e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	68b9      	ldr	r1, [r7, #8]
 8017924:	68f8      	ldr	r0, [r7, #12]
 8017926:	f000 f8ed 	bl	8017b04 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801792a:	4603      	mov	r3, r0
 801792c:	4618      	mov	r0, r3
 801792e:	3710      	adds	r7, #16
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f000 f8f1 	bl	8017b28 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8017946:	bf00      	nop
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 801794e:	b580      	push	{r7, lr}
 8017950:	b084      	sub	sp, #16
 8017952:	af00      	add	r7, sp, #0
 8017954:	60f8      	str	r0, [r7, #12]
 8017956:	60b9      	str	r1, [r7, #8]
 8017958:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 801795a:	68b8      	ldr	r0, [r7, #8]
 801795c:	f000 fbe8 	bl	8018130 <_ZdlPv>
      }
 8017960:	bf00      	nop
 8017962:	3710      	adds	r7, #16
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}

08017968 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	4618      	mov	r0, r3
 8017974:	f000 f8fd 	bl	8017b72 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017978:	4603      	mov	r3, r0
 801797a:	4618      	mov	r0, r3
 801797c:	f000 f8df 	bl	8017b3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 8017980:	4603      	mov	r3, r0
 8017982:	4618      	mov	r0, r3
 8017984:	3708      	adds	r7, #8
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}

0801798a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801798a:	b580      	push	{r7, lr}
 801798c:	b082      	sub	sp, #8
 801798e:	af00      	add	r7, sp, #0
 8017990:	6078      	str	r0, [r7, #4]
 8017992:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8017994:	2200      	movs	r2, #0
 8017996:	6839      	ldr	r1, [r7, #0]
 8017998:	6878      	ldr	r0, [r7, #4]
 801799a:	f000 f8f5 	bl	8017b88 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 801799e:	4603      	mov	r3, r0
 80179a0:	4618      	mov	r0, r3
 80179a2:	3708      	adds	r7, #8
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
 80179b4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	68b9      	ldr	r1, [r7, #8]
 80179bc:	68f8      	ldr	r0, [r7, #12]
 80179be:	f000 f901 	bl	8017bc4 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80179c2:	4603      	mov	r3, r0
      }
 80179c4:	4618      	mov	r0, r3
 80179c6:	3710      	adds	r7, #16
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd80      	pop	{r7, pc}

080179cc <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b084      	sub	sp, #16
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80179d4:	f107 030c 	add.w	r3, r7, #12
 80179d8:	6879      	ldr	r1, [r7, #4]
 80179da:	4618      	mov	r0, r3
 80179dc:	f000 f90f 	bl	8017bfe <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	4618      	mov	r0, r3
 80179e4:	3710      	adds	r7, #16
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}

080179ea <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b084      	sub	sp, #16
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	60f8      	str	r0, [r7, #12]
 80179f2:	60b9      	str	r1, [r7, #8]
 80179f4:	607a      	str	r2, [r7, #4]
 80179f6:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	68b9      	ldr	r1, [r7, #8]
 80179fc:	68f8      	ldr	r0, [r7, #12]
 80179fe:	f000 f90d 	bl	8017c1c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8017a02:	4603      	mov	r3, r0
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8017a16:	6839      	ldr	r1, [r7, #0]
 8017a18:	6878      	ldr	r0, [r7, #4]
 8017a1a:	f000 f911 	bl	8017c40 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 8017a1e:	bf00      	nop
 8017a20:	3708      	adds	r7, #8
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}

08017a26 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b084      	sub	sp, #16
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8017a2e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8017a32:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f000 f90e 	bl	8017c56 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8017a3e:	f107 0208 	add.w	r2, r7, #8
 8017a42:	f107 030c 	add.w	r3, r7, #12
 8017a46:	4611      	mov	r1, r2
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7ee fb37 	bl	80060bc <_ZSt3minIjERKT_S2_S2_>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	681b      	ldr	r3, [r3, #0]
      }
 8017a52:	4618      	mov	r0, r3
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017a5a:	b480      	push	{r7}
 8017a5c:	b083      	sub	sp, #12
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	4618      	mov	r0, r3
 8017a66:	370c      	adds	r7, #12
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6e:	4770      	bx	lr

08017a70 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b084      	sub	sp, #16
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	60f8      	str	r0, [r7, #12]
 8017a78:	60b9      	str	r1, [r7, #8]
 8017a7a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8017a7c:	68f8      	ldr	r0, [r7, #12]
 8017a7e:	f000 f8f6 	bl	8017c6e <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017a82:	4602      	mov	r2, r0
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	4293      	cmp	r3, r2
 8017a88:	bf8c      	ite	hi
 8017a8a:	2301      	movhi	r3, #1
 8017a8c:	2300      	movls	r3, #0
 8017a8e:	b2db      	uxtb	r3, r3
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d001      	beq.n	8017a98 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017a94:	f000 fb63 	bl	801815e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	009b      	lsls	r3, r3, #2
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f000 fb4b 	bl	8018138 <_Znwj>
 8017aa2:	4603      	mov	r3, r0
      }
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3710      	adds	r7, #16
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8017aac:	b5b0      	push	{r4, r5, r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
 8017ab8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8017aba:	68f8      	ldr	r0, [r7, #12]
 8017abc:	f000 f8e3 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	68b8      	ldr	r0, [r7, #8]
 8017ac4:	f000 f8df 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017ac8:	4605      	mov	r5, r0
 8017aca:	6878      	ldr	r0, [r7, #4]
 8017acc:	f000 f8db 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017ad0:	4602      	mov	r2, r0
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	4629      	mov	r1, r5
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	f000 f8e0 	bl	8017c9c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8017adc:	4603      	mov	r3, r0
    }
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3710      	adds	r7, #16
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bdb0      	pop	{r4, r5, r7, pc}

08017ae6 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8017ae6:	b480      	push	{r7}
 8017ae8:	b083      	sub	sp, #12
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
 8017aee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	683a      	ldr	r2, [r7, #0]
 8017af4:	601a      	str	r2, [r3, #0]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	4618      	mov	r0, r3
 8017afa:	370c      	adds	r7, #12
 8017afc:	46bd      	mov	sp, r7
 8017afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b02:	4770      	bx	lr

08017b04 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b086      	sub	sp, #24
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017b10:	2301      	movs	r3, #1
 8017b12:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	68b9      	ldr	r1, [r7, #8]
 8017b18:	68f8      	ldr	r0, [r7, #12]
 8017b1a:	f000 f8dd 	bl	8017cd8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8017b1e:	4603      	mov	r3, r0
    }
 8017b20:	4618      	mov	r0, r3
 8017b22:	3718      	adds	r7, #24
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8017b28:	b480      	push	{r7}
 8017b2a:	b083      	sub	sp, #12
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	6039      	str	r1, [r7, #0]
 8017b32:	bf00      	nop
 8017b34:	370c      	adds	r7, #12
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr

08017b3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b084      	sub	sp, #16
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8017b46:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8017b4a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017b4c:	6878      	ldr	r0, [r7, #4]
 8017b4e:	f000 f8d3 	bl	8017cf8 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 8017b52:	4603      	mov	r3, r0
 8017b54:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8017b56:	f107 0208 	add.w	r2, r7, #8
 8017b5a:	f107 030c 	add.w	r3, r7, #12
 8017b5e:	4611      	mov	r1, r2
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7ee faab 	bl	80060bc <_ZSt3minIjERKT_S2_S2_>
 8017b66:	4603      	mov	r3, r0
 8017b68:	681b      	ldr	r3, [r3, #0]
      }
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3710      	adds	r7, #16
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}

08017b72 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017b72:	b480      	push	{r7}
 8017b74:	b083      	sub	sp, #12
 8017b76:	af00      	add	r7, sp, #0
 8017b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	370c      	adds	r7, #12
 8017b80:	46bd      	mov	sp, r7
 8017b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b86:	4770      	bx	lr

08017b88 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	60f8      	str	r0, [r7, #12]
 8017b90:	60b9      	str	r1, [r7, #8]
 8017b92:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8017b94:	68f8      	ldr	r0, [r7, #12]
 8017b96:	f000 f8bb 	bl	8017d10 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8017b9a:	4602      	mov	r2, r0
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	4293      	cmp	r3, r2
 8017ba0:	bf8c      	ite	hi
 8017ba2:	2301      	movhi	r3, #1
 8017ba4:	2300      	movls	r3, #0
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d001      	beq.n	8017bb0 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017bac:	f000 fad7 	bl	801815e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f000 fabf 	bl	8018138 <_Znwj>
 8017bba:	4603      	mov	r3, r0
      }
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3710      	adds	r7, #16
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8017bc4:	b5b0      	push	{r4, r5, r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
 8017bd0:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8017bd2:	68f8      	ldr	r0, [r7, #12]
 8017bd4:	f000 f8a8 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017bd8:	4604      	mov	r4, r0
 8017bda:	68b8      	ldr	r0, [r7, #8]
 8017bdc:	f000 f8a4 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017be0:	4605      	mov	r5, r0
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f000 f8a0 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017be8:	4602      	mov	r2, r0
 8017bea:	683b      	ldr	r3, [r7, #0]
 8017bec:	4629      	mov	r1, r5
 8017bee:	4620      	mov	r0, r4
 8017bf0:	f000 f8a5 	bl	8017d3e <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8017bf4:	4603      	mov	r3, r0
    }
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3710      	adds	r7, #16
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bdb0      	pop	{r4, r5, r7, pc}

08017bfe <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8017bfe:	b480      	push	{r7}
 8017c00:	b083      	sub	sp, #12
 8017c02:	af00      	add	r7, sp, #0
 8017c04:	6078      	str	r0, [r7, #4]
 8017c06:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	683a      	ldr	r2, [r7, #0]
 8017c0c:	601a      	str	r2, [r3, #0]
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	4618      	mov	r0, r3
 8017c12:	370c      	adds	r7, #12
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b086      	sub	sp, #24
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	60f8      	str	r0, [r7, #12]
 8017c24:	60b9      	str	r1, [r7, #8]
 8017c26:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017c28:	2301      	movs	r3, #1
 8017c2a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017c2c:	687a      	ldr	r2, [r7, #4]
 8017c2e:	68b9      	ldr	r1, [r7, #8]
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f000 f8a2 	bl	8017d7a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8017c36:	4603      	mov	r3, r0
    }
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3718      	adds	r7, #24
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 8017c40:	b480      	push	{r7}
 8017c42:	b083      	sub	sp, #12
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
 8017c4a:	bf00      	nop
 8017c4c:	370c      	adds	r7, #12
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr

08017c56 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8017c56:	b580      	push	{r7, lr}
 8017c58:	b082      	sub	sp, #8
 8017c5a:	af00      	add	r7, sp, #0
 8017c5c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f000 f805 	bl	8017c6e <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017c64:	4603      	mov	r3, r0
 8017c66:	4618      	mov	r0, r3
 8017c68:	3708      	adds	r7, #8
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017c6e:	b480      	push	{r7}
 8017c70:	b083      	sub	sp, #12
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017c76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	370c      	adds	r7, #12
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c84:	4770      	bx	lr

08017c86 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 8017c86:	b480      	push	{r7}
 8017c88:	b083      	sub	sp, #12
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	4618      	mov	r0, r3
 8017c92:	370c      	adds	r7, #12
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr

08017c9c <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b086      	sub	sp, #24
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
 8017ca8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017caa:	68ba      	ldr	r2, [r7, #8]
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	1ad3      	subs	r3, r2, r3
 8017cb0:	109b      	asrs	r3, r3, #2
 8017cb2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	dd06      	ble.n	8017cc8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017cba:	697b      	ldr	r3, [r7, #20]
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	68f9      	ldr	r1, [r7, #12]
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f003 f846 	bl	801ad54 <memmove>
      return __result + __count;
 8017cc8:	697b      	ldr	r3, [r7, #20]
 8017cca:	009b      	lsls	r3, r3, #2
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	4413      	add	r3, r2
    }
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3718      	adds	r7, #24
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}

08017cd8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	60f8      	str	r0, [r7, #12]
 8017ce0:	60b9      	str	r1, [r7, #8]
 8017ce2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017ce4:	687a      	ldr	r2, [r7, #4]
 8017ce6:	68b9      	ldr	r1, [r7, #8]
 8017ce8:	68f8      	ldr	r0, [r7, #12]
 8017cea:	f000 f856 	bl	8017d9a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3710      	adds	r7, #16
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f000 f805 	bl	8017d10 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8017d06:	4603      	mov	r3, r0
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3708      	adds	r7, #8
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017d10:	b480      	push	{r7}
 8017d12:	b083      	sub	sp, #12
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017d18:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	370c      	adds	r7, #12
 8017d20:	46bd      	mov	sp, r7
 8017d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d26:	4770      	bx	lr

08017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8017d28:	b480      	push	{r7}
 8017d2a:	b083      	sub	sp, #12
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	4618      	mov	r0, r3
 8017d34:	370c      	adds	r7, #12
 8017d36:	46bd      	mov	sp, r7
 8017d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3c:	4770      	bx	lr

08017d3e <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8017d3e:	b580      	push	{r7, lr}
 8017d40:	b086      	sub	sp, #24
 8017d42:	af00      	add	r7, sp, #0
 8017d44:	60f8      	str	r0, [r7, #12]
 8017d46:	60b9      	str	r1, [r7, #8]
 8017d48:	607a      	str	r2, [r7, #4]
 8017d4a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017d4c:	68ba      	ldr	r2, [r7, #8]
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	1ad3      	subs	r3, r2, r3
 8017d52:	10db      	asrs	r3, r3, #3
 8017d54:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	dd06      	ble.n	8017d6a <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	00db      	lsls	r3, r3, #3
 8017d60:	461a      	mov	r2, r3
 8017d62:	68f9      	ldr	r1, [r7, #12]
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f002 fff5 	bl	801ad54 <memmove>
      return __result + __count;
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	00db      	lsls	r3, r3, #3
 8017d6e:	687a      	ldr	r2, [r7, #4]
 8017d70:	4413      	add	r3, r2
    }
 8017d72:	4618      	mov	r0, r3
 8017d74:	3718      	adds	r7, #24
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b084      	sub	sp, #16
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	60f8      	str	r0, [r7, #12]
 8017d82:	60b9      	str	r1, [r7, #8]
 8017d84:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017d86:	687a      	ldr	r2, [r7, #4]
 8017d88:	68b9      	ldr	r1, [r7, #8]
 8017d8a:	68f8      	ldr	r0, [r7, #12]
 8017d8c:	f000 f81d 	bl	8017dca <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8017d90:	4603      	mov	r3, r0
 8017d92:	4618      	mov	r0, r3
 8017d94:	3710      	adds	r7, #16
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}

08017d9a <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8017d9a:	b590      	push	{r4, r7, lr}
 8017d9c:	b085      	sub	sp, #20
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	60f8      	str	r0, [r7, #12]
 8017da2:	60b9      	str	r1, [r7, #8]
 8017da4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017da6:	68f8      	ldr	r0, [r7, #12]
 8017da8:	f000 f827 	bl	8017dfa <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017dac:	4604      	mov	r4, r0
 8017dae:	68b8      	ldr	r0, [r7, #8]
 8017db0:	f000 f823 	bl	8017dfa <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017db4:	4603      	mov	r3, r0
 8017db6:	687a      	ldr	r2, [r7, #4]
 8017db8:	4619      	mov	r1, r3
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f000 f82e 	bl	8017e1c <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 8017dc0:	4603      	mov	r3, r0
    }
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3714      	adds	r7, #20
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd90      	pop	{r4, r7, pc}

08017dca <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8017dca:	b590      	push	{r4, r7, lr}
 8017dcc:	b085      	sub	sp, #20
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	60f8      	str	r0, [r7, #12]
 8017dd2:	60b9      	str	r1, [r7, #8]
 8017dd4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017dd6:	68f8      	ldr	r0, [r7, #12]
 8017dd8:	f000 f843 	bl	8017e62 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017ddc:	4604      	mov	r4, r0
 8017dde:	68b8      	ldr	r0, [r7, #8]
 8017de0:	f000 f83f 	bl	8017e62 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017de4:	4603      	mov	r3, r0
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	4619      	mov	r1, r3
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 f84a 	bl	8017e84 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017df0:	4603      	mov	r3, r0
    }
 8017df2:	4618      	mov	r0, r3
 8017df4:	3714      	adds	r7, #20
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd90      	pop	{r4, r7, pc}

08017dfa <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b082      	sub	sp, #8
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017e02:	1d3b      	adds	r3, r7, #4
 8017e04:	4618      	mov	r0, r3
 8017e06:	f000 f860 	bl	8017eca <_ZNKSt13move_iteratorIPPvE4baseEv>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f000 f868 	bl	8017ee2 <_ZSt12__miter_baseIPPvET_S2_>
 8017e12:	4603      	mov	r3, r0
 8017e14:	4618      	mov	r0, r3
 8017e16:	3708      	adds	r7, #8
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}

08017e1c <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017e1c:	b5b0      	push	{r4, r5, r7, lr}
 8017e1e:	b084      	sub	sp, #16
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	60f8      	str	r0, [r7, #12]
 8017e24:	60b9      	str	r1, [r7, #8]
 8017e26:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017e28:	68f8      	ldr	r0, [r7, #12]
 8017e2a:	f7ff ff2c 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017e2e:	4604      	mov	r4, r0
 8017e30:	68b8      	ldr	r0, [r7, #8]
 8017e32:	f7ff ff28 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017e36:	4605      	mov	r5, r0
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7ff ff23 	bl	8017c86 <_ZSt12__niter_baseIPPvET_S2_>
 8017e40:	4603      	mov	r3, r0
 8017e42:	461a      	mov	r2, r3
 8017e44:	4629      	mov	r1, r5
 8017e46:	4620      	mov	r0, r4
 8017e48:	f000 f856 	bl	8017ef8 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8017e4c:	4602      	mov	r2, r0
 8017e4e:	1d3b      	adds	r3, r7, #4
 8017e50:	4611      	mov	r1, r2
 8017e52:	4618      	mov	r0, r3
 8017e54:	f000 f862 	bl	8017f1c <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8017e58:	4603      	mov	r3, r0
    }
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bdb0      	pop	{r4, r5, r7, pc}

08017e62 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017e62:	b580      	push	{r7, lr}
 8017e64:	b082      	sub	sp, #8
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017e6a:	1d3b      	adds	r3, r7, #4
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f000 f861 	bl	8017f34 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8017e72:	4603      	mov	r3, r0
 8017e74:	4618      	mov	r0, r3
 8017e76:	f000 f869 	bl	8017f4c <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3708      	adds	r7, #8
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017e84:	b5b0      	push	{r4, r5, r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f7ff ff49 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e96:	4604      	mov	r4, r0
 8017e98:	68b8      	ldr	r0, [r7, #8]
 8017e9a:	f7ff ff45 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017e9e:	4605      	mov	r5, r0
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7ff ff40 	bl	8017d28 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	461a      	mov	r2, r3
 8017eac:	4629      	mov	r1, r5
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f000 f857 	bl	8017f62 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017eb4:	4602      	mov	r2, r0
 8017eb6:	1d3b      	adds	r3, r7, #4
 8017eb8:	4611      	mov	r1, r2
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f000 f863 	bl	8017f86 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8017ec0:	4603      	mov	r3, r0
    }
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3710      	adds	r7, #16
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bdb0      	pop	{r4, r5, r7, pc}

08017eca <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8017eca:	b480      	push	{r7}
 8017ecc:	b083      	sub	sp, #12
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	370c      	adds	r7, #12
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr

08017ee2 <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8017ee2:	b480      	push	{r7}
 8017ee4:	b083      	sub	sp, #12
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	4618      	mov	r0, r3
 8017eee:	370c      	adds	r7, #12
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef6:	4770      	bx	lr

08017ef8 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b086      	sub	sp, #24
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017f04:	2301      	movs	r3, #1
 8017f06:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	68b9      	ldr	r1, [r7, #8]
 8017f0c:	68f8      	ldr	r0, [r7, #12]
 8017f0e:	f000 f846 	bl	8017f9e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8017f12:	4603      	mov	r3, r0
    }
 8017f14:	4618      	mov	r0, r3
 8017f16:	3718      	adds	r7, #24
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017f1c:	b480      	push	{r7}
 8017f1e:	b083      	sub	sp, #12
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	4618      	mov	r0, r3
 8017f2a:	370c      	adds	r7, #12
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr

08017f34 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	4618      	mov	r0, r3
 8017f42:	370c      	adds	r7, #12
 8017f44:	46bd      	mov	sp, r7
 8017f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4a:	4770      	bx	lr

08017f4c <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8017f4c:	b480      	push	{r7}
 8017f4e:	b083      	sub	sp, #12
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	4618      	mov	r0, r3
 8017f58:	370c      	adds	r7, #12
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f60:	4770      	bx	lr

08017f62 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017f62:	b580      	push	{r7, lr}
 8017f64:	b086      	sub	sp, #24
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	60f8      	str	r0, [r7, #12]
 8017f6a:	60b9      	str	r1, [r7, #8]
 8017f6c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017f6e:	2301      	movs	r3, #1
 8017f70:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	68b9      	ldr	r1, [r7, #8]
 8017f76:	68f8      	ldr	r0, [r7, #12]
 8017f78:	f000 f82e 	bl	8017fd8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8017f7c:	4603      	mov	r3, r0
    }
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3718      	adds	r7, #24
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}

08017f86 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017f86:	b480      	push	{r7}
 8017f88:	b083      	sub	sp, #12
 8017f8a:	af00      	add	r7, sp, #0
 8017f8c:	6078      	str	r0, [r7, #4]
 8017f8e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017f90:	683b      	ldr	r3, [r7, #0]
 8017f92:	4618      	mov	r0, r3
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr

08017f9e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017f9e:	b580      	push	{r7, lr}
 8017fa0:	b086      	sub	sp, #24
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	60f8      	str	r0, [r7, #12]
 8017fa6:	60b9      	str	r1, [r7, #8]
 8017fa8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017faa:	68ba      	ldr	r2, [r7, #8]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	1ad3      	subs	r3, r2, r3
 8017fb0:	109b      	asrs	r3, r3, #2
 8017fb2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d006      	beq.n	8017fc8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017fba:	697b      	ldr	r3, [r7, #20]
 8017fbc:	009b      	lsls	r3, r3, #2
 8017fbe:	461a      	mov	r2, r3
 8017fc0:	68f9      	ldr	r1, [r7, #12]
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f002 fec6 	bl	801ad54 <memmove>
	  return __result + _Num;
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	009b      	lsls	r3, r3, #2
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	4413      	add	r3, r2
	}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3718      	adds	r7, #24
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b086      	sub	sp, #24
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017fe4:	68ba      	ldr	r2, [r7, #8]
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	1ad3      	subs	r3, r2, r3
 8017fea:	10db      	asrs	r3, r3, #3
 8017fec:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d006      	beq.n	8018002 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	00db      	lsls	r3, r3, #3
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	68f9      	ldr	r1, [r7, #12]
 8017ffc:	6878      	ldr	r0, [r7, #4]
 8017ffe:	f002 fea9 	bl	801ad54 <memmove>
	  return __result + _Num;
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	00db      	lsls	r3, r3, #3
 8018006:	687a      	ldr	r2, [r7, #4]
 8018008:	4413      	add	r3, r2
	}
 801800a:	4618      	mov	r0, r3
 801800c:	3718      	adds	r7, #24
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
	...

08018014 <_Z41__static_initialization_and_destruction_0ii>:
 8018014:	b580      	push	{r7, lr}
 8018016:	b082      	sub	sp, #8
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
 801801c:	6039      	str	r1, [r7, #0]
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2b01      	cmp	r3, #1
 8018022:	d124      	bne.n	801806e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801802a:	4293      	cmp	r3, r2
 801802c:	d11f      	bne.n	801806e <_Z41__static_initialization_and_destruction_0ii+0x5a>
};const NodeInfo_t nodeData[] = {
 801802e:	4b19      	ldr	r3, [pc, #100]	; (8018094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a19      	ldr	r2, [pc, #100]	; (8018098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018034:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 8018036:	4b17      	ldr	r3, [pc, #92]	; (8018094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 801803c:	4a16      	ldr	r2, [pc, #88]	; (8018098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801803e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8018042:	4b14      	ldr	r3, [pc, #80]	; (8018094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a14      	ldr	r2, [pc, #80]	; (8018098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018048:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 801804c:	4b11      	ldr	r3, [pc, #68]	; (8018094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8018052:	4a11      	ldr	r2, [pc, #68]	; (8018098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018054:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8018058:	4b0e      	ldr	r3, [pc, #56]	; (8018094 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	4a0e      	ldr	r2, [pc, #56]	; (8018098 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801805e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
 8018062:	480e      	ldr	r0, [pc, #56]	; (801809c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018064:	f7fe fa57 	bl	8016516 <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8018068:	480d      	ldr	r0, [pc, #52]	; (80180a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801806a:	f7fe fabe 	bl	80165ea <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d10a      	bne.n	801808a <_Z41__static_initialization_and_destruction_0ii+0x76>
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801807a:	4293      	cmp	r3, r2
 801807c:	d105      	bne.n	801808a <_Z41__static_initialization_and_destruction_0ii+0x76>
 801807e:	4808      	ldr	r0, [pc, #32]	; (80180a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018080:	f000 f810 	bl	80180a4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8018084:	4805      	ldr	r0, [pc, #20]	; (801809c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018086:	f000 f828 	bl	80180da <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 801808a:	bf00      	nop
 801808c:	3708      	adds	r7, #8
 801808e:	46bd      	mov	sp, r7
 8018090:	bd80      	pop	{r7, pc}
 8018092:	bf00      	nop
 8018094:	20000394 	.word	0x20000394
 8018098:	2000006c 	.word	0x2000006c
 801809c:	2000080c 	.word	0x2000080c
 80180a0:	20000818 	.word	0x20000818

080180a4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80180a4:	b5b0      	push	{r4, r5, r7, lr}
 80180a6:	b082      	sub	sp, #8
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681c      	ldr	r4, [r3, #0]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7ff fbab 	bl	8017812 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80180bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180be:	461a      	mov	r2, r3
 80180c0:	4629      	mov	r1, r5
 80180c2:	4620      	mov	r0, r4
 80180c4:	f7ff fbc9 	bl	801785a <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7fe fe52 	bl	8016d74 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	4618      	mov	r0, r3
 80180d4:	3708      	adds	r7, #8
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bdb0      	pop	{r4, r5, r7, pc}

080180da <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80180da:	b5b0      	push	{r4, r5, r7, lr}
 80180dc:	b082      	sub	sp, #8
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681c      	ldr	r4, [r3, #0]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7ff fa71 	bl	80175d4 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80180f2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80180f4:	461a      	mov	r2, r3
 80180f6:	4629      	mov	r1, r5
 80180f8:	4620      	mov	r0, r4
 80180fa:	f7ff fa8f 	bl	801761c <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	4618      	mov	r0, r3
 8018102:	f7fe fddd 	bl	8016cc0 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	4618      	mov	r0, r3
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bdb0      	pop	{r4, r5, r7, pc}

08018110 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8018110:	b580      	push	{r7, lr}
 8018112:	af00      	add	r7, sp, #0
 8018114:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018118:	2001      	movs	r0, #1
 801811a:	f7ff ff7b 	bl	8018014 <_Z41__static_initialization_and_destruction_0ii>
 801811e:	bd80      	pop	{r7, pc}

08018120 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8018120:	b580      	push	{r7, lr}
 8018122:	af00      	add	r7, sp, #0
 8018124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018128:	2000      	movs	r0, #0
 801812a:	f7ff ff73 	bl	8018014 <_Z41__static_initialization_and_destruction_0ii>
 801812e:	bd80      	pop	{r7, pc}

08018130 <_ZdlPv>:
 8018130:	f002 bdfa 	b.w	801ad28 <free>

08018134 <_ZdaPv>:
 8018134:	f7ff bffc 	b.w	8018130 <_ZdlPv>

08018138 <_Znwj>:
 8018138:	2801      	cmp	r0, #1
 801813a:	bf38      	it	cc
 801813c:	2001      	movcc	r0, #1
 801813e:	b510      	push	{r4, lr}
 8018140:	4604      	mov	r4, r0
 8018142:	4620      	mov	r0, r4
 8018144:	f002 fde8 	bl	801ad18 <malloc>
 8018148:	b930      	cbnz	r0, 8018158 <_Znwj+0x20>
 801814a:	f000 f80f 	bl	801816c <_ZSt15get_new_handlerv>
 801814e:	b908      	cbnz	r0, 8018154 <_Znwj+0x1c>
 8018150:	f002 fd70 	bl	801ac34 <abort>
 8018154:	4780      	blx	r0
 8018156:	e7f4      	b.n	8018142 <_Znwj+0xa>
 8018158:	bd10      	pop	{r4, pc}

0801815a <_Znaj>:
 801815a:	f7ff bfed 	b.w	8018138 <_Znwj>

0801815e <_ZSt17__throw_bad_allocv>:
 801815e:	b508      	push	{r3, lr}
 8018160:	f002 fd68 	bl	801ac34 <abort>

08018164 <_ZSt20__throw_length_errorPKc>:
 8018164:	b508      	push	{r3, lr}
 8018166:	f002 fd65 	bl	801ac34 <abort>
	...

0801816c <_ZSt15get_new_handlerv>:
 801816c:	4b02      	ldr	r3, [pc, #8]	; (8018178 <_ZSt15get_new_handlerv+0xc>)
 801816e:	6818      	ldr	r0, [r3, #0]
 8018170:	f3bf 8f5b 	dmb	ish
 8018174:	4770      	bx	lr
 8018176:	bf00      	nop
 8018178:	20000824 	.word	0x20000824
 801817c:	00000000 	.word	0x00000000

08018180 <cos>:
 8018180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018182:	ec53 2b10 	vmov	r2, r3, d0
 8018186:	4824      	ldr	r0, [pc, #144]	; (8018218 <cos+0x98>)
 8018188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801818c:	4281      	cmp	r1, r0
 801818e:	dc06      	bgt.n	801819e <cos+0x1e>
 8018190:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8018210 <cos+0x90>
 8018194:	f001 fd70 	bl	8019c78 <__kernel_cos>
 8018198:	ec51 0b10 	vmov	r0, r1, d0
 801819c:	e007      	b.n	80181ae <cos+0x2e>
 801819e:	481f      	ldr	r0, [pc, #124]	; (801821c <cos+0x9c>)
 80181a0:	4281      	cmp	r1, r0
 80181a2:	dd09      	ble.n	80181b8 <cos+0x38>
 80181a4:	ee10 0a10 	vmov	r0, s0
 80181a8:	4619      	mov	r1, r3
 80181aa:	f7e8 f887 	bl	80002bc <__aeabi_dsub>
 80181ae:	ec41 0b10 	vmov	d0, r0, r1
 80181b2:	b005      	add	sp, #20
 80181b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80181b8:	4668      	mov	r0, sp
 80181ba:	f001 f87d 	bl	80192b8 <__ieee754_rem_pio2>
 80181be:	f000 0003 	and.w	r0, r0, #3
 80181c2:	2801      	cmp	r0, #1
 80181c4:	d007      	beq.n	80181d6 <cos+0x56>
 80181c6:	2802      	cmp	r0, #2
 80181c8:	d012      	beq.n	80181f0 <cos+0x70>
 80181ca:	b9c0      	cbnz	r0, 80181fe <cos+0x7e>
 80181cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80181d0:	ed9d 0b00 	vldr	d0, [sp]
 80181d4:	e7de      	b.n	8018194 <cos+0x14>
 80181d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80181da:	ed9d 0b00 	vldr	d0, [sp]
 80181de:	f002 f953 	bl	801a488 <__kernel_sin>
 80181e2:	ec53 2b10 	vmov	r2, r3, d0
 80181e6:	ee10 0a10 	vmov	r0, s0
 80181ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80181ee:	e7de      	b.n	80181ae <cos+0x2e>
 80181f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80181f4:	ed9d 0b00 	vldr	d0, [sp]
 80181f8:	f001 fd3e 	bl	8019c78 <__kernel_cos>
 80181fc:	e7f1      	b.n	80181e2 <cos+0x62>
 80181fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018202:	ed9d 0b00 	vldr	d0, [sp]
 8018206:	2001      	movs	r0, #1
 8018208:	f002 f93e 	bl	801a488 <__kernel_sin>
 801820c:	e7c4      	b.n	8018198 <cos+0x18>
 801820e:	bf00      	nop
	...
 8018218:	3fe921fb 	.word	0x3fe921fb
 801821c:	7fefffff 	.word	0x7fefffff

08018220 <floor>:
 8018220:	ec51 0b10 	vmov	r0, r1, d0
 8018224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018228:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801822c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018230:	2e13      	cmp	r6, #19
 8018232:	ee10 5a10 	vmov	r5, s0
 8018236:	ee10 8a10 	vmov	r8, s0
 801823a:	460c      	mov	r4, r1
 801823c:	dc32      	bgt.n	80182a4 <floor+0x84>
 801823e:	2e00      	cmp	r6, #0
 8018240:	da14      	bge.n	801826c <floor+0x4c>
 8018242:	a333      	add	r3, pc, #204	; (adr r3, 8018310 <floor+0xf0>)
 8018244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018248:	f7e8 f83a 	bl	80002c0 <__adddf3>
 801824c:	2200      	movs	r2, #0
 801824e:	2300      	movs	r3, #0
 8018250:	f7e8 fc7c 	bl	8000b4c <__aeabi_dcmpgt>
 8018254:	b138      	cbz	r0, 8018266 <floor+0x46>
 8018256:	2c00      	cmp	r4, #0
 8018258:	da57      	bge.n	801830a <floor+0xea>
 801825a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801825e:	431d      	orrs	r5, r3
 8018260:	d001      	beq.n	8018266 <floor+0x46>
 8018262:	4c2d      	ldr	r4, [pc, #180]	; (8018318 <floor+0xf8>)
 8018264:	2500      	movs	r5, #0
 8018266:	4621      	mov	r1, r4
 8018268:	4628      	mov	r0, r5
 801826a:	e025      	b.n	80182b8 <floor+0x98>
 801826c:	4f2b      	ldr	r7, [pc, #172]	; (801831c <floor+0xfc>)
 801826e:	4137      	asrs	r7, r6
 8018270:	ea01 0307 	and.w	r3, r1, r7
 8018274:	4303      	orrs	r3, r0
 8018276:	d01f      	beq.n	80182b8 <floor+0x98>
 8018278:	a325      	add	r3, pc, #148	; (adr r3, 8018310 <floor+0xf0>)
 801827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827e:	f7e8 f81f 	bl	80002c0 <__adddf3>
 8018282:	2200      	movs	r2, #0
 8018284:	2300      	movs	r3, #0
 8018286:	f7e8 fc61 	bl	8000b4c <__aeabi_dcmpgt>
 801828a:	2800      	cmp	r0, #0
 801828c:	d0eb      	beq.n	8018266 <floor+0x46>
 801828e:	2c00      	cmp	r4, #0
 8018290:	bfbe      	ittt	lt
 8018292:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018296:	fa43 f606 	asrlt.w	r6, r3, r6
 801829a:	19a4      	addlt	r4, r4, r6
 801829c:	ea24 0407 	bic.w	r4, r4, r7
 80182a0:	2500      	movs	r5, #0
 80182a2:	e7e0      	b.n	8018266 <floor+0x46>
 80182a4:	2e33      	cmp	r6, #51	; 0x33
 80182a6:	dd0b      	ble.n	80182c0 <floor+0xa0>
 80182a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80182ac:	d104      	bne.n	80182b8 <floor+0x98>
 80182ae:	ee10 2a10 	vmov	r2, s0
 80182b2:	460b      	mov	r3, r1
 80182b4:	f7e8 f804 	bl	80002c0 <__adddf3>
 80182b8:	ec41 0b10 	vmov	d0, r0, r1
 80182bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80182c4:	f04f 33ff 	mov.w	r3, #4294967295
 80182c8:	fa23 f707 	lsr.w	r7, r3, r7
 80182cc:	4207      	tst	r7, r0
 80182ce:	d0f3      	beq.n	80182b8 <floor+0x98>
 80182d0:	a30f      	add	r3, pc, #60	; (adr r3, 8018310 <floor+0xf0>)
 80182d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d6:	f7e7 fff3 	bl	80002c0 <__adddf3>
 80182da:	2200      	movs	r2, #0
 80182dc:	2300      	movs	r3, #0
 80182de:	f7e8 fc35 	bl	8000b4c <__aeabi_dcmpgt>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	d0bf      	beq.n	8018266 <floor+0x46>
 80182e6:	2c00      	cmp	r4, #0
 80182e8:	da02      	bge.n	80182f0 <floor+0xd0>
 80182ea:	2e14      	cmp	r6, #20
 80182ec:	d103      	bne.n	80182f6 <floor+0xd6>
 80182ee:	3401      	adds	r4, #1
 80182f0:	ea25 0507 	bic.w	r5, r5, r7
 80182f4:	e7b7      	b.n	8018266 <floor+0x46>
 80182f6:	2301      	movs	r3, #1
 80182f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80182fc:	fa03 f606 	lsl.w	r6, r3, r6
 8018300:	4435      	add	r5, r6
 8018302:	4545      	cmp	r5, r8
 8018304:	bf38      	it	cc
 8018306:	18e4      	addcc	r4, r4, r3
 8018308:	e7f2      	b.n	80182f0 <floor+0xd0>
 801830a:	2500      	movs	r5, #0
 801830c:	462c      	mov	r4, r5
 801830e:	e7aa      	b.n	8018266 <floor+0x46>
 8018310:	8800759c 	.word	0x8800759c
 8018314:	7e37e43c 	.word	0x7e37e43c
 8018318:	bff00000 	.word	0xbff00000
 801831c:	000fffff 	.word	0x000fffff

08018320 <frexp>:
 8018320:	b570      	push	{r4, r5, r6, lr}
 8018322:	2100      	movs	r1, #0
 8018324:	ec55 4b10 	vmov	r4, r5, d0
 8018328:	6001      	str	r1, [r0, #0]
 801832a:	4916      	ldr	r1, [pc, #88]	; (8018384 <frexp+0x64>)
 801832c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8018330:	428a      	cmp	r2, r1
 8018332:	4606      	mov	r6, r0
 8018334:	462b      	mov	r3, r5
 8018336:	dc22      	bgt.n	801837e <frexp+0x5e>
 8018338:	ee10 1a10 	vmov	r1, s0
 801833c:	4311      	orrs	r1, r2
 801833e:	d01e      	beq.n	801837e <frexp+0x5e>
 8018340:	4911      	ldr	r1, [pc, #68]	; (8018388 <frexp+0x68>)
 8018342:	4029      	ands	r1, r5
 8018344:	b969      	cbnz	r1, 8018362 <frexp+0x42>
 8018346:	4b11      	ldr	r3, [pc, #68]	; (801838c <frexp+0x6c>)
 8018348:	2200      	movs	r2, #0
 801834a:	ee10 0a10 	vmov	r0, s0
 801834e:	4629      	mov	r1, r5
 8018350:	f7e8 f96c 	bl	800062c <__aeabi_dmul>
 8018354:	460b      	mov	r3, r1
 8018356:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801835a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801835e:	4604      	mov	r4, r0
 8018360:	6031      	str	r1, [r6, #0]
 8018362:	6831      	ldr	r1, [r6, #0]
 8018364:	1512      	asrs	r2, r2, #20
 8018366:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801836a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801836e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018372:	440a      	add	r2, r1
 8018374:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018378:	6032      	str	r2, [r6, #0]
 801837a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801837e:	ec45 4b10 	vmov	d0, r4, r5
 8018382:	bd70      	pop	{r4, r5, r6, pc}
 8018384:	7fefffff 	.word	0x7fefffff
 8018388:	7ff00000 	.word	0x7ff00000
 801838c:	43500000 	.word	0x43500000

08018390 <round>:
 8018390:	ec51 0b10 	vmov	r0, r1, d0
 8018394:	b570      	push	{r4, r5, r6, lr}
 8018396:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801839a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801839e:	2c13      	cmp	r4, #19
 80183a0:	ee10 2a10 	vmov	r2, s0
 80183a4:	460b      	mov	r3, r1
 80183a6:	dc19      	bgt.n	80183dc <round+0x4c>
 80183a8:	2c00      	cmp	r4, #0
 80183aa:	da09      	bge.n	80183c0 <round+0x30>
 80183ac:	3401      	adds	r4, #1
 80183ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80183b2:	d103      	bne.n	80183bc <round+0x2c>
 80183b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80183b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80183bc:	2100      	movs	r1, #0
 80183be:	e028      	b.n	8018412 <round+0x82>
 80183c0:	4d15      	ldr	r5, [pc, #84]	; (8018418 <round+0x88>)
 80183c2:	4125      	asrs	r5, r4
 80183c4:	ea01 0605 	and.w	r6, r1, r5
 80183c8:	4332      	orrs	r2, r6
 80183ca:	d00e      	beq.n	80183ea <round+0x5a>
 80183cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80183d0:	fa42 f404 	asr.w	r4, r2, r4
 80183d4:	4423      	add	r3, r4
 80183d6:	ea23 0305 	bic.w	r3, r3, r5
 80183da:	e7ef      	b.n	80183bc <round+0x2c>
 80183dc:	2c33      	cmp	r4, #51	; 0x33
 80183de:	dd07      	ble.n	80183f0 <round+0x60>
 80183e0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80183e4:	d101      	bne.n	80183ea <round+0x5a>
 80183e6:	f7e7 ff6b 	bl	80002c0 <__adddf3>
 80183ea:	ec41 0b10 	vmov	d0, r0, r1
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
 80183f0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80183f4:	f04f 35ff 	mov.w	r5, #4294967295
 80183f8:	40f5      	lsrs	r5, r6
 80183fa:	4228      	tst	r0, r5
 80183fc:	d0f5      	beq.n	80183ea <round+0x5a>
 80183fe:	2101      	movs	r1, #1
 8018400:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018404:	fa01 f404 	lsl.w	r4, r1, r4
 8018408:	1912      	adds	r2, r2, r4
 801840a:	bf28      	it	cs
 801840c:	185b      	addcs	r3, r3, r1
 801840e:	ea22 0105 	bic.w	r1, r2, r5
 8018412:	4608      	mov	r0, r1
 8018414:	4619      	mov	r1, r3
 8018416:	e7e8      	b.n	80183ea <round+0x5a>
 8018418:	000fffff 	.word	0x000fffff
 801841c:	00000000 	.word	0x00000000

08018420 <sin>:
 8018420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018422:	ec53 2b10 	vmov	r2, r3, d0
 8018426:	4826      	ldr	r0, [pc, #152]	; (80184c0 <sin+0xa0>)
 8018428:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801842c:	4281      	cmp	r1, r0
 801842e:	dc07      	bgt.n	8018440 <sin+0x20>
 8018430:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80184b8 <sin+0x98>
 8018434:	2000      	movs	r0, #0
 8018436:	f002 f827 	bl	801a488 <__kernel_sin>
 801843a:	ec51 0b10 	vmov	r0, r1, d0
 801843e:	e007      	b.n	8018450 <sin+0x30>
 8018440:	4820      	ldr	r0, [pc, #128]	; (80184c4 <sin+0xa4>)
 8018442:	4281      	cmp	r1, r0
 8018444:	dd09      	ble.n	801845a <sin+0x3a>
 8018446:	ee10 0a10 	vmov	r0, s0
 801844a:	4619      	mov	r1, r3
 801844c:	f7e7 ff36 	bl	80002bc <__aeabi_dsub>
 8018450:	ec41 0b10 	vmov	d0, r0, r1
 8018454:	b005      	add	sp, #20
 8018456:	f85d fb04 	ldr.w	pc, [sp], #4
 801845a:	4668      	mov	r0, sp
 801845c:	f000 ff2c 	bl	80192b8 <__ieee754_rem_pio2>
 8018460:	f000 0003 	and.w	r0, r0, #3
 8018464:	2801      	cmp	r0, #1
 8018466:	d008      	beq.n	801847a <sin+0x5a>
 8018468:	2802      	cmp	r0, #2
 801846a:	d00d      	beq.n	8018488 <sin+0x68>
 801846c:	b9d0      	cbnz	r0, 80184a4 <sin+0x84>
 801846e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018472:	ed9d 0b00 	vldr	d0, [sp]
 8018476:	2001      	movs	r0, #1
 8018478:	e7dd      	b.n	8018436 <sin+0x16>
 801847a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801847e:	ed9d 0b00 	vldr	d0, [sp]
 8018482:	f001 fbf9 	bl	8019c78 <__kernel_cos>
 8018486:	e7d8      	b.n	801843a <sin+0x1a>
 8018488:	ed9d 1b02 	vldr	d1, [sp, #8]
 801848c:	ed9d 0b00 	vldr	d0, [sp]
 8018490:	2001      	movs	r0, #1
 8018492:	f001 fff9 	bl	801a488 <__kernel_sin>
 8018496:	ec53 2b10 	vmov	r2, r3, d0
 801849a:	ee10 0a10 	vmov	r0, s0
 801849e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80184a2:	e7d5      	b.n	8018450 <sin+0x30>
 80184a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80184a8:	ed9d 0b00 	vldr	d0, [sp]
 80184ac:	f001 fbe4 	bl	8019c78 <__kernel_cos>
 80184b0:	e7f1      	b.n	8018496 <sin+0x76>
 80184b2:	bf00      	nop
 80184b4:	f3af 8000 	nop.w
	...
 80184c0:	3fe921fb 	.word	0x3fe921fb
 80184c4:	7fefffff 	.word	0x7fefffff

080184c8 <tan>:
 80184c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184ca:	ec53 2b10 	vmov	r2, r3, d0
 80184ce:	4814      	ldr	r0, [pc, #80]	; (8018520 <tan+0x58>)
 80184d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80184d4:	4281      	cmp	r1, r0
 80184d6:	dc05      	bgt.n	80184e4 <tan+0x1c>
 80184d8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8018518 <tan+0x50>
 80184dc:	2001      	movs	r0, #1
 80184de:	f002 f893 	bl	801a608 <__kernel_tan>
 80184e2:	e009      	b.n	80184f8 <tan+0x30>
 80184e4:	480f      	ldr	r0, [pc, #60]	; (8018524 <tan+0x5c>)
 80184e6:	4281      	cmp	r1, r0
 80184e8:	dd09      	ble.n	80184fe <tan+0x36>
 80184ea:	ee10 0a10 	vmov	r0, s0
 80184ee:	4619      	mov	r1, r3
 80184f0:	f7e7 fee4 	bl	80002bc <__aeabi_dsub>
 80184f4:	ec41 0b10 	vmov	d0, r0, r1
 80184f8:	b005      	add	sp, #20
 80184fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80184fe:	4668      	mov	r0, sp
 8018500:	f000 feda 	bl	80192b8 <__ieee754_rem_pio2>
 8018504:	0040      	lsls	r0, r0, #1
 8018506:	f000 0002 	and.w	r0, r0, #2
 801850a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801850e:	ed9d 0b00 	vldr	d0, [sp]
 8018512:	f1c0 0001 	rsb	r0, r0, #1
 8018516:	e7e2      	b.n	80184de <tan+0x16>
	...
 8018520:	3fe921fb 	.word	0x3fe921fb
 8018524:	7fefffff 	.word	0x7fefffff

08018528 <roundf>:
 8018528:	ee10 0a10 	vmov	r0, s0
 801852c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018530:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8018534:	2a16      	cmp	r2, #22
 8018536:	dc15      	bgt.n	8018564 <roundf+0x3c>
 8018538:	2a00      	cmp	r2, #0
 801853a:	da08      	bge.n	801854e <roundf+0x26>
 801853c:	3201      	adds	r2, #1
 801853e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018542:	d101      	bne.n	8018548 <roundf+0x20>
 8018544:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018548:	ee00 3a10 	vmov	s0, r3
 801854c:	4770      	bx	lr
 801854e:	4908      	ldr	r1, [pc, #32]	; (8018570 <roundf+0x48>)
 8018550:	4111      	asrs	r1, r2
 8018552:	4208      	tst	r0, r1
 8018554:	d0fa      	beq.n	801854c <roundf+0x24>
 8018556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801855a:	4113      	asrs	r3, r2
 801855c:	4403      	add	r3, r0
 801855e:	ea23 0301 	bic.w	r3, r3, r1
 8018562:	e7f1      	b.n	8018548 <roundf+0x20>
 8018564:	2a80      	cmp	r2, #128	; 0x80
 8018566:	d1f1      	bne.n	801854c <roundf+0x24>
 8018568:	ee30 0a00 	vadd.f32	s0, s0, s0
 801856c:	4770      	bx	lr
 801856e:	bf00      	nop
 8018570:	007fffff 	.word	0x007fffff

08018574 <pow>:
 8018574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018578:	ec59 8b10 	vmov	r8, r9, d0
 801857c:	ec57 6b11 	vmov	r6, r7, d1
 8018580:	f000 f976 	bl	8018870 <__ieee754_pow>
 8018584:	4b4e      	ldr	r3, [pc, #312]	; (80186c0 <pow+0x14c>)
 8018586:	f993 3000 	ldrsb.w	r3, [r3]
 801858a:	3301      	adds	r3, #1
 801858c:	ec55 4b10 	vmov	r4, r5, d0
 8018590:	d015      	beq.n	80185be <pow+0x4a>
 8018592:	4632      	mov	r2, r6
 8018594:	463b      	mov	r3, r7
 8018596:	4630      	mov	r0, r6
 8018598:	4639      	mov	r1, r7
 801859a:	f7e8 fae1 	bl	8000b60 <__aeabi_dcmpun>
 801859e:	b970      	cbnz	r0, 80185be <pow+0x4a>
 80185a0:	4642      	mov	r2, r8
 80185a2:	464b      	mov	r3, r9
 80185a4:	4640      	mov	r0, r8
 80185a6:	4649      	mov	r1, r9
 80185a8:	f7e8 fada 	bl	8000b60 <__aeabi_dcmpun>
 80185ac:	2200      	movs	r2, #0
 80185ae:	2300      	movs	r3, #0
 80185b0:	b148      	cbz	r0, 80185c6 <pow+0x52>
 80185b2:	4630      	mov	r0, r6
 80185b4:	4639      	mov	r1, r7
 80185b6:	f7e8 faa1 	bl	8000afc <__aeabi_dcmpeq>
 80185ba:	2800      	cmp	r0, #0
 80185bc:	d17d      	bne.n	80186ba <pow+0x146>
 80185be:	ec45 4b10 	vmov	d0, r4, r5
 80185c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185c6:	4640      	mov	r0, r8
 80185c8:	4649      	mov	r1, r9
 80185ca:	f7e8 fa97 	bl	8000afc <__aeabi_dcmpeq>
 80185ce:	b1e0      	cbz	r0, 801860a <pow+0x96>
 80185d0:	2200      	movs	r2, #0
 80185d2:	2300      	movs	r3, #0
 80185d4:	4630      	mov	r0, r6
 80185d6:	4639      	mov	r1, r7
 80185d8:	f7e8 fa90 	bl	8000afc <__aeabi_dcmpeq>
 80185dc:	2800      	cmp	r0, #0
 80185de:	d16c      	bne.n	80186ba <pow+0x146>
 80185e0:	ec47 6b10 	vmov	d0, r6, r7
 80185e4:	f002 f9ed 	bl	801a9c2 <finite>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	d0e8      	beq.n	80185be <pow+0x4a>
 80185ec:	2200      	movs	r2, #0
 80185ee:	2300      	movs	r3, #0
 80185f0:	4630      	mov	r0, r6
 80185f2:	4639      	mov	r1, r7
 80185f4:	f7e8 fa8c 	bl	8000b10 <__aeabi_dcmplt>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	d0e0      	beq.n	80185be <pow+0x4a>
 80185fc:	f002 fb4c 	bl	801ac98 <__errno>
 8018600:	2321      	movs	r3, #33	; 0x21
 8018602:	6003      	str	r3, [r0, #0]
 8018604:	2400      	movs	r4, #0
 8018606:	4d2f      	ldr	r5, [pc, #188]	; (80186c4 <pow+0x150>)
 8018608:	e7d9      	b.n	80185be <pow+0x4a>
 801860a:	ec45 4b10 	vmov	d0, r4, r5
 801860e:	f002 f9d8 	bl	801a9c2 <finite>
 8018612:	bbb8      	cbnz	r0, 8018684 <pow+0x110>
 8018614:	ec49 8b10 	vmov	d0, r8, r9
 8018618:	f002 f9d3 	bl	801a9c2 <finite>
 801861c:	b390      	cbz	r0, 8018684 <pow+0x110>
 801861e:	ec47 6b10 	vmov	d0, r6, r7
 8018622:	f002 f9ce 	bl	801a9c2 <finite>
 8018626:	b368      	cbz	r0, 8018684 <pow+0x110>
 8018628:	4622      	mov	r2, r4
 801862a:	462b      	mov	r3, r5
 801862c:	4620      	mov	r0, r4
 801862e:	4629      	mov	r1, r5
 8018630:	f7e8 fa96 	bl	8000b60 <__aeabi_dcmpun>
 8018634:	b160      	cbz	r0, 8018650 <pow+0xdc>
 8018636:	f002 fb2f 	bl	801ac98 <__errno>
 801863a:	2321      	movs	r3, #33	; 0x21
 801863c:	6003      	str	r3, [r0, #0]
 801863e:	2200      	movs	r2, #0
 8018640:	2300      	movs	r3, #0
 8018642:	4610      	mov	r0, r2
 8018644:	4619      	mov	r1, r3
 8018646:	f7e8 f91b 	bl	8000880 <__aeabi_ddiv>
 801864a:	4604      	mov	r4, r0
 801864c:	460d      	mov	r5, r1
 801864e:	e7b6      	b.n	80185be <pow+0x4a>
 8018650:	f002 fb22 	bl	801ac98 <__errno>
 8018654:	2322      	movs	r3, #34	; 0x22
 8018656:	6003      	str	r3, [r0, #0]
 8018658:	2200      	movs	r2, #0
 801865a:	2300      	movs	r3, #0
 801865c:	4640      	mov	r0, r8
 801865e:	4649      	mov	r1, r9
 8018660:	f7e8 fa56 	bl	8000b10 <__aeabi_dcmplt>
 8018664:	2400      	movs	r4, #0
 8018666:	b158      	cbz	r0, 8018680 <pow+0x10c>
 8018668:	ec47 6b10 	vmov	d0, r6, r7
 801866c:	f002 f9bc 	bl	801a9e8 <rint>
 8018670:	4632      	mov	r2, r6
 8018672:	ec51 0b10 	vmov	r0, r1, d0
 8018676:	463b      	mov	r3, r7
 8018678:	f7e8 fa40 	bl	8000afc <__aeabi_dcmpeq>
 801867c:	2800      	cmp	r0, #0
 801867e:	d0c2      	beq.n	8018606 <pow+0x92>
 8018680:	4d11      	ldr	r5, [pc, #68]	; (80186c8 <pow+0x154>)
 8018682:	e79c      	b.n	80185be <pow+0x4a>
 8018684:	2200      	movs	r2, #0
 8018686:	2300      	movs	r3, #0
 8018688:	4620      	mov	r0, r4
 801868a:	4629      	mov	r1, r5
 801868c:	f7e8 fa36 	bl	8000afc <__aeabi_dcmpeq>
 8018690:	2800      	cmp	r0, #0
 8018692:	d094      	beq.n	80185be <pow+0x4a>
 8018694:	ec49 8b10 	vmov	d0, r8, r9
 8018698:	f002 f993 	bl	801a9c2 <finite>
 801869c:	2800      	cmp	r0, #0
 801869e:	d08e      	beq.n	80185be <pow+0x4a>
 80186a0:	ec47 6b10 	vmov	d0, r6, r7
 80186a4:	f002 f98d 	bl	801a9c2 <finite>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	d088      	beq.n	80185be <pow+0x4a>
 80186ac:	f002 faf4 	bl	801ac98 <__errno>
 80186b0:	2322      	movs	r3, #34	; 0x22
 80186b2:	6003      	str	r3, [r0, #0]
 80186b4:	2400      	movs	r4, #0
 80186b6:	2500      	movs	r5, #0
 80186b8:	e781      	b.n	80185be <pow+0x4a>
 80186ba:	4d04      	ldr	r5, [pc, #16]	; (80186cc <pow+0x158>)
 80186bc:	2400      	movs	r4, #0
 80186be:	e77e      	b.n	80185be <pow+0x4a>
 80186c0:	20000174 	.word	0x20000174
 80186c4:	fff00000 	.word	0xfff00000
 80186c8:	7ff00000 	.word	0x7ff00000
 80186cc:	3ff00000 	.word	0x3ff00000

080186d0 <sqrt>:
 80186d0:	b538      	push	{r3, r4, r5, lr}
 80186d2:	ed2d 8b02 	vpush	{d8}
 80186d6:	ec55 4b10 	vmov	r4, r5, d0
 80186da:	f000 fff7 	bl	80196cc <__ieee754_sqrt>
 80186de:	4b15      	ldr	r3, [pc, #84]	; (8018734 <sqrt+0x64>)
 80186e0:	eeb0 8a40 	vmov.f32	s16, s0
 80186e4:	eef0 8a60 	vmov.f32	s17, s1
 80186e8:	f993 3000 	ldrsb.w	r3, [r3]
 80186ec:	3301      	adds	r3, #1
 80186ee:	d019      	beq.n	8018724 <sqrt+0x54>
 80186f0:	4622      	mov	r2, r4
 80186f2:	462b      	mov	r3, r5
 80186f4:	4620      	mov	r0, r4
 80186f6:	4629      	mov	r1, r5
 80186f8:	f7e8 fa32 	bl	8000b60 <__aeabi_dcmpun>
 80186fc:	b990      	cbnz	r0, 8018724 <sqrt+0x54>
 80186fe:	2200      	movs	r2, #0
 8018700:	2300      	movs	r3, #0
 8018702:	4620      	mov	r0, r4
 8018704:	4629      	mov	r1, r5
 8018706:	f7e8 fa03 	bl	8000b10 <__aeabi_dcmplt>
 801870a:	b158      	cbz	r0, 8018724 <sqrt+0x54>
 801870c:	f002 fac4 	bl	801ac98 <__errno>
 8018710:	2321      	movs	r3, #33	; 0x21
 8018712:	6003      	str	r3, [r0, #0]
 8018714:	2200      	movs	r2, #0
 8018716:	2300      	movs	r3, #0
 8018718:	4610      	mov	r0, r2
 801871a:	4619      	mov	r1, r3
 801871c:	f7e8 f8b0 	bl	8000880 <__aeabi_ddiv>
 8018720:	ec41 0b18 	vmov	d8, r0, r1
 8018724:	eeb0 0a48 	vmov.f32	s0, s16
 8018728:	eef0 0a68 	vmov.f32	s1, s17
 801872c:	ecbd 8b02 	vpop	{d8}
 8018730:	bd38      	pop	{r3, r4, r5, pc}
 8018732:	bf00      	nop
 8018734:	20000174 	.word	0x20000174

08018738 <expf>:
 8018738:	b508      	push	{r3, lr}
 801873a:	ed2d 8b02 	vpush	{d8}
 801873e:	eef0 8a40 	vmov.f32	s17, s0
 8018742:	f001 f877 	bl	8019834 <__ieee754_expf>
 8018746:	4b16      	ldr	r3, [pc, #88]	; (80187a0 <expf+0x68>)
 8018748:	f993 3000 	ldrsb.w	r3, [r3]
 801874c:	3301      	adds	r3, #1
 801874e:	eeb0 8a40 	vmov.f32	s16, s0
 8018752:	d011      	beq.n	8018778 <expf+0x40>
 8018754:	eeb0 0a68 	vmov.f32	s0, s17
 8018758:	f002 fa58 	bl	801ac0c <finitef>
 801875c:	b160      	cbz	r0, 8018778 <expf+0x40>
 801875e:	eddf 7a11 	vldr	s15, [pc, #68]	; 80187a4 <expf+0x6c>
 8018762:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801876a:	dd0a      	ble.n	8018782 <expf+0x4a>
 801876c:	f002 fa94 	bl	801ac98 <__errno>
 8018770:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80187a8 <expf+0x70>
 8018774:	2322      	movs	r3, #34	; 0x22
 8018776:	6003      	str	r3, [r0, #0]
 8018778:	eeb0 0a48 	vmov.f32	s0, s16
 801877c:	ecbd 8b02 	vpop	{d8}
 8018780:	bd08      	pop	{r3, pc}
 8018782:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80187ac <expf+0x74>
 8018786:	eef4 8ae7 	vcmpe.f32	s17, s15
 801878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878e:	d5f3      	bpl.n	8018778 <expf+0x40>
 8018790:	f002 fa82 	bl	801ac98 <__errno>
 8018794:	2322      	movs	r3, #34	; 0x22
 8018796:	ed9f 8a06 	vldr	s16, [pc, #24]	; 80187b0 <expf+0x78>
 801879a:	6003      	str	r3, [r0, #0]
 801879c:	e7ec      	b.n	8018778 <expf+0x40>
 801879e:	bf00      	nop
 80187a0:	20000174 	.word	0x20000174
 80187a4:	42b17180 	.word	0x42b17180
 80187a8:	7f800000 	.word	0x7f800000
 80187ac:	c2cff1b5 	.word	0xc2cff1b5
 80187b0:	00000000 	.word	0x00000000

080187b4 <log10f>:
 80187b4:	b508      	push	{r3, lr}
 80187b6:	ed2d 8b02 	vpush	{d8}
 80187ba:	eeb0 8a40 	vmov.f32	s16, s0
 80187be:	f001 f9fd 	bl	8019bbc <__ieee754_log10f>
 80187c2:	4b14      	ldr	r3, [pc, #80]	; (8018814 <log10f+0x60>)
 80187c4:	f993 3000 	ldrsb.w	r3, [r3]
 80187c8:	3301      	adds	r3, #1
 80187ca:	d014      	beq.n	80187f6 <log10f+0x42>
 80187cc:	eeb4 8a48 	vcmp.f32	s16, s16
 80187d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d4:	d60f      	bvs.n	80187f6 <log10f+0x42>
 80187d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80187da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187de:	d80a      	bhi.n	80187f6 <log10f+0x42>
 80187e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e8:	d108      	bne.n	80187fc <log10f+0x48>
 80187ea:	f002 fa55 	bl	801ac98 <__errno>
 80187ee:	2322      	movs	r3, #34	; 0x22
 80187f0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8018818 <log10f+0x64>
 80187f4:	6003      	str	r3, [r0, #0]
 80187f6:	ecbd 8b02 	vpop	{d8}
 80187fa:	bd08      	pop	{r3, pc}
 80187fc:	f002 fa4c 	bl	801ac98 <__errno>
 8018800:	ecbd 8b02 	vpop	{d8}
 8018804:	2321      	movs	r3, #33	; 0x21
 8018806:	6003      	str	r3, [r0, #0]
 8018808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801880c:	4803      	ldr	r0, [pc, #12]	; (801881c <log10f+0x68>)
 801880e:	f002 ba0b 	b.w	801ac28 <nanf>
 8018812:	bf00      	nop
 8018814:	20000174 	.word	0x20000174
 8018818:	ff800000 	.word	0xff800000
 801881c:	080205db 	.word	0x080205db

08018820 <sqrtf>:
 8018820:	b508      	push	{r3, lr}
 8018822:	ed2d 8b02 	vpush	{d8}
 8018826:	eeb0 8a40 	vmov.f32	s16, s0
 801882a:	f001 fa1f 	bl	8019c6c <__ieee754_sqrtf>
 801882e:	4b0d      	ldr	r3, [pc, #52]	; (8018864 <sqrtf+0x44>)
 8018830:	f993 3000 	ldrsb.w	r3, [r3]
 8018834:	3301      	adds	r3, #1
 8018836:	d011      	beq.n	801885c <sqrtf+0x3c>
 8018838:	eeb4 8a48 	vcmp.f32	s16, s16
 801883c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018840:	d60c      	bvs.n	801885c <sqrtf+0x3c>
 8018842:	eddf 8a09 	vldr	s17, [pc, #36]	; 8018868 <sqrtf+0x48>
 8018846:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801884e:	d505      	bpl.n	801885c <sqrtf+0x3c>
 8018850:	f002 fa22 	bl	801ac98 <__errno>
 8018854:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018858:	2321      	movs	r3, #33	; 0x21
 801885a:	6003      	str	r3, [r0, #0]
 801885c:	ecbd 8b02 	vpop	{d8}
 8018860:	bd08      	pop	{r3, pc}
 8018862:	bf00      	nop
 8018864:	20000174 	.word	0x20000174
	...

08018870 <__ieee754_pow>:
 8018870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018874:	ed2d 8b06 	vpush	{d8-d10}
 8018878:	b08d      	sub	sp, #52	; 0x34
 801887a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801887e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8018882:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8018886:	ea56 0100 	orrs.w	r1, r6, r0
 801888a:	ec53 2b10 	vmov	r2, r3, d0
 801888e:	f000 84d1 	beq.w	8019234 <__ieee754_pow+0x9c4>
 8018892:	497f      	ldr	r1, [pc, #508]	; (8018a90 <__ieee754_pow+0x220>)
 8018894:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018898:	428c      	cmp	r4, r1
 801889a:	ee10 8a10 	vmov	r8, s0
 801889e:	4699      	mov	r9, r3
 80188a0:	dc09      	bgt.n	80188b6 <__ieee754_pow+0x46>
 80188a2:	d103      	bne.n	80188ac <__ieee754_pow+0x3c>
 80188a4:	b97a      	cbnz	r2, 80188c6 <__ieee754_pow+0x56>
 80188a6:	42a6      	cmp	r6, r4
 80188a8:	dd02      	ble.n	80188b0 <__ieee754_pow+0x40>
 80188aa:	e00c      	b.n	80188c6 <__ieee754_pow+0x56>
 80188ac:	428e      	cmp	r6, r1
 80188ae:	dc02      	bgt.n	80188b6 <__ieee754_pow+0x46>
 80188b0:	428e      	cmp	r6, r1
 80188b2:	d110      	bne.n	80188d6 <__ieee754_pow+0x66>
 80188b4:	b178      	cbz	r0, 80188d6 <__ieee754_pow+0x66>
 80188b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80188ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80188be:	ea54 0308 	orrs.w	r3, r4, r8
 80188c2:	f000 84b7 	beq.w	8019234 <__ieee754_pow+0x9c4>
 80188c6:	4873      	ldr	r0, [pc, #460]	; (8018a94 <__ieee754_pow+0x224>)
 80188c8:	b00d      	add	sp, #52	; 0x34
 80188ca:	ecbd 8b06 	vpop	{d8-d10}
 80188ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d2:	f002 b881 	b.w	801a9d8 <nan>
 80188d6:	f1b9 0f00 	cmp.w	r9, #0
 80188da:	da36      	bge.n	801894a <__ieee754_pow+0xda>
 80188dc:	496e      	ldr	r1, [pc, #440]	; (8018a98 <__ieee754_pow+0x228>)
 80188de:	428e      	cmp	r6, r1
 80188e0:	dc51      	bgt.n	8018986 <__ieee754_pow+0x116>
 80188e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80188e6:	428e      	cmp	r6, r1
 80188e8:	f340 84af 	ble.w	801924a <__ieee754_pow+0x9da>
 80188ec:	1531      	asrs	r1, r6, #20
 80188ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80188f2:	2914      	cmp	r1, #20
 80188f4:	dd0f      	ble.n	8018916 <__ieee754_pow+0xa6>
 80188f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80188fa:	fa20 fc01 	lsr.w	ip, r0, r1
 80188fe:	fa0c f101 	lsl.w	r1, ip, r1
 8018902:	4281      	cmp	r1, r0
 8018904:	f040 84a1 	bne.w	801924a <__ieee754_pow+0x9da>
 8018908:	f00c 0c01 	and.w	ip, ip, #1
 801890c:	f1cc 0102 	rsb	r1, ip, #2
 8018910:	9100      	str	r1, [sp, #0]
 8018912:	b180      	cbz	r0, 8018936 <__ieee754_pow+0xc6>
 8018914:	e059      	b.n	80189ca <__ieee754_pow+0x15a>
 8018916:	2800      	cmp	r0, #0
 8018918:	d155      	bne.n	80189c6 <__ieee754_pow+0x156>
 801891a:	f1c1 0114 	rsb	r1, r1, #20
 801891e:	fa46 fc01 	asr.w	ip, r6, r1
 8018922:	fa0c f101 	lsl.w	r1, ip, r1
 8018926:	42b1      	cmp	r1, r6
 8018928:	f040 848c 	bne.w	8019244 <__ieee754_pow+0x9d4>
 801892c:	f00c 0c01 	and.w	ip, ip, #1
 8018930:	f1cc 0102 	rsb	r1, ip, #2
 8018934:	9100      	str	r1, [sp, #0]
 8018936:	4959      	ldr	r1, [pc, #356]	; (8018a9c <__ieee754_pow+0x22c>)
 8018938:	428e      	cmp	r6, r1
 801893a:	d12d      	bne.n	8018998 <__ieee754_pow+0x128>
 801893c:	2f00      	cmp	r7, #0
 801893e:	da79      	bge.n	8018a34 <__ieee754_pow+0x1c4>
 8018940:	4956      	ldr	r1, [pc, #344]	; (8018a9c <__ieee754_pow+0x22c>)
 8018942:	2000      	movs	r0, #0
 8018944:	f7e7 ff9c 	bl	8000880 <__aeabi_ddiv>
 8018948:	e016      	b.n	8018978 <__ieee754_pow+0x108>
 801894a:	2100      	movs	r1, #0
 801894c:	9100      	str	r1, [sp, #0]
 801894e:	2800      	cmp	r0, #0
 8018950:	d13b      	bne.n	80189ca <__ieee754_pow+0x15a>
 8018952:	494f      	ldr	r1, [pc, #316]	; (8018a90 <__ieee754_pow+0x220>)
 8018954:	428e      	cmp	r6, r1
 8018956:	d1ee      	bne.n	8018936 <__ieee754_pow+0xc6>
 8018958:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801895c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018960:	ea53 0308 	orrs.w	r3, r3, r8
 8018964:	f000 8466 	beq.w	8019234 <__ieee754_pow+0x9c4>
 8018968:	4b4d      	ldr	r3, [pc, #308]	; (8018aa0 <__ieee754_pow+0x230>)
 801896a:	429c      	cmp	r4, r3
 801896c:	dd0d      	ble.n	801898a <__ieee754_pow+0x11a>
 801896e:	2f00      	cmp	r7, #0
 8018970:	f280 8464 	bge.w	801923c <__ieee754_pow+0x9cc>
 8018974:	2000      	movs	r0, #0
 8018976:	2100      	movs	r1, #0
 8018978:	ec41 0b10 	vmov	d0, r0, r1
 801897c:	b00d      	add	sp, #52	; 0x34
 801897e:	ecbd 8b06 	vpop	{d8-d10}
 8018982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018986:	2102      	movs	r1, #2
 8018988:	e7e0      	b.n	801894c <__ieee754_pow+0xdc>
 801898a:	2f00      	cmp	r7, #0
 801898c:	daf2      	bge.n	8018974 <__ieee754_pow+0x104>
 801898e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8018992:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018996:	e7ef      	b.n	8018978 <__ieee754_pow+0x108>
 8018998:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801899c:	d104      	bne.n	80189a8 <__ieee754_pow+0x138>
 801899e:	4610      	mov	r0, r2
 80189a0:	4619      	mov	r1, r3
 80189a2:	f7e7 fe43 	bl	800062c <__aeabi_dmul>
 80189a6:	e7e7      	b.n	8018978 <__ieee754_pow+0x108>
 80189a8:	493e      	ldr	r1, [pc, #248]	; (8018aa4 <__ieee754_pow+0x234>)
 80189aa:	428f      	cmp	r7, r1
 80189ac:	d10d      	bne.n	80189ca <__ieee754_pow+0x15a>
 80189ae:	f1b9 0f00 	cmp.w	r9, #0
 80189b2:	db0a      	blt.n	80189ca <__ieee754_pow+0x15a>
 80189b4:	ec43 2b10 	vmov	d0, r2, r3
 80189b8:	b00d      	add	sp, #52	; 0x34
 80189ba:	ecbd 8b06 	vpop	{d8-d10}
 80189be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c2:	f000 be83 	b.w	80196cc <__ieee754_sqrt>
 80189c6:	2100      	movs	r1, #0
 80189c8:	9100      	str	r1, [sp, #0]
 80189ca:	ec43 2b10 	vmov	d0, r2, r3
 80189ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80189d2:	f001 ffed 	bl	801a9b0 <fabs>
 80189d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80189da:	ec51 0b10 	vmov	r0, r1, d0
 80189de:	f1b8 0f00 	cmp.w	r8, #0
 80189e2:	d12a      	bne.n	8018a3a <__ieee754_pow+0x1ca>
 80189e4:	b12c      	cbz	r4, 80189f2 <__ieee754_pow+0x182>
 80189e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018a9c <__ieee754_pow+0x22c>
 80189ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80189ee:	45e6      	cmp	lr, ip
 80189f0:	d123      	bne.n	8018a3a <__ieee754_pow+0x1ca>
 80189f2:	2f00      	cmp	r7, #0
 80189f4:	da05      	bge.n	8018a02 <__ieee754_pow+0x192>
 80189f6:	4602      	mov	r2, r0
 80189f8:	460b      	mov	r3, r1
 80189fa:	2000      	movs	r0, #0
 80189fc:	4927      	ldr	r1, [pc, #156]	; (8018a9c <__ieee754_pow+0x22c>)
 80189fe:	f7e7 ff3f 	bl	8000880 <__aeabi_ddiv>
 8018a02:	f1b9 0f00 	cmp.w	r9, #0
 8018a06:	dab7      	bge.n	8018978 <__ieee754_pow+0x108>
 8018a08:	9b00      	ldr	r3, [sp, #0]
 8018a0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018a0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018a12:	4323      	orrs	r3, r4
 8018a14:	d108      	bne.n	8018a28 <__ieee754_pow+0x1b8>
 8018a16:	4602      	mov	r2, r0
 8018a18:	460b      	mov	r3, r1
 8018a1a:	4610      	mov	r0, r2
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	f7e7 fc4d 	bl	80002bc <__aeabi_dsub>
 8018a22:	4602      	mov	r2, r0
 8018a24:	460b      	mov	r3, r1
 8018a26:	e78d      	b.n	8018944 <__ieee754_pow+0xd4>
 8018a28:	9b00      	ldr	r3, [sp, #0]
 8018a2a:	2b01      	cmp	r3, #1
 8018a2c:	d1a4      	bne.n	8018978 <__ieee754_pow+0x108>
 8018a2e:	4602      	mov	r2, r0
 8018a30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a34:	4610      	mov	r0, r2
 8018a36:	4619      	mov	r1, r3
 8018a38:	e79e      	b.n	8018978 <__ieee754_pow+0x108>
 8018a3a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018a3e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018a42:	950a      	str	r5, [sp, #40]	; 0x28
 8018a44:	9d00      	ldr	r5, [sp, #0]
 8018a46:	46ac      	mov	ip, r5
 8018a48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018a4a:	ea5c 0505 	orrs.w	r5, ip, r5
 8018a4e:	d0e4      	beq.n	8018a1a <__ieee754_pow+0x1aa>
 8018a50:	4b15      	ldr	r3, [pc, #84]	; (8018aa8 <__ieee754_pow+0x238>)
 8018a52:	429e      	cmp	r6, r3
 8018a54:	f340 80fc 	ble.w	8018c50 <__ieee754_pow+0x3e0>
 8018a58:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018a5c:	429e      	cmp	r6, r3
 8018a5e:	4b10      	ldr	r3, [pc, #64]	; (8018aa0 <__ieee754_pow+0x230>)
 8018a60:	dd07      	ble.n	8018a72 <__ieee754_pow+0x202>
 8018a62:	429c      	cmp	r4, r3
 8018a64:	dc0a      	bgt.n	8018a7c <__ieee754_pow+0x20c>
 8018a66:	2f00      	cmp	r7, #0
 8018a68:	da84      	bge.n	8018974 <__ieee754_pow+0x104>
 8018a6a:	a307      	add	r3, pc, #28	; (adr r3, 8018a88 <__ieee754_pow+0x218>)
 8018a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a70:	e795      	b.n	801899e <__ieee754_pow+0x12e>
 8018a72:	429c      	cmp	r4, r3
 8018a74:	dbf7      	blt.n	8018a66 <__ieee754_pow+0x1f6>
 8018a76:	4b09      	ldr	r3, [pc, #36]	; (8018a9c <__ieee754_pow+0x22c>)
 8018a78:	429c      	cmp	r4, r3
 8018a7a:	dd17      	ble.n	8018aac <__ieee754_pow+0x23c>
 8018a7c:	2f00      	cmp	r7, #0
 8018a7e:	dcf4      	bgt.n	8018a6a <__ieee754_pow+0x1fa>
 8018a80:	e778      	b.n	8018974 <__ieee754_pow+0x104>
 8018a82:	bf00      	nop
 8018a84:	f3af 8000 	nop.w
 8018a88:	8800759c 	.word	0x8800759c
 8018a8c:	7e37e43c 	.word	0x7e37e43c
 8018a90:	7ff00000 	.word	0x7ff00000
 8018a94:	080205db 	.word	0x080205db
 8018a98:	433fffff 	.word	0x433fffff
 8018a9c:	3ff00000 	.word	0x3ff00000
 8018aa0:	3fefffff 	.word	0x3fefffff
 8018aa4:	3fe00000 	.word	0x3fe00000
 8018aa8:	41e00000 	.word	0x41e00000
 8018aac:	4b64      	ldr	r3, [pc, #400]	; (8018c40 <__ieee754_pow+0x3d0>)
 8018aae:	2200      	movs	r2, #0
 8018ab0:	f7e7 fc04 	bl	80002bc <__aeabi_dsub>
 8018ab4:	a356      	add	r3, pc, #344	; (adr r3, 8018c10 <__ieee754_pow+0x3a0>)
 8018ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aba:	4604      	mov	r4, r0
 8018abc:	460d      	mov	r5, r1
 8018abe:	f7e7 fdb5 	bl	800062c <__aeabi_dmul>
 8018ac2:	a355      	add	r3, pc, #340	; (adr r3, 8018c18 <__ieee754_pow+0x3a8>)
 8018ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac8:	4606      	mov	r6, r0
 8018aca:	460f      	mov	r7, r1
 8018acc:	4620      	mov	r0, r4
 8018ace:	4629      	mov	r1, r5
 8018ad0:	f7e7 fdac 	bl	800062c <__aeabi_dmul>
 8018ad4:	4b5b      	ldr	r3, [pc, #364]	; (8018c44 <__ieee754_pow+0x3d4>)
 8018ad6:	4682      	mov	sl, r0
 8018ad8:	468b      	mov	fp, r1
 8018ada:	2200      	movs	r2, #0
 8018adc:	4620      	mov	r0, r4
 8018ade:	4629      	mov	r1, r5
 8018ae0:	f7e7 fda4 	bl	800062c <__aeabi_dmul>
 8018ae4:	4602      	mov	r2, r0
 8018ae6:	460b      	mov	r3, r1
 8018ae8:	a14d      	add	r1, pc, #308	; (adr r1, 8018c20 <__ieee754_pow+0x3b0>)
 8018aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018aee:	f7e7 fbe5 	bl	80002bc <__aeabi_dsub>
 8018af2:	4622      	mov	r2, r4
 8018af4:	462b      	mov	r3, r5
 8018af6:	f7e7 fd99 	bl	800062c <__aeabi_dmul>
 8018afa:	4602      	mov	r2, r0
 8018afc:	460b      	mov	r3, r1
 8018afe:	2000      	movs	r0, #0
 8018b00:	4951      	ldr	r1, [pc, #324]	; (8018c48 <__ieee754_pow+0x3d8>)
 8018b02:	f7e7 fbdb 	bl	80002bc <__aeabi_dsub>
 8018b06:	4622      	mov	r2, r4
 8018b08:	4680      	mov	r8, r0
 8018b0a:	4689      	mov	r9, r1
 8018b0c:	462b      	mov	r3, r5
 8018b0e:	4620      	mov	r0, r4
 8018b10:	4629      	mov	r1, r5
 8018b12:	f7e7 fd8b 	bl	800062c <__aeabi_dmul>
 8018b16:	4602      	mov	r2, r0
 8018b18:	460b      	mov	r3, r1
 8018b1a:	4640      	mov	r0, r8
 8018b1c:	4649      	mov	r1, r9
 8018b1e:	f7e7 fd85 	bl	800062c <__aeabi_dmul>
 8018b22:	a341      	add	r3, pc, #260	; (adr r3, 8018c28 <__ieee754_pow+0x3b8>)
 8018b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b28:	f7e7 fd80 	bl	800062c <__aeabi_dmul>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	460b      	mov	r3, r1
 8018b30:	4650      	mov	r0, sl
 8018b32:	4659      	mov	r1, fp
 8018b34:	f7e7 fbc2 	bl	80002bc <__aeabi_dsub>
 8018b38:	4602      	mov	r2, r0
 8018b3a:	460b      	mov	r3, r1
 8018b3c:	4680      	mov	r8, r0
 8018b3e:	4689      	mov	r9, r1
 8018b40:	4630      	mov	r0, r6
 8018b42:	4639      	mov	r1, r7
 8018b44:	f7e7 fbbc 	bl	80002c0 <__adddf3>
 8018b48:	2400      	movs	r4, #0
 8018b4a:	4632      	mov	r2, r6
 8018b4c:	463b      	mov	r3, r7
 8018b4e:	4620      	mov	r0, r4
 8018b50:	460d      	mov	r5, r1
 8018b52:	f7e7 fbb3 	bl	80002bc <__aeabi_dsub>
 8018b56:	4602      	mov	r2, r0
 8018b58:	460b      	mov	r3, r1
 8018b5a:	4640      	mov	r0, r8
 8018b5c:	4649      	mov	r1, r9
 8018b5e:	f7e7 fbad 	bl	80002bc <__aeabi_dsub>
 8018b62:	9b00      	ldr	r3, [sp, #0]
 8018b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b66:	3b01      	subs	r3, #1
 8018b68:	4313      	orrs	r3, r2
 8018b6a:	4682      	mov	sl, r0
 8018b6c:	468b      	mov	fp, r1
 8018b6e:	f040 81f1 	bne.w	8018f54 <__ieee754_pow+0x6e4>
 8018b72:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018c30 <__ieee754_pow+0x3c0>
 8018b76:	eeb0 8a47 	vmov.f32	s16, s14
 8018b7a:	eef0 8a67 	vmov.f32	s17, s15
 8018b7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018b82:	2600      	movs	r6, #0
 8018b84:	4632      	mov	r2, r6
 8018b86:	463b      	mov	r3, r7
 8018b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b8c:	f7e7 fb96 	bl	80002bc <__aeabi_dsub>
 8018b90:	4622      	mov	r2, r4
 8018b92:	462b      	mov	r3, r5
 8018b94:	f7e7 fd4a 	bl	800062c <__aeabi_dmul>
 8018b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b9c:	4680      	mov	r8, r0
 8018b9e:	4689      	mov	r9, r1
 8018ba0:	4650      	mov	r0, sl
 8018ba2:	4659      	mov	r1, fp
 8018ba4:	f7e7 fd42 	bl	800062c <__aeabi_dmul>
 8018ba8:	4602      	mov	r2, r0
 8018baa:	460b      	mov	r3, r1
 8018bac:	4640      	mov	r0, r8
 8018bae:	4649      	mov	r1, r9
 8018bb0:	f7e7 fb86 	bl	80002c0 <__adddf3>
 8018bb4:	4632      	mov	r2, r6
 8018bb6:	463b      	mov	r3, r7
 8018bb8:	4680      	mov	r8, r0
 8018bba:	4689      	mov	r9, r1
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	4629      	mov	r1, r5
 8018bc0:	f7e7 fd34 	bl	800062c <__aeabi_dmul>
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	460d      	mov	r5, r1
 8018bca:	4602      	mov	r2, r0
 8018bcc:	4649      	mov	r1, r9
 8018bce:	4640      	mov	r0, r8
 8018bd0:	f7e7 fb76 	bl	80002c0 <__adddf3>
 8018bd4:	4b1d      	ldr	r3, [pc, #116]	; (8018c4c <__ieee754_pow+0x3dc>)
 8018bd6:	4299      	cmp	r1, r3
 8018bd8:	ec45 4b19 	vmov	d9, r4, r5
 8018bdc:	4606      	mov	r6, r0
 8018bde:	460f      	mov	r7, r1
 8018be0:	468b      	mov	fp, r1
 8018be2:	f340 82fe 	ble.w	80191e2 <__ieee754_pow+0x972>
 8018be6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018bea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018bee:	4303      	orrs	r3, r0
 8018bf0:	f000 81f0 	beq.w	8018fd4 <__ieee754_pow+0x764>
 8018bf4:	a310      	add	r3, pc, #64	; (adr r3, 8018c38 <__ieee754_pow+0x3c8>)
 8018bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bfa:	ec51 0b18 	vmov	r0, r1, d8
 8018bfe:	f7e7 fd15 	bl	800062c <__aeabi_dmul>
 8018c02:	a30d      	add	r3, pc, #52	; (adr r3, 8018c38 <__ieee754_pow+0x3c8>)
 8018c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c08:	e6cb      	b.n	80189a2 <__ieee754_pow+0x132>
 8018c0a:	bf00      	nop
 8018c0c:	f3af 8000 	nop.w
 8018c10:	60000000 	.word	0x60000000
 8018c14:	3ff71547 	.word	0x3ff71547
 8018c18:	f85ddf44 	.word	0xf85ddf44
 8018c1c:	3e54ae0b 	.word	0x3e54ae0b
 8018c20:	55555555 	.word	0x55555555
 8018c24:	3fd55555 	.word	0x3fd55555
 8018c28:	652b82fe 	.word	0x652b82fe
 8018c2c:	3ff71547 	.word	0x3ff71547
 8018c30:	00000000 	.word	0x00000000
 8018c34:	bff00000 	.word	0xbff00000
 8018c38:	8800759c 	.word	0x8800759c
 8018c3c:	7e37e43c 	.word	0x7e37e43c
 8018c40:	3ff00000 	.word	0x3ff00000
 8018c44:	3fd00000 	.word	0x3fd00000
 8018c48:	3fe00000 	.word	0x3fe00000
 8018c4c:	408fffff 	.word	0x408fffff
 8018c50:	4bd7      	ldr	r3, [pc, #860]	; (8018fb0 <__ieee754_pow+0x740>)
 8018c52:	ea03 0309 	and.w	r3, r3, r9
 8018c56:	2200      	movs	r2, #0
 8018c58:	b92b      	cbnz	r3, 8018c66 <__ieee754_pow+0x3f6>
 8018c5a:	4bd6      	ldr	r3, [pc, #856]	; (8018fb4 <__ieee754_pow+0x744>)
 8018c5c:	f7e7 fce6 	bl	800062c <__aeabi_dmul>
 8018c60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018c64:	460c      	mov	r4, r1
 8018c66:	1523      	asrs	r3, r4, #20
 8018c68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018c6c:	4413      	add	r3, r2
 8018c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c70:	4bd1      	ldr	r3, [pc, #836]	; (8018fb8 <__ieee754_pow+0x748>)
 8018c72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018c76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018c7a:	429c      	cmp	r4, r3
 8018c7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018c80:	dd08      	ble.n	8018c94 <__ieee754_pow+0x424>
 8018c82:	4bce      	ldr	r3, [pc, #824]	; (8018fbc <__ieee754_pow+0x74c>)
 8018c84:	429c      	cmp	r4, r3
 8018c86:	f340 8163 	ble.w	8018f50 <__ieee754_pow+0x6e0>
 8018c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018c94:	2400      	movs	r4, #0
 8018c96:	00e3      	lsls	r3, r4, #3
 8018c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c9a:	4bc9      	ldr	r3, [pc, #804]	; (8018fc0 <__ieee754_pow+0x750>)
 8018c9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018ca0:	ed93 7b00 	vldr	d7, [r3]
 8018ca4:	4629      	mov	r1, r5
 8018ca6:	ec53 2b17 	vmov	r2, r3, d7
 8018caa:	eeb0 8a47 	vmov.f32	s16, s14
 8018cae:	eef0 8a67 	vmov.f32	s17, s15
 8018cb2:	4682      	mov	sl, r0
 8018cb4:	f7e7 fb02 	bl	80002bc <__aeabi_dsub>
 8018cb8:	4652      	mov	r2, sl
 8018cba:	4606      	mov	r6, r0
 8018cbc:	460f      	mov	r7, r1
 8018cbe:	462b      	mov	r3, r5
 8018cc0:	ec51 0b18 	vmov	r0, r1, d8
 8018cc4:	f7e7 fafc 	bl	80002c0 <__adddf3>
 8018cc8:	4602      	mov	r2, r0
 8018cca:	460b      	mov	r3, r1
 8018ccc:	2000      	movs	r0, #0
 8018cce:	49bd      	ldr	r1, [pc, #756]	; (8018fc4 <__ieee754_pow+0x754>)
 8018cd0:	f7e7 fdd6 	bl	8000880 <__aeabi_ddiv>
 8018cd4:	ec41 0b19 	vmov	d9, r0, r1
 8018cd8:	4602      	mov	r2, r0
 8018cda:	460b      	mov	r3, r1
 8018cdc:	4630      	mov	r0, r6
 8018cde:	4639      	mov	r1, r7
 8018ce0:	f7e7 fca4 	bl	800062c <__aeabi_dmul>
 8018ce4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018cec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	9304      	str	r3, [sp, #16]
 8018cf4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018cf8:	46ab      	mov	fp, r5
 8018cfa:	106d      	asrs	r5, r5, #1
 8018cfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018d00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018d04:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018d08:	2200      	movs	r2, #0
 8018d0a:	4640      	mov	r0, r8
 8018d0c:	4649      	mov	r1, r9
 8018d0e:	4614      	mov	r4, r2
 8018d10:	461d      	mov	r5, r3
 8018d12:	f7e7 fc8b 	bl	800062c <__aeabi_dmul>
 8018d16:	4602      	mov	r2, r0
 8018d18:	460b      	mov	r3, r1
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	4639      	mov	r1, r7
 8018d1e:	f7e7 facd 	bl	80002bc <__aeabi_dsub>
 8018d22:	ec53 2b18 	vmov	r2, r3, d8
 8018d26:	4606      	mov	r6, r0
 8018d28:	460f      	mov	r7, r1
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	4629      	mov	r1, r5
 8018d2e:	f7e7 fac5 	bl	80002bc <__aeabi_dsub>
 8018d32:	4602      	mov	r2, r0
 8018d34:	460b      	mov	r3, r1
 8018d36:	4650      	mov	r0, sl
 8018d38:	4659      	mov	r1, fp
 8018d3a:	f7e7 fabf 	bl	80002bc <__aeabi_dsub>
 8018d3e:	4642      	mov	r2, r8
 8018d40:	464b      	mov	r3, r9
 8018d42:	f7e7 fc73 	bl	800062c <__aeabi_dmul>
 8018d46:	4602      	mov	r2, r0
 8018d48:	460b      	mov	r3, r1
 8018d4a:	4630      	mov	r0, r6
 8018d4c:	4639      	mov	r1, r7
 8018d4e:	f7e7 fab5 	bl	80002bc <__aeabi_dsub>
 8018d52:	ec53 2b19 	vmov	r2, r3, d9
 8018d56:	f7e7 fc69 	bl	800062c <__aeabi_dmul>
 8018d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018d5e:	ec41 0b18 	vmov	d8, r0, r1
 8018d62:	4610      	mov	r0, r2
 8018d64:	4619      	mov	r1, r3
 8018d66:	f7e7 fc61 	bl	800062c <__aeabi_dmul>
 8018d6a:	a37d      	add	r3, pc, #500	; (adr r3, 8018f60 <__ieee754_pow+0x6f0>)
 8018d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d70:	4604      	mov	r4, r0
 8018d72:	460d      	mov	r5, r1
 8018d74:	f7e7 fc5a 	bl	800062c <__aeabi_dmul>
 8018d78:	a37b      	add	r3, pc, #492	; (adr r3, 8018f68 <__ieee754_pow+0x6f8>)
 8018d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7e:	f7e7 fa9f 	bl	80002c0 <__adddf3>
 8018d82:	4622      	mov	r2, r4
 8018d84:	462b      	mov	r3, r5
 8018d86:	f7e7 fc51 	bl	800062c <__aeabi_dmul>
 8018d8a:	a379      	add	r3, pc, #484	; (adr r3, 8018f70 <__ieee754_pow+0x700>)
 8018d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d90:	f7e7 fa96 	bl	80002c0 <__adddf3>
 8018d94:	4622      	mov	r2, r4
 8018d96:	462b      	mov	r3, r5
 8018d98:	f7e7 fc48 	bl	800062c <__aeabi_dmul>
 8018d9c:	a376      	add	r3, pc, #472	; (adr r3, 8018f78 <__ieee754_pow+0x708>)
 8018d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da2:	f7e7 fa8d 	bl	80002c0 <__adddf3>
 8018da6:	4622      	mov	r2, r4
 8018da8:	462b      	mov	r3, r5
 8018daa:	f7e7 fc3f 	bl	800062c <__aeabi_dmul>
 8018dae:	a374      	add	r3, pc, #464	; (adr r3, 8018f80 <__ieee754_pow+0x710>)
 8018db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db4:	f7e7 fa84 	bl	80002c0 <__adddf3>
 8018db8:	4622      	mov	r2, r4
 8018dba:	462b      	mov	r3, r5
 8018dbc:	f7e7 fc36 	bl	800062c <__aeabi_dmul>
 8018dc0:	a371      	add	r3, pc, #452	; (adr r3, 8018f88 <__ieee754_pow+0x718>)
 8018dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc6:	f7e7 fa7b 	bl	80002c0 <__adddf3>
 8018dca:	4622      	mov	r2, r4
 8018dcc:	4606      	mov	r6, r0
 8018dce:	460f      	mov	r7, r1
 8018dd0:	462b      	mov	r3, r5
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	4629      	mov	r1, r5
 8018dd6:	f7e7 fc29 	bl	800062c <__aeabi_dmul>
 8018dda:	4602      	mov	r2, r0
 8018ddc:	460b      	mov	r3, r1
 8018dde:	4630      	mov	r0, r6
 8018de0:	4639      	mov	r1, r7
 8018de2:	f7e7 fc23 	bl	800062c <__aeabi_dmul>
 8018de6:	4642      	mov	r2, r8
 8018de8:	4604      	mov	r4, r0
 8018dea:	460d      	mov	r5, r1
 8018dec:	464b      	mov	r3, r9
 8018dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018df2:	f7e7 fa65 	bl	80002c0 <__adddf3>
 8018df6:	ec53 2b18 	vmov	r2, r3, d8
 8018dfa:	f7e7 fc17 	bl	800062c <__aeabi_dmul>
 8018dfe:	4622      	mov	r2, r4
 8018e00:	462b      	mov	r3, r5
 8018e02:	f7e7 fa5d 	bl	80002c0 <__adddf3>
 8018e06:	4642      	mov	r2, r8
 8018e08:	4682      	mov	sl, r0
 8018e0a:	468b      	mov	fp, r1
 8018e0c:	464b      	mov	r3, r9
 8018e0e:	4640      	mov	r0, r8
 8018e10:	4649      	mov	r1, r9
 8018e12:	f7e7 fc0b 	bl	800062c <__aeabi_dmul>
 8018e16:	4b6c      	ldr	r3, [pc, #432]	; (8018fc8 <__ieee754_pow+0x758>)
 8018e18:	2200      	movs	r2, #0
 8018e1a:	4606      	mov	r6, r0
 8018e1c:	460f      	mov	r7, r1
 8018e1e:	f7e7 fa4f 	bl	80002c0 <__adddf3>
 8018e22:	4652      	mov	r2, sl
 8018e24:	465b      	mov	r3, fp
 8018e26:	f7e7 fa4b 	bl	80002c0 <__adddf3>
 8018e2a:	9c04      	ldr	r4, [sp, #16]
 8018e2c:	460d      	mov	r5, r1
 8018e2e:	4622      	mov	r2, r4
 8018e30:	460b      	mov	r3, r1
 8018e32:	4640      	mov	r0, r8
 8018e34:	4649      	mov	r1, r9
 8018e36:	f7e7 fbf9 	bl	800062c <__aeabi_dmul>
 8018e3a:	4b63      	ldr	r3, [pc, #396]	; (8018fc8 <__ieee754_pow+0x758>)
 8018e3c:	4680      	mov	r8, r0
 8018e3e:	4689      	mov	r9, r1
 8018e40:	2200      	movs	r2, #0
 8018e42:	4620      	mov	r0, r4
 8018e44:	4629      	mov	r1, r5
 8018e46:	f7e7 fa39 	bl	80002bc <__aeabi_dsub>
 8018e4a:	4632      	mov	r2, r6
 8018e4c:	463b      	mov	r3, r7
 8018e4e:	f7e7 fa35 	bl	80002bc <__aeabi_dsub>
 8018e52:	4602      	mov	r2, r0
 8018e54:	460b      	mov	r3, r1
 8018e56:	4650      	mov	r0, sl
 8018e58:	4659      	mov	r1, fp
 8018e5a:	f7e7 fa2f 	bl	80002bc <__aeabi_dsub>
 8018e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e62:	f7e7 fbe3 	bl	800062c <__aeabi_dmul>
 8018e66:	4622      	mov	r2, r4
 8018e68:	4606      	mov	r6, r0
 8018e6a:	460f      	mov	r7, r1
 8018e6c:	462b      	mov	r3, r5
 8018e6e:	ec51 0b18 	vmov	r0, r1, d8
 8018e72:	f7e7 fbdb 	bl	800062c <__aeabi_dmul>
 8018e76:	4602      	mov	r2, r0
 8018e78:	460b      	mov	r3, r1
 8018e7a:	4630      	mov	r0, r6
 8018e7c:	4639      	mov	r1, r7
 8018e7e:	f7e7 fa1f 	bl	80002c0 <__adddf3>
 8018e82:	4606      	mov	r6, r0
 8018e84:	460f      	mov	r7, r1
 8018e86:	4602      	mov	r2, r0
 8018e88:	460b      	mov	r3, r1
 8018e8a:	4640      	mov	r0, r8
 8018e8c:	4649      	mov	r1, r9
 8018e8e:	f7e7 fa17 	bl	80002c0 <__adddf3>
 8018e92:	9c04      	ldr	r4, [sp, #16]
 8018e94:	a33e      	add	r3, pc, #248	; (adr r3, 8018f90 <__ieee754_pow+0x720>)
 8018e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	460d      	mov	r5, r1
 8018e9e:	f7e7 fbc5 	bl	800062c <__aeabi_dmul>
 8018ea2:	4642      	mov	r2, r8
 8018ea4:	ec41 0b18 	vmov	d8, r0, r1
 8018ea8:	464b      	mov	r3, r9
 8018eaa:	4620      	mov	r0, r4
 8018eac:	4629      	mov	r1, r5
 8018eae:	f7e7 fa05 	bl	80002bc <__aeabi_dsub>
 8018eb2:	4602      	mov	r2, r0
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	4630      	mov	r0, r6
 8018eb8:	4639      	mov	r1, r7
 8018eba:	f7e7 f9ff 	bl	80002bc <__aeabi_dsub>
 8018ebe:	a336      	add	r3, pc, #216	; (adr r3, 8018f98 <__ieee754_pow+0x728>)
 8018ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec4:	f7e7 fbb2 	bl	800062c <__aeabi_dmul>
 8018ec8:	a335      	add	r3, pc, #212	; (adr r3, 8018fa0 <__ieee754_pow+0x730>)
 8018eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ece:	4606      	mov	r6, r0
 8018ed0:	460f      	mov	r7, r1
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	4629      	mov	r1, r5
 8018ed6:	f7e7 fba9 	bl	800062c <__aeabi_dmul>
 8018eda:	4602      	mov	r2, r0
 8018edc:	460b      	mov	r3, r1
 8018ede:	4630      	mov	r0, r6
 8018ee0:	4639      	mov	r1, r7
 8018ee2:	f7e7 f9ed 	bl	80002c0 <__adddf3>
 8018ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ee8:	4b38      	ldr	r3, [pc, #224]	; (8018fcc <__ieee754_pow+0x75c>)
 8018eea:	4413      	add	r3, r2
 8018eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ef0:	f7e7 f9e6 	bl	80002c0 <__adddf3>
 8018ef4:	4682      	mov	sl, r0
 8018ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ef8:	468b      	mov	fp, r1
 8018efa:	f7e7 fb2d 	bl	8000558 <__aeabi_i2d>
 8018efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f00:	4b33      	ldr	r3, [pc, #204]	; (8018fd0 <__ieee754_pow+0x760>)
 8018f02:	4413      	add	r3, r2
 8018f04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f08:	4606      	mov	r6, r0
 8018f0a:	460f      	mov	r7, r1
 8018f0c:	4652      	mov	r2, sl
 8018f0e:	465b      	mov	r3, fp
 8018f10:	ec51 0b18 	vmov	r0, r1, d8
 8018f14:	f7e7 f9d4 	bl	80002c0 <__adddf3>
 8018f18:	4642      	mov	r2, r8
 8018f1a:	464b      	mov	r3, r9
 8018f1c:	f7e7 f9d0 	bl	80002c0 <__adddf3>
 8018f20:	4632      	mov	r2, r6
 8018f22:	463b      	mov	r3, r7
 8018f24:	f7e7 f9cc 	bl	80002c0 <__adddf3>
 8018f28:	9c04      	ldr	r4, [sp, #16]
 8018f2a:	4632      	mov	r2, r6
 8018f2c:	463b      	mov	r3, r7
 8018f2e:	4620      	mov	r0, r4
 8018f30:	460d      	mov	r5, r1
 8018f32:	f7e7 f9c3 	bl	80002bc <__aeabi_dsub>
 8018f36:	4642      	mov	r2, r8
 8018f38:	464b      	mov	r3, r9
 8018f3a:	f7e7 f9bf 	bl	80002bc <__aeabi_dsub>
 8018f3e:	ec53 2b18 	vmov	r2, r3, d8
 8018f42:	f7e7 f9bb 	bl	80002bc <__aeabi_dsub>
 8018f46:	4602      	mov	r2, r0
 8018f48:	460b      	mov	r3, r1
 8018f4a:	4650      	mov	r0, sl
 8018f4c:	4659      	mov	r1, fp
 8018f4e:	e606      	b.n	8018b5e <__ieee754_pow+0x2ee>
 8018f50:	2401      	movs	r4, #1
 8018f52:	e6a0      	b.n	8018c96 <__ieee754_pow+0x426>
 8018f54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018fa8 <__ieee754_pow+0x738>
 8018f58:	e60d      	b.n	8018b76 <__ieee754_pow+0x306>
 8018f5a:	bf00      	nop
 8018f5c:	f3af 8000 	nop.w
 8018f60:	4a454eef 	.word	0x4a454eef
 8018f64:	3fca7e28 	.word	0x3fca7e28
 8018f68:	93c9db65 	.word	0x93c9db65
 8018f6c:	3fcd864a 	.word	0x3fcd864a
 8018f70:	a91d4101 	.word	0xa91d4101
 8018f74:	3fd17460 	.word	0x3fd17460
 8018f78:	518f264d 	.word	0x518f264d
 8018f7c:	3fd55555 	.word	0x3fd55555
 8018f80:	db6fabff 	.word	0xdb6fabff
 8018f84:	3fdb6db6 	.word	0x3fdb6db6
 8018f88:	33333303 	.word	0x33333303
 8018f8c:	3fe33333 	.word	0x3fe33333
 8018f90:	e0000000 	.word	0xe0000000
 8018f94:	3feec709 	.word	0x3feec709
 8018f98:	dc3a03fd 	.word	0xdc3a03fd
 8018f9c:	3feec709 	.word	0x3feec709
 8018fa0:	145b01f5 	.word	0x145b01f5
 8018fa4:	be3e2fe0 	.word	0xbe3e2fe0
 8018fa8:	00000000 	.word	0x00000000
 8018fac:	3ff00000 	.word	0x3ff00000
 8018fb0:	7ff00000 	.word	0x7ff00000
 8018fb4:	43400000 	.word	0x43400000
 8018fb8:	0003988e 	.word	0x0003988e
 8018fbc:	000bb679 	.word	0x000bb679
 8018fc0:	08020370 	.word	0x08020370
 8018fc4:	3ff00000 	.word	0x3ff00000
 8018fc8:	40080000 	.word	0x40080000
 8018fcc:	08020390 	.word	0x08020390
 8018fd0:	08020380 	.word	0x08020380
 8018fd4:	a3b5      	add	r3, pc, #724	; (adr r3, 80192ac <__ieee754_pow+0xa3c>)
 8018fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fda:	4640      	mov	r0, r8
 8018fdc:	4649      	mov	r1, r9
 8018fde:	f7e7 f96f 	bl	80002c0 <__adddf3>
 8018fe2:	4622      	mov	r2, r4
 8018fe4:	ec41 0b1a 	vmov	d10, r0, r1
 8018fe8:	462b      	mov	r3, r5
 8018fea:	4630      	mov	r0, r6
 8018fec:	4639      	mov	r1, r7
 8018fee:	f7e7 f965 	bl	80002bc <__aeabi_dsub>
 8018ff2:	4602      	mov	r2, r0
 8018ff4:	460b      	mov	r3, r1
 8018ff6:	ec51 0b1a 	vmov	r0, r1, d10
 8018ffa:	f7e7 fda7 	bl	8000b4c <__aeabi_dcmpgt>
 8018ffe:	2800      	cmp	r0, #0
 8019000:	f47f adf8 	bne.w	8018bf4 <__ieee754_pow+0x384>
 8019004:	4aa4      	ldr	r2, [pc, #656]	; (8019298 <__ieee754_pow+0xa28>)
 8019006:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801900a:	4293      	cmp	r3, r2
 801900c:	f340 810b 	ble.w	8019226 <__ieee754_pow+0x9b6>
 8019010:	151b      	asrs	r3, r3, #20
 8019012:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019016:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801901a:	fa4a f303 	asr.w	r3, sl, r3
 801901e:	445b      	add	r3, fp
 8019020:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019024:	4e9d      	ldr	r6, [pc, #628]	; (801929c <__ieee754_pow+0xa2c>)
 8019026:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801902a:	4116      	asrs	r6, r2
 801902c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019030:	2000      	movs	r0, #0
 8019032:	ea23 0106 	bic.w	r1, r3, r6
 8019036:	f1c2 0214 	rsb	r2, r2, #20
 801903a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801903e:	fa4a fa02 	asr.w	sl, sl, r2
 8019042:	f1bb 0f00 	cmp.w	fp, #0
 8019046:	4602      	mov	r2, r0
 8019048:	460b      	mov	r3, r1
 801904a:	4620      	mov	r0, r4
 801904c:	4629      	mov	r1, r5
 801904e:	bfb8      	it	lt
 8019050:	f1ca 0a00 	rsblt	sl, sl, #0
 8019054:	f7e7 f932 	bl	80002bc <__aeabi_dsub>
 8019058:	ec41 0b19 	vmov	d9, r0, r1
 801905c:	4642      	mov	r2, r8
 801905e:	464b      	mov	r3, r9
 8019060:	ec51 0b19 	vmov	r0, r1, d9
 8019064:	f7e7 f92c 	bl	80002c0 <__adddf3>
 8019068:	2400      	movs	r4, #0
 801906a:	a379      	add	r3, pc, #484	; (adr r3, 8019250 <__ieee754_pow+0x9e0>)
 801906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019070:	4620      	mov	r0, r4
 8019072:	460d      	mov	r5, r1
 8019074:	f7e7 fada 	bl	800062c <__aeabi_dmul>
 8019078:	ec53 2b19 	vmov	r2, r3, d9
 801907c:	4606      	mov	r6, r0
 801907e:	460f      	mov	r7, r1
 8019080:	4620      	mov	r0, r4
 8019082:	4629      	mov	r1, r5
 8019084:	f7e7 f91a 	bl	80002bc <__aeabi_dsub>
 8019088:	4602      	mov	r2, r0
 801908a:	460b      	mov	r3, r1
 801908c:	4640      	mov	r0, r8
 801908e:	4649      	mov	r1, r9
 8019090:	f7e7 f914 	bl	80002bc <__aeabi_dsub>
 8019094:	a370      	add	r3, pc, #448	; (adr r3, 8019258 <__ieee754_pow+0x9e8>)
 8019096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909a:	f7e7 fac7 	bl	800062c <__aeabi_dmul>
 801909e:	a370      	add	r3, pc, #448	; (adr r3, 8019260 <__ieee754_pow+0x9f0>)
 80190a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a4:	4680      	mov	r8, r0
 80190a6:	4689      	mov	r9, r1
 80190a8:	4620      	mov	r0, r4
 80190aa:	4629      	mov	r1, r5
 80190ac:	f7e7 fabe 	bl	800062c <__aeabi_dmul>
 80190b0:	4602      	mov	r2, r0
 80190b2:	460b      	mov	r3, r1
 80190b4:	4640      	mov	r0, r8
 80190b6:	4649      	mov	r1, r9
 80190b8:	f7e7 f902 	bl	80002c0 <__adddf3>
 80190bc:	4604      	mov	r4, r0
 80190be:	460d      	mov	r5, r1
 80190c0:	4602      	mov	r2, r0
 80190c2:	460b      	mov	r3, r1
 80190c4:	4630      	mov	r0, r6
 80190c6:	4639      	mov	r1, r7
 80190c8:	f7e7 f8fa 	bl	80002c0 <__adddf3>
 80190cc:	4632      	mov	r2, r6
 80190ce:	463b      	mov	r3, r7
 80190d0:	4680      	mov	r8, r0
 80190d2:	4689      	mov	r9, r1
 80190d4:	f7e7 f8f2 	bl	80002bc <__aeabi_dsub>
 80190d8:	4602      	mov	r2, r0
 80190da:	460b      	mov	r3, r1
 80190dc:	4620      	mov	r0, r4
 80190de:	4629      	mov	r1, r5
 80190e0:	f7e7 f8ec 	bl	80002bc <__aeabi_dsub>
 80190e4:	4642      	mov	r2, r8
 80190e6:	4606      	mov	r6, r0
 80190e8:	460f      	mov	r7, r1
 80190ea:	464b      	mov	r3, r9
 80190ec:	4640      	mov	r0, r8
 80190ee:	4649      	mov	r1, r9
 80190f0:	f7e7 fa9c 	bl	800062c <__aeabi_dmul>
 80190f4:	a35c      	add	r3, pc, #368	; (adr r3, 8019268 <__ieee754_pow+0x9f8>)
 80190f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190fa:	4604      	mov	r4, r0
 80190fc:	460d      	mov	r5, r1
 80190fe:	f7e7 fa95 	bl	800062c <__aeabi_dmul>
 8019102:	a35b      	add	r3, pc, #364	; (adr r3, 8019270 <__ieee754_pow+0xa00>)
 8019104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019108:	f7e7 f8d8 	bl	80002bc <__aeabi_dsub>
 801910c:	4622      	mov	r2, r4
 801910e:	462b      	mov	r3, r5
 8019110:	f7e7 fa8c 	bl	800062c <__aeabi_dmul>
 8019114:	a358      	add	r3, pc, #352	; (adr r3, 8019278 <__ieee754_pow+0xa08>)
 8019116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801911a:	f7e7 f8d1 	bl	80002c0 <__adddf3>
 801911e:	4622      	mov	r2, r4
 8019120:	462b      	mov	r3, r5
 8019122:	f7e7 fa83 	bl	800062c <__aeabi_dmul>
 8019126:	a356      	add	r3, pc, #344	; (adr r3, 8019280 <__ieee754_pow+0xa10>)
 8019128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912c:	f7e7 f8c6 	bl	80002bc <__aeabi_dsub>
 8019130:	4622      	mov	r2, r4
 8019132:	462b      	mov	r3, r5
 8019134:	f7e7 fa7a 	bl	800062c <__aeabi_dmul>
 8019138:	a353      	add	r3, pc, #332	; (adr r3, 8019288 <__ieee754_pow+0xa18>)
 801913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801913e:	f7e7 f8bf 	bl	80002c0 <__adddf3>
 8019142:	4622      	mov	r2, r4
 8019144:	462b      	mov	r3, r5
 8019146:	f7e7 fa71 	bl	800062c <__aeabi_dmul>
 801914a:	4602      	mov	r2, r0
 801914c:	460b      	mov	r3, r1
 801914e:	4640      	mov	r0, r8
 8019150:	4649      	mov	r1, r9
 8019152:	f7e7 f8b3 	bl	80002bc <__aeabi_dsub>
 8019156:	4604      	mov	r4, r0
 8019158:	460d      	mov	r5, r1
 801915a:	4602      	mov	r2, r0
 801915c:	460b      	mov	r3, r1
 801915e:	4640      	mov	r0, r8
 8019160:	4649      	mov	r1, r9
 8019162:	f7e7 fa63 	bl	800062c <__aeabi_dmul>
 8019166:	2200      	movs	r2, #0
 8019168:	ec41 0b19 	vmov	d9, r0, r1
 801916c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019170:	4620      	mov	r0, r4
 8019172:	4629      	mov	r1, r5
 8019174:	f7e7 f8a2 	bl	80002bc <__aeabi_dsub>
 8019178:	4602      	mov	r2, r0
 801917a:	460b      	mov	r3, r1
 801917c:	ec51 0b19 	vmov	r0, r1, d9
 8019180:	f7e7 fb7e 	bl	8000880 <__aeabi_ddiv>
 8019184:	4632      	mov	r2, r6
 8019186:	4604      	mov	r4, r0
 8019188:	460d      	mov	r5, r1
 801918a:	463b      	mov	r3, r7
 801918c:	4640      	mov	r0, r8
 801918e:	4649      	mov	r1, r9
 8019190:	f7e7 fa4c 	bl	800062c <__aeabi_dmul>
 8019194:	4632      	mov	r2, r6
 8019196:	463b      	mov	r3, r7
 8019198:	f7e7 f892 	bl	80002c0 <__adddf3>
 801919c:	4602      	mov	r2, r0
 801919e:	460b      	mov	r3, r1
 80191a0:	4620      	mov	r0, r4
 80191a2:	4629      	mov	r1, r5
 80191a4:	f7e7 f88a 	bl	80002bc <__aeabi_dsub>
 80191a8:	4642      	mov	r2, r8
 80191aa:	464b      	mov	r3, r9
 80191ac:	f7e7 f886 	bl	80002bc <__aeabi_dsub>
 80191b0:	460b      	mov	r3, r1
 80191b2:	4602      	mov	r2, r0
 80191b4:	493a      	ldr	r1, [pc, #232]	; (80192a0 <__ieee754_pow+0xa30>)
 80191b6:	2000      	movs	r0, #0
 80191b8:	f7e7 f880 	bl	80002bc <__aeabi_dsub>
 80191bc:	e9cd 0100 	strd	r0, r1, [sp]
 80191c0:	9b01      	ldr	r3, [sp, #4]
 80191c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80191c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80191ca:	da2f      	bge.n	801922c <__ieee754_pow+0x9bc>
 80191cc:	4650      	mov	r0, sl
 80191ce:	ed9d 0b00 	vldr	d0, [sp]
 80191d2:	f001 fc95 	bl	801ab00 <scalbn>
 80191d6:	ec51 0b10 	vmov	r0, r1, d0
 80191da:	ec53 2b18 	vmov	r2, r3, d8
 80191de:	f7ff bbe0 	b.w	80189a2 <__ieee754_pow+0x132>
 80191e2:	4b30      	ldr	r3, [pc, #192]	; (80192a4 <__ieee754_pow+0xa34>)
 80191e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80191e8:	429e      	cmp	r6, r3
 80191ea:	f77f af0b 	ble.w	8019004 <__ieee754_pow+0x794>
 80191ee:	4b2e      	ldr	r3, [pc, #184]	; (80192a8 <__ieee754_pow+0xa38>)
 80191f0:	440b      	add	r3, r1
 80191f2:	4303      	orrs	r3, r0
 80191f4:	d00b      	beq.n	801920e <__ieee754_pow+0x99e>
 80191f6:	a326      	add	r3, pc, #152	; (adr r3, 8019290 <__ieee754_pow+0xa20>)
 80191f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191fc:	ec51 0b18 	vmov	r0, r1, d8
 8019200:	f7e7 fa14 	bl	800062c <__aeabi_dmul>
 8019204:	a322      	add	r3, pc, #136	; (adr r3, 8019290 <__ieee754_pow+0xa20>)
 8019206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920a:	f7ff bbca 	b.w	80189a2 <__ieee754_pow+0x132>
 801920e:	4622      	mov	r2, r4
 8019210:	462b      	mov	r3, r5
 8019212:	f7e7 f853 	bl	80002bc <__aeabi_dsub>
 8019216:	4642      	mov	r2, r8
 8019218:	464b      	mov	r3, r9
 801921a:	f7e7 fc8d 	bl	8000b38 <__aeabi_dcmpge>
 801921e:	2800      	cmp	r0, #0
 8019220:	f43f aef0 	beq.w	8019004 <__ieee754_pow+0x794>
 8019224:	e7e7      	b.n	80191f6 <__ieee754_pow+0x986>
 8019226:	f04f 0a00 	mov.w	sl, #0
 801922a:	e717      	b.n	801905c <__ieee754_pow+0x7ec>
 801922c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019230:	4619      	mov	r1, r3
 8019232:	e7d2      	b.n	80191da <__ieee754_pow+0x96a>
 8019234:	491a      	ldr	r1, [pc, #104]	; (80192a0 <__ieee754_pow+0xa30>)
 8019236:	2000      	movs	r0, #0
 8019238:	f7ff bb9e 	b.w	8018978 <__ieee754_pow+0x108>
 801923c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019240:	f7ff bb9a 	b.w	8018978 <__ieee754_pow+0x108>
 8019244:	9000      	str	r0, [sp, #0]
 8019246:	f7ff bb76 	b.w	8018936 <__ieee754_pow+0xc6>
 801924a:	2100      	movs	r1, #0
 801924c:	f7ff bb60 	b.w	8018910 <__ieee754_pow+0xa0>
 8019250:	00000000 	.word	0x00000000
 8019254:	3fe62e43 	.word	0x3fe62e43
 8019258:	fefa39ef 	.word	0xfefa39ef
 801925c:	3fe62e42 	.word	0x3fe62e42
 8019260:	0ca86c39 	.word	0x0ca86c39
 8019264:	be205c61 	.word	0xbe205c61
 8019268:	72bea4d0 	.word	0x72bea4d0
 801926c:	3e663769 	.word	0x3e663769
 8019270:	c5d26bf1 	.word	0xc5d26bf1
 8019274:	3ebbbd41 	.word	0x3ebbbd41
 8019278:	af25de2c 	.word	0xaf25de2c
 801927c:	3f11566a 	.word	0x3f11566a
 8019280:	16bebd93 	.word	0x16bebd93
 8019284:	3f66c16c 	.word	0x3f66c16c
 8019288:	5555553e 	.word	0x5555553e
 801928c:	3fc55555 	.word	0x3fc55555
 8019290:	c2f8f359 	.word	0xc2f8f359
 8019294:	01a56e1f 	.word	0x01a56e1f
 8019298:	3fe00000 	.word	0x3fe00000
 801929c:	000fffff 	.word	0x000fffff
 80192a0:	3ff00000 	.word	0x3ff00000
 80192a4:	4090cbff 	.word	0x4090cbff
 80192a8:	3f6f3400 	.word	0x3f6f3400
 80192ac:	652b82fe 	.word	0x652b82fe
 80192b0:	3c971547 	.word	0x3c971547
 80192b4:	00000000 	.word	0x00000000

080192b8 <__ieee754_rem_pio2>:
 80192b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192bc:	ed2d 8b02 	vpush	{d8}
 80192c0:	ec55 4b10 	vmov	r4, r5, d0
 80192c4:	4bca      	ldr	r3, [pc, #808]	; (80195f0 <__ieee754_rem_pio2+0x338>)
 80192c6:	b08b      	sub	sp, #44	; 0x2c
 80192c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80192cc:	4598      	cmp	r8, r3
 80192ce:	4682      	mov	sl, r0
 80192d0:	9502      	str	r5, [sp, #8]
 80192d2:	dc08      	bgt.n	80192e6 <__ieee754_rem_pio2+0x2e>
 80192d4:	2200      	movs	r2, #0
 80192d6:	2300      	movs	r3, #0
 80192d8:	ed80 0b00 	vstr	d0, [r0]
 80192dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80192e0:	f04f 0b00 	mov.w	fp, #0
 80192e4:	e028      	b.n	8019338 <__ieee754_rem_pio2+0x80>
 80192e6:	4bc3      	ldr	r3, [pc, #780]	; (80195f4 <__ieee754_rem_pio2+0x33c>)
 80192e8:	4598      	cmp	r8, r3
 80192ea:	dc78      	bgt.n	80193de <__ieee754_rem_pio2+0x126>
 80192ec:	9b02      	ldr	r3, [sp, #8]
 80192ee:	4ec2      	ldr	r6, [pc, #776]	; (80195f8 <__ieee754_rem_pio2+0x340>)
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	ee10 0a10 	vmov	r0, s0
 80192f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x300>)
 80192f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192fc:	4629      	mov	r1, r5
 80192fe:	dd39      	ble.n	8019374 <__ieee754_rem_pio2+0xbc>
 8019300:	f7e6 ffdc 	bl	80002bc <__aeabi_dsub>
 8019304:	45b0      	cmp	r8, r6
 8019306:	4604      	mov	r4, r0
 8019308:	460d      	mov	r5, r1
 801930a:	d01b      	beq.n	8019344 <__ieee754_rem_pio2+0x8c>
 801930c:	a3ac      	add	r3, pc, #688	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x308>)
 801930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019312:	f7e6 ffd3 	bl	80002bc <__aeabi_dsub>
 8019316:	4602      	mov	r2, r0
 8019318:	460b      	mov	r3, r1
 801931a:	e9ca 2300 	strd	r2, r3, [sl]
 801931e:	4620      	mov	r0, r4
 8019320:	4629      	mov	r1, r5
 8019322:	f7e6 ffcb 	bl	80002bc <__aeabi_dsub>
 8019326:	a3a6      	add	r3, pc, #664	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x308>)
 8019328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801932c:	f7e6 ffc6 	bl	80002bc <__aeabi_dsub>
 8019330:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019334:	f04f 0b01 	mov.w	fp, #1
 8019338:	4658      	mov	r0, fp
 801933a:	b00b      	add	sp, #44	; 0x2c
 801933c:	ecbd 8b02 	vpop	{d8}
 8019340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019344:	a3a0      	add	r3, pc, #640	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x310>)
 8019346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934a:	f7e6 ffb7 	bl	80002bc <__aeabi_dsub>
 801934e:	a3a0      	add	r3, pc, #640	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x318>)
 8019350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019354:	4604      	mov	r4, r0
 8019356:	460d      	mov	r5, r1
 8019358:	f7e6 ffb0 	bl	80002bc <__aeabi_dsub>
 801935c:	4602      	mov	r2, r0
 801935e:	460b      	mov	r3, r1
 8019360:	e9ca 2300 	strd	r2, r3, [sl]
 8019364:	4620      	mov	r0, r4
 8019366:	4629      	mov	r1, r5
 8019368:	f7e6 ffa8 	bl	80002bc <__aeabi_dsub>
 801936c:	a398      	add	r3, pc, #608	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x318>)
 801936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019372:	e7db      	b.n	801932c <__ieee754_rem_pio2+0x74>
 8019374:	f7e6 ffa4 	bl	80002c0 <__adddf3>
 8019378:	45b0      	cmp	r8, r6
 801937a:	4604      	mov	r4, r0
 801937c:	460d      	mov	r5, r1
 801937e:	d016      	beq.n	80193ae <__ieee754_rem_pio2+0xf6>
 8019380:	a38f      	add	r3, pc, #572	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x308>)
 8019382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019386:	f7e6 ff9b 	bl	80002c0 <__adddf3>
 801938a:	4602      	mov	r2, r0
 801938c:	460b      	mov	r3, r1
 801938e:	e9ca 2300 	strd	r2, r3, [sl]
 8019392:	4620      	mov	r0, r4
 8019394:	4629      	mov	r1, r5
 8019396:	f7e6 ff91 	bl	80002bc <__aeabi_dsub>
 801939a:	a389      	add	r3, pc, #548	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x308>)
 801939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193a0:	f7e6 ff8e 	bl	80002c0 <__adddf3>
 80193a4:	f04f 3bff 	mov.w	fp, #4294967295
 80193a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80193ac:	e7c4      	b.n	8019338 <__ieee754_rem_pio2+0x80>
 80193ae:	a386      	add	r3, pc, #536	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x310>)
 80193b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b4:	f7e6 ff84 	bl	80002c0 <__adddf3>
 80193b8:	a385      	add	r3, pc, #532	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x318>)
 80193ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193be:	4604      	mov	r4, r0
 80193c0:	460d      	mov	r5, r1
 80193c2:	f7e6 ff7d 	bl	80002c0 <__adddf3>
 80193c6:	4602      	mov	r2, r0
 80193c8:	460b      	mov	r3, r1
 80193ca:	e9ca 2300 	strd	r2, r3, [sl]
 80193ce:	4620      	mov	r0, r4
 80193d0:	4629      	mov	r1, r5
 80193d2:	f7e6 ff73 	bl	80002bc <__aeabi_dsub>
 80193d6:	a37e      	add	r3, pc, #504	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x318>)
 80193d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193dc:	e7e0      	b.n	80193a0 <__ieee754_rem_pio2+0xe8>
 80193de:	4b87      	ldr	r3, [pc, #540]	; (80195fc <__ieee754_rem_pio2+0x344>)
 80193e0:	4598      	cmp	r8, r3
 80193e2:	f300 80d9 	bgt.w	8019598 <__ieee754_rem_pio2+0x2e0>
 80193e6:	f001 fae3 	bl	801a9b0 <fabs>
 80193ea:	ec55 4b10 	vmov	r4, r5, d0
 80193ee:	ee10 0a10 	vmov	r0, s0
 80193f2:	a379      	add	r3, pc, #484	; (adr r3, 80195d8 <__ieee754_rem_pio2+0x320>)
 80193f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f8:	4629      	mov	r1, r5
 80193fa:	f7e7 f917 	bl	800062c <__aeabi_dmul>
 80193fe:	4b80      	ldr	r3, [pc, #512]	; (8019600 <__ieee754_rem_pio2+0x348>)
 8019400:	2200      	movs	r2, #0
 8019402:	f7e6 ff5d 	bl	80002c0 <__adddf3>
 8019406:	f7e7 fbc1 	bl	8000b8c <__aeabi_d2iz>
 801940a:	4683      	mov	fp, r0
 801940c:	f7e7 f8a4 	bl	8000558 <__aeabi_i2d>
 8019410:	4602      	mov	r2, r0
 8019412:	460b      	mov	r3, r1
 8019414:	ec43 2b18 	vmov	d8, r2, r3
 8019418:	a367      	add	r3, pc, #412	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x300>)
 801941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801941e:	f7e7 f905 	bl	800062c <__aeabi_dmul>
 8019422:	4602      	mov	r2, r0
 8019424:	460b      	mov	r3, r1
 8019426:	4620      	mov	r0, r4
 8019428:	4629      	mov	r1, r5
 801942a:	f7e6 ff47 	bl	80002bc <__aeabi_dsub>
 801942e:	a364      	add	r3, pc, #400	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x308>)
 8019430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019434:	4606      	mov	r6, r0
 8019436:	460f      	mov	r7, r1
 8019438:	ec51 0b18 	vmov	r0, r1, d8
 801943c:	f7e7 f8f6 	bl	800062c <__aeabi_dmul>
 8019440:	f1bb 0f1f 	cmp.w	fp, #31
 8019444:	4604      	mov	r4, r0
 8019446:	460d      	mov	r5, r1
 8019448:	dc0d      	bgt.n	8019466 <__ieee754_rem_pio2+0x1ae>
 801944a:	4b6e      	ldr	r3, [pc, #440]	; (8019604 <__ieee754_rem_pio2+0x34c>)
 801944c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019454:	4543      	cmp	r3, r8
 8019456:	d006      	beq.n	8019466 <__ieee754_rem_pio2+0x1ae>
 8019458:	4622      	mov	r2, r4
 801945a:	462b      	mov	r3, r5
 801945c:	4630      	mov	r0, r6
 801945e:	4639      	mov	r1, r7
 8019460:	f7e6 ff2c 	bl	80002bc <__aeabi_dsub>
 8019464:	e00f      	b.n	8019486 <__ieee754_rem_pio2+0x1ce>
 8019466:	462b      	mov	r3, r5
 8019468:	4622      	mov	r2, r4
 801946a:	4630      	mov	r0, r6
 801946c:	4639      	mov	r1, r7
 801946e:	f7e6 ff25 	bl	80002bc <__aeabi_dsub>
 8019472:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019476:	9303      	str	r3, [sp, #12]
 8019478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801947c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019480:	f1b8 0f10 	cmp.w	r8, #16
 8019484:	dc02      	bgt.n	801948c <__ieee754_rem_pio2+0x1d4>
 8019486:	e9ca 0100 	strd	r0, r1, [sl]
 801948a:	e039      	b.n	8019500 <__ieee754_rem_pio2+0x248>
 801948c:	a34e      	add	r3, pc, #312	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x310>)
 801948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019492:	ec51 0b18 	vmov	r0, r1, d8
 8019496:	f7e7 f8c9 	bl	800062c <__aeabi_dmul>
 801949a:	4604      	mov	r4, r0
 801949c:	460d      	mov	r5, r1
 801949e:	4602      	mov	r2, r0
 80194a0:	460b      	mov	r3, r1
 80194a2:	4630      	mov	r0, r6
 80194a4:	4639      	mov	r1, r7
 80194a6:	f7e6 ff09 	bl	80002bc <__aeabi_dsub>
 80194aa:	4602      	mov	r2, r0
 80194ac:	460b      	mov	r3, r1
 80194ae:	4680      	mov	r8, r0
 80194b0:	4689      	mov	r9, r1
 80194b2:	4630      	mov	r0, r6
 80194b4:	4639      	mov	r1, r7
 80194b6:	f7e6 ff01 	bl	80002bc <__aeabi_dsub>
 80194ba:	4622      	mov	r2, r4
 80194bc:	462b      	mov	r3, r5
 80194be:	f7e6 fefd 	bl	80002bc <__aeabi_dsub>
 80194c2:	a343      	add	r3, pc, #268	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x318>)
 80194c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c8:	4604      	mov	r4, r0
 80194ca:	460d      	mov	r5, r1
 80194cc:	ec51 0b18 	vmov	r0, r1, d8
 80194d0:	f7e7 f8ac 	bl	800062c <__aeabi_dmul>
 80194d4:	4622      	mov	r2, r4
 80194d6:	462b      	mov	r3, r5
 80194d8:	f7e6 fef0 	bl	80002bc <__aeabi_dsub>
 80194dc:	4602      	mov	r2, r0
 80194de:	460b      	mov	r3, r1
 80194e0:	4604      	mov	r4, r0
 80194e2:	460d      	mov	r5, r1
 80194e4:	4640      	mov	r0, r8
 80194e6:	4649      	mov	r1, r9
 80194e8:	f7e6 fee8 	bl	80002bc <__aeabi_dsub>
 80194ec:	9a03      	ldr	r2, [sp, #12]
 80194ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80194f2:	1ad3      	subs	r3, r2, r3
 80194f4:	2b31      	cmp	r3, #49	; 0x31
 80194f6:	dc24      	bgt.n	8019542 <__ieee754_rem_pio2+0x28a>
 80194f8:	e9ca 0100 	strd	r0, r1, [sl]
 80194fc:	4646      	mov	r6, r8
 80194fe:	464f      	mov	r7, r9
 8019500:	e9da 8900 	ldrd	r8, r9, [sl]
 8019504:	4630      	mov	r0, r6
 8019506:	4642      	mov	r2, r8
 8019508:	464b      	mov	r3, r9
 801950a:	4639      	mov	r1, r7
 801950c:	f7e6 fed6 	bl	80002bc <__aeabi_dsub>
 8019510:	462b      	mov	r3, r5
 8019512:	4622      	mov	r2, r4
 8019514:	f7e6 fed2 	bl	80002bc <__aeabi_dsub>
 8019518:	9b02      	ldr	r3, [sp, #8]
 801951a:	2b00      	cmp	r3, #0
 801951c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019520:	f6bf af0a 	bge.w	8019338 <__ieee754_rem_pio2+0x80>
 8019524:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019528:	f8ca 3004 	str.w	r3, [sl, #4]
 801952c:	f8ca 8000 	str.w	r8, [sl]
 8019530:	f8ca 0008 	str.w	r0, [sl, #8]
 8019534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019538:	f8ca 300c 	str.w	r3, [sl, #12]
 801953c:	f1cb 0b00 	rsb	fp, fp, #0
 8019540:	e6fa      	b.n	8019338 <__ieee754_rem_pio2+0x80>
 8019542:	a327      	add	r3, pc, #156	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x328>)
 8019544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019548:	ec51 0b18 	vmov	r0, r1, d8
 801954c:	f7e7 f86e 	bl	800062c <__aeabi_dmul>
 8019550:	4604      	mov	r4, r0
 8019552:	460d      	mov	r5, r1
 8019554:	4602      	mov	r2, r0
 8019556:	460b      	mov	r3, r1
 8019558:	4640      	mov	r0, r8
 801955a:	4649      	mov	r1, r9
 801955c:	f7e6 feae 	bl	80002bc <__aeabi_dsub>
 8019560:	4602      	mov	r2, r0
 8019562:	460b      	mov	r3, r1
 8019564:	4606      	mov	r6, r0
 8019566:	460f      	mov	r7, r1
 8019568:	4640      	mov	r0, r8
 801956a:	4649      	mov	r1, r9
 801956c:	f7e6 fea6 	bl	80002bc <__aeabi_dsub>
 8019570:	4622      	mov	r2, r4
 8019572:	462b      	mov	r3, r5
 8019574:	f7e6 fea2 	bl	80002bc <__aeabi_dsub>
 8019578:	a31b      	add	r3, pc, #108	; (adr r3, 80195e8 <__ieee754_rem_pio2+0x330>)
 801957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801957e:	4604      	mov	r4, r0
 8019580:	460d      	mov	r5, r1
 8019582:	ec51 0b18 	vmov	r0, r1, d8
 8019586:	f7e7 f851 	bl	800062c <__aeabi_dmul>
 801958a:	4622      	mov	r2, r4
 801958c:	462b      	mov	r3, r5
 801958e:	f7e6 fe95 	bl	80002bc <__aeabi_dsub>
 8019592:	4604      	mov	r4, r0
 8019594:	460d      	mov	r5, r1
 8019596:	e75f      	b.n	8019458 <__ieee754_rem_pio2+0x1a0>
 8019598:	4b1b      	ldr	r3, [pc, #108]	; (8019608 <__ieee754_rem_pio2+0x350>)
 801959a:	4598      	cmp	r8, r3
 801959c:	dd36      	ble.n	801960c <__ieee754_rem_pio2+0x354>
 801959e:	ee10 2a10 	vmov	r2, s0
 80195a2:	462b      	mov	r3, r5
 80195a4:	4620      	mov	r0, r4
 80195a6:	4629      	mov	r1, r5
 80195a8:	f7e6 fe88 	bl	80002bc <__aeabi_dsub>
 80195ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80195b0:	e9ca 0100 	strd	r0, r1, [sl]
 80195b4:	e694      	b.n	80192e0 <__ieee754_rem_pio2+0x28>
 80195b6:	bf00      	nop
 80195b8:	54400000 	.word	0x54400000
 80195bc:	3ff921fb 	.word	0x3ff921fb
 80195c0:	1a626331 	.word	0x1a626331
 80195c4:	3dd0b461 	.word	0x3dd0b461
 80195c8:	1a600000 	.word	0x1a600000
 80195cc:	3dd0b461 	.word	0x3dd0b461
 80195d0:	2e037073 	.word	0x2e037073
 80195d4:	3ba3198a 	.word	0x3ba3198a
 80195d8:	6dc9c883 	.word	0x6dc9c883
 80195dc:	3fe45f30 	.word	0x3fe45f30
 80195e0:	2e000000 	.word	0x2e000000
 80195e4:	3ba3198a 	.word	0x3ba3198a
 80195e8:	252049c1 	.word	0x252049c1
 80195ec:	397b839a 	.word	0x397b839a
 80195f0:	3fe921fb 	.word	0x3fe921fb
 80195f4:	4002d97b 	.word	0x4002d97b
 80195f8:	3ff921fb 	.word	0x3ff921fb
 80195fc:	413921fb 	.word	0x413921fb
 8019600:	3fe00000 	.word	0x3fe00000
 8019604:	080203a0 	.word	0x080203a0
 8019608:	7fefffff 	.word	0x7fefffff
 801960c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019610:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8019614:	ee10 0a10 	vmov	r0, s0
 8019618:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801961c:	ee10 6a10 	vmov	r6, s0
 8019620:	460f      	mov	r7, r1
 8019622:	f7e7 fab3 	bl	8000b8c <__aeabi_d2iz>
 8019626:	f7e6 ff97 	bl	8000558 <__aeabi_i2d>
 801962a:	4602      	mov	r2, r0
 801962c:	460b      	mov	r3, r1
 801962e:	4630      	mov	r0, r6
 8019630:	4639      	mov	r1, r7
 8019632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019636:	f7e6 fe41 	bl	80002bc <__aeabi_dsub>
 801963a:	4b22      	ldr	r3, [pc, #136]	; (80196c4 <__ieee754_rem_pio2+0x40c>)
 801963c:	2200      	movs	r2, #0
 801963e:	f7e6 fff5 	bl	800062c <__aeabi_dmul>
 8019642:	460f      	mov	r7, r1
 8019644:	4606      	mov	r6, r0
 8019646:	f7e7 faa1 	bl	8000b8c <__aeabi_d2iz>
 801964a:	f7e6 ff85 	bl	8000558 <__aeabi_i2d>
 801964e:	4602      	mov	r2, r0
 8019650:	460b      	mov	r3, r1
 8019652:	4630      	mov	r0, r6
 8019654:	4639      	mov	r1, r7
 8019656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801965a:	f7e6 fe2f 	bl	80002bc <__aeabi_dsub>
 801965e:	4b19      	ldr	r3, [pc, #100]	; (80196c4 <__ieee754_rem_pio2+0x40c>)
 8019660:	2200      	movs	r2, #0
 8019662:	f7e6 ffe3 	bl	800062c <__aeabi_dmul>
 8019666:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801966a:	ad04      	add	r5, sp, #16
 801966c:	f04f 0803 	mov.w	r8, #3
 8019670:	46a9      	mov	r9, r5
 8019672:	2600      	movs	r6, #0
 8019674:	2700      	movs	r7, #0
 8019676:	4632      	mov	r2, r6
 8019678:	463b      	mov	r3, r7
 801967a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801967e:	46c3      	mov	fp, r8
 8019680:	3d08      	subs	r5, #8
 8019682:	f108 38ff 	add.w	r8, r8, #4294967295
 8019686:	f7e7 fa39 	bl	8000afc <__aeabi_dcmpeq>
 801968a:	2800      	cmp	r0, #0
 801968c:	d1f3      	bne.n	8019676 <__ieee754_rem_pio2+0x3be>
 801968e:	4b0e      	ldr	r3, [pc, #56]	; (80196c8 <__ieee754_rem_pio2+0x410>)
 8019690:	9301      	str	r3, [sp, #4]
 8019692:	2302      	movs	r3, #2
 8019694:	9300      	str	r3, [sp, #0]
 8019696:	4622      	mov	r2, r4
 8019698:	465b      	mov	r3, fp
 801969a:	4651      	mov	r1, sl
 801969c:	4648      	mov	r0, r9
 801969e:	f000 fbb3 	bl	8019e08 <__kernel_rem_pio2>
 80196a2:	9b02      	ldr	r3, [sp, #8]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	4683      	mov	fp, r0
 80196a8:	f6bf ae46 	bge.w	8019338 <__ieee754_rem_pio2+0x80>
 80196ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80196b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80196b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80196bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196c0:	e73a      	b.n	8019538 <__ieee754_rem_pio2+0x280>
 80196c2:	bf00      	nop
 80196c4:	41700000 	.word	0x41700000
 80196c8:	08020420 	.word	0x08020420

080196cc <__ieee754_sqrt>:
 80196cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196d0:	ec55 4b10 	vmov	r4, r5, d0
 80196d4:	4e56      	ldr	r6, [pc, #344]	; (8019830 <__ieee754_sqrt+0x164>)
 80196d6:	43ae      	bics	r6, r5
 80196d8:	ee10 0a10 	vmov	r0, s0
 80196dc:	ee10 3a10 	vmov	r3, s0
 80196e0:	4629      	mov	r1, r5
 80196e2:	462a      	mov	r2, r5
 80196e4:	d110      	bne.n	8019708 <__ieee754_sqrt+0x3c>
 80196e6:	ee10 2a10 	vmov	r2, s0
 80196ea:	462b      	mov	r3, r5
 80196ec:	f7e6 ff9e 	bl	800062c <__aeabi_dmul>
 80196f0:	4602      	mov	r2, r0
 80196f2:	460b      	mov	r3, r1
 80196f4:	4620      	mov	r0, r4
 80196f6:	4629      	mov	r1, r5
 80196f8:	f7e6 fde2 	bl	80002c0 <__adddf3>
 80196fc:	4604      	mov	r4, r0
 80196fe:	460d      	mov	r5, r1
 8019700:	ec45 4b10 	vmov	d0, r4, r5
 8019704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019708:	2d00      	cmp	r5, #0
 801970a:	dc10      	bgt.n	801972e <__ieee754_sqrt+0x62>
 801970c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019710:	4330      	orrs	r0, r6
 8019712:	d0f5      	beq.n	8019700 <__ieee754_sqrt+0x34>
 8019714:	b15d      	cbz	r5, 801972e <__ieee754_sqrt+0x62>
 8019716:	ee10 2a10 	vmov	r2, s0
 801971a:	462b      	mov	r3, r5
 801971c:	ee10 0a10 	vmov	r0, s0
 8019720:	f7e6 fdcc 	bl	80002bc <__aeabi_dsub>
 8019724:	4602      	mov	r2, r0
 8019726:	460b      	mov	r3, r1
 8019728:	f7e7 f8aa 	bl	8000880 <__aeabi_ddiv>
 801972c:	e7e6      	b.n	80196fc <__ieee754_sqrt+0x30>
 801972e:	1509      	asrs	r1, r1, #20
 8019730:	d076      	beq.n	8019820 <__ieee754_sqrt+0x154>
 8019732:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019736:	07ce      	lsls	r6, r1, #31
 8019738:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801973c:	bf5e      	ittt	pl
 801973e:	0fda      	lsrpl	r2, r3, #31
 8019740:	005b      	lslpl	r3, r3, #1
 8019742:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019746:	0fda      	lsrs	r2, r3, #31
 8019748:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801974c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019750:	2000      	movs	r0, #0
 8019752:	106d      	asrs	r5, r5, #1
 8019754:	005b      	lsls	r3, r3, #1
 8019756:	f04f 0e16 	mov.w	lr, #22
 801975a:	4684      	mov	ip, r0
 801975c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019760:	eb0c 0401 	add.w	r4, ip, r1
 8019764:	4294      	cmp	r4, r2
 8019766:	bfde      	ittt	le
 8019768:	1b12      	suble	r2, r2, r4
 801976a:	eb04 0c01 	addle.w	ip, r4, r1
 801976e:	1840      	addle	r0, r0, r1
 8019770:	0052      	lsls	r2, r2, #1
 8019772:	f1be 0e01 	subs.w	lr, lr, #1
 8019776:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801977a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801977e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019782:	d1ed      	bne.n	8019760 <__ieee754_sqrt+0x94>
 8019784:	4671      	mov	r1, lr
 8019786:	2720      	movs	r7, #32
 8019788:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801978c:	4562      	cmp	r2, ip
 801978e:	eb04 060e 	add.w	r6, r4, lr
 8019792:	dc02      	bgt.n	801979a <__ieee754_sqrt+0xce>
 8019794:	d113      	bne.n	80197be <__ieee754_sqrt+0xf2>
 8019796:	429e      	cmp	r6, r3
 8019798:	d811      	bhi.n	80197be <__ieee754_sqrt+0xf2>
 801979a:	2e00      	cmp	r6, #0
 801979c:	eb06 0e04 	add.w	lr, r6, r4
 80197a0:	da43      	bge.n	801982a <__ieee754_sqrt+0x15e>
 80197a2:	f1be 0f00 	cmp.w	lr, #0
 80197a6:	db40      	blt.n	801982a <__ieee754_sqrt+0x15e>
 80197a8:	f10c 0801 	add.w	r8, ip, #1
 80197ac:	eba2 020c 	sub.w	r2, r2, ip
 80197b0:	429e      	cmp	r6, r3
 80197b2:	bf88      	it	hi
 80197b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80197b8:	1b9b      	subs	r3, r3, r6
 80197ba:	4421      	add	r1, r4
 80197bc:	46c4      	mov	ip, r8
 80197be:	0052      	lsls	r2, r2, #1
 80197c0:	3f01      	subs	r7, #1
 80197c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80197ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197ce:	d1dd      	bne.n	801978c <__ieee754_sqrt+0xc0>
 80197d0:	4313      	orrs	r3, r2
 80197d2:	d006      	beq.n	80197e2 <__ieee754_sqrt+0x116>
 80197d4:	1c4c      	adds	r4, r1, #1
 80197d6:	bf13      	iteet	ne
 80197d8:	3101      	addne	r1, #1
 80197da:	3001      	addeq	r0, #1
 80197dc:	4639      	moveq	r1, r7
 80197de:	f021 0101 	bicne.w	r1, r1, #1
 80197e2:	1043      	asrs	r3, r0, #1
 80197e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80197e8:	0849      	lsrs	r1, r1, #1
 80197ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80197ee:	07c2      	lsls	r2, r0, #31
 80197f0:	bf48      	it	mi
 80197f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80197f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80197fa:	460c      	mov	r4, r1
 80197fc:	463d      	mov	r5, r7
 80197fe:	e77f      	b.n	8019700 <__ieee754_sqrt+0x34>
 8019800:	0ada      	lsrs	r2, r3, #11
 8019802:	3815      	subs	r0, #21
 8019804:	055b      	lsls	r3, r3, #21
 8019806:	2a00      	cmp	r2, #0
 8019808:	d0fa      	beq.n	8019800 <__ieee754_sqrt+0x134>
 801980a:	02d7      	lsls	r7, r2, #11
 801980c:	d50a      	bpl.n	8019824 <__ieee754_sqrt+0x158>
 801980e:	f1c1 0420 	rsb	r4, r1, #32
 8019812:	fa23 f404 	lsr.w	r4, r3, r4
 8019816:	1e4d      	subs	r5, r1, #1
 8019818:	408b      	lsls	r3, r1
 801981a:	4322      	orrs	r2, r4
 801981c:	1b41      	subs	r1, r0, r5
 801981e:	e788      	b.n	8019732 <__ieee754_sqrt+0x66>
 8019820:	4608      	mov	r0, r1
 8019822:	e7f0      	b.n	8019806 <__ieee754_sqrt+0x13a>
 8019824:	0052      	lsls	r2, r2, #1
 8019826:	3101      	adds	r1, #1
 8019828:	e7ef      	b.n	801980a <__ieee754_sqrt+0x13e>
 801982a:	46e0      	mov	r8, ip
 801982c:	e7be      	b.n	80197ac <__ieee754_sqrt+0xe0>
 801982e:	bf00      	nop
 8019830:	7ff00000 	.word	0x7ff00000

08019834 <__ieee754_expf>:
 8019834:	ee10 2a10 	vmov	r2, s0
 8019838:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801983c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019840:	d902      	bls.n	8019848 <__ieee754_expf+0x14>
 8019842:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019846:	4770      	bx	lr
 8019848:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801984c:	d106      	bne.n	801985c <__ieee754_expf+0x28>
 801984e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8019994 <__ieee754_expf+0x160>
 8019852:	2b00      	cmp	r3, #0
 8019854:	bf18      	it	ne
 8019856:	eeb0 0a67 	vmovne.f32	s0, s15
 801985a:	4770      	bx	lr
 801985c:	484e      	ldr	r0, [pc, #312]	; (8019998 <__ieee754_expf+0x164>)
 801985e:	4282      	cmp	r2, r0
 8019860:	dd04      	ble.n	801986c <__ieee754_expf+0x38>
 8019862:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 801999c <__ieee754_expf+0x168>
 8019866:	ee20 0a00 	vmul.f32	s0, s0, s0
 801986a:	4770      	bx	lr
 801986c:	2a00      	cmp	r2, #0
 801986e:	da03      	bge.n	8019878 <__ieee754_expf+0x44>
 8019870:	4a4b      	ldr	r2, [pc, #300]	; (80199a0 <__ieee754_expf+0x16c>)
 8019872:	4291      	cmp	r1, r2
 8019874:	f200 808a 	bhi.w	801998c <__ieee754_expf+0x158>
 8019878:	4a4a      	ldr	r2, [pc, #296]	; (80199a4 <__ieee754_expf+0x170>)
 801987a:	4291      	cmp	r1, r2
 801987c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019880:	d954      	bls.n	801992c <__ieee754_expf+0xf8>
 8019882:	4a49      	ldr	r2, [pc, #292]	; (80199a8 <__ieee754_expf+0x174>)
 8019884:	4291      	cmp	r1, r2
 8019886:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801988a:	d836      	bhi.n	80198fa <__ieee754_expf+0xc6>
 801988c:	4947      	ldr	r1, [pc, #284]	; (80199ac <__ieee754_expf+0x178>)
 801988e:	4411      	add	r1, r2
 8019890:	ed91 7a00 	vldr	s14, [r1]
 8019894:	4946      	ldr	r1, [pc, #280]	; (80199b0 <__ieee754_expf+0x17c>)
 8019896:	440a      	add	r2, r1
 8019898:	edd2 7a00 	vldr	s15, [r2]
 801989c:	ee30 7a47 	vsub.f32	s14, s0, s14
 80198a0:	f1c3 0201 	rsb	r2, r3, #1
 80198a4:	1ad2      	subs	r2, r2, r3
 80198a6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80198aa:	ee60 6a00 	vmul.f32	s13, s0, s0
 80198ae:	eddf 5a41 	vldr	s11, [pc, #260]	; 80199b4 <__ieee754_expf+0x180>
 80198b2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80199b8 <__ieee754_expf+0x184>
 80198b6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80198ba:	eddf 5a40 	vldr	s11, [pc, #256]	; 80199bc <__ieee754_expf+0x188>
 80198be:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198c2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80199c0 <__ieee754_expf+0x18c>
 80198c6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80198ca:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80199c4 <__ieee754_expf+0x190>
 80198ce:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198d2:	eeb0 5a40 	vmov.f32	s10, s0
 80198d6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80198da:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80198de:	eef0 6a45 	vmov.f32	s13, s10
 80198e2:	ee20 5a05 	vmul.f32	s10, s0, s10
 80198e6:	bb92      	cbnz	r2, 801994e <__ieee754_expf+0x11a>
 80198e8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80198ec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80198f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80198f4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80198f8:	4770      	bx	lr
 80198fa:	4b33      	ldr	r3, [pc, #204]	; (80199c8 <__ieee754_expf+0x194>)
 80198fc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80199cc <__ieee754_expf+0x198>
 8019900:	4413      	add	r3, r2
 8019902:	edd3 7a00 	vldr	s15, [r3]
 8019906:	eee0 7a07 	vfma.f32	s15, s0, s14
 801990a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80199d0 <__ieee754_expf+0x19c>
 801990e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019912:	ee17 2a90 	vmov	r2, s15
 8019916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801991a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801991e:	eeb0 7a40 	vmov.f32	s14, s0
 8019922:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80199d4 <__ieee754_expf+0x1a0>
 8019926:	ee67 7a80 	vmul.f32	s15, s15, s0
 801992a:	e7bc      	b.n	80198a6 <__ieee754_expf+0x72>
 801992c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8019930:	d20b      	bcs.n	801994a <__ieee754_expf+0x116>
 8019932:	eddf 6a1a 	vldr	s13, [pc, #104]	; 801999c <__ieee754_expf+0x168>
 8019936:	ee70 6a26 	vadd.f32	s13, s0, s13
 801993a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019942:	dd02      	ble.n	801994a <__ieee754_expf+0x116>
 8019944:	ee30 0a06 	vadd.f32	s0, s0, s12
 8019948:	4770      	bx	lr
 801994a:	2200      	movs	r2, #0
 801994c:	e7ad      	b.n	80198aa <__ieee754_expf+0x76>
 801994e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8019952:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019956:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801995a:	bfb8      	it	lt
 801995c:	3264      	addlt	r2, #100	; 0x64
 801995e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019962:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019966:	ee76 7a40 	vsub.f32	s15, s12, s0
 801996a:	ee17 3a90 	vmov	r3, s15
 801996e:	bfab      	itete	ge
 8019970:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019974:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019978:	ee00 3a10 	vmovge	s0, r3
 801997c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80199d8 <__ieee754_expf+0x1a4>
 8019980:	bfbc      	itt	lt
 8019982:	ee00 3a10 	vmovlt	s0, r3
 8019986:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801998a:	4770      	bx	lr
 801998c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019994 <__ieee754_expf+0x160>
 8019990:	4770      	bx	lr
 8019992:	bf00      	nop
 8019994:	00000000 	.word	0x00000000
 8019998:	42b17217 	.word	0x42b17217
 801999c:	7149f2ca 	.word	0x7149f2ca
 80199a0:	42cff1b5 	.word	0x42cff1b5
 80199a4:	3eb17218 	.word	0x3eb17218
 80199a8:	3f851591 	.word	0x3f851591
 80199ac:	08020530 	.word	0x08020530
 80199b0:	08020538 	.word	0x08020538
 80199b4:	3331bb4c 	.word	0x3331bb4c
 80199b8:	b5ddea0e 	.word	0xb5ddea0e
 80199bc:	388ab355 	.word	0x388ab355
 80199c0:	bb360b61 	.word	0xbb360b61
 80199c4:	3e2aaaab 	.word	0x3e2aaaab
 80199c8:	08020528 	.word	0x08020528
 80199cc:	3fb8aa3b 	.word	0x3fb8aa3b
 80199d0:	3f317180 	.word	0x3f317180
 80199d4:	3717f7d1 	.word	0x3717f7d1
 80199d8:	0d800000 	.word	0x0d800000

080199dc <__ieee754_logf>:
 80199dc:	ee10 3a10 	vmov	r3, s0
 80199e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80199e4:	d106      	bne.n	80199f4 <__ieee754_logf+0x18>
 80199e6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8019b7c <__ieee754_logf+0x1a0>
 80199ea:	eddf 7a65 	vldr	s15, [pc, #404]	; 8019b80 <__ieee754_logf+0x1a4>
 80199ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80199f2:	4770      	bx	lr
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	da02      	bge.n	80199fe <__ieee754_logf+0x22>
 80199f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80199fc:	e7f5      	b.n	80199ea <__ieee754_logf+0xe>
 80199fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019a02:	db02      	blt.n	8019a0a <__ieee754_logf+0x2e>
 8019a04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019a08:	4770      	bx	lr
 8019a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019a0e:	bfb8      	it	lt
 8019a10:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8019b84 <__ieee754_logf+0x1a8>
 8019a14:	485c      	ldr	r0, [pc, #368]	; (8019b88 <__ieee754_logf+0x1ac>)
 8019a16:	bfbe      	ittt	lt
 8019a18:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019a1c:	f06f 0118 	mvnlt.w	r1, #24
 8019a20:	ee17 3a90 	vmovlt	r3, s15
 8019a24:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8019a28:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019a2c:	4418      	add	r0, r3
 8019a2e:	bfa8      	it	ge
 8019a30:	2100      	movge	r1, #0
 8019a32:	3a7f      	subs	r2, #127	; 0x7f
 8019a34:	440a      	add	r2, r1
 8019a36:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8019a3a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8019a3e:	4319      	orrs	r1, r3
 8019a40:	ee00 1a10 	vmov	s0, r1
 8019a44:	4951      	ldr	r1, [pc, #324]	; (8019b8c <__ieee754_logf+0x1b0>)
 8019a46:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8019a4a:	f103 000f 	add.w	r0, r3, #15
 8019a4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a52:	4001      	ands	r1, r0
 8019a54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019a58:	bb89      	cbnz	r1, 8019abe <__ieee754_logf+0xe2>
 8019a5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a62:	d10f      	bne.n	8019a84 <__ieee754_logf+0xa8>
 8019a64:	2a00      	cmp	r2, #0
 8019a66:	f000 8085 	beq.w	8019b74 <__ieee754_logf+0x198>
 8019a6a:	ee07 2a90 	vmov	s15, r2
 8019a6e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8019b90 <__ieee754_logf+0x1b4>
 8019a72:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8019b94 <__ieee754_logf+0x1b8>
 8019a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019a7e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019a82:	4770      	bx	lr
 8019a84:	eddf 6a44 	vldr	s13, [pc, #272]	; 8019b98 <__ieee754_logf+0x1bc>
 8019a88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a8c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8019a90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a98:	b912      	cbnz	r2, 8019aa0 <__ieee754_logf+0xc4>
 8019a9a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019a9e:	4770      	bx	lr
 8019aa0:	ee07 2a90 	vmov	s15, r2
 8019aa4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8019b90 <__ieee754_logf+0x1b4>
 8019aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019aac:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019ab0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019ab4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8019b94 <__ieee754_logf+0x1b8>
 8019ab8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8019abc:	4770      	bx	lr
 8019abe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8019ac2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019ac6:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019b9c <__ieee754_logf+0x1c0>
 8019aca:	eddf 4a35 	vldr	s9, [pc, #212]	; 8019ba0 <__ieee754_logf+0x1c4>
 8019ace:	4935      	ldr	r1, [pc, #212]	; (8019ba4 <__ieee754_logf+0x1c8>)
 8019ad0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8019ad4:	4419      	add	r1, r3
 8019ad6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8019ada:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019ade:	430b      	orrs	r3, r1
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	ee07 2a90 	vmov	s15, r2
 8019ae6:	ee26 5a06 	vmul.f32	s10, s12, s12
 8019aea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019aee:	ee25 7a05 	vmul.f32	s14, s10, s10
 8019af2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8019ba8 <__ieee754_logf+0x1cc>
 8019af6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019afa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8019bac <__ieee754_logf+0x1d0>
 8019afe:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019b02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019bb0 <__ieee754_logf+0x1d4>
 8019b06:	eee7 7a24 	vfma.f32	s15, s14, s9
 8019b0a:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8019bb4 <__ieee754_logf+0x1d8>
 8019b0e:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019b12:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019bb8 <__ieee754_logf+0x1dc>
 8019b16:	eee4 7a87 	vfma.f32	s15, s9, s14
 8019b1a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019b1e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019b22:	dd1c      	ble.n	8019b5e <__ieee754_logf+0x182>
 8019b24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019b28:	ee20 7a07 	vmul.f32	s14, s0, s14
 8019b2c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8019b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019b38:	b922      	cbnz	r2, 8019b44 <__ieee754_logf+0x168>
 8019b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b42:	4770      	bx	lr
 8019b44:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8019b90 <__ieee754_logf+0x1b4>
 8019b48:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019b54:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019b94 <__ieee754_logf+0x1b8>
 8019b58:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8019b5c:	4770      	bx	lr
 8019b5e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019b62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019b66:	2a00      	cmp	r2, #0
 8019b68:	d0e9      	beq.n	8019b3e <__ieee754_logf+0x162>
 8019b6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8019b90 <__ieee754_logf+0x1b4>
 8019b6e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019b72:	e7ed      	b.n	8019b50 <__ieee754_logf+0x174>
 8019b74:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8019b80 <__ieee754_logf+0x1a4>
 8019b78:	4770      	bx	lr
 8019b7a:	bf00      	nop
 8019b7c:	cc000000 	.word	0xcc000000
 8019b80:	00000000 	.word	0x00000000
 8019b84:	4c000000 	.word	0x4c000000
 8019b88:	004afb20 	.word	0x004afb20
 8019b8c:	007ffff0 	.word	0x007ffff0
 8019b90:	3717f7d1 	.word	0x3717f7d1
 8019b94:	3f317180 	.word	0x3f317180
 8019b98:	3eaaaaab 	.word	0x3eaaaaab
 8019b9c:	3e1cd04f 	.word	0x3e1cd04f
 8019ba0:	3e178897 	.word	0x3e178897
 8019ba4:	ffcf5c30 	.word	0xffcf5c30
 8019ba8:	3e638e29 	.word	0x3e638e29
 8019bac:	3ecccccd 	.word	0x3ecccccd
 8019bb0:	3e3a3325 	.word	0x3e3a3325
 8019bb4:	3e924925 	.word	0x3e924925
 8019bb8:	3f2aaaab 	.word	0x3f2aaaab

08019bbc <__ieee754_log10f>:
 8019bbc:	b508      	push	{r3, lr}
 8019bbe:	ee10 2a10 	vmov	r2, s0
 8019bc2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019bc6:	ed2d 8b02 	vpush	{d8}
 8019bca:	d108      	bne.n	8019bde <__ieee754_log10f+0x22>
 8019bcc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8019c54 <__ieee754_log10f+0x98>
 8019bd0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019c58 <__ieee754_log10f+0x9c>
 8019bd4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019bd8:	ecbd 8b02 	vpop	{d8}
 8019bdc:	bd08      	pop	{r3, pc}
 8019bde:	2a00      	cmp	r2, #0
 8019be0:	da02      	bge.n	8019be8 <__ieee754_log10f+0x2c>
 8019be2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019be6:	e7f3      	b.n	8019bd0 <__ieee754_log10f+0x14>
 8019be8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019bec:	db02      	blt.n	8019bf4 <__ieee754_log10f+0x38>
 8019bee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019bf2:	e7f1      	b.n	8019bd8 <__ieee754_log10f+0x1c>
 8019bf4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8019bf8:	bfbf      	itttt	lt
 8019bfa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8019c5c <__ieee754_log10f+0xa0>
 8019bfe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019c02:	f06f 0118 	mvnlt.w	r1, #24
 8019c06:	ee17 2a90 	vmovlt	r2, s15
 8019c0a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8019c0e:	bfa8      	it	ge
 8019c10:	2100      	movge	r1, #0
 8019c12:	3b7f      	subs	r3, #127	; 0x7f
 8019c14:	440b      	add	r3, r1
 8019c16:	0fd9      	lsrs	r1, r3, #31
 8019c18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019c1c:	ee07 3a90 	vmov	s15, r3
 8019c20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019c24:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8019c28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019c2c:	ee00 3a10 	vmov	s0, r3
 8019c30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8019c34:	f7ff fed2 	bl	80199dc <__ieee754_logf>
 8019c38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019c60 <__ieee754_log10f+0xa4>
 8019c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019c40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019c64 <__ieee754_log10f+0xa8>
 8019c44:	eea8 0a27 	vfma.f32	s0, s16, s15
 8019c48:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019c68 <__ieee754_log10f+0xac>
 8019c4c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8019c50:	e7c2      	b.n	8019bd8 <__ieee754_log10f+0x1c>
 8019c52:	bf00      	nop
 8019c54:	cc000000 	.word	0xcc000000
 8019c58:	00000000 	.word	0x00000000
 8019c5c:	4c000000 	.word	0x4c000000
 8019c60:	3ede5bd9 	.word	0x3ede5bd9
 8019c64:	355427db 	.word	0x355427db
 8019c68:	3e9a2080 	.word	0x3e9a2080

08019c6c <__ieee754_sqrtf>:
 8019c6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019c70:	4770      	bx	lr
 8019c72:	0000      	movs	r0, r0
 8019c74:	0000      	movs	r0, r0
	...

08019c78 <__kernel_cos>:
 8019c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c7c:	ec57 6b10 	vmov	r6, r7, d0
 8019c80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019c84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019c88:	ed8d 1b00 	vstr	d1, [sp]
 8019c8c:	da07      	bge.n	8019c9e <__kernel_cos+0x26>
 8019c8e:	ee10 0a10 	vmov	r0, s0
 8019c92:	4639      	mov	r1, r7
 8019c94:	f7e6 ff7a 	bl	8000b8c <__aeabi_d2iz>
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	f000 8088 	beq.w	8019dae <__kernel_cos+0x136>
 8019c9e:	4632      	mov	r2, r6
 8019ca0:	463b      	mov	r3, r7
 8019ca2:	4630      	mov	r0, r6
 8019ca4:	4639      	mov	r1, r7
 8019ca6:	f7e6 fcc1 	bl	800062c <__aeabi_dmul>
 8019caa:	4b51      	ldr	r3, [pc, #324]	; (8019df0 <__kernel_cos+0x178>)
 8019cac:	2200      	movs	r2, #0
 8019cae:	4604      	mov	r4, r0
 8019cb0:	460d      	mov	r5, r1
 8019cb2:	f7e6 fcbb 	bl	800062c <__aeabi_dmul>
 8019cb6:	a340      	add	r3, pc, #256	; (adr r3, 8019db8 <__kernel_cos+0x140>)
 8019cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cbc:	4682      	mov	sl, r0
 8019cbe:	468b      	mov	fp, r1
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	4629      	mov	r1, r5
 8019cc4:	f7e6 fcb2 	bl	800062c <__aeabi_dmul>
 8019cc8:	a33d      	add	r3, pc, #244	; (adr r3, 8019dc0 <__kernel_cos+0x148>)
 8019cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cce:	f7e6 faf7 	bl	80002c0 <__adddf3>
 8019cd2:	4622      	mov	r2, r4
 8019cd4:	462b      	mov	r3, r5
 8019cd6:	f7e6 fca9 	bl	800062c <__aeabi_dmul>
 8019cda:	a33b      	add	r3, pc, #236	; (adr r3, 8019dc8 <__kernel_cos+0x150>)
 8019cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce0:	f7e6 faec 	bl	80002bc <__aeabi_dsub>
 8019ce4:	4622      	mov	r2, r4
 8019ce6:	462b      	mov	r3, r5
 8019ce8:	f7e6 fca0 	bl	800062c <__aeabi_dmul>
 8019cec:	a338      	add	r3, pc, #224	; (adr r3, 8019dd0 <__kernel_cos+0x158>)
 8019cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf2:	f7e6 fae5 	bl	80002c0 <__adddf3>
 8019cf6:	4622      	mov	r2, r4
 8019cf8:	462b      	mov	r3, r5
 8019cfa:	f7e6 fc97 	bl	800062c <__aeabi_dmul>
 8019cfe:	a336      	add	r3, pc, #216	; (adr r3, 8019dd8 <__kernel_cos+0x160>)
 8019d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d04:	f7e6 fada 	bl	80002bc <__aeabi_dsub>
 8019d08:	4622      	mov	r2, r4
 8019d0a:	462b      	mov	r3, r5
 8019d0c:	f7e6 fc8e 	bl	800062c <__aeabi_dmul>
 8019d10:	a333      	add	r3, pc, #204	; (adr r3, 8019de0 <__kernel_cos+0x168>)
 8019d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d16:	f7e6 fad3 	bl	80002c0 <__adddf3>
 8019d1a:	4622      	mov	r2, r4
 8019d1c:	462b      	mov	r3, r5
 8019d1e:	f7e6 fc85 	bl	800062c <__aeabi_dmul>
 8019d22:	4622      	mov	r2, r4
 8019d24:	462b      	mov	r3, r5
 8019d26:	f7e6 fc81 	bl	800062c <__aeabi_dmul>
 8019d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d2e:	4604      	mov	r4, r0
 8019d30:	460d      	mov	r5, r1
 8019d32:	4630      	mov	r0, r6
 8019d34:	4639      	mov	r1, r7
 8019d36:	f7e6 fc79 	bl	800062c <__aeabi_dmul>
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	4602      	mov	r2, r0
 8019d3e:	4629      	mov	r1, r5
 8019d40:	4620      	mov	r0, r4
 8019d42:	f7e6 fabb 	bl	80002bc <__aeabi_dsub>
 8019d46:	4b2b      	ldr	r3, [pc, #172]	; (8019df4 <__kernel_cos+0x17c>)
 8019d48:	4598      	cmp	r8, r3
 8019d4a:	4606      	mov	r6, r0
 8019d4c:	460f      	mov	r7, r1
 8019d4e:	dc10      	bgt.n	8019d72 <__kernel_cos+0xfa>
 8019d50:	4602      	mov	r2, r0
 8019d52:	460b      	mov	r3, r1
 8019d54:	4650      	mov	r0, sl
 8019d56:	4659      	mov	r1, fp
 8019d58:	f7e6 fab0 	bl	80002bc <__aeabi_dsub>
 8019d5c:	460b      	mov	r3, r1
 8019d5e:	4926      	ldr	r1, [pc, #152]	; (8019df8 <__kernel_cos+0x180>)
 8019d60:	4602      	mov	r2, r0
 8019d62:	2000      	movs	r0, #0
 8019d64:	f7e6 faaa 	bl	80002bc <__aeabi_dsub>
 8019d68:	ec41 0b10 	vmov	d0, r0, r1
 8019d6c:	b003      	add	sp, #12
 8019d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d72:	4b22      	ldr	r3, [pc, #136]	; (8019dfc <__kernel_cos+0x184>)
 8019d74:	4920      	ldr	r1, [pc, #128]	; (8019df8 <__kernel_cos+0x180>)
 8019d76:	4598      	cmp	r8, r3
 8019d78:	bfcc      	ite	gt
 8019d7a:	4d21      	ldrgt	r5, [pc, #132]	; (8019e00 <__kernel_cos+0x188>)
 8019d7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019d80:	2400      	movs	r4, #0
 8019d82:	4622      	mov	r2, r4
 8019d84:	462b      	mov	r3, r5
 8019d86:	2000      	movs	r0, #0
 8019d88:	f7e6 fa98 	bl	80002bc <__aeabi_dsub>
 8019d8c:	4622      	mov	r2, r4
 8019d8e:	4680      	mov	r8, r0
 8019d90:	4689      	mov	r9, r1
 8019d92:	462b      	mov	r3, r5
 8019d94:	4650      	mov	r0, sl
 8019d96:	4659      	mov	r1, fp
 8019d98:	f7e6 fa90 	bl	80002bc <__aeabi_dsub>
 8019d9c:	4632      	mov	r2, r6
 8019d9e:	463b      	mov	r3, r7
 8019da0:	f7e6 fa8c 	bl	80002bc <__aeabi_dsub>
 8019da4:	4602      	mov	r2, r0
 8019da6:	460b      	mov	r3, r1
 8019da8:	4640      	mov	r0, r8
 8019daa:	4649      	mov	r1, r9
 8019dac:	e7da      	b.n	8019d64 <__kernel_cos+0xec>
 8019dae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019de8 <__kernel_cos+0x170>
 8019db2:	e7db      	b.n	8019d6c <__kernel_cos+0xf4>
 8019db4:	f3af 8000 	nop.w
 8019db8:	be8838d4 	.word	0xbe8838d4
 8019dbc:	bda8fae9 	.word	0xbda8fae9
 8019dc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8019dc4:	3e21ee9e 	.word	0x3e21ee9e
 8019dc8:	809c52ad 	.word	0x809c52ad
 8019dcc:	3e927e4f 	.word	0x3e927e4f
 8019dd0:	19cb1590 	.word	0x19cb1590
 8019dd4:	3efa01a0 	.word	0x3efa01a0
 8019dd8:	16c15177 	.word	0x16c15177
 8019ddc:	3f56c16c 	.word	0x3f56c16c
 8019de0:	5555554c 	.word	0x5555554c
 8019de4:	3fa55555 	.word	0x3fa55555
 8019de8:	00000000 	.word	0x00000000
 8019dec:	3ff00000 	.word	0x3ff00000
 8019df0:	3fe00000 	.word	0x3fe00000
 8019df4:	3fd33332 	.word	0x3fd33332
 8019df8:	3ff00000 	.word	0x3ff00000
 8019dfc:	3fe90000 	.word	0x3fe90000
 8019e00:	3fd20000 	.word	0x3fd20000
 8019e04:	00000000 	.word	0x00000000

08019e08 <__kernel_rem_pio2>:
 8019e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e0c:	ed2d 8b02 	vpush	{d8}
 8019e10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8019e14:	f112 0f14 	cmn.w	r2, #20
 8019e18:	9308      	str	r3, [sp, #32]
 8019e1a:	9101      	str	r1, [sp, #4]
 8019e1c:	4bc6      	ldr	r3, [pc, #792]	; (801a138 <__kernel_rem_pio2+0x330>)
 8019e1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019e20:	9009      	str	r0, [sp, #36]	; 0x24
 8019e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019e26:	9304      	str	r3, [sp, #16]
 8019e28:	9b08      	ldr	r3, [sp, #32]
 8019e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e2e:	bfa8      	it	ge
 8019e30:	1ed4      	subge	r4, r2, #3
 8019e32:	9306      	str	r3, [sp, #24]
 8019e34:	bfb2      	itee	lt
 8019e36:	2400      	movlt	r4, #0
 8019e38:	2318      	movge	r3, #24
 8019e3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8019e3e:	f06f 0317 	mvn.w	r3, #23
 8019e42:	fb04 3303 	mla	r3, r4, r3, r3
 8019e46:	eb03 0a02 	add.w	sl, r3, r2
 8019e4a:	9b04      	ldr	r3, [sp, #16]
 8019e4c:	9a06      	ldr	r2, [sp, #24]
 8019e4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a128 <__kernel_rem_pio2+0x320>
 8019e52:	eb03 0802 	add.w	r8, r3, r2
 8019e56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019e58:	1aa7      	subs	r7, r4, r2
 8019e5a:	ae20      	add	r6, sp, #128	; 0x80
 8019e5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019e60:	2500      	movs	r5, #0
 8019e62:	4545      	cmp	r5, r8
 8019e64:	dd18      	ble.n	8019e98 <__kernel_rem_pio2+0x90>
 8019e66:	9b08      	ldr	r3, [sp, #32]
 8019e68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019e6c:	aa20      	add	r2, sp, #128	; 0x80
 8019e6e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801a128 <__kernel_rem_pio2+0x320>
 8019e72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019e76:	f1c3 0301 	rsb	r3, r3, #1
 8019e7a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8019e7e:	9307      	str	r3, [sp, #28]
 8019e80:	9b07      	ldr	r3, [sp, #28]
 8019e82:	9a04      	ldr	r2, [sp, #16]
 8019e84:	4443      	add	r3, r8
 8019e86:	429a      	cmp	r2, r3
 8019e88:	db2f      	blt.n	8019eea <__kernel_rem_pio2+0xe2>
 8019e8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019e8e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019e92:	462f      	mov	r7, r5
 8019e94:	2600      	movs	r6, #0
 8019e96:	e01b      	b.n	8019ed0 <__kernel_rem_pio2+0xc8>
 8019e98:	42ef      	cmn	r7, r5
 8019e9a:	d407      	bmi.n	8019eac <__kernel_rem_pio2+0xa4>
 8019e9c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019ea0:	f7e6 fb5a 	bl	8000558 <__aeabi_i2d>
 8019ea4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019ea8:	3501      	adds	r5, #1
 8019eaa:	e7da      	b.n	8019e62 <__kernel_rem_pio2+0x5a>
 8019eac:	ec51 0b18 	vmov	r0, r1, d8
 8019eb0:	e7f8      	b.n	8019ea4 <__kernel_rem_pio2+0x9c>
 8019eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019eb6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019eba:	f7e6 fbb7 	bl	800062c <__aeabi_dmul>
 8019ebe:	4602      	mov	r2, r0
 8019ec0:	460b      	mov	r3, r1
 8019ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ec6:	f7e6 f9fb 	bl	80002c0 <__adddf3>
 8019eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019ece:	3601      	adds	r6, #1
 8019ed0:	9b06      	ldr	r3, [sp, #24]
 8019ed2:	429e      	cmp	r6, r3
 8019ed4:	f1a7 0708 	sub.w	r7, r7, #8
 8019ed8:	ddeb      	ble.n	8019eb2 <__kernel_rem_pio2+0xaa>
 8019eda:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ede:	3508      	adds	r5, #8
 8019ee0:	ecab 7b02 	vstmia	fp!, {d7}
 8019ee4:	f108 0801 	add.w	r8, r8, #1
 8019ee8:	e7ca      	b.n	8019e80 <__kernel_rem_pio2+0x78>
 8019eea:	9b04      	ldr	r3, [sp, #16]
 8019eec:	aa0c      	add	r2, sp, #48	; 0x30
 8019eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ef4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019ef6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019efa:	9c04      	ldr	r4, [sp, #16]
 8019efc:	930a      	str	r3, [sp, #40]	; 0x28
 8019efe:	ab98      	add	r3, sp, #608	; 0x260
 8019f00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019f04:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019f08:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019f0c:	f8cd b008 	str.w	fp, [sp, #8]
 8019f10:	4625      	mov	r5, r4
 8019f12:	2d00      	cmp	r5, #0
 8019f14:	dc78      	bgt.n	801a008 <__kernel_rem_pio2+0x200>
 8019f16:	ec47 6b10 	vmov	d0, r6, r7
 8019f1a:	4650      	mov	r0, sl
 8019f1c:	f000 fdf0 	bl	801ab00 <scalbn>
 8019f20:	ec57 6b10 	vmov	r6, r7, d0
 8019f24:	2200      	movs	r2, #0
 8019f26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019f2a:	ee10 0a10 	vmov	r0, s0
 8019f2e:	4639      	mov	r1, r7
 8019f30:	f7e6 fb7c 	bl	800062c <__aeabi_dmul>
 8019f34:	ec41 0b10 	vmov	d0, r0, r1
 8019f38:	f7fe f972 	bl	8018220 <floor>
 8019f3c:	4b7f      	ldr	r3, [pc, #508]	; (801a13c <__kernel_rem_pio2+0x334>)
 8019f3e:	ec51 0b10 	vmov	r0, r1, d0
 8019f42:	2200      	movs	r2, #0
 8019f44:	f7e6 fb72 	bl	800062c <__aeabi_dmul>
 8019f48:	4602      	mov	r2, r0
 8019f4a:	460b      	mov	r3, r1
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	4639      	mov	r1, r7
 8019f50:	f7e6 f9b4 	bl	80002bc <__aeabi_dsub>
 8019f54:	460f      	mov	r7, r1
 8019f56:	4606      	mov	r6, r0
 8019f58:	f7e6 fe18 	bl	8000b8c <__aeabi_d2iz>
 8019f5c:	9007      	str	r0, [sp, #28]
 8019f5e:	f7e6 fafb 	bl	8000558 <__aeabi_i2d>
 8019f62:	4602      	mov	r2, r0
 8019f64:	460b      	mov	r3, r1
 8019f66:	4630      	mov	r0, r6
 8019f68:	4639      	mov	r1, r7
 8019f6a:	f7e6 f9a7 	bl	80002bc <__aeabi_dsub>
 8019f6e:	f1ba 0f00 	cmp.w	sl, #0
 8019f72:	4606      	mov	r6, r0
 8019f74:	460f      	mov	r7, r1
 8019f76:	dd70      	ble.n	801a05a <__kernel_rem_pio2+0x252>
 8019f78:	1e62      	subs	r2, r4, #1
 8019f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8019f7c:	9d07      	ldr	r5, [sp, #28]
 8019f7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f82:	f1ca 0118 	rsb	r1, sl, #24
 8019f86:	fa40 f301 	asr.w	r3, r0, r1
 8019f8a:	441d      	add	r5, r3
 8019f8c:	408b      	lsls	r3, r1
 8019f8e:	1ac0      	subs	r0, r0, r3
 8019f90:	ab0c      	add	r3, sp, #48	; 0x30
 8019f92:	9507      	str	r5, [sp, #28]
 8019f94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019f98:	f1ca 0317 	rsb	r3, sl, #23
 8019f9c:	fa40 f303 	asr.w	r3, r0, r3
 8019fa0:	9302      	str	r3, [sp, #8]
 8019fa2:	9b02      	ldr	r3, [sp, #8]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	dd66      	ble.n	801a076 <__kernel_rem_pio2+0x26e>
 8019fa8:	9b07      	ldr	r3, [sp, #28]
 8019faa:	2200      	movs	r2, #0
 8019fac:	3301      	adds	r3, #1
 8019fae:	9307      	str	r3, [sp, #28]
 8019fb0:	4615      	mov	r5, r2
 8019fb2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019fb6:	4294      	cmp	r4, r2
 8019fb8:	f300 8099 	bgt.w	801a0ee <__kernel_rem_pio2+0x2e6>
 8019fbc:	f1ba 0f00 	cmp.w	sl, #0
 8019fc0:	dd07      	ble.n	8019fd2 <__kernel_rem_pio2+0x1ca>
 8019fc2:	f1ba 0f01 	cmp.w	sl, #1
 8019fc6:	f000 80a5 	beq.w	801a114 <__kernel_rem_pio2+0x30c>
 8019fca:	f1ba 0f02 	cmp.w	sl, #2
 8019fce:	f000 80c1 	beq.w	801a154 <__kernel_rem_pio2+0x34c>
 8019fd2:	9b02      	ldr	r3, [sp, #8]
 8019fd4:	2b02      	cmp	r3, #2
 8019fd6:	d14e      	bne.n	801a076 <__kernel_rem_pio2+0x26e>
 8019fd8:	4632      	mov	r2, r6
 8019fda:	463b      	mov	r3, r7
 8019fdc:	4958      	ldr	r1, [pc, #352]	; (801a140 <__kernel_rem_pio2+0x338>)
 8019fde:	2000      	movs	r0, #0
 8019fe0:	f7e6 f96c 	bl	80002bc <__aeabi_dsub>
 8019fe4:	4606      	mov	r6, r0
 8019fe6:	460f      	mov	r7, r1
 8019fe8:	2d00      	cmp	r5, #0
 8019fea:	d044      	beq.n	801a076 <__kernel_rem_pio2+0x26e>
 8019fec:	4650      	mov	r0, sl
 8019fee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a130 <__kernel_rem_pio2+0x328>
 8019ff2:	f000 fd85 	bl	801ab00 <scalbn>
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	4639      	mov	r1, r7
 8019ffa:	ec53 2b10 	vmov	r2, r3, d0
 8019ffe:	f7e6 f95d 	bl	80002bc <__aeabi_dsub>
 801a002:	4606      	mov	r6, r0
 801a004:	460f      	mov	r7, r1
 801a006:	e036      	b.n	801a076 <__kernel_rem_pio2+0x26e>
 801a008:	4b4e      	ldr	r3, [pc, #312]	; (801a144 <__kernel_rem_pio2+0x33c>)
 801a00a:	2200      	movs	r2, #0
 801a00c:	4630      	mov	r0, r6
 801a00e:	4639      	mov	r1, r7
 801a010:	f7e6 fb0c 	bl	800062c <__aeabi_dmul>
 801a014:	f7e6 fdba 	bl	8000b8c <__aeabi_d2iz>
 801a018:	f7e6 fa9e 	bl	8000558 <__aeabi_i2d>
 801a01c:	4b4a      	ldr	r3, [pc, #296]	; (801a148 <__kernel_rem_pio2+0x340>)
 801a01e:	2200      	movs	r2, #0
 801a020:	4680      	mov	r8, r0
 801a022:	4689      	mov	r9, r1
 801a024:	f7e6 fb02 	bl	800062c <__aeabi_dmul>
 801a028:	4602      	mov	r2, r0
 801a02a:	460b      	mov	r3, r1
 801a02c:	4630      	mov	r0, r6
 801a02e:	4639      	mov	r1, r7
 801a030:	f7e6 f944 	bl	80002bc <__aeabi_dsub>
 801a034:	f7e6 fdaa 	bl	8000b8c <__aeabi_d2iz>
 801a038:	9b02      	ldr	r3, [sp, #8]
 801a03a:	f843 0b04 	str.w	r0, [r3], #4
 801a03e:	3d01      	subs	r5, #1
 801a040:	9302      	str	r3, [sp, #8]
 801a042:	ab70      	add	r3, sp, #448	; 0x1c0
 801a044:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a04c:	4640      	mov	r0, r8
 801a04e:	4649      	mov	r1, r9
 801a050:	f7e6 f936 	bl	80002c0 <__adddf3>
 801a054:	4606      	mov	r6, r0
 801a056:	460f      	mov	r7, r1
 801a058:	e75b      	b.n	8019f12 <__kernel_rem_pio2+0x10a>
 801a05a:	d105      	bne.n	801a068 <__kernel_rem_pio2+0x260>
 801a05c:	1e63      	subs	r3, r4, #1
 801a05e:	aa0c      	add	r2, sp, #48	; 0x30
 801a060:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a064:	15c3      	asrs	r3, r0, #23
 801a066:	e79b      	b.n	8019fa0 <__kernel_rem_pio2+0x198>
 801a068:	4b38      	ldr	r3, [pc, #224]	; (801a14c <__kernel_rem_pio2+0x344>)
 801a06a:	2200      	movs	r2, #0
 801a06c:	f7e6 fd64 	bl	8000b38 <__aeabi_dcmpge>
 801a070:	2800      	cmp	r0, #0
 801a072:	d139      	bne.n	801a0e8 <__kernel_rem_pio2+0x2e0>
 801a074:	9002      	str	r0, [sp, #8]
 801a076:	2200      	movs	r2, #0
 801a078:	2300      	movs	r3, #0
 801a07a:	4630      	mov	r0, r6
 801a07c:	4639      	mov	r1, r7
 801a07e:	f7e6 fd3d 	bl	8000afc <__aeabi_dcmpeq>
 801a082:	2800      	cmp	r0, #0
 801a084:	f000 80b4 	beq.w	801a1f0 <__kernel_rem_pio2+0x3e8>
 801a088:	f104 3bff 	add.w	fp, r4, #4294967295
 801a08c:	465b      	mov	r3, fp
 801a08e:	2200      	movs	r2, #0
 801a090:	9904      	ldr	r1, [sp, #16]
 801a092:	428b      	cmp	r3, r1
 801a094:	da65      	bge.n	801a162 <__kernel_rem_pio2+0x35a>
 801a096:	2a00      	cmp	r2, #0
 801a098:	d07b      	beq.n	801a192 <__kernel_rem_pio2+0x38a>
 801a09a:	ab0c      	add	r3, sp, #48	; 0x30
 801a09c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a0a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	f000 80a0 	beq.w	801a1ea <__kernel_rem_pio2+0x3e2>
 801a0aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801a130 <__kernel_rem_pio2+0x328>
 801a0ae:	4650      	mov	r0, sl
 801a0b0:	f000 fd26 	bl	801ab00 <scalbn>
 801a0b4:	4f23      	ldr	r7, [pc, #140]	; (801a144 <__kernel_rem_pio2+0x33c>)
 801a0b6:	ec55 4b10 	vmov	r4, r5, d0
 801a0ba:	46d8      	mov	r8, fp
 801a0bc:	2600      	movs	r6, #0
 801a0be:	f1b8 0f00 	cmp.w	r8, #0
 801a0c2:	f280 80cf 	bge.w	801a264 <__kernel_rem_pio2+0x45c>
 801a0c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801a128 <__kernel_rem_pio2+0x320>
 801a0ca:	465f      	mov	r7, fp
 801a0cc:	f04f 0800 	mov.w	r8, #0
 801a0d0:	2f00      	cmp	r7, #0
 801a0d2:	f2c0 80fd 	blt.w	801a2d0 <__kernel_rem_pio2+0x4c8>
 801a0d6:	ab70      	add	r3, sp, #448	; 0x1c0
 801a0d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a150 <__kernel_rem_pio2+0x348>
 801a0dc:	ec55 4b18 	vmov	r4, r5, d8
 801a0e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801a0e4:	2600      	movs	r6, #0
 801a0e6:	e0e5      	b.n	801a2b4 <__kernel_rem_pio2+0x4ac>
 801a0e8:	2302      	movs	r3, #2
 801a0ea:	9302      	str	r3, [sp, #8]
 801a0ec:	e75c      	b.n	8019fa8 <__kernel_rem_pio2+0x1a0>
 801a0ee:	f8db 3000 	ldr.w	r3, [fp]
 801a0f2:	b955      	cbnz	r5, 801a10a <__kernel_rem_pio2+0x302>
 801a0f4:	b123      	cbz	r3, 801a100 <__kernel_rem_pio2+0x2f8>
 801a0f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a0fa:	f8cb 3000 	str.w	r3, [fp]
 801a0fe:	2301      	movs	r3, #1
 801a100:	3201      	adds	r2, #1
 801a102:	f10b 0b04 	add.w	fp, fp, #4
 801a106:	461d      	mov	r5, r3
 801a108:	e755      	b.n	8019fb6 <__kernel_rem_pio2+0x1ae>
 801a10a:	1acb      	subs	r3, r1, r3
 801a10c:	f8cb 3000 	str.w	r3, [fp]
 801a110:	462b      	mov	r3, r5
 801a112:	e7f5      	b.n	801a100 <__kernel_rem_pio2+0x2f8>
 801a114:	1e62      	subs	r2, r4, #1
 801a116:	ab0c      	add	r3, sp, #48	; 0x30
 801a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a11c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a120:	a90c      	add	r1, sp, #48	; 0x30
 801a122:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a126:	e754      	b.n	8019fd2 <__kernel_rem_pio2+0x1ca>
	...
 801a134:	3ff00000 	.word	0x3ff00000
 801a138:	08020580 	.word	0x08020580
 801a13c:	40200000 	.word	0x40200000
 801a140:	3ff00000 	.word	0x3ff00000
 801a144:	3e700000 	.word	0x3e700000
 801a148:	41700000 	.word	0x41700000
 801a14c:	3fe00000 	.word	0x3fe00000
 801a150:	08020540 	.word	0x08020540
 801a154:	1e62      	subs	r2, r4, #1
 801a156:	ab0c      	add	r3, sp, #48	; 0x30
 801a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a15c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a160:	e7de      	b.n	801a120 <__kernel_rem_pio2+0x318>
 801a162:	a90c      	add	r1, sp, #48	; 0x30
 801a164:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a168:	3b01      	subs	r3, #1
 801a16a:	430a      	orrs	r2, r1
 801a16c:	e790      	b.n	801a090 <__kernel_rem_pio2+0x288>
 801a16e:	3301      	adds	r3, #1
 801a170:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a174:	2900      	cmp	r1, #0
 801a176:	d0fa      	beq.n	801a16e <__kernel_rem_pio2+0x366>
 801a178:	9a08      	ldr	r2, [sp, #32]
 801a17a:	18e3      	adds	r3, r4, r3
 801a17c:	18a6      	adds	r6, r4, r2
 801a17e:	aa20      	add	r2, sp, #128	; 0x80
 801a180:	1c65      	adds	r5, r4, #1
 801a182:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a186:	9302      	str	r3, [sp, #8]
 801a188:	9b02      	ldr	r3, [sp, #8]
 801a18a:	42ab      	cmp	r3, r5
 801a18c:	da04      	bge.n	801a198 <__kernel_rem_pio2+0x390>
 801a18e:	461c      	mov	r4, r3
 801a190:	e6b5      	b.n	8019efe <__kernel_rem_pio2+0xf6>
 801a192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a194:	2301      	movs	r3, #1
 801a196:	e7eb      	b.n	801a170 <__kernel_rem_pio2+0x368>
 801a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a19a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a19e:	f7e6 f9db 	bl	8000558 <__aeabi_i2d>
 801a1a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1a8:	46b3      	mov	fp, r6
 801a1aa:	461c      	mov	r4, r3
 801a1ac:	2700      	movs	r7, #0
 801a1ae:	f04f 0800 	mov.w	r8, #0
 801a1b2:	f04f 0900 	mov.w	r9, #0
 801a1b6:	9b06      	ldr	r3, [sp, #24]
 801a1b8:	429f      	cmp	r7, r3
 801a1ba:	dd06      	ble.n	801a1ca <__kernel_rem_pio2+0x3c2>
 801a1bc:	ab70      	add	r3, sp, #448	; 0x1c0
 801a1be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a1c2:	e9c3 8900 	strd	r8, r9, [r3]
 801a1c6:	3501      	adds	r5, #1
 801a1c8:	e7de      	b.n	801a188 <__kernel_rem_pio2+0x380>
 801a1ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a1ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a1d2:	f7e6 fa2b 	bl	800062c <__aeabi_dmul>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	460b      	mov	r3, r1
 801a1da:	4640      	mov	r0, r8
 801a1dc:	4649      	mov	r1, r9
 801a1de:	f7e6 f86f 	bl	80002c0 <__adddf3>
 801a1e2:	3701      	adds	r7, #1
 801a1e4:	4680      	mov	r8, r0
 801a1e6:	4689      	mov	r9, r1
 801a1e8:	e7e5      	b.n	801a1b6 <__kernel_rem_pio2+0x3ae>
 801a1ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a1ee:	e754      	b.n	801a09a <__kernel_rem_pio2+0x292>
 801a1f0:	ec47 6b10 	vmov	d0, r6, r7
 801a1f4:	f1ca 0000 	rsb	r0, sl, #0
 801a1f8:	f000 fc82 	bl	801ab00 <scalbn>
 801a1fc:	ec57 6b10 	vmov	r6, r7, d0
 801a200:	4b9f      	ldr	r3, [pc, #636]	; (801a480 <__kernel_rem_pio2+0x678>)
 801a202:	ee10 0a10 	vmov	r0, s0
 801a206:	2200      	movs	r2, #0
 801a208:	4639      	mov	r1, r7
 801a20a:	f7e6 fc95 	bl	8000b38 <__aeabi_dcmpge>
 801a20e:	b300      	cbz	r0, 801a252 <__kernel_rem_pio2+0x44a>
 801a210:	4b9c      	ldr	r3, [pc, #624]	; (801a484 <__kernel_rem_pio2+0x67c>)
 801a212:	2200      	movs	r2, #0
 801a214:	4630      	mov	r0, r6
 801a216:	4639      	mov	r1, r7
 801a218:	f7e6 fa08 	bl	800062c <__aeabi_dmul>
 801a21c:	f7e6 fcb6 	bl	8000b8c <__aeabi_d2iz>
 801a220:	4605      	mov	r5, r0
 801a222:	f7e6 f999 	bl	8000558 <__aeabi_i2d>
 801a226:	4b96      	ldr	r3, [pc, #600]	; (801a480 <__kernel_rem_pio2+0x678>)
 801a228:	2200      	movs	r2, #0
 801a22a:	f7e6 f9ff 	bl	800062c <__aeabi_dmul>
 801a22e:	460b      	mov	r3, r1
 801a230:	4602      	mov	r2, r0
 801a232:	4639      	mov	r1, r7
 801a234:	4630      	mov	r0, r6
 801a236:	f7e6 f841 	bl	80002bc <__aeabi_dsub>
 801a23a:	f7e6 fca7 	bl	8000b8c <__aeabi_d2iz>
 801a23e:	f104 0b01 	add.w	fp, r4, #1
 801a242:	ab0c      	add	r3, sp, #48	; 0x30
 801a244:	f10a 0a18 	add.w	sl, sl, #24
 801a248:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a24c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801a250:	e72b      	b.n	801a0aa <__kernel_rem_pio2+0x2a2>
 801a252:	4630      	mov	r0, r6
 801a254:	4639      	mov	r1, r7
 801a256:	f7e6 fc99 	bl	8000b8c <__aeabi_d2iz>
 801a25a:	ab0c      	add	r3, sp, #48	; 0x30
 801a25c:	46a3      	mov	fp, r4
 801a25e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a262:	e722      	b.n	801a0aa <__kernel_rem_pio2+0x2a2>
 801a264:	ab70      	add	r3, sp, #448	; 0x1c0
 801a266:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801a26a:	ab0c      	add	r3, sp, #48	; 0x30
 801a26c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a270:	f7e6 f972 	bl	8000558 <__aeabi_i2d>
 801a274:	4622      	mov	r2, r4
 801a276:	462b      	mov	r3, r5
 801a278:	f7e6 f9d8 	bl	800062c <__aeabi_dmul>
 801a27c:	4632      	mov	r2, r6
 801a27e:	e9c9 0100 	strd	r0, r1, [r9]
 801a282:	463b      	mov	r3, r7
 801a284:	4620      	mov	r0, r4
 801a286:	4629      	mov	r1, r5
 801a288:	f7e6 f9d0 	bl	800062c <__aeabi_dmul>
 801a28c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a290:	4604      	mov	r4, r0
 801a292:	460d      	mov	r5, r1
 801a294:	e713      	b.n	801a0be <__kernel_rem_pio2+0x2b6>
 801a296:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a29a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a29e:	f7e6 f9c5 	bl	800062c <__aeabi_dmul>
 801a2a2:	4602      	mov	r2, r0
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	4620      	mov	r0, r4
 801a2a8:	4629      	mov	r1, r5
 801a2aa:	f7e6 f809 	bl	80002c0 <__adddf3>
 801a2ae:	3601      	adds	r6, #1
 801a2b0:	4604      	mov	r4, r0
 801a2b2:	460d      	mov	r5, r1
 801a2b4:	9b04      	ldr	r3, [sp, #16]
 801a2b6:	429e      	cmp	r6, r3
 801a2b8:	dc01      	bgt.n	801a2be <__kernel_rem_pio2+0x4b6>
 801a2ba:	45b0      	cmp	r8, r6
 801a2bc:	daeb      	bge.n	801a296 <__kernel_rem_pio2+0x48e>
 801a2be:	ab48      	add	r3, sp, #288	; 0x120
 801a2c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2c4:	e9c3 4500 	strd	r4, r5, [r3]
 801a2c8:	3f01      	subs	r7, #1
 801a2ca:	f108 0801 	add.w	r8, r8, #1
 801a2ce:	e6ff      	b.n	801a0d0 <__kernel_rem_pio2+0x2c8>
 801a2d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2d2:	2b02      	cmp	r3, #2
 801a2d4:	dc0b      	bgt.n	801a2ee <__kernel_rem_pio2+0x4e6>
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	dc6e      	bgt.n	801a3b8 <__kernel_rem_pio2+0x5b0>
 801a2da:	d045      	beq.n	801a368 <__kernel_rem_pio2+0x560>
 801a2dc:	9b07      	ldr	r3, [sp, #28]
 801a2de:	f003 0007 	and.w	r0, r3, #7
 801a2e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a2e6:	ecbd 8b02 	vpop	{d8}
 801a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2f0:	2b03      	cmp	r3, #3
 801a2f2:	d1f3      	bne.n	801a2dc <__kernel_rem_pio2+0x4d4>
 801a2f4:	ab48      	add	r3, sp, #288	; 0x120
 801a2f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801a2fa:	46d0      	mov	r8, sl
 801a2fc:	46d9      	mov	r9, fp
 801a2fe:	f1b9 0f00 	cmp.w	r9, #0
 801a302:	f1a8 0808 	sub.w	r8, r8, #8
 801a306:	dc64      	bgt.n	801a3d2 <__kernel_rem_pio2+0x5ca>
 801a308:	465c      	mov	r4, fp
 801a30a:	2c01      	cmp	r4, #1
 801a30c:	f1aa 0a08 	sub.w	sl, sl, #8
 801a310:	dc7e      	bgt.n	801a410 <__kernel_rem_pio2+0x608>
 801a312:	2000      	movs	r0, #0
 801a314:	2100      	movs	r1, #0
 801a316:	f1bb 0f01 	cmp.w	fp, #1
 801a31a:	f300 8097 	bgt.w	801a44c <__kernel_rem_pio2+0x644>
 801a31e:	9b02      	ldr	r3, [sp, #8]
 801a320:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801a324:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a328:	2b00      	cmp	r3, #0
 801a32a:	f040 8099 	bne.w	801a460 <__kernel_rem_pio2+0x658>
 801a32e:	9b01      	ldr	r3, [sp, #4]
 801a330:	e9c3 5600 	strd	r5, r6, [r3]
 801a334:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a338:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a33c:	e7ce      	b.n	801a2dc <__kernel_rem_pio2+0x4d4>
 801a33e:	ab48      	add	r3, sp, #288	; 0x120
 801a340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a348:	f7e5 ffba 	bl	80002c0 <__adddf3>
 801a34c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a350:	f1bb 0f00 	cmp.w	fp, #0
 801a354:	daf3      	bge.n	801a33e <__kernel_rem_pio2+0x536>
 801a356:	9b02      	ldr	r3, [sp, #8]
 801a358:	b113      	cbz	r3, 801a360 <__kernel_rem_pio2+0x558>
 801a35a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a35e:	4619      	mov	r1, r3
 801a360:	9b01      	ldr	r3, [sp, #4]
 801a362:	e9c3 0100 	strd	r0, r1, [r3]
 801a366:	e7b9      	b.n	801a2dc <__kernel_rem_pio2+0x4d4>
 801a368:	2000      	movs	r0, #0
 801a36a:	2100      	movs	r1, #0
 801a36c:	e7f0      	b.n	801a350 <__kernel_rem_pio2+0x548>
 801a36e:	ab48      	add	r3, sp, #288	; 0x120
 801a370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a378:	f7e5 ffa2 	bl	80002c0 <__adddf3>
 801a37c:	3c01      	subs	r4, #1
 801a37e:	2c00      	cmp	r4, #0
 801a380:	daf5      	bge.n	801a36e <__kernel_rem_pio2+0x566>
 801a382:	9b02      	ldr	r3, [sp, #8]
 801a384:	b1e3      	cbz	r3, 801a3c0 <__kernel_rem_pio2+0x5b8>
 801a386:	4602      	mov	r2, r0
 801a388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a38c:	9c01      	ldr	r4, [sp, #4]
 801a38e:	e9c4 2300 	strd	r2, r3, [r4]
 801a392:	4602      	mov	r2, r0
 801a394:	460b      	mov	r3, r1
 801a396:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a39a:	f7e5 ff8f 	bl	80002bc <__aeabi_dsub>
 801a39e:	ad4a      	add	r5, sp, #296	; 0x128
 801a3a0:	2401      	movs	r4, #1
 801a3a2:	45a3      	cmp	fp, r4
 801a3a4:	da0f      	bge.n	801a3c6 <__kernel_rem_pio2+0x5be>
 801a3a6:	9b02      	ldr	r3, [sp, #8]
 801a3a8:	b113      	cbz	r3, 801a3b0 <__kernel_rem_pio2+0x5a8>
 801a3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3ae:	4619      	mov	r1, r3
 801a3b0:	9b01      	ldr	r3, [sp, #4]
 801a3b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a3b6:	e791      	b.n	801a2dc <__kernel_rem_pio2+0x4d4>
 801a3b8:	465c      	mov	r4, fp
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	2100      	movs	r1, #0
 801a3be:	e7de      	b.n	801a37e <__kernel_rem_pio2+0x576>
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	460b      	mov	r3, r1
 801a3c4:	e7e2      	b.n	801a38c <__kernel_rem_pio2+0x584>
 801a3c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801a3ca:	f7e5 ff79 	bl	80002c0 <__adddf3>
 801a3ce:	3401      	adds	r4, #1
 801a3d0:	e7e7      	b.n	801a3a2 <__kernel_rem_pio2+0x59a>
 801a3d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 801a3d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801a3da:	4620      	mov	r0, r4
 801a3dc:	4632      	mov	r2, r6
 801a3de:	463b      	mov	r3, r7
 801a3e0:	4629      	mov	r1, r5
 801a3e2:	f7e5 ff6d 	bl	80002c0 <__adddf3>
 801a3e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a3ea:	4602      	mov	r2, r0
 801a3ec:	460b      	mov	r3, r1
 801a3ee:	4620      	mov	r0, r4
 801a3f0:	4629      	mov	r1, r5
 801a3f2:	f7e5 ff63 	bl	80002bc <__aeabi_dsub>
 801a3f6:	4632      	mov	r2, r6
 801a3f8:	463b      	mov	r3, r7
 801a3fa:	f7e5 ff61 	bl	80002c0 <__adddf3>
 801a3fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a402:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801a406:	ed88 7b00 	vstr	d7, [r8]
 801a40a:	f109 39ff 	add.w	r9, r9, #4294967295
 801a40e:	e776      	b.n	801a2fe <__kernel_rem_pio2+0x4f6>
 801a410:	e9da 8900 	ldrd	r8, r9, [sl]
 801a414:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a418:	4640      	mov	r0, r8
 801a41a:	4632      	mov	r2, r6
 801a41c:	463b      	mov	r3, r7
 801a41e:	4649      	mov	r1, r9
 801a420:	f7e5 ff4e 	bl	80002c0 <__adddf3>
 801a424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a428:	4602      	mov	r2, r0
 801a42a:	460b      	mov	r3, r1
 801a42c:	4640      	mov	r0, r8
 801a42e:	4649      	mov	r1, r9
 801a430:	f7e5 ff44 	bl	80002bc <__aeabi_dsub>
 801a434:	4632      	mov	r2, r6
 801a436:	463b      	mov	r3, r7
 801a438:	f7e5 ff42 	bl	80002c0 <__adddf3>
 801a43c:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a440:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a444:	ed8a 7b00 	vstr	d7, [sl]
 801a448:	3c01      	subs	r4, #1
 801a44a:	e75e      	b.n	801a30a <__kernel_rem_pio2+0x502>
 801a44c:	ab48      	add	r3, sp, #288	; 0x120
 801a44e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a456:	f7e5 ff33 	bl	80002c0 <__adddf3>
 801a45a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a45e:	e75a      	b.n	801a316 <__kernel_rem_pio2+0x50e>
 801a460:	9b01      	ldr	r3, [sp, #4]
 801a462:	9a01      	ldr	r2, [sp, #4]
 801a464:	601d      	str	r5, [r3, #0]
 801a466:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a46a:	605c      	str	r4, [r3, #4]
 801a46c:	609f      	str	r7, [r3, #8]
 801a46e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a472:	60d3      	str	r3, [r2, #12]
 801a474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a478:	6110      	str	r0, [r2, #16]
 801a47a:	6153      	str	r3, [r2, #20]
 801a47c:	e72e      	b.n	801a2dc <__kernel_rem_pio2+0x4d4>
 801a47e:	bf00      	nop
 801a480:	41700000 	.word	0x41700000
 801a484:	3e700000 	.word	0x3e700000

0801a488 <__kernel_sin>:
 801a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a48c:	ed2d 8b04 	vpush	{d8-d9}
 801a490:	eeb0 8a41 	vmov.f32	s16, s2
 801a494:	eef0 8a61 	vmov.f32	s17, s3
 801a498:	ec55 4b10 	vmov	r4, r5, d0
 801a49c:	b083      	sub	sp, #12
 801a49e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a4a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a4a6:	9001      	str	r0, [sp, #4]
 801a4a8:	da06      	bge.n	801a4b8 <__kernel_sin+0x30>
 801a4aa:	ee10 0a10 	vmov	r0, s0
 801a4ae:	4629      	mov	r1, r5
 801a4b0:	f7e6 fb6c 	bl	8000b8c <__aeabi_d2iz>
 801a4b4:	2800      	cmp	r0, #0
 801a4b6:	d051      	beq.n	801a55c <__kernel_sin+0xd4>
 801a4b8:	4622      	mov	r2, r4
 801a4ba:	462b      	mov	r3, r5
 801a4bc:	4620      	mov	r0, r4
 801a4be:	4629      	mov	r1, r5
 801a4c0:	f7e6 f8b4 	bl	800062c <__aeabi_dmul>
 801a4c4:	4682      	mov	sl, r0
 801a4c6:	468b      	mov	fp, r1
 801a4c8:	4602      	mov	r2, r0
 801a4ca:	460b      	mov	r3, r1
 801a4cc:	4620      	mov	r0, r4
 801a4ce:	4629      	mov	r1, r5
 801a4d0:	f7e6 f8ac 	bl	800062c <__aeabi_dmul>
 801a4d4:	a341      	add	r3, pc, #260	; (adr r3, 801a5dc <__kernel_sin+0x154>)
 801a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4da:	4680      	mov	r8, r0
 801a4dc:	4689      	mov	r9, r1
 801a4de:	4650      	mov	r0, sl
 801a4e0:	4659      	mov	r1, fp
 801a4e2:	f7e6 f8a3 	bl	800062c <__aeabi_dmul>
 801a4e6:	a33f      	add	r3, pc, #252	; (adr r3, 801a5e4 <__kernel_sin+0x15c>)
 801a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ec:	f7e5 fee6 	bl	80002bc <__aeabi_dsub>
 801a4f0:	4652      	mov	r2, sl
 801a4f2:	465b      	mov	r3, fp
 801a4f4:	f7e6 f89a 	bl	800062c <__aeabi_dmul>
 801a4f8:	a33c      	add	r3, pc, #240	; (adr r3, 801a5ec <__kernel_sin+0x164>)
 801a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4fe:	f7e5 fedf 	bl	80002c0 <__adddf3>
 801a502:	4652      	mov	r2, sl
 801a504:	465b      	mov	r3, fp
 801a506:	f7e6 f891 	bl	800062c <__aeabi_dmul>
 801a50a:	a33a      	add	r3, pc, #232	; (adr r3, 801a5f4 <__kernel_sin+0x16c>)
 801a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a510:	f7e5 fed4 	bl	80002bc <__aeabi_dsub>
 801a514:	4652      	mov	r2, sl
 801a516:	465b      	mov	r3, fp
 801a518:	f7e6 f888 	bl	800062c <__aeabi_dmul>
 801a51c:	a337      	add	r3, pc, #220	; (adr r3, 801a5fc <__kernel_sin+0x174>)
 801a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a522:	f7e5 fecd 	bl	80002c0 <__adddf3>
 801a526:	9b01      	ldr	r3, [sp, #4]
 801a528:	4606      	mov	r6, r0
 801a52a:	460f      	mov	r7, r1
 801a52c:	b9eb      	cbnz	r3, 801a56a <__kernel_sin+0xe2>
 801a52e:	4602      	mov	r2, r0
 801a530:	460b      	mov	r3, r1
 801a532:	4650      	mov	r0, sl
 801a534:	4659      	mov	r1, fp
 801a536:	f7e6 f879 	bl	800062c <__aeabi_dmul>
 801a53a:	a325      	add	r3, pc, #148	; (adr r3, 801a5d0 <__kernel_sin+0x148>)
 801a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a540:	f7e5 febc 	bl	80002bc <__aeabi_dsub>
 801a544:	4642      	mov	r2, r8
 801a546:	464b      	mov	r3, r9
 801a548:	f7e6 f870 	bl	800062c <__aeabi_dmul>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	4620      	mov	r0, r4
 801a552:	4629      	mov	r1, r5
 801a554:	f7e5 feb4 	bl	80002c0 <__adddf3>
 801a558:	4604      	mov	r4, r0
 801a55a:	460d      	mov	r5, r1
 801a55c:	ec45 4b10 	vmov	d0, r4, r5
 801a560:	b003      	add	sp, #12
 801a562:	ecbd 8b04 	vpop	{d8-d9}
 801a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a56a:	4b1b      	ldr	r3, [pc, #108]	; (801a5d8 <__kernel_sin+0x150>)
 801a56c:	ec51 0b18 	vmov	r0, r1, d8
 801a570:	2200      	movs	r2, #0
 801a572:	f7e6 f85b 	bl	800062c <__aeabi_dmul>
 801a576:	4632      	mov	r2, r6
 801a578:	ec41 0b19 	vmov	d9, r0, r1
 801a57c:	463b      	mov	r3, r7
 801a57e:	4640      	mov	r0, r8
 801a580:	4649      	mov	r1, r9
 801a582:	f7e6 f853 	bl	800062c <__aeabi_dmul>
 801a586:	4602      	mov	r2, r0
 801a588:	460b      	mov	r3, r1
 801a58a:	ec51 0b19 	vmov	r0, r1, d9
 801a58e:	f7e5 fe95 	bl	80002bc <__aeabi_dsub>
 801a592:	4652      	mov	r2, sl
 801a594:	465b      	mov	r3, fp
 801a596:	f7e6 f849 	bl	800062c <__aeabi_dmul>
 801a59a:	ec53 2b18 	vmov	r2, r3, d8
 801a59e:	f7e5 fe8d 	bl	80002bc <__aeabi_dsub>
 801a5a2:	a30b      	add	r3, pc, #44	; (adr r3, 801a5d0 <__kernel_sin+0x148>)
 801a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a8:	4606      	mov	r6, r0
 801a5aa:	460f      	mov	r7, r1
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	4649      	mov	r1, r9
 801a5b0:	f7e6 f83c 	bl	800062c <__aeabi_dmul>
 801a5b4:	4602      	mov	r2, r0
 801a5b6:	460b      	mov	r3, r1
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	4639      	mov	r1, r7
 801a5bc:	f7e5 fe80 	bl	80002c0 <__adddf3>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	460b      	mov	r3, r1
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	4629      	mov	r1, r5
 801a5c8:	f7e5 fe78 	bl	80002bc <__aeabi_dsub>
 801a5cc:	e7c4      	b.n	801a558 <__kernel_sin+0xd0>
 801a5ce:	bf00      	nop
 801a5d0:	55555549 	.word	0x55555549
 801a5d4:	3fc55555 	.word	0x3fc55555
 801a5d8:	3fe00000 	.word	0x3fe00000
 801a5dc:	5acfd57c 	.word	0x5acfd57c
 801a5e0:	3de5d93a 	.word	0x3de5d93a
 801a5e4:	8a2b9ceb 	.word	0x8a2b9ceb
 801a5e8:	3e5ae5e6 	.word	0x3e5ae5e6
 801a5ec:	57b1fe7d 	.word	0x57b1fe7d
 801a5f0:	3ec71de3 	.word	0x3ec71de3
 801a5f4:	19c161d5 	.word	0x19c161d5
 801a5f8:	3f2a01a0 	.word	0x3f2a01a0
 801a5fc:	1110f8a6 	.word	0x1110f8a6
 801a600:	3f811111 	.word	0x3f811111
 801a604:	00000000 	.word	0x00000000

0801a608 <__kernel_tan>:
 801a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60c:	ed2d 8b04 	vpush	{d8-d9}
 801a610:	ec5b ab10 	vmov	sl, fp, d0
 801a614:	4be2      	ldr	r3, [pc, #904]	; (801a9a0 <__kernel_tan+0x398>)
 801a616:	b085      	sub	sp, #20
 801a618:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801a61c:	429f      	cmp	r7, r3
 801a61e:	ed8d 1b00 	vstr	d1, [sp]
 801a622:	4606      	mov	r6, r0
 801a624:	f8cd b00c 	str.w	fp, [sp, #12]
 801a628:	dc24      	bgt.n	801a674 <__kernel_tan+0x6c>
 801a62a:	ee10 0a10 	vmov	r0, s0
 801a62e:	4659      	mov	r1, fp
 801a630:	f7e6 faac 	bl	8000b8c <__aeabi_d2iz>
 801a634:	2800      	cmp	r0, #0
 801a636:	d148      	bne.n	801a6ca <__kernel_tan+0xc2>
 801a638:	1c73      	adds	r3, r6, #1
 801a63a:	4652      	mov	r2, sl
 801a63c:	4313      	orrs	r3, r2
 801a63e:	433b      	orrs	r3, r7
 801a640:	d112      	bne.n	801a668 <__kernel_tan+0x60>
 801a642:	ec4b ab10 	vmov	d0, sl, fp
 801a646:	f000 f9b3 	bl	801a9b0 <fabs>
 801a64a:	49d6      	ldr	r1, [pc, #856]	; (801a9a4 <__kernel_tan+0x39c>)
 801a64c:	ec53 2b10 	vmov	r2, r3, d0
 801a650:	2000      	movs	r0, #0
 801a652:	f7e6 f915 	bl	8000880 <__aeabi_ddiv>
 801a656:	4682      	mov	sl, r0
 801a658:	468b      	mov	fp, r1
 801a65a:	ec4b ab10 	vmov	d0, sl, fp
 801a65e:	b005      	add	sp, #20
 801a660:	ecbd 8b04 	vpop	{d8-d9}
 801a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a668:	2e01      	cmp	r6, #1
 801a66a:	d0f6      	beq.n	801a65a <__kernel_tan+0x52>
 801a66c:	49ce      	ldr	r1, [pc, #824]	; (801a9a8 <__kernel_tan+0x3a0>)
 801a66e:	465b      	mov	r3, fp
 801a670:	2000      	movs	r0, #0
 801a672:	e7ee      	b.n	801a652 <__kernel_tan+0x4a>
 801a674:	4bcd      	ldr	r3, [pc, #820]	; (801a9ac <__kernel_tan+0x3a4>)
 801a676:	429f      	cmp	r7, r3
 801a678:	dd27      	ble.n	801a6ca <__kernel_tan+0xc2>
 801a67a:	9b03      	ldr	r3, [sp, #12]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	da0a      	bge.n	801a696 <__kernel_tan+0x8e>
 801a680:	e9dd 2100 	ldrd	r2, r1, [sp]
 801a684:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a688:	469b      	mov	fp, r3
 801a68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a68e:	e9cd 2300 	strd	r2, r3, [sp]
 801a692:	ee10 aa10 	vmov	sl, s0
 801a696:	4652      	mov	r2, sl
 801a698:	465b      	mov	r3, fp
 801a69a:	a1a1      	add	r1, pc, #644	; (adr r1, 801a920 <__kernel_tan+0x318>)
 801a69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6a0:	f7e5 fe0c 	bl	80002bc <__aeabi_dsub>
 801a6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a6a8:	4604      	mov	r4, r0
 801a6aa:	460d      	mov	r5, r1
 801a6ac:	a19e      	add	r1, pc, #632	; (adr r1, 801a928 <__kernel_tan+0x320>)
 801a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6b2:	f7e5 fe03 	bl	80002bc <__aeabi_dsub>
 801a6b6:	4622      	mov	r2, r4
 801a6b8:	462b      	mov	r3, r5
 801a6ba:	f7e5 fe01 	bl	80002c0 <__adddf3>
 801a6be:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 801a930 <__kernel_tan+0x328>
 801a6c2:	ed8d 7b00 	vstr	d7, [sp]
 801a6c6:	4682      	mov	sl, r0
 801a6c8:	468b      	mov	fp, r1
 801a6ca:	4652      	mov	r2, sl
 801a6cc:	465b      	mov	r3, fp
 801a6ce:	4650      	mov	r0, sl
 801a6d0:	4659      	mov	r1, fp
 801a6d2:	f7e5 ffab 	bl	800062c <__aeabi_dmul>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	460b      	mov	r3, r1
 801a6da:	4680      	mov	r8, r0
 801a6dc:	4689      	mov	r9, r1
 801a6de:	f7e5 ffa5 	bl	800062c <__aeabi_dmul>
 801a6e2:	4642      	mov	r2, r8
 801a6e4:	4604      	mov	r4, r0
 801a6e6:	460d      	mov	r5, r1
 801a6e8:	464b      	mov	r3, r9
 801a6ea:	4650      	mov	r0, sl
 801a6ec:	4659      	mov	r1, fp
 801a6ee:	f7e5 ff9d 	bl	800062c <__aeabi_dmul>
 801a6f2:	a391      	add	r3, pc, #580	; (adr r3, 801a938 <__kernel_tan+0x330>)
 801a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6f8:	ec41 0b18 	vmov	d8, r0, r1
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	4629      	mov	r1, r5
 801a700:	f7e5 ff94 	bl	800062c <__aeabi_dmul>
 801a704:	a38e      	add	r3, pc, #568	; (adr r3, 801a940 <__kernel_tan+0x338>)
 801a706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70a:	f7e5 fdd9 	bl	80002c0 <__adddf3>
 801a70e:	4622      	mov	r2, r4
 801a710:	462b      	mov	r3, r5
 801a712:	f7e5 ff8b 	bl	800062c <__aeabi_dmul>
 801a716:	a38c      	add	r3, pc, #560	; (adr r3, 801a948 <__kernel_tan+0x340>)
 801a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71c:	f7e5 fdd0 	bl	80002c0 <__adddf3>
 801a720:	4622      	mov	r2, r4
 801a722:	462b      	mov	r3, r5
 801a724:	f7e5 ff82 	bl	800062c <__aeabi_dmul>
 801a728:	a389      	add	r3, pc, #548	; (adr r3, 801a950 <__kernel_tan+0x348>)
 801a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72e:	f7e5 fdc7 	bl	80002c0 <__adddf3>
 801a732:	4622      	mov	r2, r4
 801a734:	462b      	mov	r3, r5
 801a736:	f7e5 ff79 	bl	800062c <__aeabi_dmul>
 801a73a:	a387      	add	r3, pc, #540	; (adr r3, 801a958 <__kernel_tan+0x350>)
 801a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a740:	f7e5 fdbe 	bl	80002c0 <__adddf3>
 801a744:	4622      	mov	r2, r4
 801a746:	462b      	mov	r3, r5
 801a748:	f7e5 ff70 	bl	800062c <__aeabi_dmul>
 801a74c:	a384      	add	r3, pc, #528	; (adr r3, 801a960 <__kernel_tan+0x358>)
 801a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a752:	f7e5 fdb5 	bl	80002c0 <__adddf3>
 801a756:	4642      	mov	r2, r8
 801a758:	464b      	mov	r3, r9
 801a75a:	f7e5 ff67 	bl	800062c <__aeabi_dmul>
 801a75e:	a382      	add	r3, pc, #520	; (adr r3, 801a968 <__kernel_tan+0x360>)
 801a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a764:	ec41 0b19 	vmov	d9, r0, r1
 801a768:	4620      	mov	r0, r4
 801a76a:	4629      	mov	r1, r5
 801a76c:	f7e5 ff5e 	bl	800062c <__aeabi_dmul>
 801a770:	a37f      	add	r3, pc, #508	; (adr r3, 801a970 <__kernel_tan+0x368>)
 801a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a776:	f7e5 fda3 	bl	80002c0 <__adddf3>
 801a77a:	4622      	mov	r2, r4
 801a77c:	462b      	mov	r3, r5
 801a77e:	f7e5 ff55 	bl	800062c <__aeabi_dmul>
 801a782:	a37d      	add	r3, pc, #500	; (adr r3, 801a978 <__kernel_tan+0x370>)
 801a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a788:	f7e5 fd9a 	bl	80002c0 <__adddf3>
 801a78c:	4622      	mov	r2, r4
 801a78e:	462b      	mov	r3, r5
 801a790:	f7e5 ff4c 	bl	800062c <__aeabi_dmul>
 801a794:	a37a      	add	r3, pc, #488	; (adr r3, 801a980 <__kernel_tan+0x378>)
 801a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a79a:	f7e5 fd91 	bl	80002c0 <__adddf3>
 801a79e:	4622      	mov	r2, r4
 801a7a0:	462b      	mov	r3, r5
 801a7a2:	f7e5 ff43 	bl	800062c <__aeabi_dmul>
 801a7a6:	a378      	add	r3, pc, #480	; (adr r3, 801a988 <__kernel_tan+0x380>)
 801a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ac:	f7e5 fd88 	bl	80002c0 <__adddf3>
 801a7b0:	4622      	mov	r2, r4
 801a7b2:	462b      	mov	r3, r5
 801a7b4:	f7e5 ff3a 	bl	800062c <__aeabi_dmul>
 801a7b8:	a375      	add	r3, pc, #468	; (adr r3, 801a990 <__kernel_tan+0x388>)
 801a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7be:	f7e5 fd7f 	bl	80002c0 <__adddf3>
 801a7c2:	4602      	mov	r2, r0
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	ec51 0b19 	vmov	r0, r1, d9
 801a7ca:	f7e5 fd79 	bl	80002c0 <__adddf3>
 801a7ce:	ec53 2b18 	vmov	r2, r3, d8
 801a7d2:	f7e5 ff2b 	bl	800062c <__aeabi_dmul>
 801a7d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a7da:	f7e5 fd71 	bl	80002c0 <__adddf3>
 801a7de:	4642      	mov	r2, r8
 801a7e0:	464b      	mov	r3, r9
 801a7e2:	f7e5 ff23 	bl	800062c <__aeabi_dmul>
 801a7e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a7ea:	f7e5 fd69 	bl	80002c0 <__adddf3>
 801a7ee:	a36a      	add	r3, pc, #424	; (adr r3, 801a998 <__kernel_tan+0x390>)
 801a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f4:	4604      	mov	r4, r0
 801a7f6:	460d      	mov	r5, r1
 801a7f8:	ec51 0b18 	vmov	r0, r1, d8
 801a7fc:	f7e5 ff16 	bl	800062c <__aeabi_dmul>
 801a800:	4622      	mov	r2, r4
 801a802:	462b      	mov	r3, r5
 801a804:	f7e5 fd5c 	bl	80002c0 <__adddf3>
 801a808:	460b      	mov	r3, r1
 801a80a:	ec41 0b18 	vmov	d8, r0, r1
 801a80e:	4602      	mov	r2, r0
 801a810:	4659      	mov	r1, fp
 801a812:	4650      	mov	r0, sl
 801a814:	f7e5 fd54 	bl	80002c0 <__adddf3>
 801a818:	4b64      	ldr	r3, [pc, #400]	; (801a9ac <__kernel_tan+0x3a4>)
 801a81a:	429f      	cmp	r7, r3
 801a81c:	4604      	mov	r4, r0
 801a81e:	460d      	mov	r5, r1
 801a820:	dd3e      	ble.n	801a8a0 <__kernel_tan+0x298>
 801a822:	4630      	mov	r0, r6
 801a824:	f7e5 fe98 	bl	8000558 <__aeabi_i2d>
 801a828:	4622      	mov	r2, r4
 801a82a:	4680      	mov	r8, r0
 801a82c:	4689      	mov	r9, r1
 801a82e:	462b      	mov	r3, r5
 801a830:	4620      	mov	r0, r4
 801a832:	4629      	mov	r1, r5
 801a834:	f7e5 fefa 	bl	800062c <__aeabi_dmul>
 801a838:	4642      	mov	r2, r8
 801a83a:	4606      	mov	r6, r0
 801a83c:	460f      	mov	r7, r1
 801a83e:	464b      	mov	r3, r9
 801a840:	4620      	mov	r0, r4
 801a842:	4629      	mov	r1, r5
 801a844:	f7e5 fd3c 	bl	80002c0 <__adddf3>
 801a848:	4602      	mov	r2, r0
 801a84a:	460b      	mov	r3, r1
 801a84c:	4630      	mov	r0, r6
 801a84e:	4639      	mov	r1, r7
 801a850:	f7e6 f816 	bl	8000880 <__aeabi_ddiv>
 801a854:	ec53 2b18 	vmov	r2, r3, d8
 801a858:	f7e5 fd30 	bl	80002bc <__aeabi_dsub>
 801a85c:	4602      	mov	r2, r0
 801a85e:	460b      	mov	r3, r1
 801a860:	4650      	mov	r0, sl
 801a862:	4659      	mov	r1, fp
 801a864:	f7e5 fd2a 	bl	80002bc <__aeabi_dsub>
 801a868:	4602      	mov	r2, r0
 801a86a:	460b      	mov	r3, r1
 801a86c:	f7e5 fd28 	bl	80002c0 <__adddf3>
 801a870:	4602      	mov	r2, r0
 801a872:	460b      	mov	r3, r1
 801a874:	4640      	mov	r0, r8
 801a876:	4649      	mov	r1, r9
 801a878:	f7e5 fd20 	bl	80002bc <__aeabi_dsub>
 801a87c:	9b03      	ldr	r3, [sp, #12]
 801a87e:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801a882:	f00a 0a02 	and.w	sl, sl, #2
 801a886:	4604      	mov	r4, r0
 801a888:	f1ca 0001 	rsb	r0, sl, #1
 801a88c:	460d      	mov	r5, r1
 801a88e:	f7e5 fe63 	bl	8000558 <__aeabi_i2d>
 801a892:	4602      	mov	r2, r0
 801a894:	460b      	mov	r3, r1
 801a896:	4620      	mov	r0, r4
 801a898:	4629      	mov	r1, r5
 801a89a:	f7e5 fec7 	bl	800062c <__aeabi_dmul>
 801a89e:	e6da      	b.n	801a656 <__kernel_tan+0x4e>
 801a8a0:	2e01      	cmp	r6, #1
 801a8a2:	d038      	beq.n	801a916 <__kernel_tan+0x30e>
 801a8a4:	460f      	mov	r7, r1
 801a8a6:	4689      	mov	r9, r1
 801a8a8:	4602      	mov	r2, r0
 801a8aa:	460b      	mov	r3, r1
 801a8ac:	2000      	movs	r0, #0
 801a8ae:	493e      	ldr	r1, [pc, #248]	; (801a9a8 <__kernel_tan+0x3a0>)
 801a8b0:	f7e5 ffe6 	bl	8000880 <__aeabi_ddiv>
 801a8b4:	2600      	movs	r6, #0
 801a8b6:	e9cd 0100 	strd	r0, r1, [sp]
 801a8ba:	4652      	mov	r2, sl
 801a8bc:	465b      	mov	r3, fp
 801a8be:	4630      	mov	r0, r6
 801a8c0:	4639      	mov	r1, r7
 801a8c2:	f7e5 fcfb 	bl	80002bc <__aeabi_dsub>
 801a8c6:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a8ca:	4602      	mov	r2, r0
 801a8cc:	460b      	mov	r3, r1
 801a8ce:	ec51 0b18 	vmov	r0, r1, d8
 801a8d2:	f7e5 fcf3 	bl	80002bc <__aeabi_dsub>
 801a8d6:	4632      	mov	r2, r6
 801a8d8:	462b      	mov	r3, r5
 801a8da:	f7e5 fea7 	bl	800062c <__aeabi_dmul>
 801a8de:	46b0      	mov	r8, r6
 801a8e0:	460f      	mov	r7, r1
 801a8e2:	4606      	mov	r6, r0
 801a8e4:	4642      	mov	r2, r8
 801a8e6:	462b      	mov	r3, r5
 801a8e8:	4640      	mov	r0, r8
 801a8ea:	4649      	mov	r1, r9
 801a8ec:	f7e5 fe9e 	bl	800062c <__aeabi_dmul>
 801a8f0:	4b2c      	ldr	r3, [pc, #176]	; (801a9a4 <__kernel_tan+0x39c>)
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	f7e5 fce4 	bl	80002c0 <__adddf3>
 801a8f8:	4602      	mov	r2, r0
 801a8fa:	460b      	mov	r3, r1
 801a8fc:	4630      	mov	r0, r6
 801a8fe:	4639      	mov	r1, r7
 801a900:	f7e5 fcde 	bl	80002c0 <__adddf3>
 801a904:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a908:	f7e5 fe90 	bl	800062c <__aeabi_dmul>
 801a90c:	4642      	mov	r2, r8
 801a90e:	462b      	mov	r3, r5
 801a910:	f7e5 fcd6 	bl	80002c0 <__adddf3>
 801a914:	e69f      	b.n	801a656 <__kernel_tan+0x4e>
 801a916:	4682      	mov	sl, r0
 801a918:	468b      	mov	fp, r1
 801a91a:	e69e      	b.n	801a65a <__kernel_tan+0x52>
 801a91c:	f3af 8000 	nop.w
 801a920:	54442d18 	.word	0x54442d18
 801a924:	3fe921fb 	.word	0x3fe921fb
 801a928:	33145c07 	.word	0x33145c07
 801a92c:	3c81a626 	.word	0x3c81a626
	...
 801a938:	74bf7ad4 	.word	0x74bf7ad4
 801a93c:	3efb2a70 	.word	0x3efb2a70
 801a940:	32f0a7e9 	.word	0x32f0a7e9
 801a944:	3f12b80f 	.word	0x3f12b80f
 801a948:	1a8d1068 	.word	0x1a8d1068
 801a94c:	3f3026f7 	.word	0x3f3026f7
 801a950:	fee08315 	.word	0xfee08315
 801a954:	3f57dbc8 	.word	0x3f57dbc8
 801a958:	e96e8493 	.word	0xe96e8493
 801a95c:	3f8226e3 	.word	0x3f8226e3
 801a960:	1bb341fe 	.word	0x1bb341fe
 801a964:	3faba1ba 	.word	0x3faba1ba
 801a968:	db605373 	.word	0xdb605373
 801a96c:	bef375cb 	.word	0xbef375cb
 801a970:	a03792a6 	.word	0xa03792a6
 801a974:	3f147e88 	.word	0x3f147e88
 801a978:	f2f26501 	.word	0xf2f26501
 801a97c:	3f4344d8 	.word	0x3f4344d8
 801a980:	c9560328 	.word	0xc9560328
 801a984:	3f6d6d22 	.word	0x3f6d6d22
 801a988:	8406d637 	.word	0x8406d637
 801a98c:	3f9664f4 	.word	0x3f9664f4
 801a990:	1110fe7a 	.word	0x1110fe7a
 801a994:	3fc11111 	.word	0x3fc11111
 801a998:	55555563 	.word	0x55555563
 801a99c:	3fd55555 	.word	0x3fd55555
 801a9a0:	3e2fffff 	.word	0x3e2fffff
 801a9a4:	3ff00000 	.word	0x3ff00000
 801a9a8:	bff00000 	.word	0xbff00000
 801a9ac:	3fe59427 	.word	0x3fe59427

0801a9b0 <fabs>:
 801a9b0:	ec51 0b10 	vmov	r0, r1, d0
 801a9b4:	ee10 2a10 	vmov	r2, s0
 801a9b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a9bc:	ec43 2b10 	vmov	d0, r2, r3
 801a9c0:	4770      	bx	lr

0801a9c2 <finite>:
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	ed8d 0b00 	vstr	d0, [sp]
 801a9c8:	9801      	ldr	r0, [sp, #4]
 801a9ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a9ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a9d2:	0fc0      	lsrs	r0, r0, #31
 801a9d4:	b002      	add	sp, #8
 801a9d6:	4770      	bx	lr

0801a9d8 <nan>:
 801a9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a9e0 <nan+0x8>
 801a9dc:	4770      	bx	lr
 801a9de:	bf00      	nop
 801a9e0:	00000000 	.word	0x00000000
 801a9e4:	7ff80000 	.word	0x7ff80000

0801a9e8 <rint>:
 801a9e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a9ea:	ec51 0b10 	vmov	r0, r1, d0
 801a9ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a9f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a9f6:	2e13      	cmp	r6, #19
 801a9f8:	ee10 4a10 	vmov	r4, s0
 801a9fc:	460b      	mov	r3, r1
 801a9fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801aa02:	dc58      	bgt.n	801aab6 <rint+0xce>
 801aa04:	2e00      	cmp	r6, #0
 801aa06:	da2b      	bge.n	801aa60 <rint+0x78>
 801aa08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801aa0c:	4302      	orrs	r2, r0
 801aa0e:	d023      	beq.n	801aa58 <rint+0x70>
 801aa10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801aa14:	4302      	orrs	r2, r0
 801aa16:	4254      	negs	r4, r2
 801aa18:	4314      	orrs	r4, r2
 801aa1a:	0c4b      	lsrs	r3, r1, #17
 801aa1c:	0b24      	lsrs	r4, r4, #12
 801aa1e:	045b      	lsls	r3, r3, #17
 801aa20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801aa24:	ea44 0103 	orr.w	r1, r4, r3
 801aa28:	4b32      	ldr	r3, [pc, #200]	; (801aaf4 <rint+0x10c>)
 801aa2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801aa2e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801aa32:	4602      	mov	r2, r0
 801aa34:	460b      	mov	r3, r1
 801aa36:	4630      	mov	r0, r6
 801aa38:	4639      	mov	r1, r7
 801aa3a:	f7e5 fc41 	bl	80002c0 <__adddf3>
 801aa3e:	e9cd 0100 	strd	r0, r1, [sp]
 801aa42:	463b      	mov	r3, r7
 801aa44:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa48:	4632      	mov	r2, r6
 801aa4a:	f7e5 fc37 	bl	80002bc <__aeabi_dsub>
 801aa4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801aa56:	4639      	mov	r1, r7
 801aa58:	ec41 0b10 	vmov	d0, r0, r1
 801aa5c:	b003      	add	sp, #12
 801aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa60:	4a25      	ldr	r2, [pc, #148]	; (801aaf8 <rint+0x110>)
 801aa62:	4132      	asrs	r2, r6
 801aa64:	ea01 0702 	and.w	r7, r1, r2
 801aa68:	4307      	orrs	r7, r0
 801aa6a:	d0f5      	beq.n	801aa58 <rint+0x70>
 801aa6c:	0851      	lsrs	r1, r2, #1
 801aa6e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801aa72:	4314      	orrs	r4, r2
 801aa74:	d00c      	beq.n	801aa90 <rint+0xa8>
 801aa76:	ea23 0201 	bic.w	r2, r3, r1
 801aa7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801aa7e:	2e13      	cmp	r6, #19
 801aa80:	fa43 f606 	asr.w	r6, r3, r6
 801aa84:	bf0c      	ite	eq
 801aa86:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801aa8a:	2400      	movne	r4, #0
 801aa8c:	ea42 0306 	orr.w	r3, r2, r6
 801aa90:	4918      	ldr	r1, [pc, #96]	; (801aaf4 <rint+0x10c>)
 801aa92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801aa96:	4622      	mov	r2, r4
 801aa98:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	f7e5 fc0e 	bl	80002c0 <__adddf3>
 801aaa4:	e9cd 0100 	strd	r0, r1, [sp]
 801aaa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aaac:	4622      	mov	r2, r4
 801aaae:	462b      	mov	r3, r5
 801aab0:	f7e5 fc04 	bl	80002bc <__aeabi_dsub>
 801aab4:	e7d0      	b.n	801aa58 <rint+0x70>
 801aab6:	2e33      	cmp	r6, #51	; 0x33
 801aab8:	dd07      	ble.n	801aaca <rint+0xe2>
 801aaba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aabe:	d1cb      	bne.n	801aa58 <rint+0x70>
 801aac0:	ee10 2a10 	vmov	r2, s0
 801aac4:	f7e5 fbfc 	bl	80002c0 <__adddf3>
 801aac8:	e7c6      	b.n	801aa58 <rint+0x70>
 801aaca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801aace:	f04f 36ff 	mov.w	r6, #4294967295
 801aad2:	40d6      	lsrs	r6, r2
 801aad4:	4230      	tst	r0, r6
 801aad6:	d0bf      	beq.n	801aa58 <rint+0x70>
 801aad8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801aadc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801aae0:	bf1f      	itttt	ne
 801aae2:	ea24 0101 	bicne.w	r1, r4, r1
 801aae6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801aaea:	fa44 f202 	asrne.w	r2, r4, r2
 801aaee:	ea41 0402 	orrne.w	r4, r1, r2
 801aaf2:	e7cd      	b.n	801aa90 <rint+0xa8>
 801aaf4:	08020590 	.word	0x08020590
 801aaf8:	000fffff 	.word	0x000fffff
 801aafc:	00000000 	.word	0x00000000

0801ab00 <scalbn>:
 801ab00:	b570      	push	{r4, r5, r6, lr}
 801ab02:	ec55 4b10 	vmov	r4, r5, d0
 801ab06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	462b      	mov	r3, r5
 801ab0e:	b99a      	cbnz	r2, 801ab38 <scalbn+0x38>
 801ab10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab14:	4323      	orrs	r3, r4
 801ab16:	d036      	beq.n	801ab86 <scalbn+0x86>
 801ab18:	4b39      	ldr	r3, [pc, #228]	; (801ac00 <scalbn+0x100>)
 801ab1a:	4629      	mov	r1, r5
 801ab1c:	ee10 0a10 	vmov	r0, s0
 801ab20:	2200      	movs	r2, #0
 801ab22:	f7e5 fd83 	bl	800062c <__aeabi_dmul>
 801ab26:	4b37      	ldr	r3, [pc, #220]	; (801ac04 <scalbn+0x104>)
 801ab28:	429e      	cmp	r6, r3
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	460d      	mov	r5, r1
 801ab2e:	da10      	bge.n	801ab52 <scalbn+0x52>
 801ab30:	a32b      	add	r3, pc, #172	; (adr r3, 801abe0 <scalbn+0xe0>)
 801ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab36:	e03a      	b.n	801abae <scalbn+0xae>
 801ab38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ab3c:	428a      	cmp	r2, r1
 801ab3e:	d10c      	bne.n	801ab5a <scalbn+0x5a>
 801ab40:	ee10 2a10 	vmov	r2, s0
 801ab44:	4620      	mov	r0, r4
 801ab46:	4629      	mov	r1, r5
 801ab48:	f7e5 fbba 	bl	80002c0 <__adddf3>
 801ab4c:	4604      	mov	r4, r0
 801ab4e:	460d      	mov	r5, r1
 801ab50:	e019      	b.n	801ab86 <scalbn+0x86>
 801ab52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ab56:	460b      	mov	r3, r1
 801ab58:	3a36      	subs	r2, #54	; 0x36
 801ab5a:	4432      	add	r2, r6
 801ab5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ab60:	428a      	cmp	r2, r1
 801ab62:	dd08      	ble.n	801ab76 <scalbn+0x76>
 801ab64:	2d00      	cmp	r5, #0
 801ab66:	a120      	add	r1, pc, #128	; (adr r1, 801abe8 <scalbn+0xe8>)
 801ab68:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab6c:	da1c      	bge.n	801aba8 <scalbn+0xa8>
 801ab6e:	a120      	add	r1, pc, #128	; (adr r1, 801abf0 <scalbn+0xf0>)
 801ab70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab74:	e018      	b.n	801aba8 <scalbn+0xa8>
 801ab76:	2a00      	cmp	r2, #0
 801ab78:	dd08      	ble.n	801ab8c <scalbn+0x8c>
 801ab7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab86:	ec45 4b10 	vmov	d0, r4, r5
 801ab8a:	bd70      	pop	{r4, r5, r6, pc}
 801ab8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ab90:	da19      	bge.n	801abc6 <scalbn+0xc6>
 801ab92:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab96:	429e      	cmp	r6, r3
 801ab98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ab9c:	dd0a      	ble.n	801abb4 <scalbn+0xb4>
 801ab9e:	a112      	add	r1, pc, #72	; (adr r1, 801abe8 <scalbn+0xe8>)
 801aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d1e2      	bne.n	801ab6e <scalbn+0x6e>
 801aba8:	a30f      	add	r3, pc, #60	; (adr r3, 801abe8 <scalbn+0xe8>)
 801abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abae:	f7e5 fd3d 	bl	800062c <__aeabi_dmul>
 801abb2:	e7cb      	b.n	801ab4c <scalbn+0x4c>
 801abb4:	a10a      	add	r1, pc, #40	; (adr r1, 801abe0 <scalbn+0xe0>)
 801abb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d0b8      	beq.n	801ab30 <scalbn+0x30>
 801abbe:	a10e      	add	r1, pc, #56	; (adr r1, 801abf8 <scalbn+0xf8>)
 801abc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abc4:	e7b4      	b.n	801ab30 <scalbn+0x30>
 801abc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abca:	3236      	adds	r2, #54	; 0x36
 801abcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801abd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801abd4:	4620      	mov	r0, r4
 801abd6:	4b0c      	ldr	r3, [pc, #48]	; (801ac08 <scalbn+0x108>)
 801abd8:	2200      	movs	r2, #0
 801abda:	e7e8      	b.n	801abae <scalbn+0xae>
 801abdc:	f3af 8000 	nop.w
 801abe0:	c2f8f359 	.word	0xc2f8f359
 801abe4:	01a56e1f 	.word	0x01a56e1f
 801abe8:	8800759c 	.word	0x8800759c
 801abec:	7e37e43c 	.word	0x7e37e43c
 801abf0:	8800759c 	.word	0x8800759c
 801abf4:	fe37e43c 	.word	0xfe37e43c
 801abf8:	c2f8f359 	.word	0xc2f8f359
 801abfc:	81a56e1f 	.word	0x81a56e1f
 801ac00:	43500000 	.word	0x43500000
 801ac04:	ffff3cb0 	.word	0xffff3cb0
 801ac08:	3c900000 	.word	0x3c900000

0801ac0c <finitef>:
 801ac0c:	b082      	sub	sp, #8
 801ac0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ac12:	9801      	ldr	r0, [sp, #4]
 801ac14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ac18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801ac1c:	bfac      	ite	ge
 801ac1e:	2000      	movge	r0, #0
 801ac20:	2001      	movlt	r0, #1
 801ac22:	b002      	add	sp, #8
 801ac24:	4770      	bx	lr
	...

0801ac28 <nanf>:
 801ac28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ac30 <nanf+0x8>
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop
 801ac30:	7fc00000 	.word	0x7fc00000

0801ac34 <abort>:
 801ac34:	b508      	push	{r3, lr}
 801ac36:	2006      	movs	r0, #6
 801ac38:	f000 fd1c 	bl	801b674 <raise>
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	f7ec fa2d 	bl	800709c <_exit>
	...

0801ac44 <__assert_func>:
 801ac44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ac46:	4614      	mov	r4, r2
 801ac48:	461a      	mov	r2, r3
 801ac4a:	4b09      	ldr	r3, [pc, #36]	; (801ac70 <__assert_func+0x2c>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	4605      	mov	r5, r0
 801ac50:	68d8      	ldr	r0, [r3, #12]
 801ac52:	b14c      	cbz	r4, 801ac68 <__assert_func+0x24>
 801ac54:	4b07      	ldr	r3, [pc, #28]	; (801ac74 <__assert_func+0x30>)
 801ac56:	9100      	str	r1, [sp, #0]
 801ac58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ac5c:	4906      	ldr	r1, [pc, #24]	; (801ac78 <__assert_func+0x34>)
 801ac5e:	462b      	mov	r3, r5
 801ac60:	f000 f820 	bl	801aca4 <fiprintf>
 801ac64:	f7ff ffe6 	bl	801ac34 <abort>
 801ac68:	4b04      	ldr	r3, [pc, #16]	; (801ac7c <__assert_func+0x38>)
 801ac6a:	461c      	mov	r4, r3
 801ac6c:	e7f3      	b.n	801ac56 <__assert_func+0x12>
 801ac6e:	bf00      	nop
 801ac70:	20000178 	.word	0x20000178
 801ac74:	080205a0 	.word	0x080205a0
 801ac78:	080205ad 	.word	0x080205ad
 801ac7c:	080205db 	.word	0x080205db

0801ac80 <atof>:
 801ac80:	2100      	movs	r1, #0
 801ac82:	f001 bb4b 	b.w	801c31c <strtod>
	...

0801ac88 <calloc>:
 801ac88:	4b02      	ldr	r3, [pc, #8]	; (801ac94 <calloc+0xc>)
 801ac8a:	460a      	mov	r2, r1
 801ac8c:	4601      	mov	r1, r0
 801ac8e:	6818      	ldr	r0, [r3, #0]
 801ac90:	f000 b882 	b.w	801ad98 <_calloc_r>
 801ac94:	20000178 	.word	0x20000178

0801ac98 <__errno>:
 801ac98:	4b01      	ldr	r3, [pc, #4]	; (801aca0 <__errno+0x8>)
 801ac9a:	6818      	ldr	r0, [r3, #0]
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop
 801aca0:	20000178 	.word	0x20000178

0801aca4 <fiprintf>:
 801aca4:	b40e      	push	{r1, r2, r3}
 801aca6:	b503      	push	{r0, r1, lr}
 801aca8:	4601      	mov	r1, r0
 801acaa:	ab03      	add	r3, sp, #12
 801acac:	4805      	ldr	r0, [pc, #20]	; (801acc4 <fiprintf+0x20>)
 801acae:	f853 2b04 	ldr.w	r2, [r3], #4
 801acb2:	6800      	ldr	r0, [r0, #0]
 801acb4:	9301      	str	r3, [sp, #4]
 801acb6:	f000 f953 	bl	801af60 <_vfiprintf_r>
 801acba:	b002      	add	sp, #8
 801acbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801acc0:	b003      	add	sp, #12
 801acc2:	4770      	bx	lr
 801acc4:	20000178 	.word	0x20000178

0801acc8 <__libc_init_array>:
 801acc8:	b570      	push	{r4, r5, r6, lr}
 801acca:	4d0d      	ldr	r5, [pc, #52]	; (801ad00 <__libc_init_array+0x38>)
 801accc:	4c0d      	ldr	r4, [pc, #52]	; (801ad04 <__libc_init_array+0x3c>)
 801acce:	1b64      	subs	r4, r4, r5
 801acd0:	10a4      	asrs	r4, r4, #2
 801acd2:	2600      	movs	r6, #0
 801acd4:	42a6      	cmp	r6, r4
 801acd6:	d109      	bne.n	801acec <__libc_init_array+0x24>
 801acd8:	4d0b      	ldr	r5, [pc, #44]	; (801ad08 <__libc_init_array+0x40>)
 801acda:	4c0c      	ldr	r4, [pc, #48]	; (801ad0c <__libc_init_array+0x44>)
 801acdc:	f002 ff1e 	bl	801db1c <_init>
 801ace0:	1b64      	subs	r4, r4, r5
 801ace2:	10a4      	asrs	r4, r4, #2
 801ace4:	2600      	movs	r6, #0
 801ace6:	42a6      	cmp	r6, r4
 801ace8:	d105      	bne.n	801acf6 <__libc_init_array+0x2e>
 801acea:	bd70      	pop	{r4, r5, r6, pc}
 801acec:	f855 3b04 	ldr.w	r3, [r5], #4
 801acf0:	4798      	blx	r3
 801acf2:	3601      	adds	r6, #1
 801acf4:	e7ee      	b.n	801acd4 <__libc_init_array+0xc>
 801acf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801acfa:	4798      	blx	r3
 801acfc:	3601      	adds	r6, #1
 801acfe:	e7f2      	b.n	801ace6 <__libc_init_array+0x1e>
 801ad00:	080209e4 	.word	0x080209e4
 801ad04:	080209e4 	.word	0x080209e4
 801ad08:	080209e4 	.word	0x080209e4
 801ad0c:	080209ec 	.word	0x080209ec

0801ad10 <__retarget_lock_init_recursive>:
 801ad10:	4770      	bx	lr

0801ad12 <__retarget_lock_acquire_recursive>:
 801ad12:	4770      	bx	lr

0801ad14 <__retarget_lock_release_recursive>:
 801ad14:	4770      	bx	lr
	...

0801ad18 <malloc>:
 801ad18:	4b02      	ldr	r3, [pc, #8]	; (801ad24 <malloc+0xc>)
 801ad1a:	4601      	mov	r1, r0
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f000 b89b 	b.w	801ae58 <_malloc_r>
 801ad22:	bf00      	nop
 801ad24:	20000178 	.word	0x20000178

0801ad28 <free>:
 801ad28:	4b02      	ldr	r3, [pc, #8]	; (801ad34 <free+0xc>)
 801ad2a:	4601      	mov	r1, r0
 801ad2c:	6818      	ldr	r0, [r3, #0]
 801ad2e:	f000 b843 	b.w	801adb8 <_free_r>
 801ad32:	bf00      	nop
 801ad34:	20000178 	.word	0x20000178

0801ad38 <memcpy>:
 801ad38:	440a      	add	r2, r1
 801ad3a:	4291      	cmp	r1, r2
 801ad3c:	f100 33ff 	add.w	r3, r0, #4294967295
 801ad40:	d100      	bne.n	801ad44 <memcpy+0xc>
 801ad42:	4770      	bx	lr
 801ad44:	b510      	push	{r4, lr}
 801ad46:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ad4e:	4291      	cmp	r1, r2
 801ad50:	d1f9      	bne.n	801ad46 <memcpy+0xe>
 801ad52:	bd10      	pop	{r4, pc}

0801ad54 <memmove>:
 801ad54:	4288      	cmp	r0, r1
 801ad56:	b510      	push	{r4, lr}
 801ad58:	eb01 0402 	add.w	r4, r1, r2
 801ad5c:	d902      	bls.n	801ad64 <memmove+0x10>
 801ad5e:	4284      	cmp	r4, r0
 801ad60:	4623      	mov	r3, r4
 801ad62:	d807      	bhi.n	801ad74 <memmove+0x20>
 801ad64:	1e43      	subs	r3, r0, #1
 801ad66:	42a1      	cmp	r1, r4
 801ad68:	d008      	beq.n	801ad7c <memmove+0x28>
 801ad6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad72:	e7f8      	b.n	801ad66 <memmove+0x12>
 801ad74:	4402      	add	r2, r0
 801ad76:	4601      	mov	r1, r0
 801ad78:	428a      	cmp	r2, r1
 801ad7a:	d100      	bne.n	801ad7e <memmove+0x2a>
 801ad7c:	bd10      	pop	{r4, pc}
 801ad7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad86:	e7f7      	b.n	801ad78 <memmove+0x24>

0801ad88 <memset>:
 801ad88:	4402      	add	r2, r0
 801ad8a:	4603      	mov	r3, r0
 801ad8c:	4293      	cmp	r3, r2
 801ad8e:	d100      	bne.n	801ad92 <memset+0xa>
 801ad90:	4770      	bx	lr
 801ad92:	f803 1b01 	strb.w	r1, [r3], #1
 801ad96:	e7f9      	b.n	801ad8c <memset+0x4>

0801ad98 <_calloc_r>:
 801ad98:	b513      	push	{r0, r1, r4, lr}
 801ad9a:	434a      	muls	r2, r1
 801ad9c:	4611      	mov	r1, r2
 801ad9e:	9201      	str	r2, [sp, #4]
 801ada0:	f000 f85a 	bl	801ae58 <_malloc_r>
 801ada4:	4604      	mov	r4, r0
 801ada6:	b118      	cbz	r0, 801adb0 <_calloc_r+0x18>
 801ada8:	9a01      	ldr	r2, [sp, #4]
 801adaa:	2100      	movs	r1, #0
 801adac:	f7ff ffec 	bl	801ad88 <memset>
 801adb0:	4620      	mov	r0, r4
 801adb2:	b002      	add	sp, #8
 801adb4:	bd10      	pop	{r4, pc}
	...

0801adb8 <_free_r>:
 801adb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adba:	2900      	cmp	r1, #0
 801adbc:	d048      	beq.n	801ae50 <_free_r+0x98>
 801adbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adc2:	9001      	str	r0, [sp, #4]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	f1a1 0404 	sub.w	r4, r1, #4
 801adca:	bfb8      	it	lt
 801adcc:	18e4      	addlt	r4, r4, r3
 801adce:	f002 f925 	bl	801d01c <__malloc_lock>
 801add2:	4a20      	ldr	r2, [pc, #128]	; (801ae54 <_free_r+0x9c>)
 801add4:	9801      	ldr	r0, [sp, #4]
 801add6:	6813      	ldr	r3, [r2, #0]
 801add8:	4615      	mov	r5, r2
 801adda:	b933      	cbnz	r3, 801adea <_free_r+0x32>
 801addc:	6063      	str	r3, [r4, #4]
 801adde:	6014      	str	r4, [r2, #0]
 801ade0:	b003      	add	sp, #12
 801ade2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ade6:	f002 b91f 	b.w	801d028 <__malloc_unlock>
 801adea:	42a3      	cmp	r3, r4
 801adec:	d90b      	bls.n	801ae06 <_free_r+0x4e>
 801adee:	6821      	ldr	r1, [r4, #0]
 801adf0:	1862      	adds	r2, r4, r1
 801adf2:	4293      	cmp	r3, r2
 801adf4:	bf04      	itt	eq
 801adf6:	681a      	ldreq	r2, [r3, #0]
 801adf8:	685b      	ldreq	r3, [r3, #4]
 801adfa:	6063      	str	r3, [r4, #4]
 801adfc:	bf04      	itt	eq
 801adfe:	1852      	addeq	r2, r2, r1
 801ae00:	6022      	streq	r2, [r4, #0]
 801ae02:	602c      	str	r4, [r5, #0]
 801ae04:	e7ec      	b.n	801ade0 <_free_r+0x28>
 801ae06:	461a      	mov	r2, r3
 801ae08:	685b      	ldr	r3, [r3, #4]
 801ae0a:	b10b      	cbz	r3, 801ae10 <_free_r+0x58>
 801ae0c:	42a3      	cmp	r3, r4
 801ae0e:	d9fa      	bls.n	801ae06 <_free_r+0x4e>
 801ae10:	6811      	ldr	r1, [r2, #0]
 801ae12:	1855      	adds	r5, r2, r1
 801ae14:	42a5      	cmp	r5, r4
 801ae16:	d10b      	bne.n	801ae30 <_free_r+0x78>
 801ae18:	6824      	ldr	r4, [r4, #0]
 801ae1a:	4421      	add	r1, r4
 801ae1c:	1854      	adds	r4, r2, r1
 801ae1e:	42a3      	cmp	r3, r4
 801ae20:	6011      	str	r1, [r2, #0]
 801ae22:	d1dd      	bne.n	801ade0 <_free_r+0x28>
 801ae24:	681c      	ldr	r4, [r3, #0]
 801ae26:	685b      	ldr	r3, [r3, #4]
 801ae28:	6053      	str	r3, [r2, #4]
 801ae2a:	4421      	add	r1, r4
 801ae2c:	6011      	str	r1, [r2, #0]
 801ae2e:	e7d7      	b.n	801ade0 <_free_r+0x28>
 801ae30:	d902      	bls.n	801ae38 <_free_r+0x80>
 801ae32:	230c      	movs	r3, #12
 801ae34:	6003      	str	r3, [r0, #0]
 801ae36:	e7d3      	b.n	801ade0 <_free_r+0x28>
 801ae38:	6825      	ldr	r5, [r4, #0]
 801ae3a:	1961      	adds	r1, r4, r5
 801ae3c:	428b      	cmp	r3, r1
 801ae3e:	bf04      	itt	eq
 801ae40:	6819      	ldreq	r1, [r3, #0]
 801ae42:	685b      	ldreq	r3, [r3, #4]
 801ae44:	6063      	str	r3, [r4, #4]
 801ae46:	bf04      	itt	eq
 801ae48:	1949      	addeq	r1, r1, r5
 801ae4a:	6021      	streq	r1, [r4, #0]
 801ae4c:	6054      	str	r4, [r2, #4]
 801ae4e:	e7c7      	b.n	801ade0 <_free_r+0x28>
 801ae50:	b003      	add	sp, #12
 801ae52:	bd30      	pop	{r4, r5, pc}
 801ae54:	20000828 	.word	0x20000828

0801ae58 <_malloc_r>:
 801ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae5a:	1ccd      	adds	r5, r1, #3
 801ae5c:	f025 0503 	bic.w	r5, r5, #3
 801ae60:	3508      	adds	r5, #8
 801ae62:	2d0c      	cmp	r5, #12
 801ae64:	bf38      	it	cc
 801ae66:	250c      	movcc	r5, #12
 801ae68:	2d00      	cmp	r5, #0
 801ae6a:	4606      	mov	r6, r0
 801ae6c:	db01      	blt.n	801ae72 <_malloc_r+0x1a>
 801ae6e:	42a9      	cmp	r1, r5
 801ae70:	d903      	bls.n	801ae7a <_malloc_r+0x22>
 801ae72:	230c      	movs	r3, #12
 801ae74:	6033      	str	r3, [r6, #0]
 801ae76:	2000      	movs	r0, #0
 801ae78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae7a:	f002 f8cf 	bl	801d01c <__malloc_lock>
 801ae7e:	4921      	ldr	r1, [pc, #132]	; (801af04 <_malloc_r+0xac>)
 801ae80:	680a      	ldr	r2, [r1, #0]
 801ae82:	4614      	mov	r4, r2
 801ae84:	b99c      	cbnz	r4, 801aeae <_malloc_r+0x56>
 801ae86:	4f20      	ldr	r7, [pc, #128]	; (801af08 <_malloc_r+0xb0>)
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	b923      	cbnz	r3, 801ae96 <_malloc_r+0x3e>
 801ae8c:	4621      	mov	r1, r4
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f000 fbb8 	bl	801b604 <_sbrk_r>
 801ae94:	6038      	str	r0, [r7, #0]
 801ae96:	4629      	mov	r1, r5
 801ae98:	4630      	mov	r0, r6
 801ae9a:	f000 fbb3 	bl	801b604 <_sbrk_r>
 801ae9e:	1c43      	adds	r3, r0, #1
 801aea0:	d123      	bne.n	801aeea <_malloc_r+0x92>
 801aea2:	230c      	movs	r3, #12
 801aea4:	6033      	str	r3, [r6, #0]
 801aea6:	4630      	mov	r0, r6
 801aea8:	f002 f8be 	bl	801d028 <__malloc_unlock>
 801aeac:	e7e3      	b.n	801ae76 <_malloc_r+0x1e>
 801aeae:	6823      	ldr	r3, [r4, #0]
 801aeb0:	1b5b      	subs	r3, r3, r5
 801aeb2:	d417      	bmi.n	801aee4 <_malloc_r+0x8c>
 801aeb4:	2b0b      	cmp	r3, #11
 801aeb6:	d903      	bls.n	801aec0 <_malloc_r+0x68>
 801aeb8:	6023      	str	r3, [r4, #0]
 801aeba:	441c      	add	r4, r3
 801aebc:	6025      	str	r5, [r4, #0]
 801aebe:	e004      	b.n	801aeca <_malloc_r+0x72>
 801aec0:	6863      	ldr	r3, [r4, #4]
 801aec2:	42a2      	cmp	r2, r4
 801aec4:	bf0c      	ite	eq
 801aec6:	600b      	streq	r3, [r1, #0]
 801aec8:	6053      	strne	r3, [r2, #4]
 801aeca:	4630      	mov	r0, r6
 801aecc:	f002 f8ac 	bl	801d028 <__malloc_unlock>
 801aed0:	f104 000b 	add.w	r0, r4, #11
 801aed4:	1d23      	adds	r3, r4, #4
 801aed6:	f020 0007 	bic.w	r0, r0, #7
 801aeda:	1ac2      	subs	r2, r0, r3
 801aedc:	d0cc      	beq.n	801ae78 <_malloc_r+0x20>
 801aede:	1a1b      	subs	r3, r3, r0
 801aee0:	50a3      	str	r3, [r4, r2]
 801aee2:	e7c9      	b.n	801ae78 <_malloc_r+0x20>
 801aee4:	4622      	mov	r2, r4
 801aee6:	6864      	ldr	r4, [r4, #4]
 801aee8:	e7cc      	b.n	801ae84 <_malloc_r+0x2c>
 801aeea:	1cc4      	adds	r4, r0, #3
 801aeec:	f024 0403 	bic.w	r4, r4, #3
 801aef0:	42a0      	cmp	r0, r4
 801aef2:	d0e3      	beq.n	801aebc <_malloc_r+0x64>
 801aef4:	1a21      	subs	r1, r4, r0
 801aef6:	4630      	mov	r0, r6
 801aef8:	f000 fb84 	bl	801b604 <_sbrk_r>
 801aefc:	3001      	adds	r0, #1
 801aefe:	d1dd      	bne.n	801aebc <_malloc_r+0x64>
 801af00:	e7cf      	b.n	801aea2 <_malloc_r+0x4a>
 801af02:	bf00      	nop
 801af04:	20000828 	.word	0x20000828
 801af08:	2000082c 	.word	0x2000082c

0801af0c <__sfputc_r>:
 801af0c:	6893      	ldr	r3, [r2, #8]
 801af0e:	3b01      	subs	r3, #1
 801af10:	2b00      	cmp	r3, #0
 801af12:	b410      	push	{r4}
 801af14:	6093      	str	r3, [r2, #8]
 801af16:	da08      	bge.n	801af2a <__sfputc_r+0x1e>
 801af18:	6994      	ldr	r4, [r2, #24]
 801af1a:	42a3      	cmp	r3, r4
 801af1c:	db01      	blt.n	801af22 <__sfputc_r+0x16>
 801af1e:	290a      	cmp	r1, #10
 801af20:	d103      	bne.n	801af2a <__sfputc_r+0x1e>
 801af22:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af26:	f001 ba1d 	b.w	801c364 <__swbuf_r>
 801af2a:	6813      	ldr	r3, [r2, #0]
 801af2c:	1c58      	adds	r0, r3, #1
 801af2e:	6010      	str	r0, [r2, #0]
 801af30:	7019      	strb	r1, [r3, #0]
 801af32:	4608      	mov	r0, r1
 801af34:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af38:	4770      	bx	lr

0801af3a <__sfputs_r>:
 801af3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af3c:	4606      	mov	r6, r0
 801af3e:	460f      	mov	r7, r1
 801af40:	4614      	mov	r4, r2
 801af42:	18d5      	adds	r5, r2, r3
 801af44:	42ac      	cmp	r4, r5
 801af46:	d101      	bne.n	801af4c <__sfputs_r+0x12>
 801af48:	2000      	movs	r0, #0
 801af4a:	e007      	b.n	801af5c <__sfputs_r+0x22>
 801af4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af50:	463a      	mov	r2, r7
 801af52:	4630      	mov	r0, r6
 801af54:	f7ff ffda 	bl	801af0c <__sfputc_r>
 801af58:	1c43      	adds	r3, r0, #1
 801af5a:	d1f3      	bne.n	801af44 <__sfputs_r+0xa>
 801af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801af60 <_vfiprintf_r>:
 801af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af64:	460d      	mov	r5, r1
 801af66:	b09d      	sub	sp, #116	; 0x74
 801af68:	4614      	mov	r4, r2
 801af6a:	4698      	mov	r8, r3
 801af6c:	4606      	mov	r6, r0
 801af6e:	b118      	cbz	r0, 801af78 <_vfiprintf_r+0x18>
 801af70:	6983      	ldr	r3, [r0, #24]
 801af72:	b90b      	cbnz	r3, 801af78 <_vfiprintf_r+0x18>
 801af74:	f001 fbd0 	bl	801c718 <__sinit>
 801af78:	4b89      	ldr	r3, [pc, #548]	; (801b1a0 <_vfiprintf_r+0x240>)
 801af7a:	429d      	cmp	r5, r3
 801af7c:	d11b      	bne.n	801afb6 <_vfiprintf_r+0x56>
 801af7e:	6875      	ldr	r5, [r6, #4]
 801af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af82:	07d9      	lsls	r1, r3, #31
 801af84:	d405      	bmi.n	801af92 <_vfiprintf_r+0x32>
 801af86:	89ab      	ldrh	r3, [r5, #12]
 801af88:	059a      	lsls	r2, r3, #22
 801af8a:	d402      	bmi.n	801af92 <_vfiprintf_r+0x32>
 801af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af8e:	f7ff fec0 	bl	801ad12 <__retarget_lock_acquire_recursive>
 801af92:	89ab      	ldrh	r3, [r5, #12]
 801af94:	071b      	lsls	r3, r3, #28
 801af96:	d501      	bpl.n	801af9c <_vfiprintf_r+0x3c>
 801af98:	692b      	ldr	r3, [r5, #16]
 801af9a:	b9eb      	cbnz	r3, 801afd8 <_vfiprintf_r+0x78>
 801af9c:	4629      	mov	r1, r5
 801af9e:	4630      	mov	r0, r6
 801afa0:	f001 fa32 	bl	801c408 <__swsetup_r>
 801afa4:	b1c0      	cbz	r0, 801afd8 <_vfiprintf_r+0x78>
 801afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afa8:	07dc      	lsls	r4, r3, #31
 801afaa:	d50e      	bpl.n	801afca <_vfiprintf_r+0x6a>
 801afac:	f04f 30ff 	mov.w	r0, #4294967295
 801afb0:	b01d      	add	sp, #116	; 0x74
 801afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afb6:	4b7b      	ldr	r3, [pc, #492]	; (801b1a4 <_vfiprintf_r+0x244>)
 801afb8:	429d      	cmp	r5, r3
 801afba:	d101      	bne.n	801afc0 <_vfiprintf_r+0x60>
 801afbc:	68b5      	ldr	r5, [r6, #8]
 801afbe:	e7df      	b.n	801af80 <_vfiprintf_r+0x20>
 801afc0:	4b79      	ldr	r3, [pc, #484]	; (801b1a8 <_vfiprintf_r+0x248>)
 801afc2:	429d      	cmp	r5, r3
 801afc4:	bf08      	it	eq
 801afc6:	68f5      	ldreq	r5, [r6, #12]
 801afc8:	e7da      	b.n	801af80 <_vfiprintf_r+0x20>
 801afca:	89ab      	ldrh	r3, [r5, #12]
 801afcc:	0598      	lsls	r0, r3, #22
 801afce:	d4ed      	bmi.n	801afac <_vfiprintf_r+0x4c>
 801afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afd2:	f7ff fe9f 	bl	801ad14 <__retarget_lock_release_recursive>
 801afd6:	e7e9      	b.n	801afac <_vfiprintf_r+0x4c>
 801afd8:	2300      	movs	r3, #0
 801afda:	9309      	str	r3, [sp, #36]	; 0x24
 801afdc:	2320      	movs	r3, #32
 801afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801afe2:	f8cd 800c 	str.w	r8, [sp, #12]
 801afe6:	2330      	movs	r3, #48	; 0x30
 801afe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b1ac <_vfiprintf_r+0x24c>
 801afec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aff0:	f04f 0901 	mov.w	r9, #1
 801aff4:	4623      	mov	r3, r4
 801aff6:	469a      	mov	sl, r3
 801aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801affc:	b10a      	cbz	r2, 801b002 <_vfiprintf_r+0xa2>
 801affe:	2a25      	cmp	r2, #37	; 0x25
 801b000:	d1f9      	bne.n	801aff6 <_vfiprintf_r+0x96>
 801b002:	ebba 0b04 	subs.w	fp, sl, r4
 801b006:	d00b      	beq.n	801b020 <_vfiprintf_r+0xc0>
 801b008:	465b      	mov	r3, fp
 801b00a:	4622      	mov	r2, r4
 801b00c:	4629      	mov	r1, r5
 801b00e:	4630      	mov	r0, r6
 801b010:	f7ff ff93 	bl	801af3a <__sfputs_r>
 801b014:	3001      	adds	r0, #1
 801b016:	f000 80aa 	beq.w	801b16e <_vfiprintf_r+0x20e>
 801b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b01c:	445a      	add	r2, fp
 801b01e:	9209      	str	r2, [sp, #36]	; 0x24
 801b020:	f89a 3000 	ldrb.w	r3, [sl]
 801b024:	2b00      	cmp	r3, #0
 801b026:	f000 80a2 	beq.w	801b16e <_vfiprintf_r+0x20e>
 801b02a:	2300      	movs	r3, #0
 801b02c:	f04f 32ff 	mov.w	r2, #4294967295
 801b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b034:	f10a 0a01 	add.w	sl, sl, #1
 801b038:	9304      	str	r3, [sp, #16]
 801b03a:	9307      	str	r3, [sp, #28]
 801b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b040:	931a      	str	r3, [sp, #104]	; 0x68
 801b042:	4654      	mov	r4, sl
 801b044:	2205      	movs	r2, #5
 801b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b04a:	4858      	ldr	r0, [pc, #352]	; (801b1ac <_vfiprintf_r+0x24c>)
 801b04c:	f7e5 f8d0 	bl	80001f0 <memchr>
 801b050:	9a04      	ldr	r2, [sp, #16]
 801b052:	b9d8      	cbnz	r0, 801b08c <_vfiprintf_r+0x12c>
 801b054:	06d1      	lsls	r1, r2, #27
 801b056:	bf44      	itt	mi
 801b058:	2320      	movmi	r3, #32
 801b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b05e:	0713      	lsls	r3, r2, #28
 801b060:	bf44      	itt	mi
 801b062:	232b      	movmi	r3, #43	; 0x2b
 801b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b068:	f89a 3000 	ldrb.w	r3, [sl]
 801b06c:	2b2a      	cmp	r3, #42	; 0x2a
 801b06e:	d015      	beq.n	801b09c <_vfiprintf_r+0x13c>
 801b070:	9a07      	ldr	r2, [sp, #28]
 801b072:	4654      	mov	r4, sl
 801b074:	2000      	movs	r0, #0
 801b076:	f04f 0c0a 	mov.w	ip, #10
 801b07a:	4621      	mov	r1, r4
 801b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b080:	3b30      	subs	r3, #48	; 0x30
 801b082:	2b09      	cmp	r3, #9
 801b084:	d94e      	bls.n	801b124 <_vfiprintf_r+0x1c4>
 801b086:	b1b0      	cbz	r0, 801b0b6 <_vfiprintf_r+0x156>
 801b088:	9207      	str	r2, [sp, #28]
 801b08a:	e014      	b.n	801b0b6 <_vfiprintf_r+0x156>
 801b08c:	eba0 0308 	sub.w	r3, r0, r8
 801b090:	fa09 f303 	lsl.w	r3, r9, r3
 801b094:	4313      	orrs	r3, r2
 801b096:	9304      	str	r3, [sp, #16]
 801b098:	46a2      	mov	sl, r4
 801b09a:	e7d2      	b.n	801b042 <_vfiprintf_r+0xe2>
 801b09c:	9b03      	ldr	r3, [sp, #12]
 801b09e:	1d19      	adds	r1, r3, #4
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	9103      	str	r1, [sp, #12]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	bfbb      	ittet	lt
 801b0a8:	425b      	neglt	r3, r3
 801b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 801b0ae:	9307      	strge	r3, [sp, #28]
 801b0b0:	9307      	strlt	r3, [sp, #28]
 801b0b2:	bfb8      	it	lt
 801b0b4:	9204      	strlt	r2, [sp, #16]
 801b0b6:	7823      	ldrb	r3, [r4, #0]
 801b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 801b0ba:	d10c      	bne.n	801b0d6 <_vfiprintf_r+0x176>
 801b0bc:	7863      	ldrb	r3, [r4, #1]
 801b0be:	2b2a      	cmp	r3, #42	; 0x2a
 801b0c0:	d135      	bne.n	801b12e <_vfiprintf_r+0x1ce>
 801b0c2:	9b03      	ldr	r3, [sp, #12]
 801b0c4:	1d1a      	adds	r2, r3, #4
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	9203      	str	r2, [sp, #12]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	bfb8      	it	lt
 801b0ce:	f04f 33ff 	movlt.w	r3, #4294967295
 801b0d2:	3402      	adds	r4, #2
 801b0d4:	9305      	str	r3, [sp, #20]
 801b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b1bc <_vfiprintf_r+0x25c>
 801b0da:	7821      	ldrb	r1, [r4, #0]
 801b0dc:	2203      	movs	r2, #3
 801b0de:	4650      	mov	r0, sl
 801b0e0:	f7e5 f886 	bl	80001f0 <memchr>
 801b0e4:	b140      	cbz	r0, 801b0f8 <_vfiprintf_r+0x198>
 801b0e6:	2340      	movs	r3, #64	; 0x40
 801b0e8:	eba0 000a 	sub.w	r0, r0, sl
 801b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 801b0f0:	9b04      	ldr	r3, [sp, #16]
 801b0f2:	4303      	orrs	r3, r0
 801b0f4:	3401      	adds	r4, #1
 801b0f6:	9304      	str	r3, [sp, #16]
 801b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0fc:	482c      	ldr	r0, [pc, #176]	; (801b1b0 <_vfiprintf_r+0x250>)
 801b0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b102:	2206      	movs	r2, #6
 801b104:	f7e5 f874 	bl	80001f0 <memchr>
 801b108:	2800      	cmp	r0, #0
 801b10a:	d03f      	beq.n	801b18c <_vfiprintf_r+0x22c>
 801b10c:	4b29      	ldr	r3, [pc, #164]	; (801b1b4 <_vfiprintf_r+0x254>)
 801b10e:	bb1b      	cbnz	r3, 801b158 <_vfiprintf_r+0x1f8>
 801b110:	9b03      	ldr	r3, [sp, #12]
 801b112:	3307      	adds	r3, #7
 801b114:	f023 0307 	bic.w	r3, r3, #7
 801b118:	3308      	adds	r3, #8
 801b11a:	9303      	str	r3, [sp, #12]
 801b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b11e:	443b      	add	r3, r7
 801b120:	9309      	str	r3, [sp, #36]	; 0x24
 801b122:	e767      	b.n	801aff4 <_vfiprintf_r+0x94>
 801b124:	fb0c 3202 	mla	r2, ip, r2, r3
 801b128:	460c      	mov	r4, r1
 801b12a:	2001      	movs	r0, #1
 801b12c:	e7a5      	b.n	801b07a <_vfiprintf_r+0x11a>
 801b12e:	2300      	movs	r3, #0
 801b130:	3401      	adds	r4, #1
 801b132:	9305      	str	r3, [sp, #20]
 801b134:	4619      	mov	r1, r3
 801b136:	f04f 0c0a 	mov.w	ip, #10
 801b13a:	4620      	mov	r0, r4
 801b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b140:	3a30      	subs	r2, #48	; 0x30
 801b142:	2a09      	cmp	r2, #9
 801b144:	d903      	bls.n	801b14e <_vfiprintf_r+0x1ee>
 801b146:	2b00      	cmp	r3, #0
 801b148:	d0c5      	beq.n	801b0d6 <_vfiprintf_r+0x176>
 801b14a:	9105      	str	r1, [sp, #20]
 801b14c:	e7c3      	b.n	801b0d6 <_vfiprintf_r+0x176>
 801b14e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b152:	4604      	mov	r4, r0
 801b154:	2301      	movs	r3, #1
 801b156:	e7f0      	b.n	801b13a <_vfiprintf_r+0x1da>
 801b158:	ab03      	add	r3, sp, #12
 801b15a:	9300      	str	r3, [sp, #0]
 801b15c:	462a      	mov	r2, r5
 801b15e:	4b16      	ldr	r3, [pc, #88]	; (801b1b8 <_vfiprintf_r+0x258>)
 801b160:	a904      	add	r1, sp, #16
 801b162:	4630      	mov	r0, r6
 801b164:	f3af 8000 	nop.w
 801b168:	4607      	mov	r7, r0
 801b16a:	1c78      	adds	r0, r7, #1
 801b16c:	d1d6      	bne.n	801b11c <_vfiprintf_r+0x1bc>
 801b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b170:	07d9      	lsls	r1, r3, #31
 801b172:	d405      	bmi.n	801b180 <_vfiprintf_r+0x220>
 801b174:	89ab      	ldrh	r3, [r5, #12]
 801b176:	059a      	lsls	r2, r3, #22
 801b178:	d402      	bmi.n	801b180 <_vfiprintf_r+0x220>
 801b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b17c:	f7ff fdca 	bl	801ad14 <__retarget_lock_release_recursive>
 801b180:	89ab      	ldrh	r3, [r5, #12]
 801b182:	065b      	lsls	r3, r3, #25
 801b184:	f53f af12 	bmi.w	801afac <_vfiprintf_r+0x4c>
 801b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b18a:	e711      	b.n	801afb0 <_vfiprintf_r+0x50>
 801b18c:	ab03      	add	r3, sp, #12
 801b18e:	9300      	str	r3, [sp, #0]
 801b190:	462a      	mov	r2, r5
 801b192:	4b09      	ldr	r3, [pc, #36]	; (801b1b8 <_vfiprintf_r+0x258>)
 801b194:	a904      	add	r1, sp, #16
 801b196:	4630      	mov	r0, r6
 801b198:	f000 f880 	bl	801b29c <_printf_i>
 801b19c:	e7e4      	b.n	801b168 <_vfiprintf_r+0x208>
 801b19e:	bf00      	nop
 801b1a0:	08020794 	.word	0x08020794
 801b1a4:	080207b4 	.word	0x080207b4
 801b1a8:	08020774 	.word	0x08020774
 801b1ac:	080205e0 	.word	0x080205e0
 801b1b0:	080205ea 	.word	0x080205ea
 801b1b4:	00000000 	.word	0x00000000
 801b1b8:	0801af3b 	.word	0x0801af3b
 801b1bc:	080205e6 	.word	0x080205e6

0801b1c0 <_printf_common>:
 801b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1c4:	4616      	mov	r6, r2
 801b1c6:	4699      	mov	r9, r3
 801b1c8:	688a      	ldr	r2, [r1, #8]
 801b1ca:	690b      	ldr	r3, [r1, #16]
 801b1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	bfb8      	it	lt
 801b1d4:	4613      	movlt	r3, r2
 801b1d6:	6033      	str	r3, [r6, #0]
 801b1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b1dc:	4607      	mov	r7, r0
 801b1de:	460c      	mov	r4, r1
 801b1e0:	b10a      	cbz	r2, 801b1e6 <_printf_common+0x26>
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	6033      	str	r3, [r6, #0]
 801b1e6:	6823      	ldr	r3, [r4, #0]
 801b1e8:	0699      	lsls	r1, r3, #26
 801b1ea:	bf42      	ittt	mi
 801b1ec:	6833      	ldrmi	r3, [r6, #0]
 801b1ee:	3302      	addmi	r3, #2
 801b1f0:	6033      	strmi	r3, [r6, #0]
 801b1f2:	6825      	ldr	r5, [r4, #0]
 801b1f4:	f015 0506 	ands.w	r5, r5, #6
 801b1f8:	d106      	bne.n	801b208 <_printf_common+0x48>
 801b1fa:	f104 0a19 	add.w	sl, r4, #25
 801b1fe:	68e3      	ldr	r3, [r4, #12]
 801b200:	6832      	ldr	r2, [r6, #0]
 801b202:	1a9b      	subs	r3, r3, r2
 801b204:	42ab      	cmp	r3, r5
 801b206:	dc26      	bgt.n	801b256 <_printf_common+0x96>
 801b208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b20c:	1e13      	subs	r3, r2, #0
 801b20e:	6822      	ldr	r2, [r4, #0]
 801b210:	bf18      	it	ne
 801b212:	2301      	movne	r3, #1
 801b214:	0692      	lsls	r2, r2, #26
 801b216:	d42b      	bmi.n	801b270 <_printf_common+0xb0>
 801b218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b21c:	4649      	mov	r1, r9
 801b21e:	4638      	mov	r0, r7
 801b220:	47c0      	blx	r8
 801b222:	3001      	adds	r0, #1
 801b224:	d01e      	beq.n	801b264 <_printf_common+0xa4>
 801b226:	6823      	ldr	r3, [r4, #0]
 801b228:	68e5      	ldr	r5, [r4, #12]
 801b22a:	6832      	ldr	r2, [r6, #0]
 801b22c:	f003 0306 	and.w	r3, r3, #6
 801b230:	2b04      	cmp	r3, #4
 801b232:	bf08      	it	eq
 801b234:	1aad      	subeq	r5, r5, r2
 801b236:	68a3      	ldr	r3, [r4, #8]
 801b238:	6922      	ldr	r2, [r4, #16]
 801b23a:	bf0c      	ite	eq
 801b23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b240:	2500      	movne	r5, #0
 801b242:	4293      	cmp	r3, r2
 801b244:	bfc4      	itt	gt
 801b246:	1a9b      	subgt	r3, r3, r2
 801b248:	18ed      	addgt	r5, r5, r3
 801b24a:	2600      	movs	r6, #0
 801b24c:	341a      	adds	r4, #26
 801b24e:	42b5      	cmp	r5, r6
 801b250:	d11a      	bne.n	801b288 <_printf_common+0xc8>
 801b252:	2000      	movs	r0, #0
 801b254:	e008      	b.n	801b268 <_printf_common+0xa8>
 801b256:	2301      	movs	r3, #1
 801b258:	4652      	mov	r2, sl
 801b25a:	4649      	mov	r1, r9
 801b25c:	4638      	mov	r0, r7
 801b25e:	47c0      	blx	r8
 801b260:	3001      	adds	r0, #1
 801b262:	d103      	bne.n	801b26c <_printf_common+0xac>
 801b264:	f04f 30ff 	mov.w	r0, #4294967295
 801b268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b26c:	3501      	adds	r5, #1
 801b26e:	e7c6      	b.n	801b1fe <_printf_common+0x3e>
 801b270:	18e1      	adds	r1, r4, r3
 801b272:	1c5a      	adds	r2, r3, #1
 801b274:	2030      	movs	r0, #48	; 0x30
 801b276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b27a:	4422      	add	r2, r4
 801b27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b284:	3302      	adds	r3, #2
 801b286:	e7c7      	b.n	801b218 <_printf_common+0x58>
 801b288:	2301      	movs	r3, #1
 801b28a:	4622      	mov	r2, r4
 801b28c:	4649      	mov	r1, r9
 801b28e:	4638      	mov	r0, r7
 801b290:	47c0      	blx	r8
 801b292:	3001      	adds	r0, #1
 801b294:	d0e6      	beq.n	801b264 <_printf_common+0xa4>
 801b296:	3601      	adds	r6, #1
 801b298:	e7d9      	b.n	801b24e <_printf_common+0x8e>
	...

0801b29c <_printf_i>:
 801b29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b2a0:	460c      	mov	r4, r1
 801b2a2:	4691      	mov	r9, r2
 801b2a4:	7e27      	ldrb	r7, [r4, #24]
 801b2a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b2a8:	2f78      	cmp	r7, #120	; 0x78
 801b2aa:	4680      	mov	r8, r0
 801b2ac:	469a      	mov	sl, r3
 801b2ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2b2:	d807      	bhi.n	801b2c4 <_printf_i+0x28>
 801b2b4:	2f62      	cmp	r7, #98	; 0x62
 801b2b6:	d80a      	bhi.n	801b2ce <_printf_i+0x32>
 801b2b8:	2f00      	cmp	r7, #0
 801b2ba:	f000 80d8 	beq.w	801b46e <_printf_i+0x1d2>
 801b2be:	2f58      	cmp	r7, #88	; 0x58
 801b2c0:	f000 80a3 	beq.w	801b40a <_printf_i+0x16e>
 801b2c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b2cc:	e03a      	b.n	801b344 <_printf_i+0xa8>
 801b2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b2d2:	2b15      	cmp	r3, #21
 801b2d4:	d8f6      	bhi.n	801b2c4 <_printf_i+0x28>
 801b2d6:	a001      	add	r0, pc, #4	; (adr r0, 801b2dc <_printf_i+0x40>)
 801b2d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b2dc:	0801b335 	.word	0x0801b335
 801b2e0:	0801b349 	.word	0x0801b349
 801b2e4:	0801b2c5 	.word	0x0801b2c5
 801b2e8:	0801b2c5 	.word	0x0801b2c5
 801b2ec:	0801b2c5 	.word	0x0801b2c5
 801b2f0:	0801b2c5 	.word	0x0801b2c5
 801b2f4:	0801b349 	.word	0x0801b349
 801b2f8:	0801b2c5 	.word	0x0801b2c5
 801b2fc:	0801b2c5 	.word	0x0801b2c5
 801b300:	0801b2c5 	.word	0x0801b2c5
 801b304:	0801b2c5 	.word	0x0801b2c5
 801b308:	0801b455 	.word	0x0801b455
 801b30c:	0801b379 	.word	0x0801b379
 801b310:	0801b437 	.word	0x0801b437
 801b314:	0801b2c5 	.word	0x0801b2c5
 801b318:	0801b2c5 	.word	0x0801b2c5
 801b31c:	0801b477 	.word	0x0801b477
 801b320:	0801b2c5 	.word	0x0801b2c5
 801b324:	0801b379 	.word	0x0801b379
 801b328:	0801b2c5 	.word	0x0801b2c5
 801b32c:	0801b2c5 	.word	0x0801b2c5
 801b330:	0801b43f 	.word	0x0801b43f
 801b334:	680b      	ldr	r3, [r1, #0]
 801b336:	1d1a      	adds	r2, r3, #4
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	600a      	str	r2, [r1, #0]
 801b33c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b344:	2301      	movs	r3, #1
 801b346:	e0a3      	b.n	801b490 <_printf_i+0x1f4>
 801b348:	6825      	ldr	r5, [r4, #0]
 801b34a:	6808      	ldr	r0, [r1, #0]
 801b34c:	062e      	lsls	r6, r5, #24
 801b34e:	f100 0304 	add.w	r3, r0, #4
 801b352:	d50a      	bpl.n	801b36a <_printf_i+0xce>
 801b354:	6805      	ldr	r5, [r0, #0]
 801b356:	600b      	str	r3, [r1, #0]
 801b358:	2d00      	cmp	r5, #0
 801b35a:	da03      	bge.n	801b364 <_printf_i+0xc8>
 801b35c:	232d      	movs	r3, #45	; 0x2d
 801b35e:	426d      	negs	r5, r5
 801b360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b364:	485e      	ldr	r0, [pc, #376]	; (801b4e0 <_printf_i+0x244>)
 801b366:	230a      	movs	r3, #10
 801b368:	e019      	b.n	801b39e <_printf_i+0x102>
 801b36a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b36e:	6805      	ldr	r5, [r0, #0]
 801b370:	600b      	str	r3, [r1, #0]
 801b372:	bf18      	it	ne
 801b374:	b22d      	sxthne	r5, r5
 801b376:	e7ef      	b.n	801b358 <_printf_i+0xbc>
 801b378:	680b      	ldr	r3, [r1, #0]
 801b37a:	6825      	ldr	r5, [r4, #0]
 801b37c:	1d18      	adds	r0, r3, #4
 801b37e:	6008      	str	r0, [r1, #0]
 801b380:	0628      	lsls	r0, r5, #24
 801b382:	d501      	bpl.n	801b388 <_printf_i+0xec>
 801b384:	681d      	ldr	r5, [r3, #0]
 801b386:	e002      	b.n	801b38e <_printf_i+0xf2>
 801b388:	0669      	lsls	r1, r5, #25
 801b38a:	d5fb      	bpl.n	801b384 <_printf_i+0xe8>
 801b38c:	881d      	ldrh	r5, [r3, #0]
 801b38e:	4854      	ldr	r0, [pc, #336]	; (801b4e0 <_printf_i+0x244>)
 801b390:	2f6f      	cmp	r7, #111	; 0x6f
 801b392:	bf0c      	ite	eq
 801b394:	2308      	moveq	r3, #8
 801b396:	230a      	movne	r3, #10
 801b398:	2100      	movs	r1, #0
 801b39a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b39e:	6866      	ldr	r6, [r4, #4]
 801b3a0:	60a6      	str	r6, [r4, #8]
 801b3a2:	2e00      	cmp	r6, #0
 801b3a4:	bfa2      	ittt	ge
 801b3a6:	6821      	ldrge	r1, [r4, #0]
 801b3a8:	f021 0104 	bicge.w	r1, r1, #4
 801b3ac:	6021      	strge	r1, [r4, #0]
 801b3ae:	b90d      	cbnz	r5, 801b3b4 <_printf_i+0x118>
 801b3b0:	2e00      	cmp	r6, #0
 801b3b2:	d04d      	beq.n	801b450 <_printf_i+0x1b4>
 801b3b4:	4616      	mov	r6, r2
 801b3b6:	fbb5 f1f3 	udiv	r1, r5, r3
 801b3ba:	fb03 5711 	mls	r7, r3, r1, r5
 801b3be:	5dc7      	ldrb	r7, [r0, r7]
 801b3c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b3c4:	462f      	mov	r7, r5
 801b3c6:	42bb      	cmp	r3, r7
 801b3c8:	460d      	mov	r5, r1
 801b3ca:	d9f4      	bls.n	801b3b6 <_printf_i+0x11a>
 801b3cc:	2b08      	cmp	r3, #8
 801b3ce:	d10b      	bne.n	801b3e8 <_printf_i+0x14c>
 801b3d0:	6823      	ldr	r3, [r4, #0]
 801b3d2:	07df      	lsls	r7, r3, #31
 801b3d4:	d508      	bpl.n	801b3e8 <_printf_i+0x14c>
 801b3d6:	6923      	ldr	r3, [r4, #16]
 801b3d8:	6861      	ldr	r1, [r4, #4]
 801b3da:	4299      	cmp	r1, r3
 801b3dc:	bfde      	ittt	le
 801b3de:	2330      	movle	r3, #48	; 0x30
 801b3e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b3e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b3e8:	1b92      	subs	r2, r2, r6
 801b3ea:	6122      	str	r2, [r4, #16]
 801b3ec:	f8cd a000 	str.w	sl, [sp]
 801b3f0:	464b      	mov	r3, r9
 801b3f2:	aa03      	add	r2, sp, #12
 801b3f4:	4621      	mov	r1, r4
 801b3f6:	4640      	mov	r0, r8
 801b3f8:	f7ff fee2 	bl	801b1c0 <_printf_common>
 801b3fc:	3001      	adds	r0, #1
 801b3fe:	d14c      	bne.n	801b49a <_printf_i+0x1fe>
 801b400:	f04f 30ff 	mov.w	r0, #4294967295
 801b404:	b004      	add	sp, #16
 801b406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b40a:	4835      	ldr	r0, [pc, #212]	; (801b4e0 <_printf_i+0x244>)
 801b40c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b410:	6823      	ldr	r3, [r4, #0]
 801b412:	680e      	ldr	r6, [r1, #0]
 801b414:	061f      	lsls	r7, r3, #24
 801b416:	f856 5b04 	ldr.w	r5, [r6], #4
 801b41a:	600e      	str	r6, [r1, #0]
 801b41c:	d514      	bpl.n	801b448 <_printf_i+0x1ac>
 801b41e:	07d9      	lsls	r1, r3, #31
 801b420:	bf44      	itt	mi
 801b422:	f043 0320 	orrmi.w	r3, r3, #32
 801b426:	6023      	strmi	r3, [r4, #0]
 801b428:	b91d      	cbnz	r5, 801b432 <_printf_i+0x196>
 801b42a:	6823      	ldr	r3, [r4, #0]
 801b42c:	f023 0320 	bic.w	r3, r3, #32
 801b430:	6023      	str	r3, [r4, #0]
 801b432:	2310      	movs	r3, #16
 801b434:	e7b0      	b.n	801b398 <_printf_i+0xfc>
 801b436:	6823      	ldr	r3, [r4, #0]
 801b438:	f043 0320 	orr.w	r3, r3, #32
 801b43c:	6023      	str	r3, [r4, #0]
 801b43e:	2378      	movs	r3, #120	; 0x78
 801b440:	4828      	ldr	r0, [pc, #160]	; (801b4e4 <_printf_i+0x248>)
 801b442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b446:	e7e3      	b.n	801b410 <_printf_i+0x174>
 801b448:	065e      	lsls	r6, r3, #25
 801b44a:	bf48      	it	mi
 801b44c:	b2ad      	uxthmi	r5, r5
 801b44e:	e7e6      	b.n	801b41e <_printf_i+0x182>
 801b450:	4616      	mov	r6, r2
 801b452:	e7bb      	b.n	801b3cc <_printf_i+0x130>
 801b454:	680b      	ldr	r3, [r1, #0]
 801b456:	6826      	ldr	r6, [r4, #0]
 801b458:	6960      	ldr	r0, [r4, #20]
 801b45a:	1d1d      	adds	r5, r3, #4
 801b45c:	600d      	str	r5, [r1, #0]
 801b45e:	0635      	lsls	r5, r6, #24
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	d501      	bpl.n	801b468 <_printf_i+0x1cc>
 801b464:	6018      	str	r0, [r3, #0]
 801b466:	e002      	b.n	801b46e <_printf_i+0x1d2>
 801b468:	0671      	lsls	r1, r6, #25
 801b46a:	d5fb      	bpl.n	801b464 <_printf_i+0x1c8>
 801b46c:	8018      	strh	r0, [r3, #0]
 801b46e:	2300      	movs	r3, #0
 801b470:	6123      	str	r3, [r4, #16]
 801b472:	4616      	mov	r6, r2
 801b474:	e7ba      	b.n	801b3ec <_printf_i+0x150>
 801b476:	680b      	ldr	r3, [r1, #0]
 801b478:	1d1a      	adds	r2, r3, #4
 801b47a:	600a      	str	r2, [r1, #0]
 801b47c:	681e      	ldr	r6, [r3, #0]
 801b47e:	6862      	ldr	r2, [r4, #4]
 801b480:	2100      	movs	r1, #0
 801b482:	4630      	mov	r0, r6
 801b484:	f7e4 feb4 	bl	80001f0 <memchr>
 801b488:	b108      	cbz	r0, 801b48e <_printf_i+0x1f2>
 801b48a:	1b80      	subs	r0, r0, r6
 801b48c:	6060      	str	r0, [r4, #4]
 801b48e:	6863      	ldr	r3, [r4, #4]
 801b490:	6123      	str	r3, [r4, #16]
 801b492:	2300      	movs	r3, #0
 801b494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b498:	e7a8      	b.n	801b3ec <_printf_i+0x150>
 801b49a:	6923      	ldr	r3, [r4, #16]
 801b49c:	4632      	mov	r2, r6
 801b49e:	4649      	mov	r1, r9
 801b4a0:	4640      	mov	r0, r8
 801b4a2:	47d0      	blx	sl
 801b4a4:	3001      	adds	r0, #1
 801b4a6:	d0ab      	beq.n	801b400 <_printf_i+0x164>
 801b4a8:	6823      	ldr	r3, [r4, #0]
 801b4aa:	079b      	lsls	r3, r3, #30
 801b4ac:	d413      	bmi.n	801b4d6 <_printf_i+0x23a>
 801b4ae:	68e0      	ldr	r0, [r4, #12]
 801b4b0:	9b03      	ldr	r3, [sp, #12]
 801b4b2:	4298      	cmp	r0, r3
 801b4b4:	bfb8      	it	lt
 801b4b6:	4618      	movlt	r0, r3
 801b4b8:	e7a4      	b.n	801b404 <_printf_i+0x168>
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	4632      	mov	r2, r6
 801b4be:	4649      	mov	r1, r9
 801b4c0:	4640      	mov	r0, r8
 801b4c2:	47d0      	blx	sl
 801b4c4:	3001      	adds	r0, #1
 801b4c6:	d09b      	beq.n	801b400 <_printf_i+0x164>
 801b4c8:	3501      	adds	r5, #1
 801b4ca:	68e3      	ldr	r3, [r4, #12]
 801b4cc:	9903      	ldr	r1, [sp, #12]
 801b4ce:	1a5b      	subs	r3, r3, r1
 801b4d0:	42ab      	cmp	r3, r5
 801b4d2:	dcf2      	bgt.n	801b4ba <_printf_i+0x21e>
 801b4d4:	e7eb      	b.n	801b4ae <_printf_i+0x212>
 801b4d6:	2500      	movs	r5, #0
 801b4d8:	f104 0619 	add.w	r6, r4, #25
 801b4dc:	e7f5      	b.n	801b4ca <_printf_i+0x22e>
 801b4de:	bf00      	nop
 801b4e0:	080205f1 	.word	0x080205f1
 801b4e4:	08020602 	.word	0x08020602

0801b4e8 <iprintf>:
 801b4e8:	b40f      	push	{r0, r1, r2, r3}
 801b4ea:	4b0a      	ldr	r3, [pc, #40]	; (801b514 <iprintf+0x2c>)
 801b4ec:	b513      	push	{r0, r1, r4, lr}
 801b4ee:	681c      	ldr	r4, [r3, #0]
 801b4f0:	b124      	cbz	r4, 801b4fc <iprintf+0x14>
 801b4f2:	69a3      	ldr	r3, [r4, #24]
 801b4f4:	b913      	cbnz	r3, 801b4fc <iprintf+0x14>
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	f001 f90e 	bl	801c718 <__sinit>
 801b4fc:	ab05      	add	r3, sp, #20
 801b4fe:	9a04      	ldr	r2, [sp, #16]
 801b500:	68a1      	ldr	r1, [r4, #8]
 801b502:	9301      	str	r3, [sp, #4]
 801b504:	4620      	mov	r0, r4
 801b506:	f7ff fd2b 	bl	801af60 <_vfiprintf_r>
 801b50a:	b002      	add	sp, #8
 801b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b510:	b004      	add	sp, #16
 801b512:	4770      	bx	lr
 801b514:	20000178 	.word	0x20000178

0801b518 <_puts_r>:
 801b518:	b570      	push	{r4, r5, r6, lr}
 801b51a:	460e      	mov	r6, r1
 801b51c:	4605      	mov	r5, r0
 801b51e:	b118      	cbz	r0, 801b528 <_puts_r+0x10>
 801b520:	6983      	ldr	r3, [r0, #24]
 801b522:	b90b      	cbnz	r3, 801b528 <_puts_r+0x10>
 801b524:	f001 f8f8 	bl	801c718 <__sinit>
 801b528:	69ab      	ldr	r3, [r5, #24]
 801b52a:	68ac      	ldr	r4, [r5, #8]
 801b52c:	b913      	cbnz	r3, 801b534 <_puts_r+0x1c>
 801b52e:	4628      	mov	r0, r5
 801b530:	f001 f8f2 	bl	801c718 <__sinit>
 801b534:	4b2c      	ldr	r3, [pc, #176]	; (801b5e8 <_puts_r+0xd0>)
 801b536:	429c      	cmp	r4, r3
 801b538:	d120      	bne.n	801b57c <_puts_r+0x64>
 801b53a:	686c      	ldr	r4, [r5, #4]
 801b53c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b53e:	07db      	lsls	r3, r3, #31
 801b540:	d405      	bmi.n	801b54e <_puts_r+0x36>
 801b542:	89a3      	ldrh	r3, [r4, #12]
 801b544:	0598      	lsls	r0, r3, #22
 801b546:	d402      	bmi.n	801b54e <_puts_r+0x36>
 801b548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b54a:	f7ff fbe2 	bl	801ad12 <__retarget_lock_acquire_recursive>
 801b54e:	89a3      	ldrh	r3, [r4, #12]
 801b550:	0719      	lsls	r1, r3, #28
 801b552:	d51d      	bpl.n	801b590 <_puts_r+0x78>
 801b554:	6923      	ldr	r3, [r4, #16]
 801b556:	b1db      	cbz	r3, 801b590 <_puts_r+0x78>
 801b558:	3e01      	subs	r6, #1
 801b55a:	68a3      	ldr	r3, [r4, #8]
 801b55c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b560:	3b01      	subs	r3, #1
 801b562:	60a3      	str	r3, [r4, #8]
 801b564:	bb39      	cbnz	r1, 801b5b6 <_puts_r+0x9e>
 801b566:	2b00      	cmp	r3, #0
 801b568:	da38      	bge.n	801b5dc <_puts_r+0xc4>
 801b56a:	4622      	mov	r2, r4
 801b56c:	210a      	movs	r1, #10
 801b56e:	4628      	mov	r0, r5
 801b570:	f000 fef8 	bl	801c364 <__swbuf_r>
 801b574:	3001      	adds	r0, #1
 801b576:	d011      	beq.n	801b59c <_puts_r+0x84>
 801b578:	250a      	movs	r5, #10
 801b57a:	e011      	b.n	801b5a0 <_puts_r+0x88>
 801b57c:	4b1b      	ldr	r3, [pc, #108]	; (801b5ec <_puts_r+0xd4>)
 801b57e:	429c      	cmp	r4, r3
 801b580:	d101      	bne.n	801b586 <_puts_r+0x6e>
 801b582:	68ac      	ldr	r4, [r5, #8]
 801b584:	e7da      	b.n	801b53c <_puts_r+0x24>
 801b586:	4b1a      	ldr	r3, [pc, #104]	; (801b5f0 <_puts_r+0xd8>)
 801b588:	429c      	cmp	r4, r3
 801b58a:	bf08      	it	eq
 801b58c:	68ec      	ldreq	r4, [r5, #12]
 801b58e:	e7d5      	b.n	801b53c <_puts_r+0x24>
 801b590:	4621      	mov	r1, r4
 801b592:	4628      	mov	r0, r5
 801b594:	f000 ff38 	bl	801c408 <__swsetup_r>
 801b598:	2800      	cmp	r0, #0
 801b59a:	d0dd      	beq.n	801b558 <_puts_r+0x40>
 801b59c:	f04f 35ff 	mov.w	r5, #4294967295
 801b5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5a2:	07da      	lsls	r2, r3, #31
 801b5a4:	d405      	bmi.n	801b5b2 <_puts_r+0x9a>
 801b5a6:	89a3      	ldrh	r3, [r4, #12]
 801b5a8:	059b      	lsls	r3, r3, #22
 801b5aa:	d402      	bmi.n	801b5b2 <_puts_r+0x9a>
 801b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5ae:	f7ff fbb1 	bl	801ad14 <__retarget_lock_release_recursive>
 801b5b2:	4628      	mov	r0, r5
 801b5b4:	bd70      	pop	{r4, r5, r6, pc}
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	da04      	bge.n	801b5c4 <_puts_r+0xac>
 801b5ba:	69a2      	ldr	r2, [r4, #24]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	dc06      	bgt.n	801b5ce <_puts_r+0xb6>
 801b5c0:	290a      	cmp	r1, #10
 801b5c2:	d004      	beq.n	801b5ce <_puts_r+0xb6>
 801b5c4:	6823      	ldr	r3, [r4, #0]
 801b5c6:	1c5a      	adds	r2, r3, #1
 801b5c8:	6022      	str	r2, [r4, #0]
 801b5ca:	7019      	strb	r1, [r3, #0]
 801b5cc:	e7c5      	b.n	801b55a <_puts_r+0x42>
 801b5ce:	4622      	mov	r2, r4
 801b5d0:	4628      	mov	r0, r5
 801b5d2:	f000 fec7 	bl	801c364 <__swbuf_r>
 801b5d6:	3001      	adds	r0, #1
 801b5d8:	d1bf      	bne.n	801b55a <_puts_r+0x42>
 801b5da:	e7df      	b.n	801b59c <_puts_r+0x84>
 801b5dc:	6823      	ldr	r3, [r4, #0]
 801b5de:	250a      	movs	r5, #10
 801b5e0:	1c5a      	adds	r2, r3, #1
 801b5e2:	6022      	str	r2, [r4, #0]
 801b5e4:	701d      	strb	r5, [r3, #0]
 801b5e6:	e7db      	b.n	801b5a0 <_puts_r+0x88>
 801b5e8:	08020794 	.word	0x08020794
 801b5ec:	080207b4 	.word	0x080207b4
 801b5f0:	08020774 	.word	0x08020774

0801b5f4 <puts>:
 801b5f4:	4b02      	ldr	r3, [pc, #8]	; (801b600 <puts+0xc>)
 801b5f6:	4601      	mov	r1, r0
 801b5f8:	6818      	ldr	r0, [r3, #0]
 801b5fa:	f7ff bf8d 	b.w	801b518 <_puts_r>
 801b5fe:	bf00      	nop
 801b600:	20000178 	.word	0x20000178

0801b604 <_sbrk_r>:
 801b604:	b538      	push	{r3, r4, r5, lr}
 801b606:	4d06      	ldr	r5, [pc, #24]	; (801b620 <_sbrk_r+0x1c>)
 801b608:	2300      	movs	r3, #0
 801b60a:	4604      	mov	r4, r0
 801b60c:	4608      	mov	r0, r1
 801b60e:	602b      	str	r3, [r5, #0]
 801b610:	f7eb fdbc 	bl	800718c <_sbrk>
 801b614:	1c43      	adds	r3, r0, #1
 801b616:	d102      	bne.n	801b61e <_sbrk_r+0x1a>
 801b618:	682b      	ldr	r3, [r5, #0]
 801b61a:	b103      	cbz	r3, 801b61e <_sbrk_r+0x1a>
 801b61c:	6023      	str	r3, [r4, #0]
 801b61e:	bd38      	pop	{r3, r4, r5, pc}
 801b620:	20000840 	.word	0x20000840

0801b624 <_raise_r>:
 801b624:	291f      	cmp	r1, #31
 801b626:	b538      	push	{r3, r4, r5, lr}
 801b628:	4604      	mov	r4, r0
 801b62a:	460d      	mov	r5, r1
 801b62c:	d904      	bls.n	801b638 <_raise_r+0x14>
 801b62e:	2316      	movs	r3, #22
 801b630:	6003      	str	r3, [r0, #0]
 801b632:	f04f 30ff 	mov.w	r0, #4294967295
 801b636:	bd38      	pop	{r3, r4, r5, pc}
 801b638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b63a:	b112      	cbz	r2, 801b642 <_raise_r+0x1e>
 801b63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b640:	b94b      	cbnz	r3, 801b656 <_raise_r+0x32>
 801b642:	4620      	mov	r0, r4
 801b644:	f000 f830 	bl	801b6a8 <_getpid_r>
 801b648:	462a      	mov	r2, r5
 801b64a:	4601      	mov	r1, r0
 801b64c:	4620      	mov	r0, r4
 801b64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b652:	f000 b817 	b.w	801b684 <_kill_r>
 801b656:	2b01      	cmp	r3, #1
 801b658:	d00a      	beq.n	801b670 <_raise_r+0x4c>
 801b65a:	1c59      	adds	r1, r3, #1
 801b65c:	d103      	bne.n	801b666 <_raise_r+0x42>
 801b65e:	2316      	movs	r3, #22
 801b660:	6003      	str	r3, [r0, #0]
 801b662:	2001      	movs	r0, #1
 801b664:	e7e7      	b.n	801b636 <_raise_r+0x12>
 801b666:	2400      	movs	r4, #0
 801b668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b66c:	4628      	mov	r0, r5
 801b66e:	4798      	blx	r3
 801b670:	2000      	movs	r0, #0
 801b672:	e7e0      	b.n	801b636 <_raise_r+0x12>

0801b674 <raise>:
 801b674:	4b02      	ldr	r3, [pc, #8]	; (801b680 <raise+0xc>)
 801b676:	4601      	mov	r1, r0
 801b678:	6818      	ldr	r0, [r3, #0]
 801b67a:	f7ff bfd3 	b.w	801b624 <_raise_r>
 801b67e:	bf00      	nop
 801b680:	20000178 	.word	0x20000178

0801b684 <_kill_r>:
 801b684:	b538      	push	{r3, r4, r5, lr}
 801b686:	4d07      	ldr	r5, [pc, #28]	; (801b6a4 <_kill_r+0x20>)
 801b688:	2300      	movs	r3, #0
 801b68a:	4604      	mov	r4, r0
 801b68c:	4608      	mov	r0, r1
 801b68e:	4611      	mov	r1, r2
 801b690:	602b      	str	r3, [r5, #0]
 801b692:	f7eb fcf3 	bl	800707c <_kill>
 801b696:	1c43      	adds	r3, r0, #1
 801b698:	d102      	bne.n	801b6a0 <_kill_r+0x1c>
 801b69a:	682b      	ldr	r3, [r5, #0]
 801b69c:	b103      	cbz	r3, 801b6a0 <_kill_r+0x1c>
 801b69e:	6023      	str	r3, [r4, #0]
 801b6a0:	bd38      	pop	{r3, r4, r5, pc}
 801b6a2:	bf00      	nop
 801b6a4:	20000840 	.word	0x20000840

0801b6a8 <_getpid_r>:
 801b6a8:	f7eb bce0 	b.w	800706c <_getpid>

0801b6ac <strncmp>:
 801b6ac:	b510      	push	{r4, lr}
 801b6ae:	b16a      	cbz	r2, 801b6cc <strncmp+0x20>
 801b6b0:	3901      	subs	r1, #1
 801b6b2:	1884      	adds	r4, r0, r2
 801b6b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b6b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b6bc:	4293      	cmp	r3, r2
 801b6be:	d103      	bne.n	801b6c8 <strncmp+0x1c>
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d001      	beq.n	801b6c8 <strncmp+0x1c>
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d1f5      	bne.n	801b6b4 <strncmp+0x8>
 801b6c8:	1a98      	subs	r0, r3, r2
 801b6ca:	bd10      	pop	{r4, pc}
 801b6cc:	4610      	mov	r0, r2
 801b6ce:	e7fc      	b.n	801b6ca <strncmp+0x1e>

0801b6d0 <sulp>:
 801b6d0:	b570      	push	{r4, r5, r6, lr}
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	460d      	mov	r5, r1
 801b6d6:	ec45 4b10 	vmov	d0, r4, r5
 801b6da:	4616      	mov	r6, r2
 801b6dc:	f002 f816 	bl	801d70c <__ulp>
 801b6e0:	ec51 0b10 	vmov	r0, r1, d0
 801b6e4:	b17e      	cbz	r6, 801b706 <sulp+0x36>
 801b6e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b6ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	dd09      	ble.n	801b706 <sulp+0x36>
 801b6f2:	051b      	lsls	r3, r3, #20
 801b6f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b6f8:	2400      	movs	r4, #0
 801b6fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b6fe:	4622      	mov	r2, r4
 801b700:	462b      	mov	r3, r5
 801b702:	f7e4 ff93 	bl	800062c <__aeabi_dmul>
 801b706:	bd70      	pop	{r4, r5, r6, pc}

0801b708 <_strtod_l>:
 801b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b70c:	b0a3      	sub	sp, #140	; 0x8c
 801b70e:	461f      	mov	r7, r3
 801b710:	2300      	movs	r3, #0
 801b712:	931e      	str	r3, [sp, #120]	; 0x78
 801b714:	4ba4      	ldr	r3, [pc, #656]	; (801b9a8 <_strtod_l+0x2a0>)
 801b716:	9219      	str	r2, [sp, #100]	; 0x64
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	9307      	str	r3, [sp, #28]
 801b71c:	4604      	mov	r4, r0
 801b71e:	4618      	mov	r0, r3
 801b720:	4688      	mov	r8, r1
 801b722:	f7e4 fdbf 	bl	80002a4 <strlen>
 801b726:	f04f 0a00 	mov.w	sl, #0
 801b72a:	4605      	mov	r5, r0
 801b72c:	f04f 0b00 	mov.w	fp, #0
 801b730:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b736:	781a      	ldrb	r2, [r3, #0]
 801b738:	2a2b      	cmp	r2, #43	; 0x2b
 801b73a:	d04c      	beq.n	801b7d6 <_strtod_l+0xce>
 801b73c:	d839      	bhi.n	801b7b2 <_strtod_l+0xaa>
 801b73e:	2a0d      	cmp	r2, #13
 801b740:	d832      	bhi.n	801b7a8 <_strtod_l+0xa0>
 801b742:	2a08      	cmp	r2, #8
 801b744:	d832      	bhi.n	801b7ac <_strtod_l+0xa4>
 801b746:	2a00      	cmp	r2, #0
 801b748:	d03c      	beq.n	801b7c4 <_strtod_l+0xbc>
 801b74a:	2300      	movs	r3, #0
 801b74c:	930e      	str	r3, [sp, #56]	; 0x38
 801b74e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801b750:	7833      	ldrb	r3, [r6, #0]
 801b752:	2b30      	cmp	r3, #48	; 0x30
 801b754:	f040 80b4 	bne.w	801b8c0 <_strtod_l+0x1b8>
 801b758:	7873      	ldrb	r3, [r6, #1]
 801b75a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b75e:	2b58      	cmp	r3, #88	; 0x58
 801b760:	d16c      	bne.n	801b83c <_strtod_l+0x134>
 801b762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b764:	9301      	str	r3, [sp, #4]
 801b766:	ab1e      	add	r3, sp, #120	; 0x78
 801b768:	9702      	str	r7, [sp, #8]
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	4a8f      	ldr	r2, [pc, #572]	; (801b9ac <_strtod_l+0x2a4>)
 801b76e:	ab1f      	add	r3, sp, #124	; 0x7c
 801b770:	a91d      	add	r1, sp, #116	; 0x74
 801b772:	4620      	mov	r0, r4
 801b774:	f001 f8d4 	bl	801c920 <__gethex>
 801b778:	f010 0707 	ands.w	r7, r0, #7
 801b77c:	4605      	mov	r5, r0
 801b77e:	d005      	beq.n	801b78c <_strtod_l+0x84>
 801b780:	2f06      	cmp	r7, #6
 801b782:	d12a      	bne.n	801b7da <_strtod_l+0xd2>
 801b784:	3601      	adds	r6, #1
 801b786:	2300      	movs	r3, #0
 801b788:	961d      	str	r6, [sp, #116]	; 0x74
 801b78a:	930e      	str	r3, [sp, #56]	; 0x38
 801b78c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b78e:	2b00      	cmp	r3, #0
 801b790:	f040 8596 	bne.w	801c2c0 <_strtod_l+0xbb8>
 801b794:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b796:	b1db      	cbz	r3, 801b7d0 <_strtod_l+0xc8>
 801b798:	4652      	mov	r2, sl
 801b79a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b79e:	ec43 2b10 	vmov	d0, r2, r3
 801b7a2:	b023      	add	sp, #140	; 0x8c
 801b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a8:	2a20      	cmp	r2, #32
 801b7aa:	d1ce      	bne.n	801b74a <_strtod_l+0x42>
 801b7ac:	3301      	adds	r3, #1
 801b7ae:	931d      	str	r3, [sp, #116]	; 0x74
 801b7b0:	e7c0      	b.n	801b734 <_strtod_l+0x2c>
 801b7b2:	2a2d      	cmp	r2, #45	; 0x2d
 801b7b4:	d1c9      	bne.n	801b74a <_strtod_l+0x42>
 801b7b6:	2201      	movs	r2, #1
 801b7b8:	920e      	str	r2, [sp, #56]	; 0x38
 801b7ba:	1c5a      	adds	r2, r3, #1
 801b7bc:	921d      	str	r2, [sp, #116]	; 0x74
 801b7be:	785b      	ldrb	r3, [r3, #1]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d1c4      	bne.n	801b74e <_strtod_l+0x46>
 801b7c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b7c6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	f040 8576 	bne.w	801c2bc <_strtod_l+0xbb4>
 801b7d0:	4652      	mov	r2, sl
 801b7d2:	465b      	mov	r3, fp
 801b7d4:	e7e3      	b.n	801b79e <_strtod_l+0x96>
 801b7d6:	2200      	movs	r2, #0
 801b7d8:	e7ee      	b.n	801b7b8 <_strtod_l+0xb0>
 801b7da:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801b7dc:	b13a      	cbz	r2, 801b7ee <_strtod_l+0xe6>
 801b7de:	2135      	movs	r1, #53	; 0x35
 801b7e0:	a820      	add	r0, sp, #128	; 0x80
 801b7e2:	f002 f89e 	bl	801d922 <__copybits>
 801b7e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	f001 fc63 	bl	801d0b4 <_Bfree>
 801b7ee:	3f01      	subs	r7, #1
 801b7f0:	2f05      	cmp	r7, #5
 801b7f2:	d807      	bhi.n	801b804 <_strtod_l+0xfc>
 801b7f4:	e8df f007 	tbb	[pc, r7]
 801b7f8:	1d180b0e 	.word	0x1d180b0e
 801b7fc:	030e      	.short	0x030e
 801b7fe:	f04f 0b00 	mov.w	fp, #0
 801b802:	46da      	mov	sl, fp
 801b804:	0728      	lsls	r0, r5, #28
 801b806:	d5c1      	bpl.n	801b78c <_strtod_l+0x84>
 801b808:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b80c:	e7be      	b.n	801b78c <_strtod_l+0x84>
 801b80e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801b812:	e7f7      	b.n	801b804 <_strtod_l+0xfc>
 801b814:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801b818:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b81a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b81e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b822:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b826:	e7ed      	b.n	801b804 <_strtod_l+0xfc>
 801b828:	f8df b184 	ldr.w	fp, [pc, #388]	; 801b9b0 <_strtod_l+0x2a8>
 801b82c:	f04f 0a00 	mov.w	sl, #0
 801b830:	e7e8      	b.n	801b804 <_strtod_l+0xfc>
 801b832:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b836:	f04f 3aff 	mov.w	sl, #4294967295
 801b83a:	e7e3      	b.n	801b804 <_strtod_l+0xfc>
 801b83c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b83e:	1c5a      	adds	r2, r3, #1
 801b840:	921d      	str	r2, [sp, #116]	; 0x74
 801b842:	785b      	ldrb	r3, [r3, #1]
 801b844:	2b30      	cmp	r3, #48	; 0x30
 801b846:	d0f9      	beq.n	801b83c <_strtod_l+0x134>
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d09f      	beq.n	801b78c <_strtod_l+0x84>
 801b84c:	2301      	movs	r3, #1
 801b84e:	f04f 0900 	mov.w	r9, #0
 801b852:	9304      	str	r3, [sp, #16]
 801b854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b856:	930a      	str	r3, [sp, #40]	; 0x28
 801b858:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b85c:	464f      	mov	r7, r9
 801b85e:	220a      	movs	r2, #10
 801b860:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b862:	7806      	ldrb	r6, [r0, #0]
 801b864:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b868:	b2d9      	uxtb	r1, r3
 801b86a:	2909      	cmp	r1, #9
 801b86c:	d92a      	bls.n	801b8c4 <_strtod_l+0x1bc>
 801b86e:	9907      	ldr	r1, [sp, #28]
 801b870:	462a      	mov	r2, r5
 801b872:	f7ff ff1b 	bl	801b6ac <strncmp>
 801b876:	b398      	cbz	r0, 801b8e0 <_strtod_l+0x1d8>
 801b878:	2000      	movs	r0, #0
 801b87a:	4633      	mov	r3, r6
 801b87c:	463d      	mov	r5, r7
 801b87e:	9007      	str	r0, [sp, #28]
 801b880:	4602      	mov	r2, r0
 801b882:	2b65      	cmp	r3, #101	; 0x65
 801b884:	d001      	beq.n	801b88a <_strtod_l+0x182>
 801b886:	2b45      	cmp	r3, #69	; 0x45
 801b888:	d118      	bne.n	801b8bc <_strtod_l+0x1b4>
 801b88a:	b91d      	cbnz	r5, 801b894 <_strtod_l+0x18c>
 801b88c:	9b04      	ldr	r3, [sp, #16]
 801b88e:	4303      	orrs	r3, r0
 801b890:	d098      	beq.n	801b7c4 <_strtod_l+0xbc>
 801b892:	2500      	movs	r5, #0
 801b894:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801b898:	f108 0301 	add.w	r3, r8, #1
 801b89c:	931d      	str	r3, [sp, #116]	; 0x74
 801b89e:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b8a2:	2b2b      	cmp	r3, #43	; 0x2b
 801b8a4:	d075      	beq.n	801b992 <_strtod_l+0x28a>
 801b8a6:	2b2d      	cmp	r3, #45	; 0x2d
 801b8a8:	d07b      	beq.n	801b9a2 <_strtod_l+0x29a>
 801b8aa:	f04f 0c00 	mov.w	ip, #0
 801b8ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801b8b2:	2909      	cmp	r1, #9
 801b8b4:	f240 8082 	bls.w	801b9bc <_strtod_l+0x2b4>
 801b8b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801b8bc:	2600      	movs	r6, #0
 801b8be:	e09d      	b.n	801b9fc <_strtod_l+0x2f4>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	e7c4      	b.n	801b84e <_strtod_l+0x146>
 801b8c4:	2f08      	cmp	r7, #8
 801b8c6:	bfd8      	it	le
 801b8c8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801b8ca:	f100 0001 	add.w	r0, r0, #1
 801b8ce:	bfda      	itte	le
 801b8d0:	fb02 3301 	mlale	r3, r2, r1, r3
 801b8d4:	9309      	strle	r3, [sp, #36]	; 0x24
 801b8d6:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b8da:	3701      	adds	r7, #1
 801b8dc:	901d      	str	r0, [sp, #116]	; 0x74
 801b8de:	e7bf      	b.n	801b860 <_strtod_l+0x158>
 801b8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8e2:	195a      	adds	r2, r3, r5
 801b8e4:	921d      	str	r2, [sp, #116]	; 0x74
 801b8e6:	5d5b      	ldrb	r3, [r3, r5]
 801b8e8:	2f00      	cmp	r7, #0
 801b8ea:	d037      	beq.n	801b95c <_strtod_l+0x254>
 801b8ec:	9007      	str	r0, [sp, #28]
 801b8ee:	463d      	mov	r5, r7
 801b8f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801b8f4:	2a09      	cmp	r2, #9
 801b8f6:	d912      	bls.n	801b91e <_strtod_l+0x216>
 801b8f8:	2201      	movs	r2, #1
 801b8fa:	e7c2      	b.n	801b882 <_strtod_l+0x17a>
 801b8fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8fe:	1c5a      	adds	r2, r3, #1
 801b900:	921d      	str	r2, [sp, #116]	; 0x74
 801b902:	785b      	ldrb	r3, [r3, #1]
 801b904:	3001      	adds	r0, #1
 801b906:	2b30      	cmp	r3, #48	; 0x30
 801b908:	d0f8      	beq.n	801b8fc <_strtod_l+0x1f4>
 801b90a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801b90e:	2a08      	cmp	r2, #8
 801b910:	f200 84db 	bhi.w	801c2ca <_strtod_l+0xbc2>
 801b914:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b916:	9007      	str	r0, [sp, #28]
 801b918:	2000      	movs	r0, #0
 801b91a:	920a      	str	r2, [sp, #40]	; 0x28
 801b91c:	4605      	mov	r5, r0
 801b91e:	3b30      	subs	r3, #48	; 0x30
 801b920:	f100 0201 	add.w	r2, r0, #1
 801b924:	d014      	beq.n	801b950 <_strtod_l+0x248>
 801b926:	9907      	ldr	r1, [sp, #28]
 801b928:	4411      	add	r1, r2
 801b92a:	9107      	str	r1, [sp, #28]
 801b92c:	462a      	mov	r2, r5
 801b92e:	eb00 0e05 	add.w	lr, r0, r5
 801b932:	210a      	movs	r1, #10
 801b934:	4572      	cmp	r2, lr
 801b936:	d113      	bne.n	801b960 <_strtod_l+0x258>
 801b938:	182a      	adds	r2, r5, r0
 801b93a:	2a08      	cmp	r2, #8
 801b93c:	f105 0501 	add.w	r5, r5, #1
 801b940:	4405      	add	r5, r0
 801b942:	dc1c      	bgt.n	801b97e <_strtod_l+0x276>
 801b944:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b946:	220a      	movs	r2, #10
 801b948:	fb02 3301 	mla	r3, r2, r1, r3
 801b94c:	9309      	str	r3, [sp, #36]	; 0x24
 801b94e:	2200      	movs	r2, #0
 801b950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b952:	1c59      	adds	r1, r3, #1
 801b954:	911d      	str	r1, [sp, #116]	; 0x74
 801b956:	785b      	ldrb	r3, [r3, #1]
 801b958:	4610      	mov	r0, r2
 801b95a:	e7c9      	b.n	801b8f0 <_strtod_l+0x1e8>
 801b95c:	4638      	mov	r0, r7
 801b95e:	e7d2      	b.n	801b906 <_strtod_l+0x1fe>
 801b960:	2a08      	cmp	r2, #8
 801b962:	dc04      	bgt.n	801b96e <_strtod_l+0x266>
 801b964:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b966:	434e      	muls	r6, r1
 801b968:	9609      	str	r6, [sp, #36]	; 0x24
 801b96a:	3201      	adds	r2, #1
 801b96c:	e7e2      	b.n	801b934 <_strtod_l+0x22c>
 801b96e:	f102 0c01 	add.w	ip, r2, #1
 801b972:	f1bc 0f10 	cmp.w	ip, #16
 801b976:	bfd8      	it	le
 801b978:	fb01 f909 	mulle.w	r9, r1, r9
 801b97c:	e7f5      	b.n	801b96a <_strtod_l+0x262>
 801b97e:	2d10      	cmp	r5, #16
 801b980:	bfdc      	itt	le
 801b982:	220a      	movle	r2, #10
 801b984:	fb02 3909 	mlale	r9, r2, r9, r3
 801b988:	e7e1      	b.n	801b94e <_strtod_l+0x246>
 801b98a:	2300      	movs	r3, #0
 801b98c:	9307      	str	r3, [sp, #28]
 801b98e:	2201      	movs	r2, #1
 801b990:	e77c      	b.n	801b88c <_strtod_l+0x184>
 801b992:	f04f 0c00 	mov.w	ip, #0
 801b996:	f108 0302 	add.w	r3, r8, #2
 801b99a:	931d      	str	r3, [sp, #116]	; 0x74
 801b99c:	f898 3002 	ldrb.w	r3, [r8, #2]
 801b9a0:	e785      	b.n	801b8ae <_strtod_l+0x1a6>
 801b9a2:	f04f 0c01 	mov.w	ip, #1
 801b9a6:	e7f6      	b.n	801b996 <_strtod_l+0x28e>
 801b9a8:	08020850 	.word	0x08020850
 801b9ac:	08020620 	.word	0x08020620
 801b9b0:	7ff00000 	.word	0x7ff00000
 801b9b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9b6:	1c59      	adds	r1, r3, #1
 801b9b8:	911d      	str	r1, [sp, #116]	; 0x74
 801b9ba:	785b      	ldrb	r3, [r3, #1]
 801b9bc:	2b30      	cmp	r3, #48	; 0x30
 801b9be:	d0f9      	beq.n	801b9b4 <_strtod_l+0x2ac>
 801b9c0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801b9c4:	2908      	cmp	r1, #8
 801b9c6:	f63f af79 	bhi.w	801b8bc <_strtod_l+0x1b4>
 801b9ca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801b9ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9d0:	9308      	str	r3, [sp, #32]
 801b9d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b9d4:	1c59      	adds	r1, r3, #1
 801b9d6:	911d      	str	r1, [sp, #116]	; 0x74
 801b9d8:	785b      	ldrb	r3, [r3, #1]
 801b9da:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801b9de:	2e09      	cmp	r6, #9
 801b9e0:	d937      	bls.n	801ba52 <_strtod_l+0x34a>
 801b9e2:	9e08      	ldr	r6, [sp, #32]
 801b9e4:	1b89      	subs	r1, r1, r6
 801b9e6:	2908      	cmp	r1, #8
 801b9e8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b9ec:	dc02      	bgt.n	801b9f4 <_strtod_l+0x2ec>
 801b9ee:	4576      	cmp	r6, lr
 801b9f0:	bfa8      	it	ge
 801b9f2:	4676      	movge	r6, lr
 801b9f4:	f1bc 0f00 	cmp.w	ip, #0
 801b9f8:	d000      	beq.n	801b9fc <_strtod_l+0x2f4>
 801b9fa:	4276      	negs	r6, r6
 801b9fc:	2d00      	cmp	r5, #0
 801b9fe:	d14f      	bne.n	801baa0 <_strtod_l+0x398>
 801ba00:	9904      	ldr	r1, [sp, #16]
 801ba02:	4301      	orrs	r1, r0
 801ba04:	f47f aec2 	bne.w	801b78c <_strtod_l+0x84>
 801ba08:	2a00      	cmp	r2, #0
 801ba0a:	f47f aedb 	bne.w	801b7c4 <_strtod_l+0xbc>
 801ba0e:	2b69      	cmp	r3, #105	; 0x69
 801ba10:	d027      	beq.n	801ba62 <_strtod_l+0x35a>
 801ba12:	dc24      	bgt.n	801ba5e <_strtod_l+0x356>
 801ba14:	2b49      	cmp	r3, #73	; 0x49
 801ba16:	d024      	beq.n	801ba62 <_strtod_l+0x35a>
 801ba18:	2b4e      	cmp	r3, #78	; 0x4e
 801ba1a:	f47f aed3 	bne.w	801b7c4 <_strtod_l+0xbc>
 801ba1e:	499e      	ldr	r1, [pc, #632]	; (801bc98 <_strtod_l+0x590>)
 801ba20:	a81d      	add	r0, sp, #116	; 0x74
 801ba22:	f001 f9d5 	bl	801cdd0 <__match>
 801ba26:	2800      	cmp	r0, #0
 801ba28:	f43f aecc 	beq.w	801b7c4 <_strtod_l+0xbc>
 801ba2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba2e:	781b      	ldrb	r3, [r3, #0]
 801ba30:	2b28      	cmp	r3, #40	; 0x28
 801ba32:	d12d      	bne.n	801ba90 <_strtod_l+0x388>
 801ba34:	4999      	ldr	r1, [pc, #612]	; (801bc9c <_strtod_l+0x594>)
 801ba36:	aa20      	add	r2, sp, #128	; 0x80
 801ba38:	a81d      	add	r0, sp, #116	; 0x74
 801ba3a:	f001 f9dd 	bl	801cdf8 <__hexnan>
 801ba3e:	2805      	cmp	r0, #5
 801ba40:	d126      	bne.n	801ba90 <_strtod_l+0x388>
 801ba42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ba44:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801ba48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ba4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ba50:	e69c      	b.n	801b78c <_strtod_l+0x84>
 801ba52:	210a      	movs	r1, #10
 801ba54:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ba58:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ba5c:	e7b9      	b.n	801b9d2 <_strtod_l+0x2ca>
 801ba5e:	2b6e      	cmp	r3, #110	; 0x6e
 801ba60:	e7db      	b.n	801ba1a <_strtod_l+0x312>
 801ba62:	498f      	ldr	r1, [pc, #572]	; (801bca0 <_strtod_l+0x598>)
 801ba64:	a81d      	add	r0, sp, #116	; 0x74
 801ba66:	f001 f9b3 	bl	801cdd0 <__match>
 801ba6a:	2800      	cmp	r0, #0
 801ba6c:	f43f aeaa 	beq.w	801b7c4 <_strtod_l+0xbc>
 801ba70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba72:	498c      	ldr	r1, [pc, #560]	; (801bca4 <_strtod_l+0x59c>)
 801ba74:	3b01      	subs	r3, #1
 801ba76:	a81d      	add	r0, sp, #116	; 0x74
 801ba78:	931d      	str	r3, [sp, #116]	; 0x74
 801ba7a:	f001 f9a9 	bl	801cdd0 <__match>
 801ba7e:	b910      	cbnz	r0, 801ba86 <_strtod_l+0x37e>
 801ba80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ba82:	3301      	adds	r3, #1
 801ba84:	931d      	str	r3, [sp, #116]	; 0x74
 801ba86:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801bcb4 <_strtod_l+0x5ac>
 801ba8a:	f04f 0a00 	mov.w	sl, #0
 801ba8e:	e67d      	b.n	801b78c <_strtod_l+0x84>
 801ba90:	4885      	ldr	r0, [pc, #532]	; (801bca8 <_strtod_l+0x5a0>)
 801ba92:	f7fe ffa1 	bl	801a9d8 <nan>
 801ba96:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ba9a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ba9e:	e675      	b.n	801b78c <_strtod_l+0x84>
 801baa0:	9b07      	ldr	r3, [sp, #28]
 801baa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801baa4:	1af3      	subs	r3, r6, r3
 801baa6:	2f00      	cmp	r7, #0
 801baa8:	bf08      	it	eq
 801baaa:	462f      	moveq	r7, r5
 801baac:	2d10      	cmp	r5, #16
 801baae:	9308      	str	r3, [sp, #32]
 801bab0:	46a8      	mov	r8, r5
 801bab2:	bfa8      	it	ge
 801bab4:	f04f 0810 	movge.w	r8, #16
 801bab8:	f7e4 fd3e 	bl	8000538 <__aeabi_ui2d>
 801babc:	2d09      	cmp	r5, #9
 801babe:	4682      	mov	sl, r0
 801bac0:	468b      	mov	fp, r1
 801bac2:	dd13      	ble.n	801baec <_strtod_l+0x3e4>
 801bac4:	4b79      	ldr	r3, [pc, #484]	; (801bcac <_strtod_l+0x5a4>)
 801bac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801baca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801bace:	f7e4 fdad 	bl	800062c <__aeabi_dmul>
 801bad2:	4682      	mov	sl, r0
 801bad4:	4648      	mov	r0, r9
 801bad6:	468b      	mov	fp, r1
 801bad8:	f7e4 fd2e 	bl	8000538 <__aeabi_ui2d>
 801badc:	4602      	mov	r2, r0
 801bade:	460b      	mov	r3, r1
 801bae0:	4650      	mov	r0, sl
 801bae2:	4659      	mov	r1, fp
 801bae4:	f7e4 fbec 	bl	80002c0 <__adddf3>
 801bae8:	4682      	mov	sl, r0
 801baea:	468b      	mov	fp, r1
 801baec:	2d0f      	cmp	r5, #15
 801baee:	dc38      	bgt.n	801bb62 <_strtod_l+0x45a>
 801baf0:	9b08      	ldr	r3, [sp, #32]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	f43f ae4a 	beq.w	801b78c <_strtod_l+0x84>
 801baf8:	dd24      	ble.n	801bb44 <_strtod_l+0x43c>
 801bafa:	2b16      	cmp	r3, #22
 801bafc:	dc0b      	bgt.n	801bb16 <_strtod_l+0x40e>
 801bafe:	4d6b      	ldr	r5, [pc, #428]	; (801bcac <_strtod_l+0x5a4>)
 801bb00:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801bb04:	e9d5 0100 	ldrd	r0, r1, [r5]
 801bb08:	4652      	mov	r2, sl
 801bb0a:	465b      	mov	r3, fp
 801bb0c:	f7e4 fd8e 	bl	800062c <__aeabi_dmul>
 801bb10:	4682      	mov	sl, r0
 801bb12:	468b      	mov	fp, r1
 801bb14:	e63a      	b.n	801b78c <_strtod_l+0x84>
 801bb16:	9a08      	ldr	r2, [sp, #32]
 801bb18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	db20      	blt.n	801bb62 <_strtod_l+0x45a>
 801bb20:	4c62      	ldr	r4, [pc, #392]	; (801bcac <_strtod_l+0x5a4>)
 801bb22:	f1c5 050f 	rsb	r5, r5, #15
 801bb26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801bb2a:	4652      	mov	r2, sl
 801bb2c:	465b      	mov	r3, fp
 801bb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb32:	f7e4 fd7b 	bl	800062c <__aeabi_dmul>
 801bb36:	9b08      	ldr	r3, [sp, #32]
 801bb38:	1b5d      	subs	r5, r3, r5
 801bb3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801bb3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bb42:	e7e3      	b.n	801bb0c <_strtod_l+0x404>
 801bb44:	9b08      	ldr	r3, [sp, #32]
 801bb46:	3316      	adds	r3, #22
 801bb48:	db0b      	blt.n	801bb62 <_strtod_l+0x45a>
 801bb4a:	9b07      	ldr	r3, [sp, #28]
 801bb4c:	4a57      	ldr	r2, [pc, #348]	; (801bcac <_strtod_l+0x5a4>)
 801bb4e:	1b9e      	subs	r6, r3, r6
 801bb50:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801bb54:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bb58:	4650      	mov	r0, sl
 801bb5a:	4659      	mov	r1, fp
 801bb5c:	f7e4 fe90 	bl	8000880 <__aeabi_ddiv>
 801bb60:	e7d6      	b.n	801bb10 <_strtod_l+0x408>
 801bb62:	9b08      	ldr	r3, [sp, #32]
 801bb64:	eba5 0808 	sub.w	r8, r5, r8
 801bb68:	4498      	add	r8, r3
 801bb6a:	f1b8 0f00 	cmp.w	r8, #0
 801bb6e:	dd71      	ble.n	801bc54 <_strtod_l+0x54c>
 801bb70:	f018 030f 	ands.w	r3, r8, #15
 801bb74:	d00a      	beq.n	801bb8c <_strtod_l+0x484>
 801bb76:	494d      	ldr	r1, [pc, #308]	; (801bcac <_strtod_l+0x5a4>)
 801bb78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801bb7c:	4652      	mov	r2, sl
 801bb7e:	465b      	mov	r3, fp
 801bb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb84:	f7e4 fd52 	bl	800062c <__aeabi_dmul>
 801bb88:	4682      	mov	sl, r0
 801bb8a:	468b      	mov	fp, r1
 801bb8c:	f038 080f 	bics.w	r8, r8, #15
 801bb90:	d04d      	beq.n	801bc2e <_strtod_l+0x526>
 801bb92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801bb96:	dd22      	ble.n	801bbde <_strtod_l+0x4d6>
 801bb98:	2500      	movs	r5, #0
 801bb9a:	462e      	mov	r6, r5
 801bb9c:	9509      	str	r5, [sp, #36]	; 0x24
 801bb9e:	9507      	str	r5, [sp, #28]
 801bba0:	2322      	movs	r3, #34	; 0x22
 801bba2:	f8df b110 	ldr.w	fp, [pc, #272]	; 801bcb4 <_strtod_l+0x5ac>
 801bba6:	6023      	str	r3, [r4, #0]
 801bba8:	f04f 0a00 	mov.w	sl, #0
 801bbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	f43f adec 	beq.w	801b78c <_strtod_l+0x84>
 801bbb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bbb6:	4620      	mov	r0, r4
 801bbb8:	f001 fa7c 	bl	801d0b4 <_Bfree>
 801bbbc:	9907      	ldr	r1, [sp, #28]
 801bbbe:	4620      	mov	r0, r4
 801bbc0:	f001 fa78 	bl	801d0b4 <_Bfree>
 801bbc4:	4631      	mov	r1, r6
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	f001 fa74 	bl	801d0b4 <_Bfree>
 801bbcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f001 fa70 	bl	801d0b4 <_Bfree>
 801bbd4:	4629      	mov	r1, r5
 801bbd6:	4620      	mov	r0, r4
 801bbd8:	f001 fa6c 	bl	801d0b4 <_Bfree>
 801bbdc:	e5d6      	b.n	801b78c <_strtod_l+0x84>
 801bbde:	2300      	movs	r3, #0
 801bbe0:	ea4f 1828 	mov.w	r8, r8, asr #4
 801bbe4:	4650      	mov	r0, sl
 801bbe6:	4659      	mov	r1, fp
 801bbe8:	4699      	mov	r9, r3
 801bbea:	f1b8 0f01 	cmp.w	r8, #1
 801bbee:	dc21      	bgt.n	801bc34 <_strtod_l+0x52c>
 801bbf0:	b10b      	cbz	r3, 801bbf6 <_strtod_l+0x4ee>
 801bbf2:	4682      	mov	sl, r0
 801bbf4:	468b      	mov	fp, r1
 801bbf6:	4b2e      	ldr	r3, [pc, #184]	; (801bcb0 <_strtod_l+0x5a8>)
 801bbf8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801bbfc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801bc00:	4652      	mov	r2, sl
 801bc02:	465b      	mov	r3, fp
 801bc04:	e9d9 0100 	ldrd	r0, r1, [r9]
 801bc08:	f7e4 fd10 	bl	800062c <__aeabi_dmul>
 801bc0c:	4b29      	ldr	r3, [pc, #164]	; (801bcb4 <_strtod_l+0x5ac>)
 801bc0e:	460a      	mov	r2, r1
 801bc10:	400b      	ands	r3, r1
 801bc12:	4929      	ldr	r1, [pc, #164]	; (801bcb8 <_strtod_l+0x5b0>)
 801bc14:	428b      	cmp	r3, r1
 801bc16:	4682      	mov	sl, r0
 801bc18:	d8be      	bhi.n	801bb98 <_strtod_l+0x490>
 801bc1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801bc1e:	428b      	cmp	r3, r1
 801bc20:	bf86      	itte	hi
 801bc22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801bcbc <_strtod_l+0x5b4>
 801bc26:	f04f 3aff 	movhi.w	sl, #4294967295
 801bc2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801bc2e:	2300      	movs	r3, #0
 801bc30:	9304      	str	r3, [sp, #16]
 801bc32:	e081      	b.n	801bd38 <_strtod_l+0x630>
 801bc34:	f018 0f01 	tst.w	r8, #1
 801bc38:	d007      	beq.n	801bc4a <_strtod_l+0x542>
 801bc3a:	4b1d      	ldr	r3, [pc, #116]	; (801bcb0 <_strtod_l+0x5a8>)
 801bc3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc44:	f7e4 fcf2 	bl	800062c <__aeabi_dmul>
 801bc48:	2301      	movs	r3, #1
 801bc4a:	f109 0901 	add.w	r9, r9, #1
 801bc4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801bc52:	e7ca      	b.n	801bbea <_strtod_l+0x4e2>
 801bc54:	d0eb      	beq.n	801bc2e <_strtod_l+0x526>
 801bc56:	f1c8 0800 	rsb	r8, r8, #0
 801bc5a:	f018 020f 	ands.w	r2, r8, #15
 801bc5e:	d00a      	beq.n	801bc76 <_strtod_l+0x56e>
 801bc60:	4b12      	ldr	r3, [pc, #72]	; (801bcac <_strtod_l+0x5a4>)
 801bc62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc66:	4650      	mov	r0, sl
 801bc68:	4659      	mov	r1, fp
 801bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6e:	f7e4 fe07 	bl	8000880 <__aeabi_ddiv>
 801bc72:	4682      	mov	sl, r0
 801bc74:	468b      	mov	fp, r1
 801bc76:	ea5f 1828 	movs.w	r8, r8, asr #4
 801bc7a:	d0d8      	beq.n	801bc2e <_strtod_l+0x526>
 801bc7c:	f1b8 0f1f 	cmp.w	r8, #31
 801bc80:	dd1e      	ble.n	801bcc0 <_strtod_l+0x5b8>
 801bc82:	2500      	movs	r5, #0
 801bc84:	462e      	mov	r6, r5
 801bc86:	9509      	str	r5, [sp, #36]	; 0x24
 801bc88:	9507      	str	r5, [sp, #28]
 801bc8a:	2322      	movs	r3, #34	; 0x22
 801bc8c:	f04f 0a00 	mov.w	sl, #0
 801bc90:	f04f 0b00 	mov.w	fp, #0
 801bc94:	6023      	str	r3, [r4, #0]
 801bc96:	e789      	b.n	801bbac <_strtod_l+0x4a4>
 801bc98:	0802061c 	.word	0x0802061c
 801bc9c:	08020634 	.word	0x08020634
 801bca0:	08020613 	.word	0x08020613
 801bca4:	08020616 	.word	0x08020616
 801bca8:	080205db 	.word	0x080205db
 801bcac:	08020908 	.word	0x08020908
 801bcb0:	080208e0 	.word	0x080208e0
 801bcb4:	7ff00000 	.word	0x7ff00000
 801bcb8:	7ca00000 	.word	0x7ca00000
 801bcbc:	7fefffff 	.word	0x7fefffff
 801bcc0:	f018 0310 	ands.w	r3, r8, #16
 801bcc4:	bf18      	it	ne
 801bcc6:	236a      	movne	r3, #106	; 0x6a
 801bcc8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801c080 <_strtod_l+0x978>
 801bccc:	9304      	str	r3, [sp, #16]
 801bcce:	4650      	mov	r0, sl
 801bcd0:	4659      	mov	r1, fp
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	f018 0f01 	tst.w	r8, #1
 801bcd8:	d004      	beq.n	801bce4 <_strtod_l+0x5dc>
 801bcda:	e9d9 2300 	ldrd	r2, r3, [r9]
 801bcde:	f7e4 fca5 	bl	800062c <__aeabi_dmul>
 801bce2:	2301      	movs	r3, #1
 801bce4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801bce8:	f109 0908 	add.w	r9, r9, #8
 801bcec:	d1f2      	bne.n	801bcd4 <_strtod_l+0x5cc>
 801bcee:	b10b      	cbz	r3, 801bcf4 <_strtod_l+0x5ec>
 801bcf0:	4682      	mov	sl, r0
 801bcf2:	468b      	mov	fp, r1
 801bcf4:	9b04      	ldr	r3, [sp, #16]
 801bcf6:	b1bb      	cbz	r3, 801bd28 <_strtod_l+0x620>
 801bcf8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801bcfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	4659      	mov	r1, fp
 801bd04:	dd10      	ble.n	801bd28 <_strtod_l+0x620>
 801bd06:	2b1f      	cmp	r3, #31
 801bd08:	f340 8128 	ble.w	801bf5c <_strtod_l+0x854>
 801bd0c:	2b34      	cmp	r3, #52	; 0x34
 801bd0e:	bfde      	ittt	le
 801bd10:	3b20      	suble	r3, #32
 801bd12:	f04f 32ff 	movle.w	r2, #4294967295
 801bd16:	fa02 f303 	lslle.w	r3, r2, r3
 801bd1a:	f04f 0a00 	mov.w	sl, #0
 801bd1e:	bfcc      	ite	gt
 801bd20:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801bd24:	ea03 0b01 	andle.w	fp, r3, r1
 801bd28:	2200      	movs	r2, #0
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	4650      	mov	r0, sl
 801bd2e:	4659      	mov	r1, fp
 801bd30:	f7e4 fee4 	bl	8000afc <__aeabi_dcmpeq>
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d1a4      	bne.n	801bc82 <_strtod_l+0x57a>
 801bd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd3a:	9300      	str	r3, [sp, #0]
 801bd3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bd3e:	462b      	mov	r3, r5
 801bd40:	463a      	mov	r2, r7
 801bd42:	4620      	mov	r0, r4
 801bd44:	f001 fa22 	bl	801d18c <__s2b>
 801bd48:	9009      	str	r0, [sp, #36]	; 0x24
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	f43f af24 	beq.w	801bb98 <_strtod_l+0x490>
 801bd50:	9b07      	ldr	r3, [sp, #28]
 801bd52:	1b9e      	subs	r6, r3, r6
 801bd54:	9b08      	ldr	r3, [sp, #32]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	bfb4      	ite	lt
 801bd5a:	4633      	movlt	r3, r6
 801bd5c:	2300      	movge	r3, #0
 801bd5e:	9310      	str	r3, [sp, #64]	; 0x40
 801bd60:	9b08      	ldr	r3, [sp, #32]
 801bd62:	2500      	movs	r5, #0
 801bd64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd68:	9318      	str	r3, [sp, #96]	; 0x60
 801bd6a:	462e      	mov	r6, r5
 801bd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd6e:	4620      	mov	r0, r4
 801bd70:	6859      	ldr	r1, [r3, #4]
 801bd72:	f001 f95f 	bl	801d034 <_Balloc>
 801bd76:	9007      	str	r0, [sp, #28]
 801bd78:	2800      	cmp	r0, #0
 801bd7a:	f43f af11 	beq.w	801bba0 <_strtod_l+0x498>
 801bd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd80:	691a      	ldr	r2, [r3, #16]
 801bd82:	3202      	adds	r2, #2
 801bd84:	f103 010c 	add.w	r1, r3, #12
 801bd88:	0092      	lsls	r2, r2, #2
 801bd8a:	300c      	adds	r0, #12
 801bd8c:	f7fe ffd4 	bl	801ad38 <memcpy>
 801bd90:	ec4b ab10 	vmov	d0, sl, fp
 801bd94:	aa20      	add	r2, sp, #128	; 0x80
 801bd96:	a91f      	add	r1, sp, #124	; 0x7c
 801bd98:	4620      	mov	r0, r4
 801bd9a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801bd9e:	f001 fd31 	bl	801d804 <__d2b>
 801bda2:	901e      	str	r0, [sp, #120]	; 0x78
 801bda4:	2800      	cmp	r0, #0
 801bda6:	f43f aefb 	beq.w	801bba0 <_strtod_l+0x498>
 801bdaa:	2101      	movs	r1, #1
 801bdac:	4620      	mov	r0, r4
 801bdae:	f001 fa87 	bl	801d2c0 <__i2b>
 801bdb2:	4606      	mov	r6, r0
 801bdb4:	2800      	cmp	r0, #0
 801bdb6:	f43f aef3 	beq.w	801bba0 <_strtod_l+0x498>
 801bdba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bdbc:	9904      	ldr	r1, [sp, #16]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	bfab      	itete	ge
 801bdc2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801bdc4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801bdc6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801bdc8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801bdcc:	bfac      	ite	ge
 801bdce:	eb03 0902 	addge.w	r9, r3, r2
 801bdd2:	1ad7      	sublt	r7, r2, r3
 801bdd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bdd6:	eba3 0801 	sub.w	r8, r3, r1
 801bdda:	4490      	add	r8, r2
 801bddc:	4ba3      	ldr	r3, [pc, #652]	; (801c06c <_strtod_l+0x964>)
 801bdde:	f108 38ff 	add.w	r8, r8, #4294967295
 801bde2:	4598      	cmp	r8, r3
 801bde4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bde8:	f280 80cc 	bge.w	801bf84 <_strtod_l+0x87c>
 801bdec:	eba3 0308 	sub.w	r3, r3, r8
 801bdf0:	2b1f      	cmp	r3, #31
 801bdf2:	eba2 0203 	sub.w	r2, r2, r3
 801bdf6:	f04f 0101 	mov.w	r1, #1
 801bdfa:	f300 80b6 	bgt.w	801bf6a <_strtod_l+0x862>
 801bdfe:	fa01 f303 	lsl.w	r3, r1, r3
 801be02:	9311      	str	r3, [sp, #68]	; 0x44
 801be04:	2300      	movs	r3, #0
 801be06:	930c      	str	r3, [sp, #48]	; 0x30
 801be08:	eb09 0802 	add.w	r8, r9, r2
 801be0c:	9b04      	ldr	r3, [sp, #16]
 801be0e:	45c1      	cmp	r9, r8
 801be10:	4417      	add	r7, r2
 801be12:	441f      	add	r7, r3
 801be14:	464b      	mov	r3, r9
 801be16:	bfa8      	it	ge
 801be18:	4643      	movge	r3, r8
 801be1a:	42bb      	cmp	r3, r7
 801be1c:	bfa8      	it	ge
 801be1e:	463b      	movge	r3, r7
 801be20:	2b00      	cmp	r3, #0
 801be22:	bfc2      	ittt	gt
 801be24:	eba8 0803 	subgt.w	r8, r8, r3
 801be28:	1aff      	subgt	r7, r7, r3
 801be2a:	eba9 0903 	subgt.w	r9, r9, r3
 801be2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be30:	2b00      	cmp	r3, #0
 801be32:	dd17      	ble.n	801be64 <_strtod_l+0x75c>
 801be34:	4631      	mov	r1, r6
 801be36:	461a      	mov	r2, r3
 801be38:	4620      	mov	r0, r4
 801be3a:	f001 fafd 	bl	801d438 <__pow5mult>
 801be3e:	4606      	mov	r6, r0
 801be40:	2800      	cmp	r0, #0
 801be42:	f43f aead 	beq.w	801bba0 <_strtod_l+0x498>
 801be46:	4601      	mov	r1, r0
 801be48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801be4a:	4620      	mov	r0, r4
 801be4c:	f001 fa4e 	bl	801d2ec <__multiply>
 801be50:	900f      	str	r0, [sp, #60]	; 0x3c
 801be52:	2800      	cmp	r0, #0
 801be54:	f43f aea4 	beq.w	801bba0 <_strtod_l+0x498>
 801be58:	991e      	ldr	r1, [sp, #120]	; 0x78
 801be5a:	4620      	mov	r0, r4
 801be5c:	f001 f92a 	bl	801d0b4 <_Bfree>
 801be60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be62:	931e      	str	r3, [sp, #120]	; 0x78
 801be64:	f1b8 0f00 	cmp.w	r8, #0
 801be68:	f300 8091 	bgt.w	801bf8e <_strtod_l+0x886>
 801be6c:	9b08      	ldr	r3, [sp, #32]
 801be6e:	2b00      	cmp	r3, #0
 801be70:	dd08      	ble.n	801be84 <_strtod_l+0x77c>
 801be72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801be74:	9907      	ldr	r1, [sp, #28]
 801be76:	4620      	mov	r0, r4
 801be78:	f001 fade 	bl	801d438 <__pow5mult>
 801be7c:	9007      	str	r0, [sp, #28]
 801be7e:	2800      	cmp	r0, #0
 801be80:	f43f ae8e 	beq.w	801bba0 <_strtod_l+0x498>
 801be84:	2f00      	cmp	r7, #0
 801be86:	dd08      	ble.n	801be9a <_strtod_l+0x792>
 801be88:	9907      	ldr	r1, [sp, #28]
 801be8a:	463a      	mov	r2, r7
 801be8c:	4620      	mov	r0, r4
 801be8e:	f001 fb2d 	bl	801d4ec <__lshift>
 801be92:	9007      	str	r0, [sp, #28]
 801be94:	2800      	cmp	r0, #0
 801be96:	f43f ae83 	beq.w	801bba0 <_strtod_l+0x498>
 801be9a:	f1b9 0f00 	cmp.w	r9, #0
 801be9e:	dd08      	ble.n	801beb2 <_strtod_l+0x7aa>
 801bea0:	4631      	mov	r1, r6
 801bea2:	464a      	mov	r2, r9
 801bea4:	4620      	mov	r0, r4
 801bea6:	f001 fb21 	bl	801d4ec <__lshift>
 801beaa:	4606      	mov	r6, r0
 801beac:	2800      	cmp	r0, #0
 801beae:	f43f ae77 	beq.w	801bba0 <_strtod_l+0x498>
 801beb2:	9a07      	ldr	r2, [sp, #28]
 801beb4:	991e      	ldr	r1, [sp, #120]	; 0x78
 801beb6:	4620      	mov	r0, r4
 801beb8:	f001 fba0 	bl	801d5fc <__mdiff>
 801bebc:	4605      	mov	r5, r0
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f43f ae6e 	beq.w	801bba0 <_strtod_l+0x498>
 801bec4:	68c3      	ldr	r3, [r0, #12]
 801bec6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bec8:	2300      	movs	r3, #0
 801beca:	60c3      	str	r3, [r0, #12]
 801becc:	4631      	mov	r1, r6
 801bece:	f001 fb79 	bl	801d5c4 <__mcmp>
 801bed2:	2800      	cmp	r0, #0
 801bed4:	da65      	bge.n	801bfa2 <_strtod_l+0x89a>
 801bed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bed8:	ea53 030a 	orrs.w	r3, r3, sl
 801bedc:	f040 8087 	bne.w	801bfee <_strtod_l+0x8e6>
 801bee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	f040 8082 	bne.w	801bfee <_strtod_l+0x8e6>
 801beea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801beee:	0d1b      	lsrs	r3, r3, #20
 801bef0:	051b      	lsls	r3, r3, #20
 801bef2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801bef6:	d97a      	bls.n	801bfee <_strtod_l+0x8e6>
 801bef8:	696b      	ldr	r3, [r5, #20]
 801befa:	b913      	cbnz	r3, 801bf02 <_strtod_l+0x7fa>
 801befc:	692b      	ldr	r3, [r5, #16]
 801befe:	2b01      	cmp	r3, #1
 801bf00:	dd75      	ble.n	801bfee <_strtod_l+0x8e6>
 801bf02:	4629      	mov	r1, r5
 801bf04:	2201      	movs	r2, #1
 801bf06:	4620      	mov	r0, r4
 801bf08:	f001 faf0 	bl	801d4ec <__lshift>
 801bf0c:	4631      	mov	r1, r6
 801bf0e:	4605      	mov	r5, r0
 801bf10:	f001 fb58 	bl	801d5c4 <__mcmp>
 801bf14:	2800      	cmp	r0, #0
 801bf16:	dd6a      	ble.n	801bfee <_strtod_l+0x8e6>
 801bf18:	9904      	ldr	r1, [sp, #16]
 801bf1a:	4a55      	ldr	r2, [pc, #340]	; (801c070 <_strtod_l+0x968>)
 801bf1c:	465b      	mov	r3, fp
 801bf1e:	2900      	cmp	r1, #0
 801bf20:	f000 8085 	beq.w	801c02e <_strtod_l+0x926>
 801bf24:	ea02 010b 	and.w	r1, r2, fp
 801bf28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801bf2c:	dc7f      	bgt.n	801c02e <_strtod_l+0x926>
 801bf2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bf32:	f77f aeaa 	ble.w	801bc8a <_strtod_l+0x582>
 801bf36:	4a4f      	ldr	r2, [pc, #316]	; (801c074 <_strtod_l+0x96c>)
 801bf38:	2300      	movs	r3, #0
 801bf3a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801bf3e:	4650      	mov	r0, sl
 801bf40:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801bf44:	4659      	mov	r1, fp
 801bf46:	f7e4 fb71 	bl	800062c <__aeabi_dmul>
 801bf4a:	460b      	mov	r3, r1
 801bf4c:	4303      	orrs	r3, r0
 801bf4e:	bf08      	it	eq
 801bf50:	2322      	moveq	r3, #34	; 0x22
 801bf52:	4682      	mov	sl, r0
 801bf54:	468b      	mov	fp, r1
 801bf56:	bf08      	it	eq
 801bf58:	6023      	streq	r3, [r4, #0]
 801bf5a:	e62b      	b.n	801bbb4 <_strtod_l+0x4ac>
 801bf5c:	f04f 32ff 	mov.w	r2, #4294967295
 801bf60:	fa02 f303 	lsl.w	r3, r2, r3
 801bf64:	ea03 0a0a 	and.w	sl, r3, sl
 801bf68:	e6de      	b.n	801bd28 <_strtod_l+0x620>
 801bf6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801bf6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801bf72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801bf76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801bf7a:	fa01 f308 	lsl.w	r3, r1, r8
 801bf7e:	930c      	str	r3, [sp, #48]	; 0x30
 801bf80:	9111      	str	r1, [sp, #68]	; 0x44
 801bf82:	e741      	b.n	801be08 <_strtod_l+0x700>
 801bf84:	2300      	movs	r3, #0
 801bf86:	930c      	str	r3, [sp, #48]	; 0x30
 801bf88:	2301      	movs	r3, #1
 801bf8a:	9311      	str	r3, [sp, #68]	; 0x44
 801bf8c:	e73c      	b.n	801be08 <_strtod_l+0x700>
 801bf8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801bf90:	4642      	mov	r2, r8
 801bf92:	4620      	mov	r0, r4
 801bf94:	f001 faaa 	bl	801d4ec <__lshift>
 801bf98:	901e      	str	r0, [sp, #120]	; 0x78
 801bf9a:	2800      	cmp	r0, #0
 801bf9c:	f47f af66 	bne.w	801be6c <_strtod_l+0x764>
 801bfa0:	e5fe      	b.n	801bba0 <_strtod_l+0x498>
 801bfa2:	465f      	mov	r7, fp
 801bfa4:	d16e      	bne.n	801c084 <_strtod_l+0x97c>
 801bfa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bfa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bfac:	b342      	cbz	r2, 801c000 <_strtod_l+0x8f8>
 801bfae:	4a32      	ldr	r2, [pc, #200]	; (801c078 <_strtod_l+0x970>)
 801bfb0:	4293      	cmp	r3, r2
 801bfb2:	d128      	bne.n	801c006 <_strtod_l+0x8fe>
 801bfb4:	9b04      	ldr	r3, [sp, #16]
 801bfb6:	4650      	mov	r0, sl
 801bfb8:	b1eb      	cbz	r3, 801bff6 <_strtod_l+0x8ee>
 801bfba:	4a2d      	ldr	r2, [pc, #180]	; (801c070 <_strtod_l+0x968>)
 801bfbc:	403a      	ands	r2, r7
 801bfbe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bfc2:	f04f 31ff 	mov.w	r1, #4294967295
 801bfc6:	d819      	bhi.n	801bffc <_strtod_l+0x8f4>
 801bfc8:	0d12      	lsrs	r2, r2, #20
 801bfca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bfce:	fa01 f303 	lsl.w	r3, r1, r3
 801bfd2:	4298      	cmp	r0, r3
 801bfd4:	d117      	bne.n	801c006 <_strtod_l+0x8fe>
 801bfd6:	4b29      	ldr	r3, [pc, #164]	; (801c07c <_strtod_l+0x974>)
 801bfd8:	429f      	cmp	r7, r3
 801bfda:	d102      	bne.n	801bfe2 <_strtod_l+0x8da>
 801bfdc:	3001      	adds	r0, #1
 801bfde:	f43f addf 	beq.w	801bba0 <_strtod_l+0x498>
 801bfe2:	4b23      	ldr	r3, [pc, #140]	; (801c070 <_strtod_l+0x968>)
 801bfe4:	403b      	ands	r3, r7
 801bfe6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801bfea:	f04f 0a00 	mov.w	sl, #0
 801bfee:	9b04      	ldr	r3, [sp, #16]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d1a0      	bne.n	801bf36 <_strtod_l+0x82e>
 801bff4:	e5de      	b.n	801bbb4 <_strtod_l+0x4ac>
 801bff6:	f04f 33ff 	mov.w	r3, #4294967295
 801bffa:	e7ea      	b.n	801bfd2 <_strtod_l+0x8ca>
 801bffc:	460b      	mov	r3, r1
 801bffe:	e7e8      	b.n	801bfd2 <_strtod_l+0x8ca>
 801c000:	ea53 030a 	orrs.w	r3, r3, sl
 801c004:	d088      	beq.n	801bf18 <_strtod_l+0x810>
 801c006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c008:	b1db      	cbz	r3, 801c042 <_strtod_l+0x93a>
 801c00a:	423b      	tst	r3, r7
 801c00c:	d0ef      	beq.n	801bfee <_strtod_l+0x8e6>
 801c00e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c010:	9a04      	ldr	r2, [sp, #16]
 801c012:	4650      	mov	r0, sl
 801c014:	4659      	mov	r1, fp
 801c016:	b1c3      	cbz	r3, 801c04a <_strtod_l+0x942>
 801c018:	f7ff fb5a 	bl	801b6d0 <sulp>
 801c01c:	4602      	mov	r2, r0
 801c01e:	460b      	mov	r3, r1
 801c020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c024:	f7e4 f94c 	bl	80002c0 <__adddf3>
 801c028:	4682      	mov	sl, r0
 801c02a:	468b      	mov	fp, r1
 801c02c:	e7df      	b.n	801bfee <_strtod_l+0x8e6>
 801c02e:	4013      	ands	r3, r2
 801c030:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c034:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c038:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c03c:	f04f 3aff 	mov.w	sl, #4294967295
 801c040:	e7d5      	b.n	801bfee <_strtod_l+0x8e6>
 801c042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c044:	ea13 0f0a 	tst.w	r3, sl
 801c048:	e7e0      	b.n	801c00c <_strtod_l+0x904>
 801c04a:	f7ff fb41 	bl	801b6d0 <sulp>
 801c04e:	4602      	mov	r2, r0
 801c050:	460b      	mov	r3, r1
 801c052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801c056:	f7e4 f931 	bl	80002bc <__aeabi_dsub>
 801c05a:	2200      	movs	r2, #0
 801c05c:	2300      	movs	r3, #0
 801c05e:	4682      	mov	sl, r0
 801c060:	468b      	mov	fp, r1
 801c062:	f7e4 fd4b 	bl	8000afc <__aeabi_dcmpeq>
 801c066:	2800      	cmp	r0, #0
 801c068:	d0c1      	beq.n	801bfee <_strtod_l+0x8e6>
 801c06a:	e60e      	b.n	801bc8a <_strtod_l+0x582>
 801c06c:	fffffc02 	.word	0xfffffc02
 801c070:	7ff00000 	.word	0x7ff00000
 801c074:	39500000 	.word	0x39500000
 801c078:	000fffff 	.word	0x000fffff
 801c07c:	7fefffff 	.word	0x7fefffff
 801c080:	08020648 	.word	0x08020648
 801c084:	4631      	mov	r1, r6
 801c086:	4628      	mov	r0, r5
 801c088:	f001 fc18 	bl	801d8bc <__ratio>
 801c08c:	ec59 8b10 	vmov	r8, r9, d0
 801c090:	ee10 0a10 	vmov	r0, s0
 801c094:	2200      	movs	r2, #0
 801c096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c09a:	4649      	mov	r1, r9
 801c09c:	f7e4 fd42 	bl	8000b24 <__aeabi_dcmple>
 801c0a0:	2800      	cmp	r0, #0
 801c0a2:	d07c      	beq.n	801c19e <_strtod_l+0xa96>
 801c0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d04c      	beq.n	801c144 <_strtod_l+0xa3c>
 801c0aa:	4b95      	ldr	r3, [pc, #596]	; (801c300 <_strtod_l+0xbf8>)
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c0b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801c300 <_strtod_l+0xbf8>
 801c0b6:	f04f 0800 	mov.w	r8, #0
 801c0ba:	4b92      	ldr	r3, [pc, #584]	; (801c304 <_strtod_l+0xbfc>)
 801c0bc:	403b      	ands	r3, r7
 801c0be:	9311      	str	r3, [sp, #68]	; 0x44
 801c0c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c0c2:	4b91      	ldr	r3, [pc, #580]	; (801c308 <_strtod_l+0xc00>)
 801c0c4:	429a      	cmp	r2, r3
 801c0c6:	f040 80b2 	bne.w	801c22e <_strtod_l+0xb26>
 801c0ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c0d2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801c0d6:	ec4b ab10 	vmov	d0, sl, fp
 801c0da:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801c0de:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c0e2:	f001 fb13 	bl	801d70c <__ulp>
 801c0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c0ea:	ec53 2b10 	vmov	r2, r3, d0
 801c0ee:	f7e4 fa9d 	bl	800062c <__aeabi_dmul>
 801c0f2:	4652      	mov	r2, sl
 801c0f4:	465b      	mov	r3, fp
 801c0f6:	f7e4 f8e3 	bl	80002c0 <__adddf3>
 801c0fa:	460b      	mov	r3, r1
 801c0fc:	4981      	ldr	r1, [pc, #516]	; (801c304 <_strtod_l+0xbfc>)
 801c0fe:	4a83      	ldr	r2, [pc, #524]	; (801c30c <_strtod_l+0xc04>)
 801c100:	4019      	ands	r1, r3
 801c102:	4291      	cmp	r1, r2
 801c104:	4682      	mov	sl, r0
 801c106:	d95e      	bls.n	801c1c6 <_strtod_l+0xabe>
 801c108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c10a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c10e:	4293      	cmp	r3, r2
 801c110:	d103      	bne.n	801c11a <_strtod_l+0xa12>
 801c112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c114:	3301      	adds	r3, #1
 801c116:	f43f ad43 	beq.w	801bba0 <_strtod_l+0x498>
 801c11a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801c318 <_strtod_l+0xc10>
 801c11e:	f04f 3aff 	mov.w	sl, #4294967295
 801c122:	991e      	ldr	r1, [sp, #120]	; 0x78
 801c124:	4620      	mov	r0, r4
 801c126:	f000 ffc5 	bl	801d0b4 <_Bfree>
 801c12a:	9907      	ldr	r1, [sp, #28]
 801c12c:	4620      	mov	r0, r4
 801c12e:	f000 ffc1 	bl	801d0b4 <_Bfree>
 801c132:	4631      	mov	r1, r6
 801c134:	4620      	mov	r0, r4
 801c136:	f000 ffbd 	bl	801d0b4 <_Bfree>
 801c13a:	4629      	mov	r1, r5
 801c13c:	4620      	mov	r0, r4
 801c13e:	f000 ffb9 	bl	801d0b4 <_Bfree>
 801c142:	e613      	b.n	801bd6c <_strtod_l+0x664>
 801c144:	f1ba 0f00 	cmp.w	sl, #0
 801c148:	d11b      	bne.n	801c182 <_strtod_l+0xa7a>
 801c14a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c14e:	b9f3      	cbnz	r3, 801c18e <_strtod_l+0xa86>
 801c150:	4b6b      	ldr	r3, [pc, #428]	; (801c300 <_strtod_l+0xbf8>)
 801c152:	2200      	movs	r2, #0
 801c154:	4640      	mov	r0, r8
 801c156:	4649      	mov	r1, r9
 801c158:	f7e4 fcda 	bl	8000b10 <__aeabi_dcmplt>
 801c15c:	b9d0      	cbnz	r0, 801c194 <_strtod_l+0xa8c>
 801c15e:	4640      	mov	r0, r8
 801c160:	4649      	mov	r1, r9
 801c162:	4b6b      	ldr	r3, [pc, #428]	; (801c310 <_strtod_l+0xc08>)
 801c164:	2200      	movs	r2, #0
 801c166:	f7e4 fa61 	bl	800062c <__aeabi_dmul>
 801c16a:	4680      	mov	r8, r0
 801c16c:	4689      	mov	r9, r1
 801c16e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c172:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801c176:	931b      	str	r3, [sp, #108]	; 0x6c
 801c178:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801c17c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c180:	e79b      	b.n	801c0ba <_strtod_l+0x9b2>
 801c182:	f1ba 0f01 	cmp.w	sl, #1
 801c186:	d102      	bne.n	801c18e <_strtod_l+0xa86>
 801c188:	2f00      	cmp	r7, #0
 801c18a:	f43f ad7e 	beq.w	801bc8a <_strtod_l+0x582>
 801c18e:	4b61      	ldr	r3, [pc, #388]	; (801c314 <_strtod_l+0xc0c>)
 801c190:	2200      	movs	r2, #0
 801c192:	e78c      	b.n	801c0ae <_strtod_l+0x9a6>
 801c194:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c310 <_strtod_l+0xc08>
 801c198:	f04f 0800 	mov.w	r8, #0
 801c19c:	e7e7      	b.n	801c16e <_strtod_l+0xa66>
 801c19e:	4b5c      	ldr	r3, [pc, #368]	; (801c310 <_strtod_l+0xc08>)
 801c1a0:	4640      	mov	r0, r8
 801c1a2:	4649      	mov	r1, r9
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	f7e4 fa41 	bl	800062c <__aeabi_dmul>
 801c1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1ac:	4680      	mov	r8, r0
 801c1ae:	4689      	mov	r9, r1
 801c1b0:	b933      	cbnz	r3, 801c1c0 <_strtod_l+0xab8>
 801c1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c1b6:	9012      	str	r0, [sp, #72]	; 0x48
 801c1b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c1ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801c1be:	e7dd      	b.n	801c17c <_strtod_l+0xa74>
 801c1c0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801c1c4:	e7f9      	b.n	801c1ba <_strtod_l+0xab2>
 801c1c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801c1ca:	9b04      	ldr	r3, [sp, #16]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d1a8      	bne.n	801c122 <_strtod_l+0xa1a>
 801c1d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c1d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c1d6:	0d1b      	lsrs	r3, r3, #20
 801c1d8:	051b      	lsls	r3, r3, #20
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	d1a1      	bne.n	801c122 <_strtod_l+0xa1a>
 801c1de:	4640      	mov	r0, r8
 801c1e0:	4649      	mov	r1, r9
 801c1e2:	f7e4 fdd3 	bl	8000d8c <__aeabi_d2lz>
 801c1e6:	f7e4 f9f3 	bl	80005d0 <__aeabi_l2d>
 801c1ea:	4602      	mov	r2, r0
 801c1ec:	460b      	mov	r3, r1
 801c1ee:	4640      	mov	r0, r8
 801c1f0:	4649      	mov	r1, r9
 801c1f2:	f7e4 f863 	bl	80002bc <__aeabi_dsub>
 801c1f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c1f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c1fc:	ea43 030a 	orr.w	r3, r3, sl
 801c200:	4313      	orrs	r3, r2
 801c202:	4680      	mov	r8, r0
 801c204:	4689      	mov	r9, r1
 801c206:	d053      	beq.n	801c2b0 <_strtod_l+0xba8>
 801c208:	a335      	add	r3, pc, #212	; (adr r3, 801c2e0 <_strtod_l+0xbd8>)
 801c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c20e:	f7e4 fc7f 	bl	8000b10 <__aeabi_dcmplt>
 801c212:	2800      	cmp	r0, #0
 801c214:	f47f acce 	bne.w	801bbb4 <_strtod_l+0x4ac>
 801c218:	a333      	add	r3, pc, #204	; (adr r3, 801c2e8 <_strtod_l+0xbe0>)
 801c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c21e:	4640      	mov	r0, r8
 801c220:	4649      	mov	r1, r9
 801c222:	f7e4 fc93 	bl	8000b4c <__aeabi_dcmpgt>
 801c226:	2800      	cmp	r0, #0
 801c228:	f43f af7b 	beq.w	801c122 <_strtod_l+0xa1a>
 801c22c:	e4c2      	b.n	801bbb4 <_strtod_l+0x4ac>
 801c22e:	9b04      	ldr	r3, [sp, #16]
 801c230:	b333      	cbz	r3, 801c280 <_strtod_l+0xb78>
 801c232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c234:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c238:	d822      	bhi.n	801c280 <_strtod_l+0xb78>
 801c23a:	a32d      	add	r3, pc, #180	; (adr r3, 801c2f0 <_strtod_l+0xbe8>)
 801c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c240:	4640      	mov	r0, r8
 801c242:	4649      	mov	r1, r9
 801c244:	f7e4 fc6e 	bl	8000b24 <__aeabi_dcmple>
 801c248:	b1a0      	cbz	r0, 801c274 <_strtod_l+0xb6c>
 801c24a:	4649      	mov	r1, r9
 801c24c:	4640      	mov	r0, r8
 801c24e:	f7e4 fcc5 	bl	8000bdc <__aeabi_d2uiz>
 801c252:	2801      	cmp	r0, #1
 801c254:	bf38      	it	cc
 801c256:	2001      	movcc	r0, #1
 801c258:	f7e4 f96e 	bl	8000538 <__aeabi_ui2d>
 801c25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c25e:	4680      	mov	r8, r0
 801c260:	4689      	mov	r9, r1
 801c262:	bb13      	cbnz	r3, 801c2aa <_strtod_l+0xba2>
 801c264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c268:	9014      	str	r0, [sp, #80]	; 0x50
 801c26a:	9315      	str	r3, [sp, #84]	; 0x54
 801c26c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801c270:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801c274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c278:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801c27c:	1a9b      	subs	r3, r3, r2
 801c27e:	930d      	str	r3, [sp, #52]	; 0x34
 801c280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c284:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c288:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c28c:	f001 fa3e 	bl	801d70c <__ulp>
 801c290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c294:	ec53 2b10 	vmov	r2, r3, d0
 801c298:	f7e4 f9c8 	bl	800062c <__aeabi_dmul>
 801c29c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c2a0:	f7e4 f80e 	bl	80002c0 <__adddf3>
 801c2a4:	4682      	mov	sl, r0
 801c2a6:	468b      	mov	fp, r1
 801c2a8:	e78f      	b.n	801c1ca <_strtod_l+0xac2>
 801c2aa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801c2ae:	e7dd      	b.n	801c26c <_strtod_l+0xb64>
 801c2b0:	a311      	add	r3, pc, #68	; (adr r3, 801c2f8 <_strtod_l+0xbf0>)
 801c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b6:	f7e4 fc2b 	bl	8000b10 <__aeabi_dcmplt>
 801c2ba:	e7b4      	b.n	801c226 <_strtod_l+0xb1e>
 801c2bc:	2300      	movs	r3, #0
 801c2be:	930e      	str	r3, [sp, #56]	; 0x38
 801c2c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c2c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c2c4:	6013      	str	r3, [r2, #0]
 801c2c6:	f7ff ba65 	b.w	801b794 <_strtod_l+0x8c>
 801c2ca:	2b65      	cmp	r3, #101	; 0x65
 801c2cc:	f43f ab5d 	beq.w	801b98a <_strtod_l+0x282>
 801c2d0:	2b45      	cmp	r3, #69	; 0x45
 801c2d2:	f43f ab5a 	beq.w	801b98a <_strtod_l+0x282>
 801c2d6:	2201      	movs	r2, #1
 801c2d8:	f7ff bb92 	b.w	801ba00 <_strtod_l+0x2f8>
 801c2dc:	f3af 8000 	nop.w
 801c2e0:	94a03595 	.word	0x94a03595
 801c2e4:	3fdfffff 	.word	0x3fdfffff
 801c2e8:	35afe535 	.word	0x35afe535
 801c2ec:	3fe00000 	.word	0x3fe00000
 801c2f0:	ffc00000 	.word	0xffc00000
 801c2f4:	41dfffff 	.word	0x41dfffff
 801c2f8:	94a03595 	.word	0x94a03595
 801c2fc:	3fcfffff 	.word	0x3fcfffff
 801c300:	3ff00000 	.word	0x3ff00000
 801c304:	7ff00000 	.word	0x7ff00000
 801c308:	7fe00000 	.word	0x7fe00000
 801c30c:	7c9fffff 	.word	0x7c9fffff
 801c310:	3fe00000 	.word	0x3fe00000
 801c314:	bff00000 	.word	0xbff00000
 801c318:	7fefffff 	.word	0x7fefffff

0801c31c <strtod>:
 801c31c:	460a      	mov	r2, r1
 801c31e:	4601      	mov	r1, r0
 801c320:	4802      	ldr	r0, [pc, #8]	; (801c32c <strtod+0x10>)
 801c322:	4b03      	ldr	r3, [pc, #12]	; (801c330 <strtod+0x14>)
 801c324:	6800      	ldr	r0, [r0, #0]
 801c326:	f7ff b9ef 	b.w	801b708 <_strtod_l>
 801c32a:	bf00      	nop
 801c32c:	20000178 	.word	0x20000178
 801c330:	200001e0 	.word	0x200001e0

0801c334 <viprintf>:
 801c334:	b513      	push	{r0, r1, r4, lr}
 801c336:	460b      	mov	r3, r1
 801c338:	4909      	ldr	r1, [pc, #36]	; (801c360 <viprintf+0x2c>)
 801c33a:	680c      	ldr	r4, [r1, #0]
 801c33c:	4602      	mov	r2, r0
 801c33e:	b144      	cbz	r4, 801c352 <viprintf+0x1e>
 801c340:	69a1      	ldr	r1, [r4, #24]
 801c342:	b931      	cbnz	r1, 801c352 <viprintf+0x1e>
 801c344:	e9cd 0300 	strd	r0, r3, [sp]
 801c348:	4620      	mov	r0, r4
 801c34a:	f000 f9e5 	bl	801c718 <__sinit>
 801c34e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c352:	68a1      	ldr	r1, [r4, #8]
 801c354:	4620      	mov	r0, r4
 801c356:	b002      	add	sp, #8
 801c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c35c:	f7fe be00 	b.w	801af60 <_vfiprintf_r>
 801c360:	20000178 	.word	0x20000178

0801c364 <__swbuf_r>:
 801c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c366:	460e      	mov	r6, r1
 801c368:	4614      	mov	r4, r2
 801c36a:	4605      	mov	r5, r0
 801c36c:	b118      	cbz	r0, 801c376 <__swbuf_r+0x12>
 801c36e:	6983      	ldr	r3, [r0, #24]
 801c370:	b90b      	cbnz	r3, 801c376 <__swbuf_r+0x12>
 801c372:	f000 f9d1 	bl	801c718 <__sinit>
 801c376:	4b21      	ldr	r3, [pc, #132]	; (801c3fc <__swbuf_r+0x98>)
 801c378:	429c      	cmp	r4, r3
 801c37a:	d12b      	bne.n	801c3d4 <__swbuf_r+0x70>
 801c37c:	686c      	ldr	r4, [r5, #4]
 801c37e:	69a3      	ldr	r3, [r4, #24]
 801c380:	60a3      	str	r3, [r4, #8]
 801c382:	89a3      	ldrh	r3, [r4, #12]
 801c384:	071a      	lsls	r2, r3, #28
 801c386:	d52f      	bpl.n	801c3e8 <__swbuf_r+0x84>
 801c388:	6923      	ldr	r3, [r4, #16]
 801c38a:	b36b      	cbz	r3, 801c3e8 <__swbuf_r+0x84>
 801c38c:	6923      	ldr	r3, [r4, #16]
 801c38e:	6820      	ldr	r0, [r4, #0]
 801c390:	1ac0      	subs	r0, r0, r3
 801c392:	6963      	ldr	r3, [r4, #20]
 801c394:	b2f6      	uxtb	r6, r6
 801c396:	4283      	cmp	r3, r0
 801c398:	4637      	mov	r7, r6
 801c39a:	dc04      	bgt.n	801c3a6 <__swbuf_r+0x42>
 801c39c:	4621      	mov	r1, r4
 801c39e:	4628      	mov	r0, r5
 801c3a0:	f000 f926 	bl	801c5f0 <_fflush_r>
 801c3a4:	bb30      	cbnz	r0, 801c3f4 <__swbuf_r+0x90>
 801c3a6:	68a3      	ldr	r3, [r4, #8]
 801c3a8:	3b01      	subs	r3, #1
 801c3aa:	60a3      	str	r3, [r4, #8]
 801c3ac:	6823      	ldr	r3, [r4, #0]
 801c3ae:	1c5a      	adds	r2, r3, #1
 801c3b0:	6022      	str	r2, [r4, #0]
 801c3b2:	701e      	strb	r6, [r3, #0]
 801c3b4:	6963      	ldr	r3, [r4, #20]
 801c3b6:	3001      	adds	r0, #1
 801c3b8:	4283      	cmp	r3, r0
 801c3ba:	d004      	beq.n	801c3c6 <__swbuf_r+0x62>
 801c3bc:	89a3      	ldrh	r3, [r4, #12]
 801c3be:	07db      	lsls	r3, r3, #31
 801c3c0:	d506      	bpl.n	801c3d0 <__swbuf_r+0x6c>
 801c3c2:	2e0a      	cmp	r6, #10
 801c3c4:	d104      	bne.n	801c3d0 <__swbuf_r+0x6c>
 801c3c6:	4621      	mov	r1, r4
 801c3c8:	4628      	mov	r0, r5
 801c3ca:	f000 f911 	bl	801c5f0 <_fflush_r>
 801c3ce:	b988      	cbnz	r0, 801c3f4 <__swbuf_r+0x90>
 801c3d0:	4638      	mov	r0, r7
 801c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3d4:	4b0a      	ldr	r3, [pc, #40]	; (801c400 <__swbuf_r+0x9c>)
 801c3d6:	429c      	cmp	r4, r3
 801c3d8:	d101      	bne.n	801c3de <__swbuf_r+0x7a>
 801c3da:	68ac      	ldr	r4, [r5, #8]
 801c3dc:	e7cf      	b.n	801c37e <__swbuf_r+0x1a>
 801c3de:	4b09      	ldr	r3, [pc, #36]	; (801c404 <__swbuf_r+0xa0>)
 801c3e0:	429c      	cmp	r4, r3
 801c3e2:	bf08      	it	eq
 801c3e4:	68ec      	ldreq	r4, [r5, #12]
 801c3e6:	e7ca      	b.n	801c37e <__swbuf_r+0x1a>
 801c3e8:	4621      	mov	r1, r4
 801c3ea:	4628      	mov	r0, r5
 801c3ec:	f000 f80c 	bl	801c408 <__swsetup_r>
 801c3f0:	2800      	cmp	r0, #0
 801c3f2:	d0cb      	beq.n	801c38c <__swbuf_r+0x28>
 801c3f4:	f04f 37ff 	mov.w	r7, #4294967295
 801c3f8:	e7ea      	b.n	801c3d0 <__swbuf_r+0x6c>
 801c3fa:	bf00      	nop
 801c3fc:	08020794 	.word	0x08020794
 801c400:	080207b4 	.word	0x080207b4
 801c404:	08020774 	.word	0x08020774

0801c408 <__swsetup_r>:
 801c408:	4b32      	ldr	r3, [pc, #200]	; (801c4d4 <__swsetup_r+0xcc>)
 801c40a:	b570      	push	{r4, r5, r6, lr}
 801c40c:	681d      	ldr	r5, [r3, #0]
 801c40e:	4606      	mov	r6, r0
 801c410:	460c      	mov	r4, r1
 801c412:	b125      	cbz	r5, 801c41e <__swsetup_r+0x16>
 801c414:	69ab      	ldr	r3, [r5, #24]
 801c416:	b913      	cbnz	r3, 801c41e <__swsetup_r+0x16>
 801c418:	4628      	mov	r0, r5
 801c41a:	f000 f97d 	bl	801c718 <__sinit>
 801c41e:	4b2e      	ldr	r3, [pc, #184]	; (801c4d8 <__swsetup_r+0xd0>)
 801c420:	429c      	cmp	r4, r3
 801c422:	d10f      	bne.n	801c444 <__swsetup_r+0x3c>
 801c424:	686c      	ldr	r4, [r5, #4]
 801c426:	89a3      	ldrh	r3, [r4, #12]
 801c428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c42c:	0719      	lsls	r1, r3, #28
 801c42e:	d42c      	bmi.n	801c48a <__swsetup_r+0x82>
 801c430:	06dd      	lsls	r5, r3, #27
 801c432:	d411      	bmi.n	801c458 <__swsetup_r+0x50>
 801c434:	2309      	movs	r3, #9
 801c436:	6033      	str	r3, [r6, #0]
 801c438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c43c:	81a3      	strh	r3, [r4, #12]
 801c43e:	f04f 30ff 	mov.w	r0, #4294967295
 801c442:	e03e      	b.n	801c4c2 <__swsetup_r+0xba>
 801c444:	4b25      	ldr	r3, [pc, #148]	; (801c4dc <__swsetup_r+0xd4>)
 801c446:	429c      	cmp	r4, r3
 801c448:	d101      	bne.n	801c44e <__swsetup_r+0x46>
 801c44a:	68ac      	ldr	r4, [r5, #8]
 801c44c:	e7eb      	b.n	801c426 <__swsetup_r+0x1e>
 801c44e:	4b24      	ldr	r3, [pc, #144]	; (801c4e0 <__swsetup_r+0xd8>)
 801c450:	429c      	cmp	r4, r3
 801c452:	bf08      	it	eq
 801c454:	68ec      	ldreq	r4, [r5, #12]
 801c456:	e7e6      	b.n	801c426 <__swsetup_r+0x1e>
 801c458:	0758      	lsls	r0, r3, #29
 801c45a:	d512      	bpl.n	801c482 <__swsetup_r+0x7a>
 801c45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c45e:	b141      	cbz	r1, 801c472 <__swsetup_r+0x6a>
 801c460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c464:	4299      	cmp	r1, r3
 801c466:	d002      	beq.n	801c46e <__swsetup_r+0x66>
 801c468:	4630      	mov	r0, r6
 801c46a:	f7fe fca5 	bl	801adb8 <_free_r>
 801c46e:	2300      	movs	r3, #0
 801c470:	6363      	str	r3, [r4, #52]	; 0x34
 801c472:	89a3      	ldrh	r3, [r4, #12]
 801c474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c478:	81a3      	strh	r3, [r4, #12]
 801c47a:	2300      	movs	r3, #0
 801c47c:	6063      	str	r3, [r4, #4]
 801c47e:	6923      	ldr	r3, [r4, #16]
 801c480:	6023      	str	r3, [r4, #0]
 801c482:	89a3      	ldrh	r3, [r4, #12]
 801c484:	f043 0308 	orr.w	r3, r3, #8
 801c488:	81a3      	strh	r3, [r4, #12]
 801c48a:	6923      	ldr	r3, [r4, #16]
 801c48c:	b94b      	cbnz	r3, 801c4a2 <__swsetup_r+0x9a>
 801c48e:	89a3      	ldrh	r3, [r4, #12]
 801c490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c498:	d003      	beq.n	801c4a2 <__swsetup_r+0x9a>
 801c49a:	4621      	mov	r1, r4
 801c49c:	4630      	mov	r0, r6
 801c49e:	f000 fd6b 	bl	801cf78 <__smakebuf_r>
 801c4a2:	89a0      	ldrh	r0, [r4, #12]
 801c4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c4a8:	f010 0301 	ands.w	r3, r0, #1
 801c4ac:	d00a      	beq.n	801c4c4 <__swsetup_r+0xbc>
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	60a3      	str	r3, [r4, #8]
 801c4b2:	6963      	ldr	r3, [r4, #20]
 801c4b4:	425b      	negs	r3, r3
 801c4b6:	61a3      	str	r3, [r4, #24]
 801c4b8:	6923      	ldr	r3, [r4, #16]
 801c4ba:	b943      	cbnz	r3, 801c4ce <__swsetup_r+0xc6>
 801c4bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c4c0:	d1ba      	bne.n	801c438 <__swsetup_r+0x30>
 801c4c2:	bd70      	pop	{r4, r5, r6, pc}
 801c4c4:	0781      	lsls	r1, r0, #30
 801c4c6:	bf58      	it	pl
 801c4c8:	6963      	ldrpl	r3, [r4, #20]
 801c4ca:	60a3      	str	r3, [r4, #8]
 801c4cc:	e7f4      	b.n	801c4b8 <__swsetup_r+0xb0>
 801c4ce:	2000      	movs	r0, #0
 801c4d0:	e7f7      	b.n	801c4c2 <__swsetup_r+0xba>
 801c4d2:	bf00      	nop
 801c4d4:	20000178 	.word	0x20000178
 801c4d8:	08020794 	.word	0x08020794
 801c4dc:	080207b4 	.word	0x080207b4
 801c4e0:	08020774 	.word	0x08020774

0801c4e4 <__sflush_r>:
 801c4e4:	898a      	ldrh	r2, [r1, #12]
 801c4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ea:	4605      	mov	r5, r0
 801c4ec:	0710      	lsls	r0, r2, #28
 801c4ee:	460c      	mov	r4, r1
 801c4f0:	d458      	bmi.n	801c5a4 <__sflush_r+0xc0>
 801c4f2:	684b      	ldr	r3, [r1, #4]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	dc05      	bgt.n	801c504 <__sflush_r+0x20>
 801c4f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	dc02      	bgt.n	801c504 <__sflush_r+0x20>
 801c4fe:	2000      	movs	r0, #0
 801c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c506:	2e00      	cmp	r6, #0
 801c508:	d0f9      	beq.n	801c4fe <__sflush_r+0x1a>
 801c50a:	2300      	movs	r3, #0
 801c50c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c510:	682f      	ldr	r7, [r5, #0]
 801c512:	602b      	str	r3, [r5, #0]
 801c514:	d032      	beq.n	801c57c <__sflush_r+0x98>
 801c516:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c518:	89a3      	ldrh	r3, [r4, #12]
 801c51a:	075a      	lsls	r2, r3, #29
 801c51c:	d505      	bpl.n	801c52a <__sflush_r+0x46>
 801c51e:	6863      	ldr	r3, [r4, #4]
 801c520:	1ac0      	subs	r0, r0, r3
 801c522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c524:	b10b      	cbz	r3, 801c52a <__sflush_r+0x46>
 801c526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c528:	1ac0      	subs	r0, r0, r3
 801c52a:	2300      	movs	r3, #0
 801c52c:	4602      	mov	r2, r0
 801c52e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c530:	6a21      	ldr	r1, [r4, #32]
 801c532:	4628      	mov	r0, r5
 801c534:	47b0      	blx	r6
 801c536:	1c43      	adds	r3, r0, #1
 801c538:	89a3      	ldrh	r3, [r4, #12]
 801c53a:	d106      	bne.n	801c54a <__sflush_r+0x66>
 801c53c:	6829      	ldr	r1, [r5, #0]
 801c53e:	291d      	cmp	r1, #29
 801c540:	d82c      	bhi.n	801c59c <__sflush_r+0xb8>
 801c542:	4a2a      	ldr	r2, [pc, #168]	; (801c5ec <__sflush_r+0x108>)
 801c544:	40ca      	lsrs	r2, r1
 801c546:	07d6      	lsls	r6, r2, #31
 801c548:	d528      	bpl.n	801c59c <__sflush_r+0xb8>
 801c54a:	2200      	movs	r2, #0
 801c54c:	6062      	str	r2, [r4, #4]
 801c54e:	04d9      	lsls	r1, r3, #19
 801c550:	6922      	ldr	r2, [r4, #16]
 801c552:	6022      	str	r2, [r4, #0]
 801c554:	d504      	bpl.n	801c560 <__sflush_r+0x7c>
 801c556:	1c42      	adds	r2, r0, #1
 801c558:	d101      	bne.n	801c55e <__sflush_r+0x7a>
 801c55a:	682b      	ldr	r3, [r5, #0]
 801c55c:	b903      	cbnz	r3, 801c560 <__sflush_r+0x7c>
 801c55e:	6560      	str	r0, [r4, #84]	; 0x54
 801c560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c562:	602f      	str	r7, [r5, #0]
 801c564:	2900      	cmp	r1, #0
 801c566:	d0ca      	beq.n	801c4fe <__sflush_r+0x1a>
 801c568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c56c:	4299      	cmp	r1, r3
 801c56e:	d002      	beq.n	801c576 <__sflush_r+0x92>
 801c570:	4628      	mov	r0, r5
 801c572:	f7fe fc21 	bl	801adb8 <_free_r>
 801c576:	2000      	movs	r0, #0
 801c578:	6360      	str	r0, [r4, #52]	; 0x34
 801c57a:	e7c1      	b.n	801c500 <__sflush_r+0x1c>
 801c57c:	6a21      	ldr	r1, [r4, #32]
 801c57e:	2301      	movs	r3, #1
 801c580:	4628      	mov	r0, r5
 801c582:	47b0      	blx	r6
 801c584:	1c41      	adds	r1, r0, #1
 801c586:	d1c7      	bne.n	801c518 <__sflush_r+0x34>
 801c588:	682b      	ldr	r3, [r5, #0]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d0c4      	beq.n	801c518 <__sflush_r+0x34>
 801c58e:	2b1d      	cmp	r3, #29
 801c590:	d001      	beq.n	801c596 <__sflush_r+0xb2>
 801c592:	2b16      	cmp	r3, #22
 801c594:	d101      	bne.n	801c59a <__sflush_r+0xb6>
 801c596:	602f      	str	r7, [r5, #0]
 801c598:	e7b1      	b.n	801c4fe <__sflush_r+0x1a>
 801c59a:	89a3      	ldrh	r3, [r4, #12]
 801c59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5a0:	81a3      	strh	r3, [r4, #12]
 801c5a2:	e7ad      	b.n	801c500 <__sflush_r+0x1c>
 801c5a4:	690f      	ldr	r7, [r1, #16]
 801c5a6:	2f00      	cmp	r7, #0
 801c5a8:	d0a9      	beq.n	801c4fe <__sflush_r+0x1a>
 801c5aa:	0793      	lsls	r3, r2, #30
 801c5ac:	680e      	ldr	r6, [r1, #0]
 801c5ae:	bf08      	it	eq
 801c5b0:	694b      	ldreq	r3, [r1, #20]
 801c5b2:	600f      	str	r7, [r1, #0]
 801c5b4:	bf18      	it	ne
 801c5b6:	2300      	movne	r3, #0
 801c5b8:	eba6 0807 	sub.w	r8, r6, r7
 801c5bc:	608b      	str	r3, [r1, #8]
 801c5be:	f1b8 0f00 	cmp.w	r8, #0
 801c5c2:	dd9c      	ble.n	801c4fe <__sflush_r+0x1a>
 801c5c4:	6a21      	ldr	r1, [r4, #32]
 801c5c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5c8:	4643      	mov	r3, r8
 801c5ca:	463a      	mov	r2, r7
 801c5cc:	4628      	mov	r0, r5
 801c5ce:	47b0      	blx	r6
 801c5d0:	2800      	cmp	r0, #0
 801c5d2:	dc06      	bgt.n	801c5e2 <__sflush_r+0xfe>
 801c5d4:	89a3      	ldrh	r3, [r4, #12]
 801c5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5da:	81a3      	strh	r3, [r4, #12]
 801c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c5e0:	e78e      	b.n	801c500 <__sflush_r+0x1c>
 801c5e2:	4407      	add	r7, r0
 801c5e4:	eba8 0800 	sub.w	r8, r8, r0
 801c5e8:	e7e9      	b.n	801c5be <__sflush_r+0xda>
 801c5ea:	bf00      	nop
 801c5ec:	20400001 	.word	0x20400001

0801c5f0 <_fflush_r>:
 801c5f0:	b538      	push	{r3, r4, r5, lr}
 801c5f2:	690b      	ldr	r3, [r1, #16]
 801c5f4:	4605      	mov	r5, r0
 801c5f6:	460c      	mov	r4, r1
 801c5f8:	b913      	cbnz	r3, 801c600 <_fflush_r+0x10>
 801c5fa:	2500      	movs	r5, #0
 801c5fc:	4628      	mov	r0, r5
 801c5fe:	bd38      	pop	{r3, r4, r5, pc}
 801c600:	b118      	cbz	r0, 801c60a <_fflush_r+0x1a>
 801c602:	6983      	ldr	r3, [r0, #24]
 801c604:	b90b      	cbnz	r3, 801c60a <_fflush_r+0x1a>
 801c606:	f000 f887 	bl	801c718 <__sinit>
 801c60a:	4b14      	ldr	r3, [pc, #80]	; (801c65c <_fflush_r+0x6c>)
 801c60c:	429c      	cmp	r4, r3
 801c60e:	d11b      	bne.n	801c648 <_fflush_r+0x58>
 801c610:	686c      	ldr	r4, [r5, #4]
 801c612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d0ef      	beq.n	801c5fa <_fflush_r+0xa>
 801c61a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c61c:	07d0      	lsls	r0, r2, #31
 801c61e:	d404      	bmi.n	801c62a <_fflush_r+0x3a>
 801c620:	0599      	lsls	r1, r3, #22
 801c622:	d402      	bmi.n	801c62a <_fflush_r+0x3a>
 801c624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c626:	f7fe fb74 	bl	801ad12 <__retarget_lock_acquire_recursive>
 801c62a:	4628      	mov	r0, r5
 801c62c:	4621      	mov	r1, r4
 801c62e:	f7ff ff59 	bl	801c4e4 <__sflush_r>
 801c632:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c634:	07da      	lsls	r2, r3, #31
 801c636:	4605      	mov	r5, r0
 801c638:	d4e0      	bmi.n	801c5fc <_fflush_r+0xc>
 801c63a:	89a3      	ldrh	r3, [r4, #12]
 801c63c:	059b      	lsls	r3, r3, #22
 801c63e:	d4dd      	bmi.n	801c5fc <_fflush_r+0xc>
 801c640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c642:	f7fe fb67 	bl	801ad14 <__retarget_lock_release_recursive>
 801c646:	e7d9      	b.n	801c5fc <_fflush_r+0xc>
 801c648:	4b05      	ldr	r3, [pc, #20]	; (801c660 <_fflush_r+0x70>)
 801c64a:	429c      	cmp	r4, r3
 801c64c:	d101      	bne.n	801c652 <_fflush_r+0x62>
 801c64e:	68ac      	ldr	r4, [r5, #8]
 801c650:	e7df      	b.n	801c612 <_fflush_r+0x22>
 801c652:	4b04      	ldr	r3, [pc, #16]	; (801c664 <_fflush_r+0x74>)
 801c654:	429c      	cmp	r4, r3
 801c656:	bf08      	it	eq
 801c658:	68ec      	ldreq	r4, [r5, #12]
 801c65a:	e7da      	b.n	801c612 <_fflush_r+0x22>
 801c65c:	08020794 	.word	0x08020794
 801c660:	080207b4 	.word	0x080207b4
 801c664:	08020774 	.word	0x08020774

0801c668 <std>:
 801c668:	2300      	movs	r3, #0
 801c66a:	b510      	push	{r4, lr}
 801c66c:	4604      	mov	r4, r0
 801c66e:	e9c0 3300 	strd	r3, r3, [r0]
 801c672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c676:	6083      	str	r3, [r0, #8]
 801c678:	8181      	strh	r1, [r0, #12]
 801c67a:	6643      	str	r3, [r0, #100]	; 0x64
 801c67c:	81c2      	strh	r2, [r0, #14]
 801c67e:	6183      	str	r3, [r0, #24]
 801c680:	4619      	mov	r1, r3
 801c682:	2208      	movs	r2, #8
 801c684:	305c      	adds	r0, #92	; 0x5c
 801c686:	f7fe fb7f 	bl	801ad88 <memset>
 801c68a:	4b05      	ldr	r3, [pc, #20]	; (801c6a0 <std+0x38>)
 801c68c:	6263      	str	r3, [r4, #36]	; 0x24
 801c68e:	4b05      	ldr	r3, [pc, #20]	; (801c6a4 <std+0x3c>)
 801c690:	62a3      	str	r3, [r4, #40]	; 0x28
 801c692:	4b05      	ldr	r3, [pc, #20]	; (801c6a8 <std+0x40>)
 801c694:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c696:	4b05      	ldr	r3, [pc, #20]	; (801c6ac <std+0x44>)
 801c698:	6224      	str	r4, [r4, #32]
 801c69a:	6323      	str	r3, [r4, #48]	; 0x30
 801c69c:	bd10      	pop	{r4, pc}
 801c69e:	bf00      	nop
 801c6a0:	0801d9ab 	.word	0x0801d9ab
 801c6a4:	0801d9cd 	.word	0x0801d9cd
 801c6a8:	0801da05 	.word	0x0801da05
 801c6ac:	0801da29 	.word	0x0801da29

0801c6b0 <_cleanup_r>:
 801c6b0:	4901      	ldr	r1, [pc, #4]	; (801c6b8 <_cleanup_r+0x8>)
 801c6b2:	f000 b8af 	b.w	801c814 <_fwalk_reent>
 801c6b6:	bf00      	nop
 801c6b8:	0801c5f1 	.word	0x0801c5f1

0801c6bc <__sfmoreglue>:
 801c6bc:	b570      	push	{r4, r5, r6, lr}
 801c6be:	1e4a      	subs	r2, r1, #1
 801c6c0:	2568      	movs	r5, #104	; 0x68
 801c6c2:	4355      	muls	r5, r2
 801c6c4:	460e      	mov	r6, r1
 801c6c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c6ca:	f7fe fbc5 	bl	801ae58 <_malloc_r>
 801c6ce:	4604      	mov	r4, r0
 801c6d0:	b140      	cbz	r0, 801c6e4 <__sfmoreglue+0x28>
 801c6d2:	2100      	movs	r1, #0
 801c6d4:	e9c0 1600 	strd	r1, r6, [r0]
 801c6d8:	300c      	adds	r0, #12
 801c6da:	60a0      	str	r0, [r4, #8]
 801c6dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c6e0:	f7fe fb52 	bl	801ad88 <memset>
 801c6e4:	4620      	mov	r0, r4
 801c6e6:	bd70      	pop	{r4, r5, r6, pc}

0801c6e8 <__sfp_lock_acquire>:
 801c6e8:	4801      	ldr	r0, [pc, #4]	; (801c6f0 <__sfp_lock_acquire+0x8>)
 801c6ea:	f7fe bb12 	b.w	801ad12 <__retarget_lock_acquire_recursive>
 801c6ee:	bf00      	nop
 801c6f0:	20000838 	.word	0x20000838

0801c6f4 <__sfp_lock_release>:
 801c6f4:	4801      	ldr	r0, [pc, #4]	; (801c6fc <__sfp_lock_release+0x8>)
 801c6f6:	f7fe bb0d 	b.w	801ad14 <__retarget_lock_release_recursive>
 801c6fa:	bf00      	nop
 801c6fc:	20000838 	.word	0x20000838

0801c700 <__sinit_lock_acquire>:
 801c700:	4801      	ldr	r0, [pc, #4]	; (801c708 <__sinit_lock_acquire+0x8>)
 801c702:	f7fe bb06 	b.w	801ad12 <__retarget_lock_acquire_recursive>
 801c706:	bf00      	nop
 801c708:	20000837 	.word	0x20000837

0801c70c <__sinit_lock_release>:
 801c70c:	4801      	ldr	r0, [pc, #4]	; (801c714 <__sinit_lock_release+0x8>)
 801c70e:	f7fe bb01 	b.w	801ad14 <__retarget_lock_release_recursive>
 801c712:	bf00      	nop
 801c714:	20000837 	.word	0x20000837

0801c718 <__sinit>:
 801c718:	b510      	push	{r4, lr}
 801c71a:	4604      	mov	r4, r0
 801c71c:	f7ff fff0 	bl	801c700 <__sinit_lock_acquire>
 801c720:	69a3      	ldr	r3, [r4, #24]
 801c722:	b11b      	cbz	r3, 801c72c <__sinit+0x14>
 801c724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c728:	f7ff bff0 	b.w	801c70c <__sinit_lock_release>
 801c72c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c730:	6523      	str	r3, [r4, #80]	; 0x50
 801c732:	4b13      	ldr	r3, [pc, #76]	; (801c780 <__sinit+0x68>)
 801c734:	4a13      	ldr	r2, [pc, #76]	; (801c784 <__sinit+0x6c>)
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	62a2      	str	r2, [r4, #40]	; 0x28
 801c73a:	42a3      	cmp	r3, r4
 801c73c:	bf04      	itt	eq
 801c73e:	2301      	moveq	r3, #1
 801c740:	61a3      	streq	r3, [r4, #24]
 801c742:	4620      	mov	r0, r4
 801c744:	f000 f820 	bl	801c788 <__sfp>
 801c748:	6060      	str	r0, [r4, #4]
 801c74a:	4620      	mov	r0, r4
 801c74c:	f000 f81c 	bl	801c788 <__sfp>
 801c750:	60a0      	str	r0, [r4, #8]
 801c752:	4620      	mov	r0, r4
 801c754:	f000 f818 	bl	801c788 <__sfp>
 801c758:	2200      	movs	r2, #0
 801c75a:	60e0      	str	r0, [r4, #12]
 801c75c:	2104      	movs	r1, #4
 801c75e:	6860      	ldr	r0, [r4, #4]
 801c760:	f7ff ff82 	bl	801c668 <std>
 801c764:	68a0      	ldr	r0, [r4, #8]
 801c766:	2201      	movs	r2, #1
 801c768:	2109      	movs	r1, #9
 801c76a:	f7ff ff7d 	bl	801c668 <std>
 801c76e:	68e0      	ldr	r0, [r4, #12]
 801c770:	2202      	movs	r2, #2
 801c772:	2112      	movs	r1, #18
 801c774:	f7ff ff78 	bl	801c668 <std>
 801c778:	2301      	movs	r3, #1
 801c77a:	61a3      	str	r3, [r4, #24]
 801c77c:	e7d2      	b.n	801c724 <__sinit+0xc>
 801c77e:	bf00      	nop
 801c780:	080205dc 	.word	0x080205dc
 801c784:	0801c6b1 	.word	0x0801c6b1

0801c788 <__sfp>:
 801c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c78a:	4607      	mov	r7, r0
 801c78c:	f7ff ffac 	bl	801c6e8 <__sfp_lock_acquire>
 801c790:	4b1e      	ldr	r3, [pc, #120]	; (801c80c <__sfp+0x84>)
 801c792:	681e      	ldr	r6, [r3, #0]
 801c794:	69b3      	ldr	r3, [r6, #24]
 801c796:	b913      	cbnz	r3, 801c79e <__sfp+0x16>
 801c798:	4630      	mov	r0, r6
 801c79a:	f7ff ffbd 	bl	801c718 <__sinit>
 801c79e:	3648      	adds	r6, #72	; 0x48
 801c7a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7a4:	3b01      	subs	r3, #1
 801c7a6:	d503      	bpl.n	801c7b0 <__sfp+0x28>
 801c7a8:	6833      	ldr	r3, [r6, #0]
 801c7aa:	b30b      	cbz	r3, 801c7f0 <__sfp+0x68>
 801c7ac:	6836      	ldr	r6, [r6, #0]
 801c7ae:	e7f7      	b.n	801c7a0 <__sfp+0x18>
 801c7b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7b4:	b9d5      	cbnz	r5, 801c7ec <__sfp+0x64>
 801c7b6:	4b16      	ldr	r3, [pc, #88]	; (801c810 <__sfp+0x88>)
 801c7b8:	60e3      	str	r3, [r4, #12]
 801c7ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7be:	6665      	str	r5, [r4, #100]	; 0x64
 801c7c0:	f7fe faa6 	bl	801ad10 <__retarget_lock_init_recursive>
 801c7c4:	f7ff ff96 	bl	801c6f4 <__sfp_lock_release>
 801c7c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c7cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c7d0:	6025      	str	r5, [r4, #0]
 801c7d2:	61a5      	str	r5, [r4, #24]
 801c7d4:	2208      	movs	r2, #8
 801c7d6:	4629      	mov	r1, r5
 801c7d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c7dc:	f7fe fad4 	bl	801ad88 <memset>
 801c7e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c7e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c7e8:	4620      	mov	r0, r4
 801c7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7ec:	3468      	adds	r4, #104	; 0x68
 801c7ee:	e7d9      	b.n	801c7a4 <__sfp+0x1c>
 801c7f0:	2104      	movs	r1, #4
 801c7f2:	4638      	mov	r0, r7
 801c7f4:	f7ff ff62 	bl	801c6bc <__sfmoreglue>
 801c7f8:	4604      	mov	r4, r0
 801c7fa:	6030      	str	r0, [r6, #0]
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	d1d5      	bne.n	801c7ac <__sfp+0x24>
 801c800:	f7ff ff78 	bl	801c6f4 <__sfp_lock_release>
 801c804:	230c      	movs	r3, #12
 801c806:	603b      	str	r3, [r7, #0]
 801c808:	e7ee      	b.n	801c7e8 <__sfp+0x60>
 801c80a:	bf00      	nop
 801c80c:	080205dc 	.word	0x080205dc
 801c810:	ffff0001 	.word	0xffff0001

0801c814 <_fwalk_reent>:
 801c814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c818:	4606      	mov	r6, r0
 801c81a:	4688      	mov	r8, r1
 801c81c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c820:	2700      	movs	r7, #0
 801c822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c826:	f1b9 0901 	subs.w	r9, r9, #1
 801c82a:	d505      	bpl.n	801c838 <_fwalk_reent+0x24>
 801c82c:	6824      	ldr	r4, [r4, #0]
 801c82e:	2c00      	cmp	r4, #0
 801c830:	d1f7      	bne.n	801c822 <_fwalk_reent+0xe>
 801c832:	4638      	mov	r0, r7
 801c834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c838:	89ab      	ldrh	r3, [r5, #12]
 801c83a:	2b01      	cmp	r3, #1
 801c83c:	d907      	bls.n	801c84e <_fwalk_reent+0x3a>
 801c83e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c842:	3301      	adds	r3, #1
 801c844:	d003      	beq.n	801c84e <_fwalk_reent+0x3a>
 801c846:	4629      	mov	r1, r5
 801c848:	4630      	mov	r0, r6
 801c84a:	47c0      	blx	r8
 801c84c:	4307      	orrs	r7, r0
 801c84e:	3568      	adds	r5, #104	; 0x68
 801c850:	e7e9      	b.n	801c826 <_fwalk_reent+0x12>

0801c852 <rshift>:
 801c852:	6903      	ldr	r3, [r0, #16]
 801c854:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c85c:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c860:	f100 0414 	add.w	r4, r0, #20
 801c864:	dd45      	ble.n	801c8f2 <rshift+0xa0>
 801c866:	f011 011f 	ands.w	r1, r1, #31
 801c86a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c86e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c872:	d10c      	bne.n	801c88e <rshift+0x3c>
 801c874:	f100 0710 	add.w	r7, r0, #16
 801c878:	4629      	mov	r1, r5
 801c87a:	42b1      	cmp	r1, r6
 801c87c:	d334      	bcc.n	801c8e8 <rshift+0x96>
 801c87e:	1a9b      	subs	r3, r3, r2
 801c880:	009b      	lsls	r3, r3, #2
 801c882:	1eea      	subs	r2, r5, #3
 801c884:	4296      	cmp	r6, r2
 801c886:	bf38      	it	cc
 801c888:	2300      	movcc	r3, #0
 801c88a:	4423      	add	r3, r4
 801c88c:	e015      	b.n	801c8ba <rshift+0x68>
 801c88e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c892:	f1c1 0820 	rsb	r8, r1, #32
 801c896:	40cf      	lsrs	r7, r1
 801c898:	f105 0e04 	add.w	lr, r5, #4
 801c89c:	46a1      	mov	r9, r4
 801c89e:	4576      	cmp	r6, lr
 801c8a0:	46f4      	mov	ip, lr
 801c8a2:	d815      	bhi.n	801c8d0 <rshift+0x7e>
 801c8a4:	1a9b      	subs	r3, r3, r2
 801c8a6:	009a      	lsls	r2, r3, #2
 801c8a8:	3a04      	subs	r2, #4
 801c8aa:	3501      	adds	r5, #1
 801c8ac:	42ae      	cmp	r6, r5
 801c8ae:	bf38      	it	cc
 801c8b0:	2200      	movcc	r2, #0
 801c8b2:	18a3      	adds	r3, r4, r2
 801c8b4:	50a7      	str	r7, [r4, r2]
 801c8b6:	b107      	cbz	r7, 801c8ba <rshift+0x68>
 801c8b8:	3304      	adds	r3, #4
 801c8ba:	1b1a      	subs	r2, r3, r4
 801c8bc:	42a3      	cmp	r3, r4
 801c8be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c8c2:	bf08      	it	eq
 801c8c4:	2300      	moveq	r3, #0
 801c8c6:	6102      	str	r2, [r0, #16]
 801c8c8:	bf08      	it	eq
 801c8ca:	6143      	streq	r3, [r0, #20]
 801c8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8d0:	f8dc c000 	ldr.w	ip, [ip]
 801c8d4:	fa0c fc08 	lsl.w	ip, ip, r8
 801c8d8:	ea4c 0707 	orr.w	r7, ip, r7
 801c8dc:	f849 7b04 	str.w	r7, [r9], #4
 801c8e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c8e4:	40cf      	lsrs	r7, r1
 801c8e6:	e7da      	b.n	801c89e <rshift+0x4c>
 801c8e8:	f851 cb04 	ldr.w	ip, [r1], #4
 801c8ec:	f847 cf04 	str.w	ip, [r7, #4]!
 801c8f0:	e7c3      	b.n	801c87a <rshift+0x28>
 801c8f2:	4623      	mov	r3, r4
 801c8f4:	e7e1      	b.n	801c8ba <rshift+0x68>

0801c8f6 <__hexdig_fun>:
 801c8f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c8fa:	2b09      	cmp	r3, #9
 801c8fc:	d802      	bhi.n	801c904 <__hexdig_fun+0xe>
 801c8fe:	3820      	subs	r0, #32
 801c900:	b2c0      	uxtb	r0, r0
 801c902:	4770      	bx	lr
 801c904:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c908:	2b05      	cmp	r3, #5
 801c90a:	d801      	bhi.n	801c910 <__hexdig_fun+0x1a>
 801c90c:	3847      	subs	r0, #71	; 0x47
 801c90e:	e7f7      	b.n	801c900 <__hexdig_fun+0xa>
 801c910:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c914:	2b05      	cmp	r3, #5
 801c916:	d801      	bhi.n	801c91c <__hexdig_fun+0x26>
 801c918:	3827      	subs	r0, #39	; 0x27
 801c91a:	e7f1      	b.n	801c900 <__hexdig_fun+0xa>
 801c91c:	2000      	movs	r0, #0
 801c91e:	4770      	bx	lr

0801c920 <__gethex>:
 801c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c924:	ed2d 8b02 	vpush	{d8}
 801c928:	b089      	sub	sp, #36	; 0x24
 801c92a:	ee08 0a10 	vmov	s16, r0
 801c92e:	9304      	str	r3, [sp, #16]
 801c930:	4bbc      	ldr	r3, [pc, #752]	; (801cc24 <__gethex+0x304>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	9301      	str	r3, [sp, #4]
 801c936:	4618      	mov	r0, r3
 801c938:	468b      	mov	fp, r1
 801c93a:	4690      	mov	r8, r2
 801c93c:	f7e3 fcb2 	bl	80002a4 <strlen>
 801c940:	9b01      	ldr	r3, [sp, #4]
 801c942:	f8db 2000 	ldr.w	r2, [fp]
 801c946:	4403      	add	r3, r0
 801c948:	4682      	mov	sl, r0
 801c94a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c94e:	9305      	str	r3, [sp, #20]
 801c950:	1c93      	adds	r3, r2, #2
 801c952:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c956:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c95a:	32fe      	adds	r2, #254	; 0xfe
 801c95c:	18d1      	adds	r1, r2, r3
 801c95e:	461f      	mov	r7, r3
 801c960:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c964:	9100      	str	r1, [sp, #0]
 801c966:	2830      	cmp	r0, #48	; 0x30
 801c968:	d0f8      	beq.n	801c95c <__gethex+0x3c>
 801c96a:	f7ff ffc4 	bl	801c8f6 <__hexdig_fun>
 801c96e:	4604      	mov	r4, r0
 801c970:	2800      	cmp	r0, #0
 801c972:	d13a      	bne.n	801c9ea <__gethex+0xca>
 801c974:	9901      	ldr	r1, [sp, #4]
 801c976:	4652      	mov	r2, sl
 801c978:	4638      	mov	r0, r7
 801c97a:	f7fe fe97 	bl	801b6ac <strncmp>
 801c97e:	4605      	mov	r5, r0
 801c980:	2800      	cmp	r0, #0
 801c982:	d168      	bne.n	801ca56 <__gethex+0x136>
 801c984:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c988:	eb07 060a 	add.w	r6, r7, sl
 801c98c:	f7ff ffb3 	bl	801c8f6 <__hexdig_fun>
 801c990:	2800      	cmp	r0, #0
 801c992:	d062      	beq.n	801ca5a <__gethex+0x13a>
 801c994:	4633      	mov	r3, r6
 801c996:	7818      	ldrb	r0, [r3, #0]
 801c998:	2830      	cmp	r0, #48	; 0x30
 801c99a:	461f      	mov	r7, r3
 801c99c:	f103 0301 	add.w	r3, r3, #1
 801c9a0:	d0f9      	beq.n	801c996 <__gethex+0x76>
 801c9a2:	f7ff ffa8 	bl	801c8f6 <__hexdig_fun>
 801c9a6:	2301      	movs	r3, #1
 801c9a8:	fab0 f480 	clz	r4, r0
 801c9ac:	0964      	lsrs	r4, r4, #5
 801c9ae:	4635      	mov	r5, r6
 801c9b0:	9300      	str	r3, [sp, #0]
 801c9b2:	463a      	mov	r2, r7
 801c9b4:	4616      	mov	r6, r2
 801c9b6:	3201      	adds	r2, #1
 801c9b8:	7830      	ldrb	r0, [r6, #0]
 801c9ba:	f7ff ff9c 	bl	801c8f6 <__hexdig_fun>
 801c9be:	2800      	cmp	r0, #0
 801c9c0:	d1f8      	bne.n	801c9b4 <__gethex+0x94>
 801c9c2:	9901      	ldr	r1, [sp, #4]
 801c9c4:	4652      	mov	r2, sl
 801c9c6:	4630      	mov	r0, r6
 801c9c8:	f7fe fe70 	bl	801b6ac <strncmp>
 801c9cc:	b980      	cbnz	r0, 801c9f0 <__gethex+0xd0>
 801c9ce:	b94d      	cbnz	r5, 801c9e4 <__gethex+0xc4>
 801c9d0:	eb06 050a 	add.w	r5, r6, sl
 801c9d4:	462a      	mov	r2, r5
 801c9d6:	4616      	mov	r6, r2
 801c9d8:	3201      	adds	r2, #1
 801c9da:	7830      	ldrb	r0, [r6, #0]
 801c9dc:	f7ff ff8b 	bl	801c8f6 <__hexdig_fun>
 801c9e0:	2800      	cmp	r0, #0
 801c9e2:	d1f8      	bne.n	801c9d6 <__gethex+0xb6>
 801c9e4:	1bad      	subs	r5, r5, r6
 801c9e6:	00ad      	lsls	r5, r5, #2
 801c9e8:	e004      	b.n	801c9f4 <__gethex+0xd4>
 801c9ea:	2400      	movs	r4, #0
 801c9ec:	4625      	mov	r5, r4
 801c9ee:	e7e0      	b.n	801c9b2 <__gethex+0x92>
 801c9f0:	2d00      	cmp	r5, #0
 801c9f2:	d1f7      	bne.n	801c9e4 <__gethex+0xc4>
 801c9f4:	7833      	ldrb	r3, [r6, #0]
 801c9f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c9fa:	2b50      	cmp	r3, #80	; 0x50
 801c9fc:	d13b      	bne.n	801ca76 <__gethex+0x156>
 801c9fe:	7873      	ldrb	r3, [r6, #1]
 801ca00:	2b2b      	cmp	r3, #43	; 0x2b
 801ca02:	d02c      	beq.n	801ca5e <__gethex+0x13e>
 801ca04:	2b2d      	cmp	r3, #45	; 0x2d
 801ca06:	d02e      	beq.n	801ca66 <__gethex+0x146>
 801ca08:	1c71      	adds	r1, r6, #1
 801ca0a:	f04f 0900 	mov.w	r9, #0
 801ca0e:	7808      	ldrb	r0, [r1, #0]
 801ca10:	f7ff ff71 	bl	801c8f6 <__hexdig_fun>
 801ca14:	1e43      	subs	r3, r0, #1
 801ca16:	b2db      	uxtb	r3, r3
 801ca18:	2b18      	cmp	r3, #24
 801ca1a:	d82c      	bhi.n	801ca76 <__gethex+0x156>
 801ca1c:	f1a0 0210 	sub.w	r2, r0, #16
 801ca20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ca24:	f7ff ff67 	bl	801c8f6 <__hexdig_fun>
 801ca28:	1e43      	subs	r3, r0, #1
 801ca2a:	b2db      	uxtb	r3, r3
 801ca2c:	2b18      	cmp	r3, #24
 801ca2e:	d91d      	bls.n	801ca6c <__gethex+0x14c>
 801ca30:	f1b9 0f00 	cmp.w	r9, #0
 801ca34:	d000      	beq.n	801ca38 <__gethex+0x118>
 801ca36:	4252      	negs	r2, r2
 801ca38:	4415      	add	r5, r2
 801ca3a:	f8cb 1000 	str.w	r1, [fp]
 801ca3e:	b1e4      	cbz	r4, 801ca7a <__gethex+0x15a>
 801ca40:	9b00      	ldr	r3, [sp, #0]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	bf14      	ite	ne
 801ca46:	2700      	movne	r7, #0
 801ca48:	2706      	moveq	r7, #6
 801ca4a:	4638      	mov	r0, r7
 801ca4c:	b009      	add	sp, #36	; 0x24
 801ca4e:	ecbd 8b02 	vpop	{d8}
 801ca52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca56:	463e      	mov	r6, r7
 801ca58:	4625      	mov	r5, r4
 801ca5a:	2401      	movs	r4, #1
 801ca5c:	e7ca      	b.n	801c9f4 <__gethex+0xd4>
 801ca5e:	f04f 0900 	mov.w	r9, #0
 801ca62:	1cb1      	adds	r1, r6, #2
 801ca64:	e7d3      	b.n	801ca0e <__gethex+0xee>
 801ca66:	f04f 0901 	mov.w	r9, #1
 801ca6a:	e7fa      	b.n	801ca62 <__gethex+0x142>
 801ca6c:	230a      	movs	r3, #10
 801ca6e:	fb03 0202 	mla	r2, r3, r2, r0
 801ca72:	3a10      	subs	r2, #16
 801ca74:	e7d4      	b.n	801ca20 <__gethex+0x100>
 801ca76:	4631      	mov	r1, r6
 801ca78:	e7df      	b.n	801ca3a <__gethex+0x11a>
 801ca7a:	1bf3      	subs	r3, r6, r7
 801ca7c:	3b01      	subs	r3, #1
 801ca7e:	4621      	mov	r1, r4
 801ca80:	2b07      	cmp	r3, #7
 801ca82:	dc0b      	bgt.n	801ca9c <__gethex+0x17c>
 801ca84:	ee18 0a10 	vmov	r0, s16
 801ca88:	f000 fad4 	bl	801d034 <_Balloc>
 801ca8c:	4604      	mov	r4, r0
 801ca8e:	b940      	cbnz	r0, 801caa2 <__gethex+0x182>
 801ca90:	4b65      	ldr	r3, [pc, #404]	; (801cc28 <__gethex+0x308>)
 801ca92:	4602      	mov	r2, r0
 801ca94:	21de      	movs	r1, #222	; 0xde
 801ca96:	4865      	ldr	r0, [pc, #404]	; (801cc2c <__gethex+0x30c>)
 801ca98:	f7fe f8d4 	bl	801ac44 <__assert_func>
 801ca9c:	3101      	adds	r1, #1
 801ca9e:	105b      	asrs	r3, r3, #1
 801caa0:	e7ee      	b.n	801ca80 <__gethex+0x160>
 801caa2:	f100 0914 	add.w	r9, r0, #20
 801caa6:	f04f 0b00 	mov.w	fp, #0
 801caaa:	f1ca 0301 	rsb	r3, sl, #1
 801caae:	f8cd 9008 	str.w	r9, [sp, #8]
 801cab2:	f8cd b000 	str.w	fp, [sp]
 801cab6:	9306      	str	r3, [sp, #24]
 801cab8:	42b7      	cmp	r7, r6
 801caba:	d340      	bcc.n	801cb3e <__gethex+0x21e>
 801cabc:	9802      	ldr	r0, [sp, #8]
 801cabe:	9b00      	ldr	r3, [sp, #0]
 801cac0:	f840 3b04 	str.w	r3, [r0], #4
 801cac4:	eba0 0009 	sub.w	r0, r0, r9
 801cac8:	1080      	asrs	r0, r0, #2
 801caca:	0146      	lsls	r6, r0, #5
 801cacc:	6120      	str	r0, [r4, #16]
 801cace:	4618      	mov	r0, r3
 801cad0:	f000 fba6 	bl	801d220 <__hi0bits>
 801cad4:	1a30      	subs	r0, r6, r0
 801cad6:	f8d8 6000 	ldr.w	r6, [r8]
 801cada:	42b0      	cmp	r0, r6
 801cadc:	dd63      	ble.n	801cba6 <__gethex+0x286>
 801cade:	1b87      	subs	r7, r0, r6
 801cae0:	4639      	mov	r1, r7
 801cae2:	4620      	mov	r0, r4
 801cae4:	f000 ff40 	bl	801d968 <__any_on>
 801cae8:	4682      	mov	sl, r0
 801caea:	b1a8      	cbz	r0, 801cb18 <__gethex+0x1f8>
 801caec:	1e7b      	subs	r3, r7, #1
 801caee:	1159      	asrs	r1, r3, #5
 801caf0:	f003 021f 	and.w	r2, r3, #31
 801caf4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801caf8:	f04f 0a01 	mov.w	sl, #1
 801cafc:	fa0a f202 	lsl.w	r2, sl, r2
 801cb00:	420a      	tst	r2, r1
 801cb02:	d009      	beq.n	801cb18 <__gethex+0x1f8>
 801cb04:	4553      	cmp	r3, sl
 801cb06:	dd05      	ble.n	801cb14 <__gethex+0x1f4>
 801cb08:	1eb9      	subs	r1, r7, #2
 801cb0a:	4620      	mov	r0, r4
 801cb0c:	f000 ff2c 	bl	801d968 <__any_on>
 801cb10:	2800      	cmp	r0, #0
 801cb12:	d145      	bne.n	801cba0 <__gethex+0x280>
 801cb14:	f04f 0a02 	mov.w	sl, #2
 801cb18:	4639      	mov	r1, r7
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	f7ff fe99 	bl	801c852 <rshift>
 801cb20:	443d      	add	r5, r7
 801cb22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cb26:	42ab      	cmp	r3, r5
 801cb28:	da4c      	bge.n	801cbc4 <__gethex+0x2a4>
 801cb2a:	ee18 0a10 	vmov	r0, s16
 801cb2e:	4621      	mov	r1, r4
 801cb30:	f000 fac0 	bl	801d0b4 <_Bfree>
 801cb34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cb36:	2300      	movs	r3, #0
 801cb38:	6013      	str	r3, [r2, #0]
 801cb3a:	27a3      	movs	r7, #163	; 0xa3
 801cb3c:	e785      	b.n	801ca4a <__gethex+0x12a>
 801cb3e:	1e73      	subs	r3, r6, #1
 801cb40:	9a05      	ldr	r2, [sp, #20]
 801cb42:	9303      	str	r3, [sp, #12]
 801cb44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cb48:	4293      	cmp	r3, r2
 801cb4a:	d019      	beq.n	801cb80 <__gethex+0x260>
 801cb4c:	f1bb 0f20 	cmp.w	fp, #32
 801cb50:	d107      	bne.n	801cb62 <__gethex+0x242>
 801cb52:	9b02      	ldr	r3, [sp, #8]
 801cb54:	9a00      	ldr	r2, [sp, #0]
 801cb56:	f843 2b04 	str.w	r2, [r3], #4
 801cb5a:	9302      	str	r3, [sp, #8]
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	9300      	str	r3, [sp, #0]
 801cb60:	469b      	mov	fp, r3
 801cb62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801cb66:	f7ff fec6 	bl	801c8f6 <__hexdig_fun>
 801cb6a:	9b00      	ldr	r3, [sp, #0]
 801cb6c:	f000 000f 	and.w	r0, r0, #15
 801cb70:	fa00 f00b 	lsl.w	r0, r0, fp
 801cb74:	4303      	orrs	r3, r0
 801cb76:	9300      	str	r3, [sp, #0]
 801cb78:	f10b 0b04 	add.w	fp, fp, #4
 801cb7c:	9b03      	ldr	r3, [sp, #12]
 801cb7e:	e00d      	b.n	801cb9c <__gethex+0x27c>
 801cb80:	9b03      	ldr	r3, [sp, #12]
 801cb82:	9a06      	ldr	r2, [sp, #24]
 801cb84:	4413      	add	r3, r2
 801cb86:	42bb      	cmp	r3, r7
 801cb88:	d3e0      	bcc.n	801cb4c <__gethex+0x22c>
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	9901      	ldr	r1, [sp, #4]
 801cb8e:	9307      	str	r3, [sp, #28]
 801cb90:	4652      	mov	r2, sl
 801cb92:	f7fe fd8b 	bl	801b6ac <strncmp>
 801cb96:	9b07      	ldr	r3, [sp, #28]
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	d1d7      	bne.n	801cb4c <__gethex+0x22c>
 801cb9c:	461e      	mov	r6, r3
 801cb9e:	e78b      	b.n	801cab8 <__gethex+0x198>
 801cba0:	f04f 0a03 	mov.w	sl, #3
 801cba4:	e7b8      	b.n	801cb18 <__gethex+0x1f8>
 801cba6:	da0a      	bge.n	801cbbe <__gethex+0x29e>
 801cba8:	1a37      	subs	r7, r6, r0
 801cbaa:	4621      	mov	r1, r4
 801cbac:	ee18 0a10 	vmov	r0, s16
 801cbb0:	463a      	mov	r2, r7
 801cbb2:	f000 fc9b 	bl	801d4ec <__lshift>
 801cbb6:	1bed      	subs	r5, r5, r7
 801cbb8:	4604      	mov	r4, r0
 801cbba:	f100 0914 	add.w	r9, r0, #20
 801cbbe:	f04f 0a00 	mov.w	sl, #0
 801cbc2:	e7ae      	b.n	801cb22 <__gethex+0x202>
 801cbc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cbc8:	42a8      	cmp	r0, r5
 801cbca:	dd72      	ble.n	801ccb2 <__gethex+0x392>
 801cbcc:	1b45      	subs	r5, r0, r5
 801cbce:	42ae      	cmp	r6, r5
 801cbd0:	dc36      	bgt.n	801cc40 <__gethex+0x320>
 801cbd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cbd6:	2b02      	cmp	r3, #2
 801cbd8:	d02a      	beq.n	801cc30 <__gethex+0x310>
 801cbda:	2b03      	cmp	r3, #3
 801cbdc:	d02c      	beq.n	801cc38 <__gethex+0x318>
 801cbde:	2b01      	cmp	r3, #1
 801cbe0:	d115      	bne.n	801cc0e <__gethex+0x2ee>
 801cbe2:	42ae      	cmp	r6, r5
 801cbe4:	d113      	bne.n	801cc0e <__gethex+0x2ee>
 801cbe6:	2e01      	cmp	r6, #1
 801cbe8:	d10b      	bne.n	801cc02 <__gethex+0x2e2>
 801cbea:	9a04      	ldr	r2, [sp, #16]
 801cbec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cbf0:	6013      	str	r3, [r2, #0]
 801cbf2:	2301      	movs	r3, #1
 801cbf4:	6123      	str	r3, [r4, #16]
 801cbf6:	f8c9 3000 	str.w	r3, [r9]
 801cbfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbfc:	2762      	movs	r7, #98	; 0x62
 801cbfe:	601c      	str	r4, [r3, #0]
 801cc00:	e723      	b.n	801ca4a <__gethex+0x12a>
 801cc02:	1e71      	subs	r1, r6, #1
 801cc04:	4620      	mov	r0, r4
 801cc06:	f000 feaf 	bl	801d968 <__any_on>
 801cc0a:	2800      	cmp	r0, #0
 801cc0c:	d1ed      	bne.n	801cbea <__gethex+0x2ca>
 801cc0e:	ee18 0a10 	vmov	r0, s16
 801cc12:	4621      	mov	r1, r4
 801cc14:	f000 fa4e 	bl	801d0b4 <_Bfree>
 801cc18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	6013      	str	r3, [r2, #0]
 801cc1e:	2750      	movs	r7, #80	; 0x50
 801cc20:	e713      	b.n	801ca4a <__gethex+0x12a>
 801cc22:	bf00      	nop
 801cc24:	08020850 	.word	0x08020850
 801cc28:	080207d4 	.word	0x080207d4
 801cc2c:	080207e5 	.word	0x080207e5
 801cc30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1eb      	bne.n	801cc0e <__gethex+0x2ee>
 801cc36:	e7d8      	b.n	801cbea <__gethex+0x2ca>
 801cc38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d1d5      	bne.n	801cbea <__gethex+0x2ca>
 801cc3e:	e7e6      	b.n	801cc0e <__gethex+0x2ee>
 801cc40:	1e6f      	subs	r7, r5, #1
 801cc42:	f1ba 0f00 	cmp.w	sl, #0
 801cc46:	d131      	bne.n	801ccac <__gethex+0x38c>
 801cc48:	b127      	cbz	r7, 801cc54 <__gethex+0x334>
 801cc4a:	4639      	mov	r1, r7
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f000 fe8b 	bl	801d968 <__any_on>
 801cc52:	4682      	mov	sl, r0
 801cc54:	117b      	asrs	r3, r7, #5
 801cc56:	2101      	movs	r1, #1
 801cc58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cc5c:	f007 071f 	and.w	r7, r7, #31
 801cc60:	fa01 f707 	lsl.w	r7, r1, r7
 801cc64:	421f      	tst	r7, r3
 801cc66:	4629      	mov	r1, r5
 801cc68:	4620      	mov	r0, r4
 801cc6a:	bf18      	it	ne
 801cc6c:	f04a 0a02 	orrne.w	sl, sl, #2
 801cc70:	1b76      	subs	r6, r6, r5
 801cc72:	f7ff fdee 	bl	801c852 <rshift>
 801cc76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cc7a:	2702      	movs	r7, #2
 801cc7c:	f1ba 0f00 	cmp.w	sl, #0
 801cc80:	d048      	beq.n	801cd14 <__gethex+0x3f4>
 801cc82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cc86:	2b02      	cmp	r3, #2
 801cc88:	d015      	beq.n	801ccb6 <__gethex+0x396>
 801cc8a:	2b03      	cmp	r3, #3
 801cc8c:	d017      	beq.n	801ccbe <__gethex+0x39e>
 801cc8e:	2b01      	cmp	r3, #1
 801cc90:	d109      	bne.n	801cca6 <__gethex+0x386>
 801cc92:	f01a 0f02 	tst.w	sl, #2
 801cc96:	d006      	beq.n	801cca6 <__gethex+0x386>
 801cc98:	f8d9 0000 	ldr.w	r0, [r9]
 801cc9c:	ea4a 0a00 	orr.w	sl, sl, r0
 801cca0:	f01a 0f01 	tst.w	sl, #1
 801cca4:	d10e      	bne.n	801ccc4 <__gethex+0x3a4>
 801cca6:	f047 0710 	orr.w	r7, r7, #16
 801ccaa:	e033      	b.n	801cd14 <__gethex+0x3f4>
 801ccac:	f04f 0a01 	mov.w	sl, #1
 801ccb0:	e7d0      	b.n	801cc54 <__gethex+0x334>
 801ccb2:	2701      	movs	r7, #1
 801ccb4:	e7e2      	b.n	801cc7c <__gethex+0x35c>
 801ccb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccb8:	f1c3 0301 	rsb	r3, r3, #1
 801ccbc:	9315      	str	r3, [sp, #84]	; 0x54
 801ccbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d0f0      	beq.n	801cca6 <__gethex+0x386>
 801ccc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ccc8:	f104 0314 	add.w	r3, r4, #20
 801cccc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ccd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ccd4:	f04f 0c00 	mov.w	ip, #0
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccde:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cce2:	d01c      	beq.n	801cd1e <__gethex+0x3fe>
 801cce4:	3201      	adds	r2, #1
 801cce6:	6002      	str	r2, [r0, #0]
 801cce8:	2f02      	cmp	r7, #2
 801ccea:	f104 0314 	add.w	r3, r4, #20
 801ccee:	d13f      	bne.n	801cd70 <__gethex+0x450>
 801ccf0:	f8d8 2000 	ldr.w	r2, [r8]
 801ccf4:	3a01      	subs	r2, #1
 801ccf6:	42b2      	cmp	r2, r6
 801ccf8:	d10a      	bne.n	801cd10 <__gethex+0x3f0>
 801ccfa:	1171      	asrs	r1, r6, #5
 801ccfc:	2201      	movs	r2, #1
 801ccfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cd02:	f006 061f 	and.w	r6, r6, #31
 801cd06:	fa02 f606 	lsl.w	r6, r2, r6
 801cd0a:	421e      	tst	r6, r3
 801cd0c:	bf18      	it	ne
 801cd0e:	4617      	movne	r7, r2
 801cd10:	f047 0720 	orr.w	r7, r7, #32
 801cd14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cd16:	601c      	str	r4, [r3, #0]
 801cd18:	9b04      	ldr	r3, [sp, #16]
 801cd1a:	601d      	str	r5, [r3, #0]
 801cd1c:	e695      	b.n	801ca4a <__gethex+0x12a>
 801cd1e:	4299      	cmp	r1, r3
 801cd20:	f843 cc04 	str.w	ip, [r3, #-4]
 801cd24:	d8d8      	bhi.n	801ccd8 <__gethex+0x3b8>
 801cd26:	68a3      	ldr	r3, [r4, #8]
 801cd28:	459b      	cmp	fp, r3
 801cd2a:	db19      	blt.n	801cd60 <__gethex+0x440>
 801cd2c:	6861      	ldr	r1, [r4, #4]
 801cd2e:	ee18 0a10 	vmov	r0, s16
 801cd32:	3101      	adds	r1, #1
 801cd34:	f000 f97e 	bl	801d034 <_Balloc>
 801cd38:	4681      	mov	r9, r0
 801cd3a:	b918      	cbnz	r0, 801cd44 <__gethex+0x424>
 801cd3c:	4b1a      	ldr	r3, [pc, #104]	; (801cda8 <__gethex+0x488>)
 801cd3e:	4602      	mov	r2, r0
 801cd40:	2184      	movs	r1, #132	; 0x84
 801cd42:	e6a8      	b.n	801ca96 <__gethex+0x176>
 801cd44:	6922      	ldr	r2, [r4, #16]
 801cd46:	3202      	adds	r2, #2
 801cd48:	f104 010c 	add.w	r1, r4, #12
 801cd4c:	0092      	lsls	r2, r2, #2
 801cd4e:	300c      	adds	r0, #12
 801cd50:	f7fd fff2 	bl	801ad38 <memcpy>
 801cd54:	4621      	mov	r1, r4
 801cd56:	ee18 0a10 	vmov	r0, s16
 801cd5a:	f000 f9ab 	bl	801d0b4 <_Bfree>
 801cd5e:	464c      	mov	r4, r9
 801cd60:	6923      	ldr	r3, [r4, #16]
 801cd62:	1c5a      	adds	r2, r3, #1
 801cd64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cd68:	6122      	str	r2, [r4, #16]
 801cd6a:	2201      	movs	r2, #1
 801cd6c:	615a      	str	r2, [r3, #20]
 801cd6e:	e7bb      	b.n	801cce8 <__gethex+0x3c8>
 801cd70:	6922      	ldr	r2, [r4, #16]
 801cd72:	455a      	cmp	r2, fp
 801cd74:	dd0b      	ble.n	801cd8e <__gethex+0x46e>
 801cd76:	2101      	movs	r1, #1
 801cd78:	4620      	mov	r0, r4
 801cd7a:	f7ff fd6a 	bl	801c852 <rshift>
 801cd7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cd82:	3501      	adds	r5, #1
 801cd84:	42ab      	cmp	r3, r5
 801cd86:	f6ff aed0 	blt.w	801cb2a <__gethex+0x20a>
 801cd8a:	2701      	movs	r7, #1
 801cd8c:	e7c0      	b.n	801cd10 <__gethex+0x3f0>
 801cd8e:	f016 061f 	ands.w	r6, r6, #31
 801cd92:	d0fa      	beq.n	801cd8a <__gethex+0x46a>
 801cd94:	449a      	add	sl, r3
 801cd96:	f1c6 0620 	rsb	r6, r6, #32
 801cd9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cd9e:	f000 fa3f 	bl	801d220 <__hi0bits>
 801cda2:	42b0      	cmp	r0, r6
 801cda4:	dbe7      	blt.n	801cd76 <__gethex+0x456>
 801cda6:	e7f0      	b.n	801cd8a <__gethex+0x46a>
 801cda8:	080207d4 	.word	0x080207d4

0801cdac <L_shift>:
 801cdac:	f1c2 0208 	rsb	r2, r2, #8
 801cdb0:	0092      	lsls	r2, r2, #2
 801cdb2:	b570      	push	{r4, r5, r6, lr}
 801cdb4:	f1c2 0620 	rsb	r6, r2, #32
 801cdb8:	6843      	ldr	r3, [r0, #4]
 801cdba:	6804      	ldr	r4, [r0, #0]
 801cdbc:	fa03 f506 	lsl.w	r5, r3, r6
 801cdc0:	432c      	orrs	r4, r5
 801cdc2:	40d3      	lsrs	r3, r2
 801cdc4:	6004      	str	r4, [r0, #0]
 801cdc6:	f840 3f04 	str.w	r3, [r0, #4]!
 801cdca:	4288      	cmp	r0, r1
 801cdcc:	d3f4      	bcc.n	801cdb8 <L_shift+0xc>
 801cdce:	bd70      	pop	{r4, r5, r6, pc}

0801cdd0 <__match>:
 801cdd0:	b530      	push	{r4, r5, lr}
 801cdd2:	6803      	ldr	r3, [r0, #0]
 801cdd4:	3301      	adds	r3, #1
 801cdd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cdda:	b914      	cbnz	r4, 801cde2 <__match+0x12>
 801cddc:	6003      	str	r3, [r0, #0]
 801cdde:	2001      	movs	r0, #1
 801cde0:	bd30      	pop	{r4, r5, pc}
 801cde2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cde6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cdea:	2d19      	cmp	r5, #25
 801cdec:	bf98      	it	ls
 801cdee:	3220      	addls	r2, #32
 801cdf0:	42a2      	cmp	r2, r4
 801cdf2:	d0f0      	beq.n	801cdd6 <__match+0x6>
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	e7f3      	b.n	801cde0 <__match+0x10>

0801cdf8 <__hexnan>:
 801cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdfc:	680b      	ldr	r3, [r1, #0]
 801cdfe:	6801      	ldr	r1, [r0, #0]
 801ce00:	115e      	asrs	r6, r3, #5
 801ce02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ce06:	f013 031f 	ands.w	r3, r3, #31
 801ce0a:	b087      	sub	sp, #28
 801ce0c:	bf18      	it	ne
 801ce0e:	3604      	addne	r6, #4
 801ce10:	2500      	movs	r5, #0
 801ce12:	1f37      	subs	r7, r6, #4
 801ce14:	4682      	mov	sl, r0
 801ce16:	4690      	mov	r8, r2
 801ce18:	9301      	str	r3, [sp, #4]
 801ce1a:	f846 5c04 	str.w	r5, [r6, #-4]
 801ce1e:	46b9      	mov	r9, r7
 801ce20:	463c      	mov	r4, r7
 801ce22:	9502      	str	r5, [sp, #8]
 801ce24:	46ab      	mov	fp, r5
 801ce26:	784a      	ldrb	r2, [r1, #1]
 801ce28:	1c4b      	adds	r3, r1, #1
 801ce2a:	9303      	str	r3, [sp, #12]
 801ce2c:	b342      	cbz	r2, 801ce80 <__hexnan+0x88>
 801ce2e:	4610      	mov	r0, r2
 801ce30:	9105      	str	r1, [sp, #20]
 801ce32:	9204      	str	r2, [sp, #16]
 801ce34:	f7ff fd5f 	bl	801c8f6 <__hexdig_fun>
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	d14f      	bne.n	801cedc <__hexnan+0xe4>
 801ce3c:	9a04      	ldr	r2, [sp, #16]
 801ce3e:	9905      	ldr	r1, [sp, #20]
 801ce40:	2a20      	cmp	r2, #32
 801ce42:	d818      	bhi.n	801ce76 <__hexnan+0x7e>
 801ce44:	9b02      	ldr	r3, [sp, #8]
 801ce46:	459b      	cmp	fp, r3
 801ce48:	dd13      	ble.n	801ce72 <__hexnan+0x7a>
 801ce4a:	454c      	cmp	r4, r9
 801ce4c:	d206      	bcs.n	801ce5c <__hexnan+0x64>
 801ce4e:	2d07      	cmp	r5, #7
 801ce50:	dc04      	bgt.n	801ce5c <__hexnan+0x64>
 801ce52:	462a      	mov	r2, r5
 801ce54:	4649      	mov	r1, r9
 801ce56:	4620      	mov	r0, r4
 801ce58:	f7ff ffa8 	bl	801cdac <L_shift>
 801ce5c:	4544      	cmp	r4, r8
 801ce5e:	d950      	bls.n	801cf02 <__hexnan+0x10a>
 801ce60:	2300      	movs	r3, #0
 801ce62:	f1a4 0904 	sub.w	r9, r4, #4
 801ce66:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce6a:	f8cd b008 	str.w	fp, [sp, #8]
 801ce6e:	464c      	mov	r4, r9
 801ce70:	461d      	mov	r5, r3
 801ce72:	9903      	ldr	r1, [sp, #12]
 801ce74:	e7d7      	b.n	801ce26 <__hexnan+0x2e>
 801ce76:	2a29      	cmp	r2, #41	; 0x29
 801ce78:	d156      	bne.n	801cf28 <__hexnan+0x130>
 801ce7a:	3102      	adds	r1, #2
 801ce7c:	f8ca 1000 	str.w	r1, [sl]
 801ce80:	f1bb 0f00 	cmp.w	fp, #0
 801ce84:	d050      	beq.n	801cf28 <__hexnan+0x130>
 801ce86:	454c      	cmp	r4, r9
 801ce88:	d206      	bcs.n	801ce98 <__hexnan+0xa0>
 801ce8a:	2d07      	cmp	r5, #7
 801ce8c:	dc04      	bgt.n	801ce98 <__hexnan+0xa0>
 801ce8e:	462a      	mov	r2, r5
 801ce90:	4649      	mov	r1, r9
 801ce92:	4620      	mov	r0, r4
 801ce94:	f7ff ff8a 	bl	801cdac <L_shift>
 801ce98:	4544      	cmp	r4, r8
 801ce9a:	d934      	bls.n	801cf06 <__hexnan+0x10e>
 801ce9c:	f1a8 0204 	sub.w	r2, r8, #4
 801cea0:	4623      	mov	r3, r4
 801cea2:	f853 1b04 	ldr.w	r1, [r3], #4
 801cea6:	f842 1f04 	str.w	r1, [r2, #4]!
 801ceaa:	429f      	cmp	r7, r3
 801ceac:	d2f9      	bcs.n	801cea2 <__hexnan+0xaa>
 801ceae:	1b3b      	subs	r3, r7, r4
 801ceb0:	f023 0303 	bic.w	r3, r3, #3
 801ceb4:	3304      	adds	r3, #4
 801ceb6:	3401      	adds	r4, #1
 801ceb8:	3e03      	subs	r6, #3
 801ceba:	42b4      	cmp	r4, r6
 801cebc:	bf88      	it	hi
 801cebe:	2304      	movhi	r3, #4
 801cec0:	4443      	add	r3, r8
 801cec2:	2200      	movs	r2, #0
 801cec4:	f843 2b04 	str.w	r2, [r3], #4
 801cec8:	429f      	cmp	r7, r3
 801ceca:	d2fb      	bcs.n	801cec4 <__hexnan+0xcc>
 801cecc:	683b      	ldr	r3, [r7, #0]
 801cece:	b91b      	cbnz	r3, 801ced8 <__hexnan+0xe0>
 801ced0:	4547      	cmp	r7, r8
 801ced2:	d127      	bne.n	801cf24 <__hexnan+0x12c>
 801ced4:	2301      	movs	r3, #1
 801ced6:	603b      	str	r3, [r7, #0]
 801ced8:	2005      	movs	r0, #5
 801ceda:	e026      	b.n	801cf2a <__hexnan+0x132>
 801cedc:	3501      	adds	r5, #1
 801cede:	2d08      	cmp	r5, #8
 801cee0:	f10b 0b01 	add.w	fp, fp, #1
 801cee4:	dd06      	ble.n	801cef4 <__hexnan+0xfc>
 801cee6:	4544      	cmp	r4, r8
 801cee8:	d9c3      	bls.n	801ce72 <__hexnan+0x7a>
 801ceea:	2300      	movs	r3, #0
 801ceec:	f844 3c04 	str.w	r3, [r4, #-4]
 801cef0:	2501      	movs	r5, #1
 801cef2:	3c04      	subs	r4, #4
 801cef4:	6822      	ldr	r2, [r4, #0]
 801cef6:	f000 000f 	and.w	r0, r0, #15
 801cefa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801cefe:	6022      	str	r2, [r4, #0]
 801cf00:	e7b7      	b.n	801ce72 <__hexnan+0x7a>
 801cf02:	2508      	movs	r5, #8
 801cf04:	e7b5      	b.n	801ce72 <__hexnan+0x7a>
 801cf06:	9b01      	ldr	r3, [sp, #4]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d0df      	beq.n	801cecc <__hexnan+0xd4>
 801cf0c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf10:	f1c3 0320 	rsb	r3, r3, #32
 801cf14:	fa22 f303 	lsr.w	r3, r2, r3
 801cf18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cf1c:	401a      	ands	r2, r3
 801cf1e:	f846 2c04 	str.w	r2, [r6, #-4]
 801cf22:	e7d3      	b.n	801cecc <__hexnan+0xd4>
 801cf24:	3f04      	subs	r7, #4
 801cf26:	e7d1      	b.n	801cecc <__hexnan+0xd4>
 801cf28:	2004      	movs	r0, #4
 801cf2a:	b007      	add	sp, #28
 801cf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf30 <__swhatbuf_r>:
 801cf30:	b570      	push	{r4, r5, r6, lr}
 801cf32:	460e      	mov	r6, r1
 801cf34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf38:	2900      	cmp	r1, #0
 801cf3a:	b096      	sub	sp, #88	; 0x58
 801cf3c:	4614      	mov	r4, r2
 801cf3e:	461d      	mov	r5, r3
 801cf40:	da07      	bge.n	801cf52 <__swhatbuf_r+0x22>
 801cf42:	2300      	movs	r3, #0
 801cf44:	602b      	str	r3, [r5, #0]
 801cf46:	89b3      	ldrh	r3, [r6, #12]
 801cf48:	061a      	lsls	r2, r3, #24
 801cf4a:	d410      	bmi.n	801cf6e <__swhatbuf_r+0x3e>
 801cf4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf50:	e00e      	b.n	801cf70 <__swhatbuf_r+0x40>
 801cf52:	466a      	mov	r2, sp
 801cf54:	f000 fd9c 	bl	801da90 <_fstat_r>
 801cf58:	2800      	cmp	r0, #0
 801cf5a:	dbf2      	blt.n	801cf42 <__swhatbuf_r+0x12>
 801cf5c:	9a01      	ldr	r2, [sp, #4]
 801cf5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cf62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cf66:	425a      	negs	r2, r3
 801cf68:	415a      	adcs	r2, r3
 801cf6a:	602a      	str	r2, [r5, #0]
 801cf6c:	e7ee      	b.n	801cf4c <__swhatbuf_r+0x1c>
 801cf6e:	2340      	movs	r3, #64	; 0x40
 801cf70:	2000      	movs	r0, #0
 801cf72:	6023      	str	r3, [r4, #0]
 801cf74:	b016      	add	sp, #88	; 0x58
 801cf76:	bd70      	pop	{r4, r5, r6, pc}

0801cf78 <__smakebuf_r>:
 801cf78:	898b      	ldrh	r3, [r1, #12]
 801cf7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf7c:	079d      	lsls	r5, r3, #30
 801cf7e:	4606      	mov	r6, r0
 801cf80:	460c      	mov	r4, r1
 801cf82:	d507      	bpl.n	801cf94 <__smakebuf_r+0x1c>
 801cf84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cf88:	6023      	str	r3, [r4, #0]
 801cf8a:	6123      	str	r3, [r4, #16]
 801cf8c:	2301      	movs	r3, #1
 801cf8e:	6163      	str	r3, [r4, #20]
 801cf90:	b002      	add	sp, #8
 801cf92:	bd70      	pop	{r4, r5, r6, pc}
 801cf94:	ab01      	add	r3, sp, #4
 801cf96:	466a      	mov	r2, sp
 801cf98:	f7ff ffca 	bl	801cf30 <__swhatbuf_r>
 801cf9c:	9900      	ldr	r1, [sp, #0]
 801cf9e:	4605      	mov	r5, r0
 801cfa0:	4630      	mov	r0, r6
 801cfa2:	f7fd ff59 	bl	801ae58 <_malloc_r>
 801cfa6:	b948      	cbnz	r0, 801cfbc <__smakebuf_r+0x44>
 801cfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cfac:	059a      	lsls	r2, r3, #22
 801cfae:	d4ef      	bmi.n	801cf90 <__smakebuf_r+0x18>
 801cfb0:	f023 0303 	bic.w	r3, r3, #3
 801cfb4:	f043 0302 	orr.w	r3, r3, #2
 801cfb8:	81a3      	strh	r3, [r4, #12]
 801cfba:	e7e3      	b.n	801cf84 <__smakebuf_r+0xc>
 801cfbc:	4b0d      	ldr	r3, [pc, #52]	; (801cff4 <__smakebuf_r+0x7c>)
 801cfbe:	62b3      	str	r3, [r6, #40]	; 0x28
 801cfc0:	89a3      	ldrh	r3, [r4, #12]
 801cfc2:	6020      	str	r0, [r4, #0]
 801cfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cfc8:	81a3      	strh	r3, [r4, #12]
 801cfca:	9b00      	ldr	r3, [sp, #0]
 801cfcc:	6163      	str	r3, [r4, #20]
 801cfce:	9b01      	ldr	r3, [sp, #4]
 801cfd0:	6120      	str	r0, [r4, #16]
 801cfd2:	b15b      	cbz	r3, 801cfec <__smakebuf_r+0x74>
 801cfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cfd8:	4630      	mov	r0, r6
 801cfda:	f000 fd6b 	bl	801dab4 <_isatty_r>
 801cfde:	b128      	cbz	r0, 801cfec <__smakebuf_r+0x74>
 801cfe0:	89a3      	ldrh	r3, [r4, #12]
 801cfe2:	f023 0303 	bic.w	r3, r3, #3
 801cfe6:	f043 0301 	orr.w	r3, r3, #1
 801cfea:	81a3      	strh	r3, [r4, #12]
 801cfec:	89a0      	ldrh	r0, [r4, #12]
 801cfee:	4305      	orrs	r5, r0
 801cff0:	81a5      	strh	r5, [r4, #12]
 801cff2:	e7cd      	b.n	801cf90 <__smakebuf_r+0x18>
 801cff4:	0801c6b1 	.word	0x0801c6b1

0801cff8 <__ascii_mbtowc>:
 801cff8:	b082      	sub	sp, #8
 801cffa:	b901      	cbnz	r1, 801cffe <__ascii_mbtowc+0x6>
 801cffc:	a901      	add	r1, sp, #4
 801cffe:	b142      	cbz	r2, 801d012 <__ascii_mbtowc+0x1a>
 801d000:	b14b      	cbz	r3, 801d016 <__ascii_mbtowc+0x1e>
 801d002:	7813      	ldrb	r3, [r2, #0]
 801d004:	600b      	str	r3, [r1, #0]
 801d006:	7812      	ldrb	r2, [r2, #0]
 801d008:	1e10      	subs	r0, r2, #0
 801d00a:	bf18      	it	ne
 801d00c:	2001      	movne	r0, #1
 801d00e:	b002      	add	sp, #8
 801d010:	4770      	bx	lr
 801d012:	4610      	mov	r0, r2
 801d014:	e7fb      	b.n	801d00e <__ascii_mbtowc+0x16>
 801d016:	f06f 0001 	mvn.w	r0, #1
 801d01a:	e7f8      	b.n	801d00e <__ascii_mbtowc+0x16>

0801d01c <__malloc_lock>:
 801d01c:	4801      	ldr	r0, [pc, #4]	; (801d024 <__malloc_lock+0x8>)
 801d01e:	f7fd be78 	b.w	801ad12 <__retarget_lock_acquire_recursive>
 801d022:	bf00      	nop
 801d024:	20000834 	.word	0x20000834

0801d028 <__malloc_unlock>:
 801d028:	4801      	ldr	r0, [pc, #4]	; (801d030 <__malloc_unlock+0x8>)
 801d02a:	f7fd be73 	b.w	801ad14 <__retarget_lock_release_recursive>
 801d02e:	bf00      	nop
 801d030:	20000834 	.word	0x20000834

0801d034 <_Balloc>:
 801d034:	b570      	push	{r4, r5, r6, lr}
 801d036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d038:	4604      	mov	r4, r0
 801d03a:	460d      	mov	r5, r1
 801d03c:	b976      	cbnz	r6, 801d05c <_Balloc+0x28>
 801d03e:	2010      	movs	r0, #16
 801d040:	f7fd fe6a 	bl	801ad18 <malloc>
 801d044:	4602      	mov	r2, r0
 801d046:	6260      	str	r0, [r4, #36]	; 0x24
 801d048:	b920      	cbnz	r0, 801d054 <_Balloc+0x20>
 801d04a:	4b18      	ldr	r3, [pc, #96]	; (801d0ac <_Balloc+0x78>)
 801d04c:	4818      	ldr	r0, [pc, #96]	; (801d0b0 <_Balloc+0x7c>)
 801d04e:	2166      	movs	r1, #102	; 0x66
 801d050:	f7fd fdf8 	bl	801ac44 <__assert_func>
 801d054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d058:	6006      	str	r6, [r0, #0]
 801d05a:	60c6      	str	r6, [r0, #12]
 801d05c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d05e:	68f3      	ldr	r3, [r6, #12]
 801d060:	b183      	cbz	r3, 801d084 <_Balloc+0x50>
 801d062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d064:	68db      	ldr	r3, [r3, #12]
 801d066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d06a:	b9b8      	cbnz	r0, 801d09c <_Balloc+0x68>
 801d06c:	2101      	movs	r1, #1
 801d06e:	fa01 f605 	lsl.w	r6, r1, r5
 801d072:	1d72      	adds	r2, r6, #5
 801d074:	0092      	lsls	r2, r2, #2
 801d076:	4620      	mov	r0, r4
 801d078:	f7fd fe8e 	bl	801ad98 <_calloc_r>
 801d07c:	b160      	cbz	r0, 801d098 <_Balloc+0x64>
 801d07e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d082:	e00e      	b.n	801d0a2 <_Balloc+0x6e>
 801d084:	2221      	movs	r2, #33	; 0x21
 801d086:	2104      	movs	r1, #4
 801d088:	4620      	mov	r0, r4
 801d08a:	f7fd fe85 	bl	801ad98 <_calloc_r>
 801d08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d090:	60f0      	str	r0, [r6, #12]
 801d092:	68db      	ldr	r3, [r3, #12]
 801d094:	2b00      	cmp	r3, #0
 801d096:	d1e4      	bne.n	801d062 <_Balloc+0x2e>
 801d098:	2000      	movs	r0, #0
 801d09a:	bd70      	pop	{r4, r5, r6, pc}
 801d09c:	6802      	ldr	r2, [r0, #0]
 801d09e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d0a8:	e7f7      	b.n	801d09a <_Balloc+0x66>
 801d0aa:	bf00      	nop
 801d0ac:	08020864 	.word	0x08020864
 801d0b0:	0802087b 	.word	0x0802087b

0801d0b4 <_Bfree>:
 801d0b4:	b570      	push	{r4, r5, r6, lr}
 801d0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d0b8:	4605      	mov	r5, r0
 801d0ba:	460c      	mov	r4, r1
 801d0bc:	b976      	cbnz	r6, 801d0dc <_Bfree+0x28>
 801d0be:	2010      	movs	r0, #16
 801d0c0:	f7fd fe2a 	bl	801ad18 <malloc>
 801d0c4:	4602      	mov	r2, r0
 801d0c6:	6268      	str	r0, [r5, #36]	; 0x24
 801d0c8:	b920      	cbnz	r0, 801d0d4 <_Bfree+0x20>
 801d0ca:	4b09      	ldr	r3, [pc, #36]	; (801d0f0 <_Bfree+0x3c>)
 801d0cc:	4809      	ldr	r0, [pc, #36]	; (801d0f4 <_Bfree+0x40>)
 801d0ce:	218a      	movs	r1, #138	; 0x8a
 801d0d0:	f7fd fdb8 	bl	801ac44 <__assert_func>
 801d0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0d8:	6006      	str	r6, [r0, #0]
 801d0da:	60c6      	str	r6, [r0, #12]
 801d0dc:	b13c      	cbz	r4, 801d0ee <_Bfree+0x3a>
 801d0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d0e0:	6862      	ldr	r2, [r4, #4]
 801d0e2:	68db      	ldr	r3, [r3, #12]
 801d0e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d0e8:	6021      	str	r1, [r4, #0]
 801d0ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d0ee:	bd70      	pop	{r4, r5, r6, pc}
 801d0f0:	08020864 	.word	0x08020864
 801d0f4:	0802087b 	.word	0x0802087b

0801d0f8 <__multadd>:
 801d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0fc:	690e      	ldr	r6, [r1, #16]
 801d0fe:	4607      	mov	r7, r0
 801d100:	4698      	mov	r8, r3
 801d102:	460c      	mov	r4, r1
 801d104:	f101 0014 	add.w	r0, r1, #20
 801d108:	2300      	movs	r3, #0
 801d10a:	6805      	ldr	r5, [r0, #0]
 801d10c:	b2a9      	uxth	r1, r5
 801d10e:	fb02 8101 	mla	r1, r2, r1, r8
 801d112:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d116:	0c2d      	lsrs	r5, r5, #16
 801d118:	fb02 c505 	mla	r5, r2, r5, ip
 801d11c:	b289      	uxth	r1, r1
 801d11e:	3301      	adds	r3, #1
 801d120:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d124:	429e      	cmp	r6, r3
 801d126:	f840 1b04 	str.w	r1, [r0], #4
 801d12a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d12e:	dcec      	bgt.n	801d10a <__multadd+0x12>
 801d130:	f1b8 0f00 	cmp.w	r8, #0
 801d134:	d022      	beq.n	801d17c <__multadd+0x84>
 801d136:	68a3      	ldr	r3, [r4, #8]
 801d138:	42b3      	cmp	r3, r6
 801d13a:	dc19      	bgt.n	801d170 <__multadd+0x78>
 801d13c:	6861      	ldr	r1, [r4, #4]
 801d13e:	4638      	mov	r0, r7
 801d140:	3101      	adds	r1, #1
 801d142:	f7ff ff77 	bl	801d034 <_Balloc>
 801d146:	4605      	mov	r5, r0
 801d148:	b928      	cbnz	r0, 801d156 <__multadd+0x5e>
 801d14a:	4602      	mov	r2, r0
 801d14c:	4b0d      	ldr	r3, [pc, #52]	; (801d184 <__multadd+0x8c>)
 801d14e:	480e      	ldr	r0, [pc, #56]	; (801d188 <__multadd+0x90>)
 801d150:	21b5      	movs	r1, #181	; 0xb5
 801d152:	f7fd fd77 	bl	801ac44 <__assert_func>
 801d156:	6922      	ldr	r2, [r4, #16]
 801d158:	3202      	adds	r2, #2
 801d15a:	f104 010c 	add.w	r1, r4, #12
 801d15e:	0092      	lsls	r2, r2, #2
 801d160:	300c      	adds	r0, #12
 801d162:	f7fd fde9 	bl	801ad38 <memcpy>
 801d166:	4621      	mov	r1, r4
 801d168:	4638      	mov	r0, r7
 801d16a:	f7ff ffa3 	bl	801d0b4 <_Bfree>
 801d16e:	462c      	mov	r4, r5
 801d170:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d174:	3601      	adds	r6, #1
 801d176:	f8c3 8014 	str.w	r8, [r3, #20]
 801d17a:	6126      	str	r6, [r4, #16]
 801d17c:	4620      	mov	r0, r4
 801d17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d182:	bf00      	nop
 801d184:	080207d4 	.word	0x080207d4
 801d188:	0802087b 	.word	0x0802087b

0801d18c <__s2b>:
 801d18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d190:	460c      	mov	r4, r1
 801d192:	4615      	mov	r5, r2
 801d194:	461f      	mov	r7, r3
 801d196:	2209      	movs	r2, #9
 801d198:	3308      	adds	r3, #8
 801d19a:	4606      	mov	r6, r0
 801d19c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d1a0:	2100      	movs	r1, #0
 801d1a2:	2201      	movs	r2, #1
 801d1a4:	429a      	cmp	r2, r3
 801d1a6:	db09      	blt.n	801d1bc <__s2b+0x30>
 801d1a8:	4630      	mov	r0, r6
 801d1aa:	f7ff ff43 	bl	801d034 <_Balloc>
 801d1ae:	b940      	cbnz	r0, 801d1c2 <__s2b+0x36>
 801d1b0:	4602      	mov	r2, r0
 801d1b2:	4b19      	ldr	r3, [pc, #100]	; (801d218 <__s2b+0x8c>)
 801d1b4:	4819      	ldr	r0, [pc, #100]	; (801d21c <__s2b+0x90>)
 801d1b6:	21ce      	movs	r1, #206	; 0xce
 801d1b8:	f7fd fd44 	bl	801ac44 <__assert_func>
 801d1bc:	0052      	lsls	r2, r2, #1
 801d1be:	3101      	adds	r1, #1
 801d1c0:	e7f0      	b.n	801d1a4 <__s2b+0x18>
 801d1c2:	9b08      	ldr	r3, [sp, #32]
 801d1c4:	6143      	str	r3, [r0, #20]
 801d1c6:	2d09      	cmp	r5, #9
 801d1c8:	f04f 0301 	mov.w	r3, #1
 801d1cc:	6103      	str	r3, [r0, #16]
 801d1ce:	dd16      	ble.n	801d1fe <__s2b+0x72>
 801d1d0:	f104 0909 	add.w	r9, r4, #9
 801d1d4:	46c8      	mov	r8, r9
 801d1d6:	442c      	add	r4, r5
 801d1d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d1dc:	4601      	mov	r1, r0
 801d1de:	3b30      	subs	r3, #48	; 0x30
 801d1e0:	220a      	movs	r2, #10
 801d1e2:	4630      	mov	r0, r6
 801d1e4:	f7ff ff88 	bl	801d0f8 <__multadd>
 801d1e8:	45a0      	cmp	r8, r4
 801d1ea:	d1f5      	bne.n	801d1d8 <__s2b+0x4c>
 801d1ec:	f1a5 0408 	sub.w	r4, r5, #8
 801d1f0:	444c      	add	r4, r9
 801d1f2:	1b2d      	subs	r5, r5, r4
 801d1f4:	1963      	adds	r3, r4, r5
 801d1f6:	42bb      	cmp	r3, r7
 801d1f8:	db04      	blt.n	801d204 <__s2b+0x78>
 801d1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1fe:	340a      	adds	r4, #10
 801d200:	2509      	movs	r5, #9
 801d202:	e7f6      	b.n	801d1f2 <__s2b+0x66>
 801d204:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d208:	4601      	mov	r1, r0
 801d20a:	3b30      	subs	r3, #48	; 0x30
 801d20c:	220a      	movs	r2, #10
 801d20e:	4630      	mov	r0, r6
 801d210:	f7ff ff72 	bl	801d0f8 <__multadd>
 801d214:	e7ee      	b.n	801d1f4 <__s2b+0x68>
 801d216:	bf00      	nop
 801d218:	080207d4 	.word	0x080207d4
 801d21c:	0802087b 	.word	0x0802087b

0801d220 <__hi0bits>:
 801d220:	0c03      	lsrs	r3, r0, #16
 801d222:	041b      	lsls	r3, r3, #16
 801d224:	b9d3      	cbnz	r3, 801d25c <__hi0bits+0x3c>
 801d226:	0400      	lsls	r0, r0, #16
 801d228:	2310      	movs	r3, #16
 801d22a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d22e:	bf04      	itt	eq
 801d230:	0200      	lsleq	r0, r0, #8
 801d232:	3308      	addeq	r3, #8
 801d234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d238:	bf04      	itt	eq
 801d23a:	0100      	lsleq	r0, r0, #4
 801d23c:	3304      	addeq	r3, #4
 801d23e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d242:	bf04      	itt	eq
 801d244:	0080      	lsleq	r0, r0, #2
 801d246:	3302      	addeq	r3, #2
 801d248:	2800      	cmp	r0, #0
 801d24a:	db05      	blt.n	801d258 <__hi0bits+0x38>
 801d24c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d250:	f103 0301 	add.w	r3, r3, #1
 801d254:	bf08      	it	eq
 801d256:	2320      	moveq	r3, #32
 801d258:	4618      	mov	r0, r3
 801d25a:	4770      	bx	lr
 801d25c:	2300      	movs	r3, #0
 801d25e:	e7e4      	b.n	801d22a <__hi0bits+0xa>

0801d260 <__lo0bits>:
 801d260:	6803      	ldr	r3, [r0, #0]
 801d262:	f013 0207 	ands.w	r2, r3, #7
 801d266:	4601      	mov	r1, r0
 801d268:	d00b      	beq.n	801d282 <__lo0bits+0x22>
 801d26a:	07da      	lsls	r2, r3, #31
 801d26c:	d424      	bmi.n	801d2b8 <__lo0bits+0x58>
 801d26e:	0798      	lsls	r0, r3, #30
 801d270:	bf49      	itett	mi
 801d272:	085b      	lsrmi	r3, r3, #1
 801d274:	089b      	lsrpl	r3, r3, #2
 801d276:	2001      	movmi	r0, #1
 801d278:	600b      	strmi	r3, [r1, #0]
 801d27a:	bf5c      	itt	pl
 801d27c:	600b      	strpl	r3, [r1, #0]
 801d27e:	2002      	movpl	r0, #2
 801d280:	4770      	bx	lr
 801d282:	b298      	uxth	r0, r3
 801d284:	b9b0      	cbnz	r0, 801d2b4 <__lo0bits+0x54>
 801d286:	0c1b      	lsrs	r3, r3, #16
 801d288:	2010      	movs	r0, #16
 801d28a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d28e:	bf04      	itt	eq
 801d290:	0a1b      	lsreq	r3, r3, #8
 801d292:	3008      	addeq	r0, #8
 801d294:	071a      	lsls	r2, r3, #28
 801d296:	bf04      	itt	eq
 801d298:	091b      	lsreq	r3, r3, #4
 801d29a:	3004      	addeq	r0, #4
 801d29c:	079a      	lsls	r2, r3, #30
 801d29e:	bf04      	itt	eq
 801d2a0:	089b      	lsreq	r3, r3, #2
 801d2a2:	3002      	addeq	r0, #2
 801d2a4:	07da      	lsls	r2, r3, #31
 801d2a6:	d403      	bmi.n	801d2b0 <__lo0bits+0x50>
 801d2a8:	085b      	lsrs	r3, r3, #1
 801d2aa:	f100 0001 	add.w	r0, r0, #1
 801d2ae:	d005      	beq.n	801d2bc <__lo0bits+0x5c>
 801d2b0:	600b      	str	r3, [r1, #0]
 801d2b2:	4770      	bx	lr
 801d2b4:	4610      	mov	r0, r2
 801d2b6:	e7e8      	b.n	801d28a <__lo0bits+0x2a>
 801d2b8:	2000      	movs	r0, #0
 801d2ba:	4770      	bx	lr
 801d2bc:	2020      	movs	r0, #32
 801d2be:	4770      	bx	lr

0801d2c0 <__i2b>:
 801d2c0:	b510      	push	{r4, lr}
 801d2c2:	460c      	mov	r4, r1
 801d2c4:	2101      	movs	r1, #1
 801d2c6:	f7ff feb5 	bl	801d034 <_Balloc>
 801d2ca:	4602      	mov	r2, r0
 801d2cc:	b928      	cbnz	r0, 801d2da <__i2b+0x1a>
 801d2ce:	4b05      	ldr	r3, [pc, #20]	; (801d2e4 <__i2b+0x24>)
 801d2d0:	4805      	ldr	r0, [pc, #20]	; (801d2e8 <__i2b+0x28>)
 801d2d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d2d6:	f7fd fcb5 	bl	801ac44 <__assert_func>
 801d2da:	2301      	movs	r3, #1
 801d2dc:	6144      	str	r4, [r0, #20]
 801d2de:	6103      	str	r3, [r0, #16]
 801d2e0:	bd10      	pop	{r4, pc}
 801d2e2:	bf00      	nop
 801d2e4:	080207d4 	.word	0x080207d4
 801d2e8:	0802087b 	.word	0x0802087b

0801d2ec <__multiply>:
 801d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f0:	4614      	mov	r4, r2
 801d2f2:	690a      	ldr	r2, [r1, #16]
 801d2f4:	6923      	ldr	r3, [r4, #16]
 801d2f6:	429a      	cmp	r2, r3
 801d2f8:	bfb8      	it	lt
 801d2fa:	460b      	movlt	r3, r1
 801d2fc:	460d      	mov	r5, r1
 801d2fe:	bfbc      	itt	lt
 801d300:	4625      	movlt	r5, r4
 801d302:	461c      	movlt	r4, r3
 801d304:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d308:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d30c:	68ab      	ldr	r3, [r5, #8]
 801d30e:	6869      	ldr	r1, [r5, #4]
 801d310:	eb0a 0709 	add.w	r7, sl, r9
 801d314:	42bb      	cmp	r3, r7
 801d316:	b085      	sub	sp, #20
 801d318:	bfb8      	it	lt
 801d31a:	3101      	addlt	r1, #1
 801d31c:	f7ff fe8a 	bl	801d034 <_Balloc>
 801d320:	b930      	cbnz	r0, 801d330 <__multiply+0x44>
 801d322:	4602      	mov	r2, r0
 801d324:	4b42      	ldr	r3, [pc, #264]	; (801d430 <__multiply+0x144>)
 801d326:	4843      	ldr	r0, [pc, #268]	; (801d434 <__multiply+0x148>)
 801d328:	f240 115d 	movw	r1, #349	; 0x15d
 801d32c:	f7fd fc8a 	bl	801ac44 <__assert_func>
 801d330:	f100 0614 	add.w	r6, r0, #20
 801d334:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d338:	4633      	mov	r3, r6
 801d33a:	2200      	movs	r2, #0
 801d33c:	4543      	cmp	r3, r8
 801d33e:	d31e      	bcc.n	801d37e <__multiply+0x92>
 801d340:	f105 0c14 	add.w	ip, r5, #20
 801d344:	f104 0314 	add.w	r3, r4, #20
 801d348:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d34c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d350:	9202      	str	r2, [sp, #8]
 801d352:	ebac 0205 	sub.w	r2, ip, r5
 801d356:	3a15      	subs	r2, #21
 801d358:	f022 0203 	bic.w	r2, r2, #3
 801d35c:	3204      	adds	r2, #4
 801d35e:	f105 0115 	add.w	r1, r5, #21
 801d362:	458c      	cmp	ip, r1
 801d364:	bf38      	it	cc
 801d366:	2204      	movcc	r2, #4
 801d368:	9201      	str	r2, [sp, #4]
 801d36a:	9a02      	ldr	r2, [sp, #8]
 801d36c:	9303      	str	r3, [sp, #12]
 801d36e:	429a      	cmp	r2, r3
 801d370:	d808      	bhi.n	801d384 <__multiply+0x98>
 801d372:	2f00      	cmp	r7, #0
 801d374:	dc55      	bgt.n	801d422 <__multiply+0x136>
 801d376:	6107      	str	r7, [r0, #16]
 801d378:	b005      	add	sp, #20
 801d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d37e:	f843 2b04 	str.w	r2, [r3], #4
 801d382:	e7db      	b.n	801d33c <__multiply+0x50>
 801d384:	f8b3 a000 	ldrh.w	sl, [r3]
 801d388:	f1ba 0f00 	cmp.w	sl, #0
 801d38c:	d020      	beq.n	801d3d0 <__multiply+0xe4>
 801d38e:	f105 0e14 	add.w	lr, r5, #20
 801d392:	46b1      	mov	r9, r6
 801d394:	2200      	movs	r2, #0
 801d396:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d39a:	f8d9 b000 	ldr.w	fp, [r9]
 801d39e:	b2a1      	uxth	r1, r4
 801d3a0:	fa1f fb8b 	uxth.w	fp, fp
 801d3a4:	fb0a b101 	mla	r1, sl, r1, fp
 801d3a8:	4411      	add	r1, r2
 801d3aa:	f8d9 2000 	ldr.w	r2, [r9]
 801d3ae:	0c24      	lsrs	r4, r4, #16
 801d3b0:	0c12      	lsrs	r2, r2, #16
 801d3b2:	fb0a 2404 	mla	r4, sl, r4, r2
 801d3b6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d3ba:	b289      	uxth	r1, r1
 801d3bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d3c0:	45f4      	cmp	ip, lr
 801d3c2:	f849 1b04 	str.w	r1, [r9], #4
 801d3c6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d3ca:	d8e4      	bhi.n	801d396 <__multiply+0xaa>
 801d3cc:	9901      	ldr	r1, [sp, #4]
 801d3ce:	5072      	str	r2, [r6, r1]
 801d3d0:	9a03      	ldr	r2, [sp, #12]
 801d3d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d3d6:	3304      	adds	r3, #4
 801d3d8:	f1b9 0f00 	cmp.w	r9, #0
 801d3dc:	d01f      	beq.n	801d41e <__multiply+0x132>
 801d3de:	6834      	ldr	r4, [r6, #0]
 801d3e0:	f105 0114 	add.w	r1, r5, #20
 801d3e4:	46b6      	mov	lr, r6
 801d3e6:	f04f 0a00 	mov.w	sl, #0
 801d3ea:	880a      	ldrh	r2, [r1, #0]
 801d3ec:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d3f0:	fb09 b202 	mla	r2, r9, r2, fp
 801d3f4:	4492      	add	sl, r2
 801d3f6:	b2a4      	uxth	r4, r4
 801d3f8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d3fc:	f84e 4b04 	str.w	r4, [lr], #4
 801d400:	f851 4b04 	ldr.w	r4, [r1], #4
 801d404:	f8be 2000 	ldrh.w	r2, [lr]
 801d408:	0c24      	lsrs	r4, r4, #16
 801d40a:	fb09 2404 	mla	r4, r9, r4, r2
 801d40e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d412:	458c      	cmp	ip, r1
 801d414:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d418:	d8e7      	bhi.n	801d3ea <__multiply+0xfe>
 801d41a:	9a01      	ldr	r2, [sp, #4]
 801d41c:	50b4      	str	r4, [r6, r2]
 801d41e:	3604      	adds	r6, #4
 801d420:	e7a3      	b.n	801d36a <__multiply+0x7e>
 801d422:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d426:	2b00      	cmp	r3, #0
 801d428:	d1a5      	bne.n	801d376 <__multiply+0x8a>
 801d42a:	3f01      	subs	r7, #1
 801d42c:	e7a1      	b.n	801d372 <__multiply+0x86>
 801d42e:	bf00      	nop
 801d430:	080207d4 	.word	0x080207d4
 801d434:	0802087b 	.word	0x0802087b

0801d438 <__pow5mult>:
 801d438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d43c:	4615      	mov	r5, r2
 801d43e:	f012 0203 	ands.w	r2, r2, #3
 801d442:	4606      	mov	r6, r0
 801d444:	460f      	mov	r7, r1
 801d446:	d007      	beq.n	801d458 <__pow5mult+0x20>
 801d448:	4c25      	ldr	r4, [pc, #148]	; (801d4e0 <__pow5mult+0xa8>)
 801d44a:	3a01      	subs	r2, #1
 801d44c:	2300      	movs	r3, #0
 801d44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d452:	f7ff fe51 	bl	801d0f8 <__multadd>
 801d456:	4607      	mov	r7, r0
 801d458:	10ad      	asrs	r5, r5, #2
 801d45a:	d03d      	beq.n	801d4d8 <__pow5mult+0xa0>
 801d45c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d45e:	b97c      	cbnz	r4, 801d480 <__pow5mult+0x48>
 801d460:	2010      	movs	r0, #16
 801d462:	f7fd fc59 	bl	801ad18 <malloc>
 801d466:	4602      	mov	r2, r0
 801d468:	6270      	str	r0, [r6, #36]	; 0x24
 801d46a:	b928      	cbnz	r0, 801d478 <__pow5mult+0x40>
 801d46c:	4b1d      	ldr	r3, [pc, #116]	; (801d4e4 <__pow5mult+0xac>)
 801d46e:	481e      	ldr	r0, [pc, #120]	; (801d4e8 <__pow5mult+0xb0>)
 801d470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d474:	f7fd fbe6 	bl	801ac44 <__assert_func>
 801d478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d47c:	6004      	str	r4, [r0, #0]
 801d47e:	60c4      	str	r4, [r0, #12]
 801d480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d488:	b94c      	cbnz	r4, 801d49e <__pow5mult+0x66>
 801d48a:	f240 2171 	movw	r1, #625	; 0x271
 801d48e:	4630      	mov	r0, r6
 801d490:	f7ff ff16 	bl	801d2c0 <__i2b>
 801d494:	2300      	movs	r3, #0
 801d496:	f8c8 0008 	str.w	r0, [r8, #8]
 801d49a:	4604      	mov	r4, r0
 801d49c:	6003      	str	r3, [r0, #0]
 801d49e:	f04f 0900 	mov.w	r9, #0
 801d4a2:	07eb      	lsls	r3, r5, #31
 801d4a4:	d50a      	bpl.n	801d4bc <__pow5mult+0x84>
 801d4a6:	4639      	mov	r1, r7
 801d4a8:	4622      	mov	r2, r4
 801d4aa:	4630      	mov	r0, r6
 801d4ac:	f7ff ff1e 	bl	801d2ec <__multiply>
 801d4b0:	4639      	mov	r1, r7
 801d4b2:	4680      	mov	r8, r0
 801d4b4:	4630      	mov	r0, r6
 801d4b6:	f7ff fdfd 	bl	801d0b4 <_Bfree>
 801d4ba:	4647      	mov	r7, r8
 801d4bc:	106d      	asrs	r5, r5, #1
 801d4be:	d00b      	beq.n	801d4d8 <__pow5mult+0xa0>
 801d4c0:	6820      	ldr	r0, [r4, #0]
 801d4c2:	b938      	cbnz	r0, 801d4d4 <__pow5mult+0x9c>
 801d4c4:	4622      	mov	r2, r4
 801d4c6:	4621      	mov	r1, r4
 801d4c8:	4630      	mov	r0, r6
 801d4ca:	f7ff ff0f 	bl	801d2ec <__multiply>
 801d4ce:	6020      	str	r0, [r4, #0]
 801d4d0:	f8c0 9000 	str.w	r9, [r0]
 801d4d4:	4604      	mov	r4, r0
 801d4d6:	e7e4      	b.n	801d4a2 <__pow5mult+0x6a>
 801d4d8:	4638      	mov	r0, r7
 801d4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4de:	bf00      	nop
 801d4e0:	080209d0 	.word	0x080209d0
 801d4e4:	08020864 	.word	0x08020864
 801d4e8:	0802087b 	.word	0x0802087b

0801d4ec <__lshift>:
 801d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4f0:	460c      	mov	r4, r1
 801d4f2:	6849      	ldr	r1, [r1, #4]
 801d4f4:	6923      	ldr	r3, [r4, #16]
 801d4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d4fa:	68a3      	ldr	r3, [r4, #8]
 801d4fc:	4607      	mov	r7, r0
 801d4fe:	4691      	mov	r9, r2
 801d500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d504:	f108 0601 	add.w	r6, r8, #1
 801d508:	42b3      	cmp	r3, r6
 801d50a:	db0b      	blt.n	801d524 <__lshift+0x38>
 801d50c:	4638      	mov	r0, r7
 801d50e:	f7ff fd91 	bl	801d034 <_Balloc>
 801d512:	4605      	mov	r5, r0
 801d514:	b948      	cbnz	r0, 801d52a <__lshift+0x3e>
 801d516:	4602      	mov	r2, r0
 801d518:	4b28      	ldr	r3, [pc, #160]	; (801d5bc <__lshift+0xd0>)
 801d51a:	4829      	ldr	r0, [pc, #164]	; (801d5c0 <__lshift+0xd4>)
 801d51c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d520:	f7fd fb90 	bl	801ac44 <__assert_func>
 801d524:	3101      	adds	r1, #1
 801d526:	005b      	lsls	r3, r3, #1
 801d528:	e7ee      	b.n	801d508 <__lshift+0x1c>
 801d52a:	2300      	movs	r3, #0
 801d52c:	f100 0114 	add.w	r1, r0, #20
 801d530:	f100 0210 	add.w	r2, r0, #16
 801d534:	4618      	mov	r0, r3
 801d536:	4553      	cmp	r3, sl
 801d538:	db33      	blt.n	801d5a2 <__lshift+0xb6>
 801d53a:	6920      	ldr	r0, [r4, #16]
 801d53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d540:	f104 0314 	add.w	r3, r4, #20
 801d544:	f019 091f 	ands.w	r9, r9, #31
 801d548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d550:	d02b      	beq.n	801d5aa <__lshift+0xbe>
 801d552:	f1c9 0e20 	rsb	lr, r9, #32
 801d556:	468a      	mov	sl, r1
 801d558:	2200      	movs	r2, #0
 801d55a:	6818      	ldr	r0, [r3, #0]
 801d55c:	fa00 f009 	lsl.w	r0, r0, r9
 801d560:	4302      	orrs	r2, r0
 801d562:	f84a 2b04 	str.w	r2, [sl], #4
 801d566:	f853 2b04 	ldr.w	r2, [r3], #4
 801d56a:	459c      	cmp	ip, r3
 801d56c:	fa22 f20e 	lsr.w	r2, r2, lr
 801d570:	d8f3      	bhi.n	801d55a <__lshift+0x6e>
 801d572:	ebac 0304 	sub.w	r3, ip, r4
 801d576:	3b15      	subs	r3, #21
 801d578:	f023 0303 	bic.w	r3, r3, #3
 801d57c:	3304      	adds	r3, #4
 801d57e:	f104 0015 	add.w	r0, r4, #21
 801d582:	4584      	cmp	ip, r0
 801d584:	bf38      	it	cc
 801d586:	2304      	movcc	r3, #4
 801d588:	50ca      	str	r2, [r1, r3]
 801d58a:	b10a      	cbz	r2, 801d590 <__lshift+0xa4>
 801d58c:	f108 0602 	add.w	r6, r8, #2
 801d590:	3e01      	subs	r6, #1
 801d592:	4638      	mov	r0, r7
 801d594:	612e      	str	r6, [r5, #16]
 801d596:	4621      	mov	r1, r4
 801d598:	f7ff fd8c 	bl	801d0b4 <_Bfree>
 801d59c:	4628      	mov	r0, r5
 801d59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d5a6:	3301      	adds	r3, #1
 801d5a8:	e7c5      	b.n	801d536 <__lshift+0x4a>
 801d5aa:	3904      	subs	r1, #4
 801d5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801d5b4:	459c      	cmp	ip, r3
 801d5b6:	d8f9      	bhi.n	801d5ac <__lshift+0xc0>
 801d5b8:	e7ea      	b.n	801d590 <__lshift+0xa4>
 801d5ba:	bf00      	nop
 801d5bc:	080207d4 	.word	0x080207d4
 801d5c0:	0802087b 	.word	0x0802087b

0801d5c4 <__mcmp>:
 801d5c4:	b530      	push	{r4, r5, lr}
 801d5c6:	6902      	ldr	r2, [r0, #16]
 801d5c8:	690c      	ldr	r4, [r1, #16]
 801d5ca:	1b12      	subs	r2, r2, r4
 801d5cc:	d10e      	bne.n	801d5ec <__mcmp+0x28>
 801d5ce:	f100 0314 	add.w	r3, r0, #20
 801d5d2:	3114      	adds	r1, #20
 801d5d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d5d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d5dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d5e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d5e4:	42a5      	cmp	r5, r4
 801d5e6:	d003      	beq.n	801d5f0 <__mcmp+0x2c>
 801d5e8:	d305      	bcc.n	801d5f6 <__mcmp+0x32>
 801d5ea:	2201      	movs	r2, #1
 801d5ec:	4610      	mov	r0, r2
 801d5ee:	bd30      	pop	{r4, r5, pc}
 801d5f0:	4283      	cmp	r3, r0
 801d5f2:	d3f3      	bcc.n	801d5dc <__mcmp+0x18>
 801d5f4:	e7fa      	b.n	801d5ec <__mcmp+0x28>
 801d5f6:	f04f 32ff 	mov.w	r2, #4294967295
 801d5fa:	e7f7      	b.n	801d5ec <__mcmp+0x28>

0801d5fc <__mdiff>:
 801d5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d600:	460c      	mov	r4, r1
 801d602:	4606      	mov	r6, r0
 801d604:	4611      	mov	r1, r2
 801d606:	4620      	mov	r0, r4
 801d608:	4617      	mov	r7, r2
 801d60a:	f7ff ffdb 	bl	801d5c4 <__mcmp>
 801d60e:	1e05      	subs	r5, r0, #0
 801d610:	d110      	bne.n	801d634 <__mdiff+0x38>
 801d612:	4629      	mov	r1, r5
 801d614:	4630      	mov	r0, r6
 801d616:	f7ff fd0d 	bl	801d034 <_Balloc>
 801d61a:	b930      	cbnz	r0, 801d62a <__mdiff+0x2e>
 801d61c:	4b39      	ldr	r3, [pc, #228]	; (801d704 <__mdiff+0x108>)
 801d61e:	4602      	mov	r2, r0
 801d620:	f240 2132 	movw	r1, #562	; 0x232
 801d624:	4838      	ldr	r0, [pc, #224]	; (801d708 <__mdiff+0x10c>)
 801d626:	f7fd fb0d 	bl	801ac44 <__assert_func>
 801d62a:	2301      	movs	r3, #1
 801d62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d634:	bfa4      	itt	ge
 801d636:	463b      	movge	r3, r7
 801d638:	4627      	movge	r7, r4
 801d63a:	4630      	mov	r0, r6
 801d63c:	6879      	ldr	r1, [r7, #4]
 801d63e:	bfa6      	itte	ge
 801d640:	461c      	movge	r4, r3
 801d642:	2500      	movge	r5, #0
 801d644:	2501      	movlt	r5, #1
 801d646:	f7ff fcf5 	bl	801d034 <_Balloc>
 801d64a:	b920      	cbnz	r0, 801d656 <__mdiff+0x5a>
 801d64c:	4b2d      	ldr	r3, [pc, #180]	; (801d704 <__mdiff+0x108>)
 801d64e:	4602      	mov	r2, r0
 801d650:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d654:	e7e6      	b.n	801d624 <__mdiff+0x28>
 801d656:	693e      	ldr	r6, [r7, #16]
 801d658:	60c5      	str	r5, [r0, #12]
 801d65a:	6925      	ldr	r5, [r4, #16]
 801d65c:	f107 0114 	add.w	r1, r7, #20
 801d660:	f104 0914 	add.w	r9, r4, #20
 801d664:	f100 0e14 	add.w	lr, r0, #20
 801d668:	f107 0210 	add.w	r2, r7, #16
 801d66c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d670:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d674:	46f2      	mov	sl, lr
 801d676:	2700      	movs	r7, #0
 801d678:	f859 3b04 	ldr.w	r3, [r9], #4
 801d67c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d680:	fa1f f883 	uxth.w	r8, r3
 801d684:	fa17 f78b 	uxtah	r7, r7, fp
 801d688:	0c1b      	lsrs	r3, r3, #16
 801d68a:	eba7 0808 	sub.w	r8, r7, r8
 801d68e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d692:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d696:	fa1f f888 	uxth.w	r8, r8
 801d69a:	141f      	asrs	r7, r3, #16
 801d69c:	454d      	cmp	r5, r9
 801d69e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d6a2:	f84a 3b04 	str.w	r3, [sl], #4
 801d6a6:	d8e7      	bhi.n	801d678 <__mdiff+0x7c>
 801d6a8:	1b2b      	subs	r3, r5, r4
 801d6aa:	3b15      	subs	r3, #21
 801d6ac:	f023 0303 	bic.w	r3, r3, #3
 801d6b0:	3304      	adds	r3, #4
 801d6b2:	3415      	adds	r4, #21
 801d6b4:	42a5      	cmp	r5, r4
 801d6b6:	bf38      	it	cc
 801d6b8:	2304      	movcc	r3, #4
 801d6ba:	4419      	add	r1, r3
 801d6bc:	4473      	add	r3, lr
 801d6be:	469e      	mov	lr, r3
 801d6c0:	460d      	mov	r5, r1
 801d6c2:	4565      	cmp	r5, ip
 801d6c4:	d30e      	bcc.n	801d6e4 <__mdiff+0xe8>
 801d6c6:	f10c 0203 	add.w	r2, ip, #3
 801d6ca:	1a52      	subs	r2, r2, r1
 801d6cc:	f022 0203 	bic.w	r2, r2, #3
 801d6d0:	3903      	subs	r1, #3
 801d6d2:	458c      	cmp	ip, r1
 801d6d4:	bf38      	it	cc
 801d6d6:	2200      	movcc	r2, #0
 801d6d8:	441a      	add	r2, r3
 801d6da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d6de:	b17b      	cbz	r3, 801d700 <__mdiff+0x104>
 801d6e0:	6106      	str	r6, [r0, #16]
 801d6e2:	e7a5      	b.n	801d630 <__mdiff+0x34>
 801d6e4:	f855 8b04 	ldr.w	r8, [r5], #4
 801d6e8:	fa17 f488 	uxtah	r4, r7, r8
 801d6ec:	1422      	asrs	r2, r4, #16
 801d6ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d6f2:	b2a4      	uxth	r4, r4
 801d6f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d6f8:	f84e 4b04 	str.w	r4, [lr], #4
 801d6fc:	1417      	asrs	r7, r2, #16
 801d6fe:	e7e0      	b.n	801d6c2 <__mdiff+0xc6>
 801d700:	3e01      	subs	r6, #1
 801d702:	e7ea      	b.n	801d6da <__mdiff+0xde>
 801d704:	080207d4 	.word	0x080207d4
 801d708:	0802087b 	.word	0x0802087b

0801d70c <__ulp>:
 801d70c:	b082      	sub	sp, #8
 801d70e:	ed8d 0b00 	vstr	d0, [sp]
 801d712:	9b01      	ldr	r3, [sp, #4]
 801d714:	4912      	ldr	r1, [pc, #72]	; (801d760 <__ulp+0x54>)
 801d716:	4019      	ands	r1, r3
 801d718:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d71c:	2900      	cmp	r1, #0
 801d71e:	dd05      	ble.n	801d72c <__ulp+0x20>
 801d720:	2200      	movs	r2, #0
 801d722:	460b      	mov	r3, r1
 801d724:	ec43 2b10 	vmov	d0, r2, r3
 801d728:	b002      	add	sp, #8
 801d72a:	4770      	bx	lr
 801d72c:	4249      	negs	r1, r1
 801d72e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d732:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d736:	f04f 0200 	mov.w	r2, #0
 801d73a:	f04f 0300 	mov.w	r3, #0
 801d73e:	da04      	bge.n	801d74a <__ulp+0x3e>
 801d740:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d744:	fa41 f300 	asr.w	r3, r1, r0
 801d748:	e7ec      	b.n	801d724 <__ulp+0x18>
 801d74a:	f1a0 0114 	sub.w	r1, r0, #20
 801d74e:	291e      	cmp	r1, #30
 801d750:	bfda      	itte	le
 801d752:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d756:	fa20 f101 	lsrle.w	r1, r0, r1
 801d75a:	2101      	movgt	r1, #1
 801d75c:	460a      	mov	r2, r1
 801d75e:	e7e1      	b.n	801d724 <__ulp+0x18>
 801d760:	7ff00000 	.word	0x7ff00000

0801d764 <__b2d>:
 801d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d766:	6905      	ldr	r5, [r0, #16]
 801d768:	f100 0714 	add.w	r7, r0, #20
 801d76c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d770:	1f2e      	subs	r6, r5, #4
 801d772:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d776:	4620      	mov	r0, r4
 801d778:	f7ff fd52 	bl	801d220 <__hi0bits>
 801d77c:	f1c0 0320 	rsb	r3, r0, #32
 801d780:	280a      	cmp	r0, #10
 801d782:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d800 <__b2d+0x9c>
 801d786:	600b      	str	r3, [r1, #0]
 801d788:	dc14      	bgt.n	801d7b4 <__b2d+0x50>
 801d78a:	f1c0 0e0b 	rsb	lr, r0, #11
 801d78e:	fa24 f10e 	lsr.w	r1, r4, lr
 801d792:	42b7      	cmp	r7, r6
 801d794:	ea41 030c 	orr.w	r3, r1, ip
 801d798:	bf34      	ite	cc
 801d79a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d79e:	2100      	movcs	r1, #0
 801d7a0:	3015      	adds	r0, #21
 801d7a2:	fa04 f000 	lsl.w	r0, r4, r0
 801d7a6:	fa21 f10e 	lsr.w	r1, r1, lr
 801d7aa:	ea40 0201 	orr.w	r2, r0, r1
 801d7ae:	ec43 2b10 	vmov	d0, r2, r3
 801d7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7b4:	42b7      	cmp	r7, r6
 801d7b6:	bf3a      	itte	cc
 801d7b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d7bc:	f1a5 0608 	subcc.w	r6, r5, #8
 801d7c0:	2100      	movcs	r1, #0
 801d7c2:	380b      	subs	r0, #11
 801d7c4:	d017      	beq.n	801d7f6 <__b2d+0x92>
 801d7c6:	f1c0 0c20 	rsb	ip, r0, #32
 801d7ca:	fa04 f500 	lsl.w	r5, r4, r0
 801d7ce:	42be      	cmp	r6, r7
 801d7d0:	fa21 f40c 	lsr.w	r4, r1, ip
 801d7d4:	ea45 0504 	orr.w	r5, r5, r4
 801d7d8:	bf8c      	ite	hi
 801d7da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d7de:	2400      	movls	r4, #0
 801d7e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d7e4:	fa01 f000 	lsl.w	r0, r1, r0
 801d7e8:	fa24 f40c 	lsr.w	r4, r4, ip
 801d7ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d7f0:	ea40 0204 	orr.w	r2, r0, r4
 801d7f4:	e7db      	b.n	801d7ae <__b2d+0x4a>
 801d7f6:	ea44 030c 	orr.w	r3, r4, ip
 801d7fa:	460a      	mov	r2, r1
 801d7fc:	e7d7      	b.n	801d7ae <__b2d+0x4a>
 801d7fe:	bf00      	nop
 801d800:	3ff00000 	.word	0x3ff00000

0801d804 <__d2b>:
 801d804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d808:	4689      	mov	r9, r1
 801d80a:	2101      	movs	r1, #1
 801d80c:	ec57 6b10 	vmov	r6, r7, d0
 801d810:	4690      	mov	r8, r2
 801d812:	f7ff fc0f 	bl	801d034 <_Balloc>
 801d816:	4604      	mov	r4, r0
 801d818:	b930      	cbnz	r0, 801d828 <__d2b+0x24>
 801d81a:	4602      	mov	r2, r0
 801d81c:	4b25      	ldr	r3, [pc, #148]	; (801d8b4 <__d2b+0xb0>)
 801d81e:	4826      	ldr	r0, [pc, #152]	; (801d8b8 <__d2b+0xb4>)
 801d820:	f240 310a 	movw	r1, #778	; 0x30a
 801d824:	f7fd fa0e 	bl	801ac44 <__assert_func>
 801d828:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d82c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d830:	bb35      	cbnz	r5, 801d880 <__d2b+0x7c>
 801d832:	2e00      	cmp	r6, #0
 801d834:	9301      	str	r3, [sp, #4]
 801d836:	d028      	beq.n	801d88a <__d2b+0x86>
 801d838:	4668      	mov	r0, sp
 801d83a:	9600      	str	r6, [sp, #0]
 801d83c:	f7ff fd10 	bl	801d260 <__lo0bits>
 801d840:	9900      	ldr	r1, [sp, #0]
 801d842:	b300      	cbz	r0, 801d886 <__d2b+0x82>
 801d844:	9a01      	ldr	r2, [sp, #4]
 801d846:	f1c0 0320 	rsb	r3, r0, #32
 801d84a:	fa02 f303 	lsl.w	r3, r2, r3
 801d84e:	430b      	orrs	r3, r1
 801d850:	40c2      	lsrs	r2, r0
 801d852:	6163      	str	r3, [r4, #20]
 801d854:	9201      	str	r2, [sp, #4]
 801d856:	9b01      	ldr	r3, [sp, #4]
 801d858:	61a3      	str	r3, [r4, #24]
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	bf14      	ite	ne
 801d85e:	2202      	movne	r2, #2
 801d860:	2201      	moveq	r2, #1
 801d862:	6122      	str	r2, [r4, #16]
 801d864:	b1d5      	cbz	r5, 801d89c <__d2b+0x98>
 801d866:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d86a:	4405      	add	r5, r0
 801d86c:	f8c9 5000 	str.w	r5, [r9]
 801d870:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d874:	f8c8 0000 	str.w	r0, [r8]
 801d878:	4620      	mov	r0, r4
 801d87a:	b003      	add	sp, #12
 801d87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d884:	e7d5      	b.n	801d832 <__d2b+0x2e>
 801d886:	6161      	str	r1, [r4, #20]
 801d888:	e7e5      	b.n	801d856 <__d2b+0x52>
 801d88a:	a801      	add	r0, sp, #4
 801d88c:	f7ff fce8 	bl	801d260 <__lo0bits>
 801d890:	9b01      	ldr	r3, [sp, #4]
 801d892:	6163      	str	r3, [r4, #20]
 801d894:	2201      	movs	r2, #1
 801d896:	6122      	str	r2, [r4, #16]
 801d898:	3020      	adds	r0, #32
 801d89a:	e7e3      	b.n	801d864 <__d2b+0x60>
 801d89c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d8a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d8a4:	f8c9 0000 	str.w	r0, [r9]
 801d8a8:	6918      	ldr	r0, [r3, #16]
 801d8aa:	f7ff fcb9 	bl	801d220 <__hi0bits>
 801d8ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d8b2:	e7df      	b.n	801d874 <__d2b+0x70>
 801d8b4:	080207d4 	.word	0x080207d4
 801d8b8:	0802087b 	.word	0x0802087b

0801d8bc <__ratio>:
 801d8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c0:	4688      	mov	r8, r1
 801d8c2:	4669      	mov	r1, sp
 801d8c4:	4681      	mov	r9, r0
 801d8c6:	f7ff ff4d 	bl	801d764 <__b2d>
 801d8ca:	a901      	add	r1, sp, #4
 801d8cc:	4640      	mov	r0, r8
 801d8ce:	ec55 4b10 	vmov	r4, r5, d0
 801d8d2:	f7ff ff47 	bl	801d764 <__b2d>
 801d8d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d8da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d8de:	eba3 0c02 	sub.w	ip, r3, r2
 801d8e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d8e6:	1a9b      	subs	r3, r3, r2
 801d8e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d8ec:	ec51 0b10 	vmov	r0, r1, d0
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	bfd6      	itet	le
 801d8f4:	460a      	movle	r2, r1
 801d8f6:	462a      	movgt	r2, r5
 801d8f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d8fc:	468b      	mov	fp, r1
 801d8fe:	462f      	mov	r7, r5
 801d900:	bfd4      	ite	le
 801d902:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d906:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d90a:	4620      	mov	r0, r4
 801d90c:	ee10 2a10 	vmov	r2, s0
 801d910:	465b      	mov	r3, fp
 801d912:	4639      	mov	r1, r7
 801d914:	f7e2 ffb4 	bl	8000880 <__aeabi_ddiv>
 801d918:	ec41 0b10 	vmov	d0, r0, r1
 801d91c:	b003      	add	sp, #12
 801d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d922 <__copybits>:
 801d922:	3901      	subs	r1, #1
 801d924:	b570      	push	{r4, r5, r6, lr}
 801d926:	1149      	asrs	r1, r1, #5
 801d928:	6914      	ldr	r4, [r2, #16]
 801d92a:	3101      	adds	r1, #1
 801d92c:	f102 0314 	add.w	r3, r2, #20
 801d930:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d934:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d938:	1f05      	subs	r5, r0, #4
 801d93a:	42a3      	cmp	r3, r4
 801d93c:	d30c      	bcc.n	801d958 <__copybits+0x36>
 801d93e:	1aa3      	subs	r3, r4, r2
 801d940:	3b11      	subs	r3, #17
 801d942:	f023 0303 	bic.w	r3, r3, #3
 801d946:	3211      	adds	r2, #17
 801d948:	42a2      	cmp	r2, r4
 801d94a:	bf88      	it	hi
 801d94c:	2300      	movhi	r3, #0
 801d94e:	4418      	add	r0, r3
 801d950:	2300      	movs	r3, #0
 801d952:	4288      	cmp	r0, r1
 801d954:	d305      	bcc.n	801d962 <__copybits+0x40>
 801d956:	bd70      	pop	{r4, r5, r6, pc}
 801d958:	f853 6b04 	ldr.w	r6, [r3], #4
 801d95c:	f845 6f04 	str.w	r6, [r5, #4]!
 801d960:	e7eb      	b.n	801d93a <__copybits+0x18>
 801d962:	f840 3b04 	str.w	r3, [r0], #4
 801d966:	e7f4      	b.n	801d952 <__copybits+0x30>

0801d968 <__any_on>:
 801d968:	f100 0214 	add.w	r2, r0, #20
 801d96c:	6900      	ldr	r0, [r0, #16]
 801d96e:	114b      	asrs	r3, r1, #5
 801d970:	4298      	cmp	r0, r3
 801d972:	b510      	push	{r4, lr}
 801d974:	db11      	blt.n	801d99a <__any_on+0x32>
 801d976:	dd0a      	ble.n	801d98e <__any_on+0x26>
 801d978:	f011 011f 	ands.w	r1, r1, #31
 801d97c:	d007      	beq.n	801d98e <__any_on+0x26>
 801d97e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d982:	fa24 f001 	lsr.w	r0, r4, r1
 801d986:	fa00 f101 	lsl.w	r1, r0, r1
 801d98a:	428c      	cmp	r4, r1
 801d98c:	d10b      	bne.n	801d9a6 <__any_on+0x3e>
 801d98e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d992:	4293      	cmp	r3, r2
 801d994:	d803      	bhi.n	801d99e <__any_on+0x36>
 801d996:	2000      	movs	r0, #0
 801d998:	bd10      	pop	{r4, pc}
 801d99a:	4603      	mov	r3, r0
 801d99c:	e7f7      	b.n	801d98e <__any_on+0x26>
 801d99e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d9a2:	2900      	cmp	r1, #0
 801d9a4:	d0f5      	beq.n	801d992 <__any_on+0x2a>
 801d9a6:	2001      	movs	r0, #1
 801d9a8:	e7f6      	b.n	801d998 <__any_on+0x30>

0801d9aa <__sread>:
 801d9aa:	b510      	push	{r4, lr}
 801d9ac:	460c      	mov	r4, r1
 801d9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9b2:	f000 f8a1 	bl	801daf8 <_read_r>
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	bfab      	itete	ge
 801d9ba:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d9bc:	89a3      	ldrhlt	r3, [r4, #12]
 801d9be:	181b      	addge	r3, r3, r0
 801d9c0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d9c4:	bfac      	ite	ge
 801d9c6:	6563      	strge	r3, [r4, #84]	; 0x54
 801d9c8:	81a3      	strhlt	r3, [r4, #12]
 801d9ca:	bd10      	pop	{r4, pc}

0801d9cc <__swrite>:
 801d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9d0:	461f      	mov	r7, r3
 801d9d2:	898b      	ldrh	r3, [r1, #12]
 801d9d4:	05db      	lsls	r3, r3, #23
 801d9d6:	4605      	mov	r5, r0
 801d9d8:	460c      	mov	r4, r1
 801d9da:	4616      	mov	r6, r2
 801d9dc:	d505      	bpl.n	801d9ea <__swrite+0x1e>
 801d9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9e2:	2302      	movs	r3, #2
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	f000 f875 	bl	801dad4 <_lseek_r>
 801d9ea:	89a3      	ldrh	r3, [r4, #12]
 801d9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9f4:	81a3      	strh	r3, [r4, #12]
 801d9f6:	4632      	mov	r2, r6
 801d9f8:	463b      	mov	r3, r7
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da00:	f000 b824 	b.w	801da4c <_write_r>

0801da04 <__sseek>:
 801da04:	b510      	push	{r4, lr}
 801da06:	460c      	mov	r4, r1
 801da08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da0c:	f000 f862 	bl	801dad4 <_lseek_r>
 801da10:	1c43      	adds	r3, r0, #1
 801da12:	89a3      	ldrh	r3, [r4, #12]
 801da14:	bf15      	itete	ne
 801da16:	6560      	strne	r0, [r4, #84]	; 0x54
 801da18:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801da1c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801da20:	81a3      	strheq	r3, [r4, #12]
 801da22:	bf18      	it	ne
 801da24:	81a3      	strhne	r3, [r4, #12]
 801da26:	bd10      	pop	{r4, pc}

0801da28 <__sclose>:
 801da28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da2c:	f000 b820 	b.w	801da70 <_close_r>

0801da30 <__ascii_wctomb>:
 801da30:	b149      	cbz	r1, 801da46 <__ascii_wctomb+0x16>
 801da32:	2aff      	cmp	r2, #255	; 0xff
 801da34:	bf85      	ittet	hi
 801da36:	238a      	movhi	r3, #138	; 0x8a
 801da38:	6003      	strhi	r3, [r0, #0]
 801da3a:	700a      	strbls	r2, [r1, #0]
 801da3c:	f04f 30ff 	movhi.w	r0, #4294967295
 801da40:	bf98      	it	ls
 801da42:	2001      	movls	r0, #1
 801da44:	4770      	bx	lr
 801da46:	4608      	mov	r0, r1
 801da48:	4770      	bx	lr
	...

0801da4c <_write_r>:
 801da4c:	b538      	push	{r3, r4, r5, lr}
 801da4e:	4d07      	ldr	r5, [pc, #28]	; (801da6c <_write_r+0x20>)
 801da50:	4604      	mov	r4, r0
 801da52:	4608      	mov	r0, r1
 801da54:	4611      	mov	r1, r2
 801da56:	2200      	movs	r2, #0
 801da58:	602a      	str	r2, [r5, #0]
 801da5a:	461a      	mov	r2, r3
 801da5c:	f7e9 fb45 	bl	80070ea <_write>
 801da60:	1c43      	adds	r3, r0, #1
 801da62:	d102      	bne.n	801da6a <_write_r+0x1e>
 801da64:	682b      	ldr	r3, [r5, #0]
 801da66:	b103      	cbz	r3, 801da6a <_write_r+0x1e>
 801da68:	6023      	str	r3, [r4, #0]
 801da6a:	bd38      	pop	{r3, r4, r5, pc}
 801da6c:	20000840 	.word	0x20000840

0801da70 <_close_r>:
 801da70:	b538      	push	{r3, r4, r5, lr}
 801da72:	4d06      	ldr	r5, [pc, #24]	; (801da8c <_close_r+0x1c>)
 801da74:	2300      	movs	r3, #0
 801da76:	4604      	mov	r4, r0
 801da78:	4608      	mov	r0, r1
 801da7a:	602b      	str	r3, [r5, #0]
 801da7c:	f7e9 fb51 	bl	8007122 <_close>
 801da80:	1c43      	adds	r3, r0, #1
 801da82:	d102      	bne.n	801da8a <_close_r+0x1a>
 801da84:	682b      	ldr	r3, [r5, #0]
 801da86:	b103      	cbz	r3, 801da8a <_close_r+0x1a>
 801da88:	6023      	str	r3, [r4, #0]
 801da8a:	bd38      	pop	{r3, r4, r5, pc}
 801da8c:	20000840 	.word	0x20000840

0801da90 <_fstat_r>:
 801da90:	b538      	push	{r3, r4, r5, lr}
 801da92:	4d07      	ldr	r5, [pc, #28]	; (801dab0 <_fstat_r+0x20>)
 801da94:	2300      	movs	r3, #0
 801da96:	4604      	mov	r4, r0
 801da98:	4608      	mov	r0, r1
 801da9a:	4611      	mov	r1, r2
 801da9c:	602b      	str	r3, [r5, #0]
 801da9e:	f7e9 fb4c 	bl	800713a <_fstat>
 801daa2:	1c43      	adds	r3, r0, #1
 801daa4:	d102      	bne.n	801daac <_fstat_r+0x1c>
 801daa6:	682b      	ldr	r3, [r5, #0]
 801daa8:	b103      	cbz	r3, 801daac <_fstat_r+0x1c>
 801daaa:	6023      	str	r3, [r4, #0]
 801daac:	bd38      	pop	{r3, r4, r5, pc}
 801daae:	bf00      	nop
 801dab0:	20000840 	.word	0x20000840

0801dab4 <_isatty_r>:
 801dab4:	b538      	push	{r3, r4, r5, lr}
 801dab6:	4d06      	ldr	r5, [pc, #24]	; (801dad0 <_isatty_r+0x1c>)
 801dab8:	2300      	movs	r3, #0
 801daba:	4604      	mov	r4, r0
 801dabc:	4608      	mov	r0, r1
 801dabe:	602b      	str	r3, [r5, #0]
 801dac0:	f7e9 fb4b 	bl	800715a <_isatty>
 801dac4:	1c43      	adds	r3, r0, #1
 801dac6:	d102      	bne.n	801dace <_isatty_r+0x1a>
 801dac8:	682b      	ldr	r3, [r5, #0]
 801daca:	b103      	cbz	r3, 801dace <_isatty_r+0x1a>
 801dacc:	6023      	str	r3, [r4, #0]
 801dace:	bd38      	pop	{r3, r4, r5, pc}
 801dad0:	20000840 	.word	0x20000840

0801dad4 <_lseek_r>:
 801dad4:	b538      	push	{r3, r4, r5, lr}
 801dad6:	4d07      	ldr	r5, [pc, #28]	; (801daf4 <_lseek_r+0x20>)
 801dad8:	4604      	mov	r4, r0
 801dada:	4608      	mov	r0, r1
 801dadc:	4611      	mov	r1, r2
 801dade:	2200      	movs	r2, #0
 801dae0:	602a      	str	r2, [r5, #0]
 801dae2:	461a      	mov	r2, r3
 801dae4:	f7e9 fb44 	bl	8007170 <_lseek>
 801dae8:	1c43      	adds	r3, r0, #1
 801daea:	d102      	bne.n	801daf2 <_lseek_r+0x1e>
 801daec:	682b      	ldr	r3, [r5, #0]
 801daee:	b103      	cbz	r3, 801daf2 <_lseek_r+0x1e>
 801daf0:	6023      	str	r3, [r4, #0]
 801daf2:	bd38      	pop	{r3, r4, r5, pc}
 801daf4:	20000840 	.word	0x20000840

0801daf8 <_read_r>:
 801daf8:	b538      	push	{r3, r4, r5, lr}
 801dafa:	4d07      	ldr	r5, [pc, #28]	; (801db18 <_read_r+0x20>)
 801dafc:	4604      	mov	r4, r0
 801dafe:	4608      	mov	r0, r1
 801db00:	4611      	mov	r1, r2
 801db02:	2200      	movs	r2, #0
 801db04:	602a      	str	r2, [r5, #0]
 801db06:	461a      	mov	r2, r3
 801db08:	f7e9 fad2 	bl	80070b0 <_read>
 801db0c:	1c43      	adds	r3, r0, #1
 801db0e:	d102      	bne.n	801db16 <_read_r+0x1e>
 801db10:	682b      	ldr	r3, [r5, #0]
 801db12:	b103      	cbz	r3, 801db16 <_read_r+0x1e>
 801db14:	6023      	str	r3, [r4, #0]
 801db16:	bd38      	pop	{r3, r4, r5, pc}
 801db18:	20000840 	.word	0x20000840

0801db1c <_init>:
 801db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db1e:	bf00      	nop
 801db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db22:	bc08      	pop	{r3}
 801db24:	469e      	mov	lr, r3
 801db26:	4770      	bx	lr

0801db28 <_fini>:
 801db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db2a:	bf00      	nop
 801db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801db2e:	bc08      	pop	{r3}
 801db30:	469e      	mov	lr, r3
 801db32:	4770      	bx	lr
